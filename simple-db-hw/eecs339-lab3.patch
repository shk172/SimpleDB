diff -ruN lab1/.classpath lab3/.classpath
--- lab1/.classpath	2016-11-02 22:06:58.000000000 -0500
+++ lab3/.classpath	1969-12-31 18:00:00.000000000 -0600
@@ -1,9 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<classpath>
-	<classpathentry kind="src" path="src/java"/>
-	<classpathentry kind="src" path="test"/>
-	<classpathentry kind="lib" path="lib/ant-contrib-1.0b3.jar"/>
-	<classpathentry kind="lib" path="lib/junit-4.5.jar"/>
-	<classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER"/>
-	<classpathentry kind="output" path="bin"/>
-</classpath>
diff -ruN lab1/.gitignore lab3/.gitignore
--- lab1/.gitignore	2016-11-02 22:06:58.000000000 -0500
+++ lab3/.gitignore	1969-12-31 18:00:00.000000000 -0600
@@ -1 +0,0 @@
-/bin/
diff -ruN lab1/.project lab3/.project
--- lab1/.project	2016-11-02 22:06:58.000000000 -0500
+++ lab3/.project	1969-12-31 18:00:00.000000000 -0600
@@ -1,17 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<projectDescription>
-	<name>simple-db</name>
-	<comment></comment>
-	<projects>
-	</projects>
-	<buildSpec>
-		<buildCommand>
-			<name>org.eclipse.jdt.core.javabuilder</name>
-			<arguments>
-			</arguments>
-		</buildCommand>
-	</buildSpec>
-	<natures>
-		<nature>org.eclipse.jdt.core.javanature</nature>
-	</natures>
-</projectDescription>
diff -ruN lab1/README.md lab3/README.md
--- lab1/README.md	2016-11-02 22:06:58.000000000 -0500
+++ lab3/README.md	1969-12-31 18:00:00.000000000 -0600
@@ -1 +0,0 @@
-# simple-db-hw
diff -ruN lab1/bin/simpledb/#Predicate.java# lab3/bin/simpledb/#Predicate.java#
--- lab1/bin/simpledb/#Predicate.java#	2016-11-02 22:06:58.000000000 -0500
+++ lab3/bin/simpledb/#Predicate.java#	1969-12-31 18:00:00.000000000 -0600
@@ -1,111 +0,0 @@
-package simpledb;
-
-import java.io.Serializable;
-
-/**
- * Predicate compares tuples to a specified Field value.
- */
-public class Predicate implements Serializable {
-
-    private static final long serialVersionUID = 1L;
-
-    /** Constants used for return codes in Field.compare */
-    public enum Op implements Serializable {
-        EQUALS, GREATER_THAN, LESS_THAN, LESS_THAN_OR_EQ, GREATER_THAN_OR_EQ, LIKE, NOT_EQUALS;
-
-        /**
-         * Interface to access operations by integer value for command-line
-         * convenience.
-         * 
-         * @param i
-         *            a valid integer Op index
-         */
-        public static Op getOp(int i) {
-            return values()[i];
-        }
-
-        public String toString() {
-            if (this == EQUALS)
-                return "=";
-            if (this == GREATER_THAN)
-                return ">";
-            if (this == LESS_THAN)
-                return "<";
-            if (this == LESS_THAN_OR_EQ)
-                return "<=";
-            if (this == GREATER_THAN_OR_EQ)
-                return ">=";
-            if (this == LIKE)
-                return "LIKE";
-            if (this == NOT_EQUALS)
-                return "<>";
-            throw new IllegalStateException("impossible to reach here");
-        }
-
-    }
-    
-    /**
-     * Constructor.
-     * 
-     * @param field
-     *            field number of passed in tuples to compare against.
-     * @param op
-     *            operation to use for comparison
-     * @param operand
-     *            field value to compare passed in tuples to
-     */
-    public Predicate(int field, Op op, Field operand) {
-        // some code goes here
-    }
-
-    /**
-     * @return the field number
-     */
-    public int getField()
-    {
-        // some code goes here
-        return -1;
-    }
-
-    /**
-     * @return the operator
-     */
-    public Op getOp()
-    {
-        // some code goes here
-        return null;
-    }
-    
-    /**
-     * @return the operand
-     */
-    public Field getOperand()
-    {
-        // some code goes here
-        return null;
-    }
-    
-    /**
-     * Compares the field number of t specified in the constructor to the
-     * operand field specified in the constructor using the operator specific in
-     * the constructor. The comparison can be made through Field's compare
-     * method.
-     * 
-     * @param t
-     *            The tuple to compare against
-     * @return true if the comparison is true, false otherwise.
-     */
-    public boolean filter(Tuple t) {
-        // some code goes here
-        return false;
-    }
-
-    /**
-     * Returns something useful, like "f = field_id op = op_string operand =
-     * operand_string
-     */
-    public String toString() {
-        // some code goes here
-        return "";
-    }
-}
Binary files lab1/bin/simpledb/BufferPool.class and lab3/bin/simpledb/BufferPool.class differ
Binary files lab1/bin/simpledb/Catalog.class and lab3/bin/simpledb/Catalog.class differ
Binary files lab1/bin/simpledb/CatalogTest.class and lab3/bin/simpledb/CatalogTest.class differ
Binary files lab1/bin/simpledb/Database.class and lab3/bin/simpledb/Database.class differ
Binary files lab1/bin/simpledb/DbException.class and lab3/bin/simpledb/DbException.class differ
Binary files lab1/bin/simpledb/DbFile.class and lab3/bin/simpledb/DbFile.class differ
Binary files lab1/bin/simpledb/DbFileIterator.class and lab3/bin/simpledb/DbFileIterator.class differ
Binary files lab1/bin/simpledb/DbIterator.class and lab3/bin/simpledb/DbIterator.class differ
Binary files lab1/bin/simpledb/Debug.class and lab3/bin/simpledb/Debug.class differ
Binary files lab1/bin/simpledb/Field.class and lab3/bin/simpledb/Field.class differ
Binary files lab1/bin/simpledb/HeapFile.class and lab3/bin/simpledb/HeapFile.class differ
Binary files lab1/bin/simpledb/HeapFileEncoder.class and lab3/bin/simpledb/HeapFileEncoder.class differ
Binary files lab1/bin/simpledb/HeapFileReadTest.class and lab3/bin/simpledb/HeapFileReadTest.class differ
Binary files lab1/bin/simpledb/HeapPage.class and lab3/bin/simpledb/HeapPage.class differ
Binary files lab1/bin/simpledb/HeapPageId.class and lab3/bin/simpledb/HeapPageId.class differ
Binary files lab1/bin/simpledb/HeapPageIdTest.class and lab3/bin/simpledb/HeapPageIdTest.class differ
Binary files lab1/bin/simpledb/HeapPageReadTest.class and lab3/bin/simpledb/HeapPageReadTest.class differ
Binary files lab1/bin/simpledb/IntField.class and lab3/bin/simpledb/IntField.class differ
Binary files lab1/bin/simpledb/LogFile.class and lab3/bin/simpledb/LogFile.class differ
Binary files lab1/bin/simpledb/Page.class and lab3/bin/simpledb/Page.class differ
Binary files lab1/bin/simpledb/PageId.class and lab3/bin/simpledb/PageId.class differ
Binary files lab1/bin/simpledb/Permissions.class and lab3/bin/simpledb/Permissions.class differ
Binary files lab1/bin/simpledb/Predicate$Op.class and lab3/bin/simpledb/Predicate$Op.class differ
Binary files lab1/bin/simpledb/Predicate.class and lab3/bin/simpledb/Predicate.class differ
Binary files lab1/bin/simpledb/RecordId.class and lab3/bin/simpledb/RecordId.class differ
Binary files lab1/bin/simpledb/RecordIdTest.class and lab3/bin/simpledb/RecordIdTest.class differ
Binary files lab1/bin/simpledb/SeqScan.class and lab3/bin/simpledb/SeqScan.class differ
Binary files lab1/bin/simpledb/SimpleDb.class and lab3/bin/simpledb/SimpleDb.class differ
Binary files lab1/bin/simpledb/StringField.class and lab3/bin/simpledb/StringField.class differ
Binary files lab1/bin/simpledb/TestUtil$CreateHeapFile.class and lab3/bin/simpledb/TestUtil$CreateHeapFile.class differ
Binary files lab1/bin/simpledb/TestUtil$LockGrabber.class and lab3/bin/simpledb/TestUtil$LockGrabber.class differ
Binary files lab1/bin/simpledb/TestUtil$MockScan.class and lab3/bin/simpledb/TestUtil$MockScan.class differ
Binary files lab1/bin/simpledb/TestUtil$SkeletonFile.class and lab3/bin/simpledb/TestUtil$SkeletonFile.class differ
Binary files lab1/bin/simpledb/TestUtil.class and lab3/bin/simpledb/TestUtil.class differ
Binary files lab1/bin/simpledb/TransactionAbortedException.class and lab3/bin/simpledb/TransactionAbortedException.class differ
Binary files lab1/bin/simpledb/TransactionId.class and lab3/bin/simpledb/TransactionId.class differ
Binary files lab1/bin/simpledb/Tuple.class and lab3/bin/simpledb/Tuple.class differ
Binary files lab1/bin/simpledb/TupleDesc$TDItem.class and lab3/bin/simpledb/TupleDesc$TDItem.class differ
Binary files lab1/bin/simpledb/TupleDesc.class and lab3/bin/simpledb/TupleDesc.class differ
Binary files lab1/bin/simpledb/TupleDescTest.class and lab3/bin/simpledb/TupleDescTest.class differ
Binary files lab1/bin/simpledb/TupleIterator.class and lab3/bin/simpledb/TupleIterator.class differ
Binary files lab1/bin/simpledb/TupleTest.class and lab3/bin/simpledb/TupleTest.class differ
Binary files lab1/bin/simpledb/Type$1.class and lab3/bin/simpledb/Type$1.class differ
Binary files lab1/bin/simpledb/Type$2.class and lab3/bin/simpledb/Type$2.class differ
Binary files lab1/bin/simpledb/Type.class and lab3/bin/simpledb/Type.class differ
Binary files lab1/bin/simpledb/Utility.class and lab3/bin/simpledb/Utility.class differ
Binary files lab1/bin/simpledb/systemtest/ScanTest$1InstrumentedHeapFile.class and lab3/bin/simpledb/systemtest/ScanTest$1InstrumentedHeapFile.class differ
Binary files lab1/bin/simpledb/systemtest/ScanTest.class and lab3/bin/simpledb/systemtest/ScanTest.class differ
Binary files lab1/bin/simpledb/systemtest/SimpleDbTestBase.class and lab3/bin/simpledb/systemtest/SimpleDbTestBase.class differ
Binary files lab1/bin/simpledb/systemtest/SystemTestUtil.class and lab3/bin/simpledb/systemtest/SystemTestUtil.class differ
diff -ruN lab1/build.xml lab3/build.xml
--- lab1/build.xml	2016-11-02 22:06:58.000000000 -0500
+++ lab3/build.xml	2016-11-02 22:06:55.000000000 -0500
@@ -15,7 +15,7 @@
     <property name="compile.debug" value="true"/>
     <property name="test.reports" location="testreport"/>
 
-    <property name="sourceversion" value="1.6"/>
+    <property name="sourceversion" value="1.8"/>
 
     <path id="classpath.base">
         <pathelement location="${build.src}"/>
@@ -177,7 +177,7 @@
     </target>
 
     <target name="javadocs" description="Build javadoc documentation">
-        <javadoc destdir="${doc}" access="private" failonerror="true" source="${sourceversion}">
+        <javadoc destdir="${doc}" access="private" failonerror="true" source="${sourceversion}" additionalparam="-Xdoclint:none">
             <classpath refid="classpath.base" />
             <fileset dir="src/java" defaultexcludes="yes">
                 <include name="simpledb/**/*.java"/>
@@ -287,11 +287,11 @@
             </fileset>
             <report todir="${test.reports}" />
         </junitreport>
-        
+
         <!-- Fail here if the junit tests failed. -->
         <fail if="junit.failed" message="Some JUnit tests failed"/>
     </target>
-    
+
     <target name="handin" depends="clean"
         description="Create a tarball of your code to hand in">
         <tar destfile="lab-handin.tar.bz2" compression="bzip2"
diff -ruN lab1/javadoc/allclasses-frame.html lab3/javadoc/allclasses-frame.html
--- lab1/javadoc/allclasses-frame.html	2016-11-02 22:06:58.000000000 -0500
+++ lab3/javadoc/allclasses-frame.html	1969-12-31 18:00:00.000000000 -0600
@@ -1,50 +0,0 @@
-<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
-<!-- NewPage -->
-<html lang="en">
-<head>
-<!-- Generated by javadoc (1.8.0_25) on Thu Oct 27 13:16:24 CDT 2016 -->
-<title>All Classes</title>
-<meta name="date" content="2016-10-27">
-<link rel="stylesheet" type="text/css" href="stylesheet.css" title="Style">
-<script type="text/javascript" src="script.js"></script>
-</head>
-<body>
-<h1 class="bar">All&nbsp;Classes</h1>
-<div class="indexContainer">
-<ul>
-<li><a href="simpledb/BufferPool.html" title="class in simpledb" target="classFrame">BufferPool</a></li>
-<li><a href="simpledb/Catalog.html" title="class in simpledb" target="classFrame">Catalog</a></li>
-<li><a href="simpledb/Database.html" title="class in simpledb" target="classFrame">Database</a></li>
-<li><a href="simpledb/DbException.html" title="class in simpledb" target="classFrame">DbException</a></li>
-<li><a href="simpledb/DbFile.html" title="interface in simpledb" target="classFrame"><span class="interfaceName">DbFile</span></a></li>
-<li><a href="simpledb/DbFileIterator.html" title="interface in simpledb" target="classFrame"><span class="interfaceName">DbFileIterator</span></a></li>
-<li><a href="simpledb/DbIterator.html" title="interface in simpledb" target="classFrame"><span class="interfaceName">DbIterator</span></a></li>
-<li><a href="simpledb/Debug.html" title="class in simpledb" target="classFrame">Debug</a></li>
-<li><a href="simpledb/Field.html" title="interface in simpledb" target="classFrame"><span class="interfaceName">Field</span></a></li>
-<li><a href="simpledb/HeapFile.html" title="class in simpledb" target="classFrame">HeapFile</a></li>
-<li><a href="simpledb/HeapFileEncoder.html" title="class in simpledb" target="classFrame">HeapFileEncoder</a></li>
-<li><a href="simpledb/HeapPage.html" title="class in simpledb" target="classFrame">HeapPage</a></li>
-<li><a href="simpledb/HeapPageId.html" title="class in simpledb" target="classFrame">HeapPageId</a></li>
-<li><a href="simpledb/IntField.html" title="class in simpledb" target="classFrame">IntField</a></li>
-<li><a href="simpledb/LogFile.html" title="class in simpledb" target="classFrame">LogFile</a></li>
-<li><a href="simpledb/Page.html" title="interface in simpledb" target="classFrame"><span class="interfaceName">Page</span></a></li>
-<li><a href="simpledb/PageId.html" title="interface in simpledb" target="classFrame"><span class="interfaceName">PageId</span></a></li>
-<li><a href="simpledb/Permissions.html" title="class in simpledb" target="classFrame">Permissions</a></li>
-<li><a href="simpledb/Predicate.html" title="class in simpledb" target="classFrame">Predicate</a></li>
-<li><a href="simpledb/Predicate.Op.html" title="enum in simpledb" target="classFrame">Predicate.Op</a></li>
-<li><a href="simpledb/RecordId.html" title="class in simpledb" target="classFrame">RecordId</a></li>
-<li><a href="simpledb/SeqScan.html" title="class in simpledb" target="classFrame">SeqScan</a></li>
-<li><a href="simpledb/SimpleDb.html" title="class in simpledb" target="classFrame">SimpleDb</a></li>
-<li><a href="simpledb/StringField.html" title="class in simpledb" target="classFrame">StringField</a></li>
-<li><a href="simpledb/TransactionAbortedException.html" title="class in simpledb" target="classFrame">TransactionAbortedException</a></li>
-<li><a href="simpledb/TransactionId.html" title="class in simpledb" target="classFrame">TransactionId</a></li>
-<li><a href="simpledb/Tuple.html" title="class in simpledb" target="classFrame">Tuple</a></li>
-<li><a href="simpledb/TupleDesc.html" title="class in simpledb" target="classFrame">TupleDesc</a></li>
-<li><a href="simpledb/TupleDesc.TDItem.html" title="class in simpledb" target="classFrame">TupleDesc.TDItem</a></li>
-<li><a href="simpledb/TupleIterator.html" title="class in simpledb" target="classFrame">TupleIterator</a></li>
-<li><a href="simpledb/Type.html" title="enum in simpledb" target="classFrame">Type</a></li>
-<li><a href="simpledb/Utility.html" title="class in simpledb" target="classFrame">Utility</a></li>
-</ul>
-</div>
-</body>
-</html>
diff -ruN lab1/javadoc/allclasses-noframe.html lab3/javadoc/allclasses-noframe.html
--- lab1/javadoc/allclasses-noframe.html	2016-11-02 22:06:58.000000000 -0500
+++ lab3/javadoc/allclasses-noframe.html	1969-12-31 18:00:00.000000000 -0600
@@ -1,50 +0,0 @@
-<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
-<!-- NewPage -->
-<html lang="en">
-<head>
-<!-- Generated by javadoc (1.8.0_25) on Thu Oct 27 13:16:24 CDT 2016 -->
-<title>All Classes</title>
-<meta name="date" content="2016-10-27">
-<link rel="stylesheet" type="text/css" href="stylesheet.css" title="Style">
-<script type="text/javascript" src="script.js"></script>
-</head>
-<body>
-<h1 class="bar">All&nbsp;Classes</h1>
-<div class="indexContainer">
-<ul>
-<li><a href="simpledb/BufferPool.html" title="class in simpledb">BufferPool</a></li>
-<li><a href="simpledb/Catalog.html" title="class in simpledb">Catalog</a></li>
-<li><a href="simpledb/Database.html" title="class in simpledb">Database</a></li>
-<li><a href="simpledb/DbException.html" title="class in simpledb">DbException</a></li>
-<li><a href="simpledb/DbFile.html" title="interface in simpledb"><span class="interfaceName">DbFile</span></a></li>
-<li><a href="simpledb/DbFileIterator.html" title="interface in simpledb"><span class="interfaceName">DbFileIterator</span></a></li>
-<li><a href="simpledb/DbIterator.html" title="interface in simpledb"><span class="interfaceName">DbIterator</span></a></li>
-<li><a href="simpledb/Debug.html" title="class in simpledb">Debug</a></li>
-<li><a href="simpledb/Field.html" title="interface in simpledb"><span class="interfaceName">Field</span></a></li>
-<li><a href="simpledb/HeapFile.html" title="class in simpledb">HeapFile</a></li>
-<li><a href="simpledb/HeapFileEncoder.html" title="class in simpledb">HeapFileEncoder</a></li>
-<li><a href="simpledb/HeapPage.html" title="class in simpledb">HeapPage</a></li>
-<li><a href="simpledb/HeapPageId.html" title="class in simpledb">HeapPageId</a></li>
-<li><a href="simpledb/IntField.html" title="class in simpledb">IntField</a></li>
-<li><a href="simpledb/LogFile.html" title="class in simpledb">LogFile</a></li>
-<li><a href="simpledb/Page.html" title="interface in simpledb"><span class="interfaceName">Page</span></a></li>
-<li><a href="simpledb/PageId.html" title="interface in simpledb"><span class="interfaceName">PageId</span></a></li>
-<li><a href="simpledb/Permissions.html" title="class in simpledb">Permissions</a></li>
-<li><a href="simpledb/Predicate.html" title="class in simpledb">Predicate</a></li>
-<li><a href="simpledb/Predicate.Op.html" title="enum in simpledb">Predicate.Op</a></li>
-<li><a href="simpledb/RecordId.html" title="class in simpledb">RecordId</a></li>
-<li><a href="simpledb/SeqScan.html" title="class in simpledb">SeqScan</a></li>
-<li><a href="simpledb/SimpleDb.html" title="class in simpledb">SimpleDb</a></li>
-<li><a href="simpledb/StringField.html" title="class in simpledb">StringField</a></li>
-<li><a href="simpledb/TransactionAbortedException.html" title="class in simpledb">TransactionAbortedException</a></li>
-<li><a href="simpledb/TransactionId.html" title="class in simpledb">TransactionId</a></li>
-<li><a href="simpledb/Tuple.html" title="class in simpledb">Tuple</a></li>
-<li><a href="simpledb/TupleDesc.html" title="class in simpledb">TupleDesc</a></li>
-<li><a href="simpledb/TupleDesc.TDItem.html" title="class in simpledb">TupleDesc.TDItem</a></li>
-<li><a href="simpledb/TupleIterator.html" title="class in simpledb">TupleIterator</a></li>
-<li><a href="simpledb/Type.html" title="enum in simpledb">Type</a></li>
-<li><a href="simpledb/Utility.html" title="class in simpledb">Utility</a></li>
-</ul>
-</div>
-</body>
-</html>
diff -ruN lab1/javadoc/constant-values.html lab3/javadoc/constant-values.html
--- lab1/javadoc/constant-values.html	2016-11-02 22:06:58.000000000 -0500
+++ lab3/javadoc/constant-values.html	1969-12-31 18:00:00.000000000 -0600
@@ -1,509 +0,0 @@
-<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
-<!-- NewPage -->
-<html lang="en">
-<head>
-<!-- Generated by javadoc (1.8.0_25) on Thu Oct 27 13:16:24 CDT 2016 -->
-<title>Constant Field Values</title>
-<meta name="date" content="2016-10-27">
-<link rel="stylesheet" type="text/css" href="stylesheet.css" title="Style">
-<script type="text/javascript" src="script.js"></script>
-</head>
-<body>
-<script type="text/javascript"><!--
-    try {
-        if (location.href.indexOf('is-external=true') == -1) {
-            parent.document.title="Constant Field Values";
-        }
-    }
-    catch(err) {
-    }
-//-->
-</script>
-<noscript>
-<div>JavaScript is disabled on your browser.</div>
-</noscript>
-<!-- ========= START OF TOP NAVBAR ======= -->
-<div class="topNav"><a name="navbar.top">
-<!--   -->
-</a>
-<div class="skipNav"><a href="#skip.navbar.top" title="Skip navigation links">Skip navigation links</a></div>
-<a name="navbar.top.firstrow">
-<!--   -->
-</a>
-<ul class="navList" title="Navigation">
-<li><a href="simpledb/package-summary.html">Package</a></li>
-<li>Class</li>
-<li><a href="overview-tree.html">Tree</a></li>
-<li><a href="deprecated-list.html">Deprecated</a></li>
-<li><a href="index-all.html">Index</a></li>
-<li><a href="help-doc.html">Help</a></li>
-</ul>
-</div>
-<div class="subNav">
-<ul class="navList">
-<li>Prev</li>
-<li>Next</li>
-</ul>
-<ul class="navList">
-<li><a href="index.html?constant-values.html" target="_top">Frames</a></li>
-<li><a href="constant-values.html" target="_top">No&nbsp;Frames</a></li>
-</ul>
-<ul class="navList" id="allclasses_navbar_top">
-<li><a href="allclasses-noframe.html">All&nbsp;Classes</a></li>
-</ul>
-<div>
-<script type="text/javascript"><!--
-  allClassesLink = document.getElementById("allclasses_navbar_top");
-  if(window==top) {
-    allClassesLink.style.display = "block";
-  }
-  else {
-    allClassesLink.style.display = "none";
-  }
-  //-->
-</script>
-</div>
-<a name="skip.navbar.top">
-<!--   -->
-</a></div>
-<!-- ========= END OF TOP NAVBAR ========= -->
-<div class="header">
-<h1 title="Constant Field Values" class="title">Constant Field Values</h1>
-<h2 title="Contents">Contents</h2>
-<ul>
-<li><a href="#simpledb">simpledb.*</a></li>
-</ul>
-</div>
-<div class="constantValuesContainer"><a name="simpledb">
-<!--   -->
-</a>
-<h2 title="simpledb">simpledb.*</h2>
-<ul class="blockList">
-<li class="blockList">
-<table class="constantsSummary" border="0" cellpadding="3" cellspacing="0" summary="Constant Field Values table, listing constant fields, and values">
-<caption><span>simpledb.<a href="simpledb/BufferPool.html" title="class in simpledb">BufferPool</a></span><span class="tabEnd">&nbsp;</span></caption>
-<tr>
-<th class="colFirst" scope="col">Modifier and Type</th>
-<th scope="col">Constant Field</th>
-<th class="colLast" scope="col">Value</th>
-</tr>
-<tbody>
-<tr class="altColor">
-<td class="colFirst"><a name="simpledb.BufferPool.DEFAULT_PAGES">
-<!--   -->
-</a><code>public&nbsp;static&nbsp;final&nbsp;int</code></td>
-<td><code><a href="simpledb/BufferPool.html#DEFAULT_PAGES">DEFAULT_PAGES</a></code></td>
-<td class="colLast"><code>50</code></td>
-</tr>
-<tr class="rowColor">
-<td class="colFirst"><a name="simpledb.BufferPool.PAGE_SIZE">
-<!--   -->
-</a><code>private&nbsp;static&nbsp;final&nbsp;int</code></td>
-<td><code><a href="simpledb/BufferPool.html#PAGE_SIZE">PAGE_SIZE</a></code></td>
-<td class="colLast"><code>4096</code></td>
-</tr>
-</tbody>
-</table>
-</li>
-<li class="blockList">
-<table class="constantsSummary" border="0" cellpadding="3" cellspacing="0" summary="Constant Field Values table, listing constant fields, and values">
-<caption><span>simpledb.<a href="simpledb/Database.html" title="class in simpledb">Database</a></span><span class="tabEnd">&nbsp;</span></caption>
-<tr>
-<th class="colFirst" scope="col">Modifier and Type</th>
-<th scope="col">Constant Field</th>
-<th class="colLast" scope="col">Value</th>
-</tr>
-<tbody>
-<tr class="altColor">
-<td class="colFirst"><a name="simpledb.Database.LOGFILENAME">
-<!--   -->
-</a><code>private&nbsp;static&nbsp;final&nbsp;java.lang.String</code></td>
-<td><code><a href="simpledb/Database.html#LOGFILENAME">LOGFILENAME</a></code></td>
-<td class="colLast"><code>"log"</code></td>
-</tr>
-</tbody>
-</table>
-</li>
-<li class="blockList">
-<table class="constantsSummary" border="0" cellpadding="3" cellspacing="0" summary="Constant Field Values table, listing constant fields, and values">
-<caption><span>simpledb.<a href="simpledb/DbException.html" title="class in simpledb">DbException</a></span><span class="tabEnd">&nbsp;</span></caption>
-<tr>
-<th class="colFirst" scope="col">Modifier and Type</th>
-<th scope="col">Constant Field</th>
-<th class="colLast" scope="col">Value</th>
-</tr>
-<tbody>
-<tr class="altColor">
-<td class="colFirst"><a name="simpledb.DbException.serialVersionUID">
-<!--   -->
-</a><code>private&nbsp;static&nbsp;final&nbsp;long</code></td>
-<td><code><a href="simpledb/DbException.html#serialVersionUID">serialVersionUID</a></code></td>
-<td class="colLast"><code>1L</code></td>
-</tr>
-</tbody>
-</table>
-</li>
-<li class="blockList">
-<table class="constantsSummary" border="0" cellpadding="3" cellspacing="0" summary="Constant Field Values table, listing constant fields, and values">
-<caption><span>simpledb.<a href="simpledb/Debug.html" title="class in simpledb">Debug</a></span><span class="tabEnd">&nbsp;</span></caption>
-<tr>
-<th class="colFirst" scope="col">Modifier and Type</th>
-<th scope="col">Constant Field</th>
-<th class="colLast" scope="col">Value</th>
-</tr>
-<tbody>
-<tr class="altColor">
-<td class="colFirst"><a name="simpledb.Debug.DEFAULT_LEVEL">
-<!--   -->
-</a><code>private&nbsp;static&nbsp;final&nbsp;int</code></td>
-<td><code><a href="simpledb/Debug.html#DEFAULT_LEVEL">DEFAULT_LEVEL</a></code></td>
-<td class="colLast"><code>0</code></td>
-</tr>
-</tbody>
-</table>
-</li>
-<li class="blockList">
-<table class="constantsSummary" border="0" cellpadding="3" cellspacing="0" summary="Constant Field Values table, listing constant fields, and values">
-<caption><span>simpledb.<a href="simpledb/IntField.html" title="class in simpledb">IntField</a></span><span class="tabEnd">&nbsp;</span></caption>
-<tr>
-<th class="colFirst" scope="col">Modifier and Type</th>
-<th scope="col">Constant Field</th>
-<th class="colLast" scope="col">Value</th>
-</tr>
-<tbody>
-<tr class="altColor">
-<td class="colFirst"><a name="simpledb.IntField.serialVersionUID">
-<!--   -->
-</a><code>private&nbsp;static&nbsp;final&nbsp;long</code></td>
-<td><code><a href="simpledb/IntField.html#serialVersionUID">serialVersionUID</a></code></td>
-<td class="colLast"><code>1L</code></td>
-</tr>
-</tbody>
-</table>
-</li>
-<li class="blockList">
-<table class="constantsSummary" border="0" cellpadding="3" cellspacing="0" summary="Constant Field Values table, listing constant fields, and values">
-<caption><span>simpledb.<a href="simpledb/LogFile.html" title="class in simpledb">LogFile</a></span><span class="tabEnd">&nbsp;</span></caption>
-<tr>
-<th class="colFirst" scope="col">Modifier and Type</th>
-<th scope="col">Constant Field</th>
-<th class="colLast" scope="col">Value</th>
-</tr>
-<tbody>
-<tr class="altColor">
-<td class="colFirst"><a name="simpledb.LogFile.ABORT_RECORD">
-<!--   -->
-</a><code>static&nbsp;final&nbsp;int</code></td>
-<td><code><a href="simpledb/LogFile.html#ABORT_RECORD">ABORT_RECORD</a></code></td>
-<td class="colLast"><code>1</code></td>
-</tr>
-<tr class="rowColor">
-<td class="colFirst"><a name="simpledb.LogFile.BEGIN_RECORD">
-<!--   -->
-</a><code>static&nbsp;final&nbsp;int</code></td>
-<td><code><a href="simpledb/LogFile.html#BEGIN_RECORD">BEGIN_RECORD</a></code></td>
-<td class="colLast"><code>4</code></td>
-</tr>
-<tr class="altColor">
-<td class="colFirst"><a name="simpledb.LogFile.CHECKPOINT_RECORD">
-<!--   -->
-</a><code>static&nbsp;final&nbsp;int</code></td>
-<td><code><a href="simpledb/LogFile.html#CHECKPOINT_RECORD">CHECKPOINT_RECORD</a></code></td>
-<td class="colLast"><code>5</code></td>
-</tr>
-<tr class="rowColor">
-<td class="colFirst"><a name="simpledb.LogFile.COMMIT_RECORD">
-<!--   -->
-</a><code>static&nbsp;final&nbsp;int</code></td>
-<td><code><a href="simpledb/LogFile.html#COMMIT_RECORD">COMMIT_RECORD</a></code></td>
-<td class="colLast"><code>2</code></td>
-</tr>
-<tr class="altColor">
-<td class="colFirst"><a name="simpledb.LogFile.INT_SIZE">
-<!--   -->
-</a><code>static&nbsp;final&nbsp;int</code></td>
-<td><code><a href="simpledb/LogFile.html#INT_SIZE">INT_SIZE</a></code></td>
-<td class="colLast"><code>4</code></td>
-</tr>
-<tr class="rowColor">
-<td class="colFirst"><a name="simpledb.LogFile.LONG_SIZE">
-<!--   -->
-</a><code>static&nbsp;final&nbsp;int</code></td>
-<td><code><a href="simpledb/LogFile.html#LONG_SIZE">LONG_SIZE</a></code></td>
-<td class="colLast"><code>8</code></td>
-</tr>
-<tr class="altColor">
-<td class="colFirst"><a name="simpledb.LogFile.NO_CHECKPOINT_ID">
-<!--   -->
-</a><code>static&nbsp;final&nbsp;long</code></td>
-<td><code><a href="simpledb/LogFile.html#NO_CHECKPOINT_ID">NO_CHECKPOINT_ID</a></code></td>
-<td class="colLast"><code>-1L</code></td>
-</tr>
-<tr class="rowColor">
-<td class="colFirst"><a name="simpledb.LogFile.UPDATE_RECORD">
-<!--   -->
-</a><code>static&nbsp;final&nbsp;int</code></td>
-<td><code><a href="simpledb/LogFile.html#UPDATE_RECORD">UPDATE_RECORD</a></code></td>
-<td class="colLast"><code>3</code></td>
-</tr>
-</tbody>
-</table>
-</li>
-<li class="blockList">
-<table class="constantsSummary" border="0" cellpadding="3" cellspacing="0" summary="Constant Field Values table, listing constant fields, and values">
-<caption><span>simpledb.<a href="simpledb/Predicate.html" title="class in simpledb">Predicate</a></span><span class="tabEnd">&nbsp;</span></caption>
-<tr>
-<th class="colFirst" scope="col">Modifier and Type</th>
-<th scope="col">Constant Field</th>
-<th class="colLast" scope="col">Value</th>
-</tr>
-<tbody>
-<tr class="altColor">
-<td class="colFirst"><a name="simpledb.Predicate.serialVersionUID">
-<!--   -->
-</a><code>private&nbsp;static&nbsp;final&nbsp;long</code></td>
-<td><code><a href="simpledb/Predicate.html#serialVersionUID">serialVersionUID</a></code></td>
-<td class="colLast"><code>1L</code></td>
-</tr>
-</tbody>
-</table>
-</li>
-<li class="blockList">
-<table class="constantsSummary" border="0" cellpadding="3" cellspacing="0" summary="Constant Field Values table, listing constant fields, and values">
-<caption><span>simpledb.<a href="simpledb/RecordId.html" title="class in simpledb">RecordId</a></span><span class="tabEnd">&nbsp;</span></caption>
-<tr>
-<th class="colFirst" scope="col">Modifier and Type</th>
-<th scope="col">Constant Field</th>
-<th class="colLast" scope="col">Value</th>
-</tr>
-<tbody>
-<tr class="altColor">
-<td class="colFirst"><a name="simpledb.RecordId.serialVersionUID">
-<!--   -->
-</a><code>private&nbsp;static&nbsp;final&nbsp;long</code></td>
-<td><code><a href="simpledb/RecordId.html#serialVersionUID">serialVersionUID</a></code></td>
-<td class="colLast"><code>1L</code></td>
-</tr>
-</tbody>
-</table>
-</li>
-<li class="blockList">
-<table class="constantsSummary" border="0" cellpadding="3" cellspacing="0" summary="Constant Field Values table, listing constant fields, and values">
-<caption><span>simpledb.<a href="simpledb/SeqScan.html" title="class in simpledb">SeqScan</a></span><span class="tabEnd">&nbsp;</span></caption>
-<tr>
-<th class="colFirst" scope="col">Modifier and Type</th>
-<th scope="col">Constant Field</th>
-<th class="colLast" scope="col">Value</th>
-</tr>
-<tbody>
-<tr class="altColor">
-<td class="colFirst"><a name="simpledb.SeqScan.serialVersionUID">
-<!--   -->
-</a><code>private&nbsp;static&nbsp;final&nbsp;long</code></td>
-<td><code><a href="simpledb/SeqScan.html#serialVersionUID">serialVersionUID</a></code></td>
-<td class="colLast"><code>1L</code></td>
-</tr>
-</tbody>
-</table>
-</li>
-<li class="blockList">
-<table class="constantsSummary" border="0" cellpadding="3" cellspacing="0" summary="Constant Field Values table, listing constant fields, and values">
-<caption><span>simpledb.<a href="simpledb/StringField.html" title="class in simpledb">StringField</a></span><span class="tabEnd">&nbsp;</span></caption>
-<tr>
-<th class="colFirst" scope="col">Modifier and Type</th>
-<th scope="col">Constant Field</th>
-<th class="colLast" scope="col">Value</th>
-</tr>
-<tbody>
-<tr class="altColor">
-<td class="colFirst"><a name="simpledb.StringField.serialVersionUID">
-<!--   -->
-</a><code>private&nbsp;static&nbsp;final&nbsp;long</code></td>
-<td><code><a href="simpledb/StringField.html#serialVersionUID">serialVersionUID</a></code></td>
-<td class="colLast"><code>1L</code></td>
-</tr>
-</tbody>
-</table>
-</li>
-<li class="blockList">
-<table class="constantsSummary" border="0" cellpadding="3" cellspacing="0" summary="Constant Field Values table, listing constant fields, and values">
-<caption><span>simpledb.<a href="simpledb/TransactionAbortedException.html" title="class in simpledb">TransactionAbortedException</a></span><span class="tabEnd">&nbsp;</span></caption>
-<tr>
-<th class="colFirst" scope="col">Modifier and Type</th>
-<th scope="col">Constant Field</th>
-<th class="colLast" scope="col">Value</th>
-</tr>
-<tbody>
-<tr class="altColor">
-<td class="colFirst"><a name="simpledb.TransactionAbortedException.serialVersionUID">
-<!--   -->
-</a><code>private&nbsp;static&nbsp;final&nbsp;long</code></td>
-<td><code><a href="simpledb/TransactionAbortedException.html#serialVersionUID">serialVersionUID</a></code></td>
-<td class="colLast"><code>1L</code></td>
-</tr>
-</tbody>
-</table>
-</li>
-<li class="blockList">
-<table class="constantsSummary" border="0" cellpadding="3" cellspacing="0" summary="Constant Field Values table, listing constant fields, and values">
-<caption><span>simpledb.<a href="simpledb/TransactionId.html" title="class in simpledb">TransactionId</a></span><span class="tabEnd">&nbsp;</span></caption>
-<tr>
-<th class="colFirst" scope="col">Modifier and Type</th>
-<th scope="col">Constant Field</th>
-<th class="colLast" scope="col">Value</th>
-</tr>
-<tbody>
-<tr class="altColor">
-<td class="colFirst"><a name="simpledb.TransactionId.serialVersionUID">
-<!--   -->
-</a><code>private&nbsp;static&nbsp;final&nbsp;long</code></td>
-<td><code><a href="simpledb/TransactionId.html#serialVersionUID">serialVersionUID</a></code></td>
-<td class="colLast"><code>1L</code></td>
-</tr>
-</tbody>
-</table>
-</li>
-<li class="blockList">
-<table class="constantsSummary" border="0" cellpadding="3" cellspacing="0" summary="Constant Field Values table, listing constant fields, and values">
-<caption><span>simpledb.<a href="simpledb/Tuple.html" title="class in simpledb">Tuple</a></span><span class="tabEnd">&nbsp;</span></caption>
-<tr>
-<th class="colFirst" scope="col">Modifier and Type</th>
-<th scope="col">Constant Field</th>
-<th class="colLast" scope="col">Value</th>
-</tr>
-<tbody>
-<tr class="altColor">
-<td class="colFirst"><a name="simpledb.Tuple.serialVersionUID">
-<!--   -->
-</a><code>private&nbsp;static&nbsp;final&nbsp;long</code></td>
-<td><code><a href="simpledb/Tuple.html#serialVersionUID">serialVersionUID</a></code></td>
-<td class="colLast"><code>1L</code></td>
-</tr>
-</tbody>
-</table>
-</li>
-<li class="blockList">
-<table class="constantsSummary" border="0" cellpadding="3" cellspacing="0" summary="Constant Field Values table, listing constant fields, and values">
-<caption><span>simpledb.<a href="simpledb/TupleDesc.html" title="class in simpledb">TupleDesc</a></span><span class="tabEnd">&nbsp;</span></caption>
-<tr>
-<th class="colFirst" scope="col">Modifier and Type</th>
-<th scope="col">Constant Field</th>
-<th class="colLast" scope="col">Value</th>
-</tr>
-<tbody>
-<tr class="altColor">
-<td class="colFirst"><a name="simpledb.TupleDesc.serialVersionUID">
-<!--   -->
-</a><code>private&nbsp;static&nbsp;final&nbsp;long</code></td>
-<td><code><a href="simpledb/TupleDesc.html#serialVersionUID">serialVersionUID</a></code></td>
-<td class="colLast"><code>1L</code></td>
-</tr>
-</tbody>
-</table>
-</li>
-<li class="blockList">
-<table class="constantsSummary" border="0" cellpadding="3" cellspacing="0" summary="Constant Field Values table, listing constant fields, and values">
-<caption><span>simpledb.<a href="simpledb/TupleDesc.TDItem.html" title="class in simpledb">TupleDesc.TDItem</a></span><span class="tabEnd">&nbsp;</span></caption>
-<tr>
-<th class="colFirst" scope="col">Modifier and Type</th>
-<th scope="col">Constant Field</th>
-<th class="colLast" scope="col">Value</th>
-</tr>
-<tbody>
-<tr class="altColor">
-<td class="colFirst"><a name="simpledb.TupleDesc.TDItem.serialVersionUID">
-<!--   -->
-</a><code>private&nbsp;static&nbsp;final&nbsp;long</code></td>
-<td><code><a href="simpledb/TupleDesc.TDItem.html#serialVersionUID">serialVersionUID</a></code></td>
-<td class="colLast"><code>1L</code></td>
-</tr>
-</tbody>
-</table>
-</li>
-<li class="blockList">
-<table class="constantsSummary" border="0" cellpadding="3" cellspacing="0" summary="Constant Field Values table, listing constant fields, and values">
-<caption><span>simpledb.<a href="simpledb/TupleIterator.html" title="class in simpledb">TupleIterator</a></span><span class="tabEnd">&nbsp;</span></caption>
-<tr>
-<th class="colFirst" scope="col">Modifier and Type</th>
-<th scope="col">Constant Field</th>
-<th class="colLast" scope="col">Value</th>
-</tr>
-<tbody>
-<tr class="altColor">
-<td class="colFirst"><a name="simpledb.TupleIterator.serialVersionUID">
-<!--   -->
-</a><code>private&nbsp;static&nbsp;final&nbsp;long</code></td>
-<td><code><a href="simpledb/TupleIterator.html#serialVersionUID">serialVersionUID</a></code></td>
-<td class="colLast"><code>1L</code></td>
-</tr>
-</tbody>
-</table>
-</li>
-<li class="blockList">
-<table class="constantsSummary" border="0" cellpadding="3" cellspacing="0" summary="Constant Field Values table, listing constant fields, and values">
-<caption><span>simpledb.<a href="simpledb/Type.html" title="enum in simpledb">Type</a></span><span class="tabEnd">&nbsp;</span></caption>
-<tr>
-<th class="colFirst" scope="col">Modifier and Type</th>
-<th scope="col">Constant Field</th>
-<th class="colLast" scope="col">Value</th>
-</tr>
-<tbody>
-<tr class="altColor">
-<td class="colFirst"><a name="simpledb.Type.STRING_LEN">
-<!--   -->
-</a><code>public&nbsp;static&nbsp;final&nbsp;int</code></td>
-<td><code><a href="simpledb/Type.html#STRING_LEN">STRING_LEN</a></code></td>
-<td class="colLast"><code>128</code></td>
-</tr>
-</tbody>
-</table>
-</li>
-</ul>
-</div>
-<!-- ======= START OF BOTTOM NAVBAR ====== -->
-<div class="bottomNav"><a name="navbar.bottom">
-<!--   -->
-</a>
-<div class="skipNav"><a href="#skip.navbar.bottom" title="Skip navigation links">Skip navigation links</a></div>
-<a name="navbar.bottom.firstrow">
-<!--   -->
-</a>
-<ul class="navList" title="Navigation">
-<li><a href="simpledb/package-summary.html">Package</a></li>
-<li>Class</li>
-<li><a href="overview-tree.html">Tree</a></li>
-<li><a href="deprecated-list.html">Deprecated</a></li>
-<li><a href="index-all.html">Index</a></li>
-<li><a href="help-doc.html">Help</a></li>
-</ul>
-</div>
-<div class="subNav">
-<ul class="navList">
-<li>Prev</li>
-<li>Next</li>
-</ul>
-<ul class="navList">
-<li><a href="index.html?constant-values.html" target="_top">Frames</a></li>
-<li><a href="constant-values.html" target="_top">No&nbsp;Frames</a></li>
-</ul>
-<ul class="navList" id="allclasses_navbar_bottom">
-<li><a href="allclasses-noframe.html">All&nbsp;Classes</a></li>
-</ul>
-<div>
-<script type="text/javascript"><!--
-  allClassesLink = document.getElementById("allclasses_navbar_bottom");
-  if(window==top) {
-    allClassesLink.style.display = "block";
-  }
-  else {
-    allClassesLink.style.display = "none";
-  }
-  //-->
-</script>
-</div>
-<a name="skip.navbar.bottom">
-<!--   -->
-</a></div>
-<!-- ======== END OF BOTTOM NAVBAR ======= -->
-</body>
-</html>
diff -ruN lab1/javadoc/deprecated-list.html lab3/javadoc/deprecated-list.html
--- lab1/javadoc/deprecated-list.html	2016-11-02 22:06:58.000000000 -0500
+++ lab3/javadoc/deprecated-list.html	1969-12-31 18:00:00.000000000 -0600
@@ -1,120 +0,0 @@
-<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
-<!-- NewPage -->
-<html lang="en">
-<head>
-<!-- Generated by javadoc (1.8.0_25) on Thu Oct 27 13:16:24 CDT 2016 -->
-<title>Deprecated List</title>
-<meta name="date" content="2016-10-27">
-<link rel="stylesheet" type="text/css" href="stylesheet.css" title="Style">
-<script type="text/javascript" src="script.js"></script>
-</head>
-<body>
-<script type="text/javascript"><!--
-    try {
-        if (location.href.indexOf('is-external=true') == -1) {
-            parent.document.title="Deprecated List";
-        }
-    }
-    catch(err) {
-    }
-//-->
-</script>
-<noscript>
-<div>JavaScript is disabled on your browser.</div>
-</noscript>
-<!-- ========= START OF TOP NAVBAR ======= -->
-<div class="topNav"><a name="navbar.top">
-<!--   -->
-</a>
-<div class="skipNav"><a href="#skip.navbar.top" title="Skip navigation links">Skip navigation links</a></div>
-<a name="navbar.top.firstrow">
-<!--   -->
-</a>
-<ul class="navList" title="Navigation">
-<li><a href="simpledb/package-summary.html">Package</a></li>
-<li>Class</li>
-<li><a href="overview-tree.html">Tree</a></li>
-<li class="navBarCell1Rev">Deprecated</li>
-<li><a href="index-all.html">Index</a></li>
-<li><a href="help-doc.html">Help</a></li>
-</ul>
-</div>
-<div class="subNav">
-<ul class="navList">
-<li>Prev</li>
-<li>Next</li>
-</ul>
-<ul class="navList">
-<li><a href="index.html?deprecated-list.html" target="_top">Frames</a></li>
-<li><a href="deprecated-list.html" target="_top">No&nbsp;Frames</a></li>
-</ul>
-<ul class="navList" id="allclasses_navbar_top">
-<li><a href="allclasses-noframe.html">All&nbsp;Classes</a></li>
-</ul>
-<div>
-<script type="text/javascript"><!--
-  allClassesLink = document.getElementById("allclasses_navbar_top");
-  if(window==top) {
-    allClassesLink.style.display = "block";
-  }
-  else {
-    allClassesLink.style.display = "none";
-  }
-  //-->
-</script>
-</div>
-<a name="skip.navbar.top">
-<!--   -->
-</a></div>
-<!-- ========= END OF TOP NAVBAR ========= -->
-<div class="header">
-<h1 title="Deprecated API" class="title">Deprecated API</h1>
-<h2 title="Contents">Contents</h2>
-</div>
-<!-- ======= START OF BOTTOM NAVBAR ====== -->
-<div class="bottomNav"><a name="navbar.bottom">
-<!--   -->
-</a>
-<div class="skipNav"><a href="#skip.navbar.bottom" title="Skip navigation links">Skip navigation links</a></div>
-<a name="navbar.bottom.firstrow">
-<!--   -->
-</a>
-<ul class="navList" title="Navigation">
-<li><a href="simpledb/package-summary.html">Package</a></li>
-<li>Class</li>
-<li><a href="overview-tree.html">Tree</a></li>
-<li class="navBarCell1Rev">Deprecated</li>
-<li><a href="index-all.html">Index</a></li>
-<li><a href="help-doc.html">Help</a></li>
-</ul>
-</div>
-<div class="subNav">
-<ul class="navList">
-<li>Prev</li>
-<li>Next</li>
-</ul>
-<ul class="navList">
-<li><a href="index.html?deprecated-list.html" target="_top">Frames</a></li>
-<li><a href="deprecated-list.html" target="_top">No&nbsp;Frames</a></li>
-</ul>
-<ul class="navList" id="allclasses_navbar_bottom">
-<li><a href="allclasses-noframe.html">All&nbsp;Classes</a></li>
-</ul>
-<div>
-<script type="text/javascript"><!--
-  allClassesLink = document.getElementById("allclasses_navbar_bottom");
-  if(window==top) {
-    allClassesLink.style.display = "block";
-  }
-  else {
-    allClassesLink.style.display = "none";
-  }
-  //-->
-</script>
-</div>
-<a name="skip.navbar.bottom">
-<!--   -->
-</a></div>
-<!-- ======== END OF BOTTOM NAVBAR ======= -->
-</body>
-</html>
diff -ruN lab1/javadoc/help-doc.html lab3/javadoc/help-doc.html
--- lab1/javadoc/help-doc.html	2016-11-02 22:06:58.000000000 -0500
+++ lab3/javadoc/help-doc.html	1969-12-31 18:00:00.000000000 -0600
@@ -1,217 +0,0 @@
-<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
-<!-- NewPage -->
-<html lang="en">
-<head>
-<!-- Generated by javadoc (1.8.0_25) on Thu Oct 27 13:16:24 CDT 2016 -->
-<title>API Help</title>
-<meta name="date" content="2016-10-27">
-<link rel="stylesheet" type="text/css" href="stylesheet.css" title="Style">
-<script type="text/javascript" src="script.js"></script>
-</head>
-<body>
-<script type="text/javascript"><!--
-    try {
-        if (location.href.indexOf('is-external=true') == -1) {
-            parent.document.title="API Help";
-        }
-    }
-    catch(err) {
-    }
-//-->
-</script>
-<noscript>
-<div>JavaScript is disabled on your browser.</div>
-</noscript>
-<!-- ========= START OF TOP NAVBAR ======= -->
-<div class="topNav"><a name="navbar.top">
-<!--   -->
-</a>
-<div class="skipNav"><a href="#skip.navbar.top" title="Skip navigation links">Skip navigation links</a></div>
-<a name="navbar.top.firstrow">
-<!--   -->
-</a>
-<ul class="navList" title="Navigation">
-<li><a href="simpledb/package-summary.html">Package</a></li>
-<li>Class</li>
-<li><a href="overview-tree.html">Tree</a></li>
-<li><a href="deprecated-list.html">Deprecated</a></li>
-<li><a href="index-all.html">Index</a></li>
-<li class="navBarCell1Rev">Help</li>
-</ul>
-</div>
-<div class="subNav">
-<ul class="navList">
-<li>Prev</li>
-<li>Next</li>
-</ul>
-<ul class="navList">
-<li><a href="index.html?help-doc.html" target="_top">Frames</a></li>
-<li><a href="help-doc.html" target="_top">No&nbsp;Frames</a></li>
-</ul>
-<ul class="navList" id="allclasses_navbar_top">
-<li><a href="allclasses-noframe.html">All&nbsp;Classes</a></li>
-</ul>
-<div>
-<script type="text/javascript"><!--
-  allClassesLink = document.getElementById("allclasses_navbar_top");
-  if(window==top) {
-    allClassesLink.style.display = "block";
-  }
-  else {
-    allClassesLink.style.display = "none";
-  }
-  //-->
-</script>
-</div>
-<a name="skip.navbar.top">
-<!--   -->
-</a></div>
-<!-- ========= END OF TOP NAVBAR ========= -->
-<div class="header">
-<h1 class="title">How This API Document Is Organized</h1>
-<div class="subTitle">This API (Application Programming Interface) document has pages corresponding to the items in the navigation bar, described as follows.</div>
-</div>
-<div class="contentContainer">
-<ul class="blockList">
-<li class="blockList">
-<h2>Package</h2>
-<p>Each package has a page that contains a list of its classes and interfaces, with a summary for each. This page can contain six categories:</p>
-<ul>
-<li>Interfaces (italic)</li>
-<li>Classes</li>
-<li>Enums</li>
-<li>Exceptions</li>
-<li>Errors</li>
-<li>Annotation Types</li>
-</ul>
-</li>
-<li class="blockList">
-<h2>Class/Interface</h2>
-<p>Each class, interface, nested class and nested interface has its own separate page. Each of these pages has three sections consisting of a class/interface description, summary tables, and detailed member descriptions:</p>
-<ul>
-<li>Class inheritance diagram</li>
-<li>Direct Subclasses</li>
-<li>All Known Subinterfaces</li>
-<li>All Known Implementing Classes</li>
-<li>Class/interface declaration</li>
-<li>Class/interface description</li>
-</ul>
-<ul>
-<li>Nested Class Summary</li>
-<li>Field Summary</li>
-<li>Constructor Summary</li>
-<li>Method Summary</li>
-</ul>
-<ul>
-<li>Field Detail</li>
-<li>Constructor Detail</li>
-<li>Method Detail</li>
-</ul>
-<p>Each summary entry contains the first sentence from the detailed description for that item. The summary entries are alphabetical, while the detailed descriptions are in the order they appear in the source code. This preserves the logical groupings established by the programmer.</p>
-</li>
-<li class="blockList">
-<h2>Annotation Type</h2>
-<p>Each annotation type has its own separate page with the following sections:</p>
-<ul>
-<li>Annotation Type declaration</li>
-<li>Annotation Type description</li>
-<li>Required Element Summary</li>
-<li>Optional Element Summary</li>
-<li>Element Detail</li>
-</ul>
-</li>
-<li class="blockList">
-<h2>Enum</h2>
-<p>Each enum has its own separate page with the following sections:</p>
-<ul>
-<li>Enum declaration</li>
-<li>Enum description</li>
-<li>Enum Constant Summary</li>
-<li>Enum Constant Detail</li>
-</ul>
-</li>
-<li class="blockList">
-<h2>Tree (Class Hierarchy)</h2>
-<p>There is a <a href="overview-tree.html">Class Hierarchy</a> page for all packages, plus a hierarchy for each package. Each hierarchy page contains a list of classes and a list of interfaces. The classes are organized by inheritance structure starting with <code>java.lang.Object</code>. The interfaces do not inherit from <code>java.lang.Object</code>.</p>
-<ul>
-<li>When viewing the Overview page, clicking on "Tree" displays the hierarchy for all packages.</li>
-<li>When viewing a particular package, class or interface page, clicking "Tree" displays the hierarchy for only that package.</li>
-</ul>
-</li>
-<li class="blockList">
-<h2>Deprecated API</h2>
-<p>The <a href="deprecated-list.html">Deprecated API</a> page lists all of the API that have been deprecated. A deprecated API is not recommended for use, generally due to improvements, and a replacement API is usually given. Deprecated APIs may be removed in future implementations.</p>
-</li>
-<li class="blockList">
-<h2>Index</h2>
-<p>The <a href="index-all.html">Index</a> contains an alphabetic list of all classes, interfaces, constructors, methods, and fields.</p>
-</li>
-<li class="blockList">
-<h2>Prev/Next</h2>
-<p>These links take you to the next or previous class, interface, package, or related page.</p>
-</li>
-<li class="blockList">
-<h2>Frames/No Frames</h2>
-<p>These links show and hide the HTML frames.  All pages are available with or without frames.</p>
-</li>
-<li class="blockList">
-<h2>All Classes</h2>
-<p>The <a href="allclasses-noframe.html">All Classes</a> link shows all classes and interfaces except non-static nested types.</p>
-</li>
-<li class="blockList">
-<h2>Serialized Form</h2>
-<p>Each serializable or externalizable class has a description of its serialization fields and methods. This information is of interest to re-implementors, not to developers using the API. While there is no link in the navigation bar, you can get to this information by going to any serialized class and clicking "Serialized Form" in the "See also" section of the class description.</p>
-</li>
-<li class="blockList">
-<h2>Constant Field Values</h2>
-<p>The <a href="constant-values.html">Constant Field Values</a> page lists the static final fields and their values.</p>
-</li>
-</ul>
-<span class="emphasizedPhrase">This help file applies to API documentation generated using the standard doclet.</span></div>
-<!-- ======= START OF BOTTOM NAVBAR ====== -->
-<div class="bottomNav"><a name="navbar.bottom">
-<!--   -->
-</a>
-<div class="skipNav"><a href="#skip.navbar.bottom" title="Skip navigation links">Skip navigation links</a></div>
-<a name="navbar.bottom.firstrow">
-<!--   -->
-</a>
-<ul class="navList" title="Navigation">
-<li><a href="simpledb/package-summary.html">Package</a></li>
-<li>Class</li>
-<li><a href="overview-tree.html">Tree</a></li>
-<li><a href="deprecated-list.html">Deprecated</a></li>
-<li><a href="index-all.html">Index</a></li>
-<li class="navBarCell1Rev">Help</li>
-</ul>
-</div>
-<div class="subNav">
-<ul class="navList">
-<li>Prev</li>
-<li>Next</li>
-</ul>
-<ul class="navList">
-<li><a href="index.html?help-doc.html" target="_top">Frames</a></li>
-<li><a href="help-doc.html" target="_top">No&nbsp;Frames</a></li>
-</ul>
-<ul class="navList" id="allclasses_navbar_bottom">
-<li><a href="allclasses-noframe.html">All&nbsp;Classes</a></li>
-</ul>
-<div>
-<script type="text/javascript"><!--
-  allClassesLink = document.getElementById("allclasses_navbar_bottom");
-  if(window==top) {
-    allClassesLink.style.display = "block";
-  }
-  else {
-    allClassesLink.style.display = "none";
-  }
-  //-->
-</script>
-</div>
-<a name="skip.navbar.bottom">
-<!--   -->
-</a></div>
-<!-- ======== END OF BOTTOM NAVBAR ======= -->
-</body>
-</html>
diff -ruN lab1/javadoc/index-all.html lab3/javadoc/index-all.html
--- lab1/javadoc/index-all.html	2016-11-02 22:06:58.000000000 -0500
+++ lab3/javadoc/index-all.html	1969-12-31 18:00:00.000000000 -0600
@@ -1,1271 +0,0 @@
-<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
-<!-- NewPage -->
-<html lang="en">
-<head>
-<!-- Generated by javadoc (1.8.0_25) on Thu Oct 27 13:16:24 CDT 2016 -->
-<title>Index</title>
-<meta name="date" content="2016-10-27">
-<link rel="stylesheet" type="text/css" href="stylesheet.css" title="Style">
-<script type="text/javascript" src="script.js"></script>
-</head>
-<body>
-<script type="text/javascript"><!--
-    try {
-        if (location.href.indexOf('is-external=true') == -1) {
-            parent.document.title="Index";
-        }
-    }
-    catch(err) {
-    }
-//-->
-</script>
-<noscript>
-<div>JavaScript is disabled on your browser.</div>
-</noscript>
-<!-- ========= START OF TOP NAVBAR ======= -->
-<div class="topNav"><a name="navbar.top">
-<!--   -->
-</a>
-<div class="skipNav"><a href="#skip.navbar.top" title="Skip navigation links">Skip navigation links</a></div>
-<a name="navbar.top.firstrow">
-<!--   -->
-</a>
-<ul class="navList" title="Navigation">
-<li><a href="simpledb/package-summary.html">Package</a></li>
-<li>Class</li>
-<li><a href="overview-tree.html">Tree</a></li>
-<li><a href="deprecated-list.html">Deprecated</a></li>
-<li class="navBarCell1Rev">Index</li>
-<li><a href="help-doc.html">Help</a></li>
-</ul>
-</div>
-<div class="subNav">
-<ul class="navList">
-<li>Prev</li>
-<li>Next</li>
-</ul>
-<ul class="navList">
-<li><a href="index.html?index-all.html" target="_top">Frames</a></li>
-<li><a href="index-all.html" target="_top">No&nbsp;Frames</a></li>
-</ul>
-<ul class="navList" id="allclasses_navbar_top">
-<li><a href="allclasses-noframe.html">All&nbsp;Classes</a></li>
-</ul>
-<div>
-<script type="text/javascript"><!--
-  allClassesLink = document.getElementById("allclasses_navbar_top");
-  if(window==top) {
-    allClassesLink.style.display = "block";
-  }
-  else {
-    allClassesLink.style.display = "none";
-  }
-  //-->
-</script>
-</div>
-<a name="skip.navbar.top">
-<!--   -->
-</a></div>
-<!-- ========= END OF TOP NAVBAR ========= -->
-<div class="contentContainer"><a href="#I:A">A</a>&nbsp;<a href="#I:B">B</a>&nbsp;<a href="#I:C">C</a>&nbsp;<a href="#I:D">D</a>&nbsp;<a href="#I:E">E</a>&nbsp;<a href="#I:F">F</a>&nbsp;<a href="#I:G">G</a>&nbsp;<a href="#I:H">H</a>&nbsp;<a href="#I:I">I</a>&nbsp;<a href="#I:L">L</a>&nbsp;<a href="#I:M">M</a>&nbsp;<a href="#I:N">N</a>&nbsp;<a href="#I:O">O</a>&nbsp;<a href="#I:P">P</a>&nbsp;<a href="#I:R">R</a>&nbsp;<a href="#I:S">S</a>&nbsp;<a href="#I:T">T</a>&nbsp;<a href="#I:U">U</a>&nbsp;<a href="#I:V">V</a>&nbsp;<a href="#I:W">W</a>&nbsp;<a href="#I:Z:Z_">_</a>&nbsp;<a name="I:A">
-<!--   -->
-</a>
-<h2 class="title">A</h2>
-<dl>
-<dt><span class="memberNameLink"><a href="simpledb/LogFile.html#ABORT_RECORD">ABORT_RECORD</a></span> - Static variable in class simpledb.<a href="simpledb/LogFile.html" title="class in simpledb">LogFile</a></dt>
-<dd>&nbsp;</dd>
-<dt><span class="memberNameLink"><a href="simpledb/Catalog.html#addTable-simpledb.DbFile-java.lang.String-java.lang.String-">addTable(DbFile, String, String)</a></span> - Method in class simpledb.<a href="simpledb/Catalog.html" title="class in simpledb">Catalog</a></dt>
-<dd>
-<div class="block">Add a new table to the catalog.</div>
-</dd>
-<dt><span class="memberNameLink"><a href="simpledb/Catalog.html#addTable-simpledb.DbFile-java.lang.String-">addTable(DbFile, String)</a></span> - Method in class simpledb.<a href="simpledb/Catalog.html" title="class in simpledb">Catalog</a></dt>
-<dd>&nbsp;</dd>
-<dt><span class="memberNameLink"><a href="simpledb/Catalog.html#addTable-simpledb.DbFile-">addTable(DbFile)</a></span> - Method in class simpledb.<a href="simpledb/Catalog.html" title="class in simpledb">Catalog</a></dt>
-<dd>
-<div class="block">Add a new table to the catalog.</div>
-</dd>
-</dl>
-<a name="I:B">
-<!--   -->
-</a>
-<h2 class="title">B</h2>
-<dl>
-<dt><span class="memberNameLink"><a href="simpledb/LogFile.html#BEGIN_RECORD">BEGIN_RECORD</a></span> - Static variable in class simpledb.<a href="simpledb/LogFile.html" title="class in simpledb">LogFile</a></dt>
-<dd>&nbsp;</dd>
-<dt><a href="simpledb/BufferPool.html" title="class in simpledb"><span class="typeNameLink">BufferPool</span></a> - Class in <a href="simpledb/package-summary.html">simpledb</a></dt>
-<dd>
-<div class="block">BufferPool manages the reading and writing of pages into memory from
- disk.</div>
-</dd>
-<dt><span class="memberNameLink"><a href="simpledb/BufferPool.html#BufferPool-int-">BufferPool(int)</a></span> - Constructor for class simpledb.<a href="simpledb/BufferPool.html" title="class in simpledb">BufferPool</a></dt>
-<dd>
-<div class="block">Creates a BufferPool that caches up to numPages pages.</div>
-</dd>
-</dl>
-<a name="I:C">
-<!--   -->
-</a>
-<h2 class="title">C</h2>
-<dl>
-<dt><a href="simpledb/Catalog.html" title="class in simpledb"><span class="typeNameLink">Catalog</span></a> - Class in <a href="simpledb/package-summary.html">simpledb</a></dt>
-<dd>
-<div class="block">The Catalog keeps track of all available tables in the database and their
- associated schemas.</div>
-</dd>
-<dt><span class="memberNameLink"><a href="simpledb/Catalog.html#Catalog--">Catalog()</a></span> - Constructor for class simpledb.<a href="simpledb/Catalog.html" title="class in simpledb">Catalog</a></dt>
-<dd>
-<div class="block">Constructor.</div>
-</dd>
-<dt><span class="memberNameLink"><a href="simpledb/LogFile.html#CHECKPOINT_RECORD">CHECKPOINT_RECORD</a></span> - Static variable in class simpledb.<a href="simpledb/LogFile.html" title="class in simpledb">LogFile</a></dt>
-<dd>&nbsp;</dd>
-<dt><span class="memberNameLink"><a href="simpledb/Catalog.html#clear--">clear()</a></span> - Method in class simpledb.<a href="simpledb/Catalog.html" title="class in simpledb">Catalog</a></dt>
-<dd>
-<div class="block">Delete all tables from the catalog</div>
-</dd>
-<dt><span class="memberNameLink"><a href="simpledb/DbFileIterator.html#close--">close()</a></span> - Method in interface simpledb.<a href="simpledb/DbFileIterator.html" title="interface in simpledb">DbFileIterator</a></dt>
-<dd>
-<div class="block">Closes the iterator.</div>
-</dd>
-<dt><span class="memberNameLink"><a href="simpledb/DbIterator.html#close--">close()</a></span> - Method in interface simpledb.<a href="simpledb/DbIterator.html" title="interface in simpledb">DbIterator</a></dt>
-<dd>
-<div class="block">Closes the iterator.</div>
-</dd>
-<dt><span class="memberNameLink"><a href="simpledb/SeqScan.html#close--">close()</a></span> - Method in class simpledb.<a href="simpledb/SeqScan.html" title="class in simpledb">SeqScan</a></dt>
-<dd>&nbsp;</dd>
-<dt><span class="memberNameLink"><a href="simpledb/TupleIterator.html#close--">close()</a></span> - Method in class simpledb.<a href="simpledb/TupleIterator.html" title="class in simpledb">TupleIterator</a></dt>
-<dd>&nbsp;</dd>
-<dt><span class="memberNameLink"><a href="simpledb/LogFile.html#COMMIT_RECORD">COMMIT_RECORD</a></span> - Static variable in class simpledb.<a href="simpledb/LogFile.html" title="class in simpledb">LogFile</a></dt>
-<dd>&nbsp;</dd>
-<dt><span class="memberNameLink"><a href="simpledb/Field.html#compare-simpledb.Predicate.Op-simpledb.Field-">compare(Predicate.Op, Field)</a></span> - Method in interface simpledb.<a href="simpledb/Field.html" title="interface in simpledb">Field</a></dt>
-<dd>
-<div class="block">Compare the value of this field object to the passed in value.</div>
-</dd>
-<dt><span class="memberNameLink"><a href="simpledb/IntField.html#compare-simpledb.Predicate.Op-simpledb.Field-">compare(Predicate.Op, Field)</a></span> - Method in class simpledb.<a href="simpledb/IntField.html" title="class in simpledb">IntField</a></dt>
-<dd>
-<div class="block">Compare the specified field to the value of this Field.</div>
-</dd>
-<dt><span class="memberNameLink"><a href="simpledb/StringField.html#compare-simpledb.Predicate.Op-simpledb.Field-">compare(Predicate.Op, Field)</a></span> - Method in class simpledb.<a href="simpledb/StringField.html" title="class in simpledb">StringField</a></dt>
-<dd>
-<div class="block">Compare the specified field to the value of this Field.</div>
-</dd>
-<dt><span class="memberNameLink"><a href="simpledb/HeapFileEncoder.html#convert-java.util.ArrayList-java.io.File-int-int-">convert(ArrayList&lt;ArrayList&lt;Integer&gt;&gt;, File, int, int)</a></span> - Static method in class simpledb.<a href="simpledb/HeapFileEncoder.html" title="class in simpledb">HeapFileEncoder</a></dt>
-<dd>
-<div class="block">Convert the specified tuple list (with only integer fields) into a binary
- page file.</div>
-</dd>
-<dt><span class="memberNameLink"><a href="simpledb/HeapFileEncoder.html#convert-java.io.File-java.io.File-int-int-">convert(File, File, int, int)</a></span> - Static method in class simpledb.<a href="simpledb/HeapFileEncoder.html" title="class in simpledb">HeapFileEncoder</a></dt>
-<dd>&nbsp;</dd>
-<dt><span class="memberNameLink"><a href="simpledb/HeapFileEncoder.html#convert-java.io.File-java.io.File-int-int-simpledb.Type:A-">convert(File, File, int, int, Type[])</a></span> - Static method in class simpledb.<a href="simpledb/HeapFileEncoder.html" title="class in simpledb">HeapFileEncoder</a></dt>
-<dd>&nbsp;</dd>
-<dt><span class="memberNameLink"><a href="simpledb/HeapFileEncoder.html#convert-java.io.File-java.io.File-int-int-simpledb.Type:A-char-">convert(File, File, int, int, Type[], char)</a></span> - Static method in class simpledb.<a href="simpledb/HeapFileEncoder.html" title="class in simpledb">HeapFileEncoder</a></dt>
-<dd>
-<div class="block">Convert the specified input text file into a binary
- page file.</div>
-</dd>
-<dt><span class="memberNameLink"><a href="simpledb/TransactionId.html#counter">counter</a></span> - Static variable in class simpledb.<a href="simpledb/TransactionId.html" title="class in simpledb">TransactionId</a></dt>
-<dd>&nbsp;</dd>
-<dt><span class="memberNameLink"><a href="simpledb/Utility.html#createEmptyHeapFile-java.lang.String-int-">createEmptyHeapFile(String, int)</a></span> - Static method in class simpledb.<a href="simpledb/Utility.html" title="class in simpledb">Utility</a></dt>
-<dd>
-<div class="block">A utility method to create a new HeapFile with a single empty page,
- assuming the path does not already exist.</div>
-</dd>
-<dt><span class="memberNameLink"><a href="simpledb/HeapPage.html#createEmptyPageData--">createEmptyPageData()</a></span> - Static method in class simpledb.<a href="simpledb/HeapPage.html" title="class in simpledb">HeapPage</a></dt>
-<dd>
-<div class="block">Static method to generate a byte array corresponding to an empty
- HeapPage.</div>
-</dd>
-<dt><span class="memberNameLink"><a href="simpledb/LogFile.html#currentOffset">currentOffset</a></span> - Variable in class simpledb.<a href="simpledb/LogFile.html" title="class in simpledb">LogFile</a></dt>
-<dd>&nbsp;</dd>
-</dl>
-<a name="I:D">
-<!--   -->
-</a>
-<h2 class="title">D</h2>
-<dl>
-<dt><a href="simpledb/Database.html" title="class in simpledb"><span class="typeNameLink">Database</span></a> - Class in <a href="simpledb/package-summary.html">simpledb</a></dt>
-<dd>
-<div class="block">Database is a class that initializes several static variables used by the
- database system (the catalog, the buffer pool, and the log files, in
- particular.)</div>
-</dd>
-<dt><span class="memberNameLink"><a href="simpledb/Database.html#Database--">Database()</a></span> - Constructor for class simpledb.<a href="simpledb/Database.html" title="class in simpledb">Database</a></dt>
-<dd>&nbsp;</dd>
-<dt><a href="simpledb/DbException.html" title="class in simpledb"><span class="typeNameLink">DbException</span></a> - Exception in <a href="simpledb/package-summary.html">simpledb</a></dt>
-<dd>
-<div class="block">Generic database exception class</div>
-</dd>
-<dt><span class="memberNameLink"><a href="simpledb/DbException.html#DbException-java.lang.String-">DbException(String)</a></span> - Constructor for exception simpledb.<a href="simpledb/DbException.html" title="class in simpledb">DbException</a></dt>
-<dd>&nbsp;</dd>
-<dt><a href="simpledb/DbFile.html" title="interface in simpledb"><span class="typeNameLink">DbFile</span></a> - Interface in <a href="simpledb/package-summary.html">simpledb</a></dt>
-<dd>
-<div class="block">The interface for database files on disk.</div>
-</dd>
-<dt><a href="simpledb/DbFileIterator.html" title="interface in simpledb"><span class="typeNameLink">DbFileIterator</span></a> - Interface in <a href="simpledb/package-summary.html">simpledb</a></dt>
-<dd>
-<div class="block">DbFileIterator is the iterator interface that all SimpleDB Dbfile should
- implement.</div>
-</dd>
-<dt><a href="simpledb/DbIterator.html" title="interface in simpledb"><span class="typeNameLink">DbIterator</span></a> - Interface in <a href="simpledb/package-summary.html">simpledb</a></dt>
-<dd>
-<div class="block">DbIterator is the iterator interface that all SimpleDB operators should
- implement.</div>
-</dd>
-<dt><a href="simpledb/Debug.html" title="class in simpledb"><span class="typeNameLink">Debug</span></a> - Class in <a href="simpledb/package-summary.html">simpledb</a></dt>
-<dd>
-<div class="block">Debug is a utility class that wraps println statements and allows
- more or less command line output to be turned on.</div>
-</dd>
-<dt><span class="memberNameLink"><a href="simpledb/Debug.html#Debug--">Debug()</a></span> - Constructor for class simpledb.<a href="simpledb/Debug.html" title="class in simpledb">Debug</a></dt>
-<dd>&nbsp;</dd>
-<dt><span class="memberNameLink"><a href="simpledb/Debug.html#DEBUG_LEVEL">DEBUG_LEVEL</a></span> - Static variable in class simpledb.<a href="simpledb/Debug.html" title="class in simpledb">Debug</a></dt>
-<dd>&nbsp;</dd>
-<dt><span class="memberNameLink"><a href="simpledb/Debug.html#DEFAULT_LEVEL">DEFAULT_LEVEL</a></span> - Static variable in class simpledb.<a href="simpledb/Debug.html" title="class in simpledb">Debug</a></dt>
-<dd>&nbsp;</dd>
-<dt><span class="memberNameLink"><a href="simpledb/BufferPool.html#DEFAULT_PAGES">DEFAULT_PAGES</a></span> - Static variable in class simpledb.<a href="simpledb/BufferPool.html" title="class in simpledb">BufferPool</a></dt>
-<dd>
-<div class="block">Default number of pages passed to the constructor.</div>
-</dd>
-<dt><span class="memberNameLink"><a href="simpledb/BufferPool.html#deleteTuple-simpledb.TransactionId-simpledb.Tuple-">deleteTuple(TransactionId, Tuple)</a></span> - Method in class simpledb.<a href="simpledb/BufferPool.html" title="class in simpledb">BufferPool</a></dt>
-<dd>
-<div class="block">Remove the specified tuple from the buffer pool.</div>
-</dd>
-<dt><span class="memberNameLink"><a href="simpledb/DbFile.html#deleteTuple-simpledb.TransactionId-simpledb.Tuple-">deleteTuple(TransactionId, Tuple)</a></span> - Method in interface simpledb.<a href="simpledb/DbFile.html" title="interface in simpledb">DbFile</a></dt>
-<dd>
-<div class="block">Removes the specified tuple from the file on behalf of the specified
- transaction.</div>
-</dd>
-<dt><span class="memberNameLink"><a href="simpledb/HeapFile.html#deleteTuple-simpledb.TransactionId-simpledb.Tuple-">deleteTuple(TransactionId, Tuple)</a></span> - Method in class simpledb.<a href="simpledb/HeapFile.html" title="class in simpledb">HeapFile</a></dt>
-<dd>&nbsp;</dd>
-<dt><span class="memberNameLink"><a href="simpledb/HeapPage.html#deleteTuple-simpledb.Tuple-">deleteTuple(Tuple)</a></span> - Method in class simpledb.<a href="simpledb/HeapPage.html" title="class in simpledb">HeapPage</a></dt>
-<dd>
-<div class="block">Delete the specified tuple from the page;  the tuple should be updated to reflect
-   that it is no longer stored on any page.</div>
-</dd>
-<dt><span class="memberNameLink"><a href="simpledb/BufferPool.html#discardPage-simpledb.PageId-">discardPage(PageId)</a></span> - Method in class simpledb.<a href="simpledb/BufferPool.html" title="class in simpledb">BufferPool</a></dt>
-<dd>
-<div class="block">Remove the specific page id from the buffer pool.</div>
-</dd>
-</dl>
-<a name="I:E">
-<!--   -->
-</a>
-<h2 class="title">E</h2>
-<dl>
-<dt><span class="memberNameLink"><a href="simpledb/Field.html#equals-java.lang.Object-">equals(Object)</a></span> - Method in interface simpledb.<a href="simpledb/Field.html" title="interface in simpledb">Field</a></dt>
-<dd>&nbsp;</dd>
-<dt><span class="memberNameLink"><a href="simpledb/HeapPageId.html#equals-java.lang.Object-">equals(Object)</a></span> - Method in class simpledb.<a href="simpledb/HeapPageId.html" title="class in simpledb">HeapPageId</a></dt>
-<dd>
-<div class="block">Compares one PageId to another.</div>
-</dd>
-<dt><span class="memberNameLink"><a href="simpledb/IntField.html#equals-java.lang.Object-">equals(Object)</a></span> - Method in class simpledb.<a href="simpledb/IntField.html" title="class in simpledb">IntField</a></dt>
-<dd>&nbsp;</dd>
-<dt><span class="memberNameLink"><a href="simpledb/PageId.html#equals-java.lang.Object-">equals(Object)</a></span> - Method in interface simpledb.<a href="simpledb/PageId.html" title="interface in simpledb">PageId</a></dt>
-<dd>
-<div class="block">Compares one PageId to another.</div>
-</dd>
-<dt><span class="memberNameLink"><a href="simpledb/RecordId.html#equals-java.lang.Object-">equals(Object)</a></span> - Method in class simpledb.<a href="simpledb/RecordId.html" title="class in simpledb">RecordId</a></dt>
-<dd>
-<div class="block">Two RecordId objects are considered equal if they represent the same
- tuple.</div>
-</dd>
-<dt><span class="memberNameLink"><a href="simpledb/StringField.html#equals-java.lang.Object-">equals(Object)</a></span> - Method in class simpledb.<a href="simpledb/StringField.html" title="class in simpledb">StringField</a></dt>
-<dd>&nbsp;</dd>
-<dt><span class="memberNameLink"><a href="simpledb/TransactionId.html#equals-java.lang.Object-">equals(Object)</a></span> - Method in class simpledb.<a href="simpledb/TransactionId.html" title="class in simpledb">TransactionId</a></dt>
-<dd>&nbsp;</dd>
-<dt><span class="memberNameLink"><a href="simpledb/TupleDesc.html#equals-java.lang.Object-">equals(Object)</a></span> - Method in class simpledb.<a href="simpledb/TupleDesc.html" title="class in simpledb">TupleDesc</a></dt>
-<dd>
-<div class="block">Compares the specified object with this TupleDesc for equality.</div>
-</dd>
-<dt><span class="memberNameLink"><a href="simpledb/BufferPool.html#evictPage--">evictPage()</a></span> - Method in class simpledb.<a href="simpledb/BufferPool.html" title="class in simpledb">BufferPool</a></dt>
-<dd>
-<div class="block">Discards a page from the buffer pool.</div>
-</dd>
-</dl>
-<a name="I:F">
-<!--   -->
-</a>
-<h2 class="title">F</h2>
-<dl>
-<dt><a href="simpledb/Field.html" title="interface in simpledb"><span class="typeNameLink">Field</span></a> - Interface in <a href="simpledb/package-summary.html">simpledb</a></dt>
-<dd>
-<div class="block">Interface for values of fields in tuples in SimpleDB.</div>
-</dd>
-<dt><span class="memberNameLink"><a href="simpledb/TupleDesc.TDItem.html#fieldName">fieldName</a></span> - Variable in class simpledb.<a href="simpledb/TupleDesc.TDItem.html" title="class in simpledb">TupleDesc.TDItem</a></dt>
-<dd>
-<div class="block">The name of the field</div>
-</dd>
-<dt><span class="memberNameLink"><a href="simpledb/TupleDesc.html#fieldNameToIndex-java.lang.String-">fieldNameToIndex(String)</a></span> - Method in class simpledb.<a href="simpledb/TupleDesc.html" title="class in simpledb">TupleDesc</a></dt>
-<dd>
-<div class="block">Find the index of the field with a given name.</div>
-</dd>
-<dt><span class="memberNameLink"><a href="simpledb/Tuple.html#fields--">fields()</a></span> - Method in class simpledb.<a href="simpledb/Tuple.html" title="class in simpledb">Tuple</a></dt>
-<dd>&nbsp;</dd>
-<dt><span class="memberNameLink"><a href="simpledb/TupleDesc.TDItem.html#fieldType">fieldType</a></span> - Variable in class simpledb.<a href="simpledb/TupleDesc.TDItem.html" title="class in simpledb">TupleDesc.TDItem</a></dt>
-<dd>
-<div class="block">The type of the field</div>
-</dd>
-<dt><span class="memberNameLink"><a href="simpledb/Predicate.html#filter-simpledb.Tuple-">filter(Tuple)</a></span> - Method in class simpledb.<a href="simpledb/Predicate.html" title="class in simpledb">Predicate</a></dt>
-<dd>
-<div class="block">Compares the field number of t specified in the constructor to the
- operand field specified in the constructor using the operator specific in
- the constructor.</div>
-</dd>
-<dt><span class="memberNameLink"><a href="simpledb/BufferPool.html#flushAllPages--">flushAllPages()</a></span> - Method in class simpledb.<a href="simpledb/BufferPool.html" title="class in simpledb">BufferPool</a></dt>
-<dd>
-<div class="block">Flush all dirty pages to disk.</div>
-</dd>
-<dt><span class="memberNameLink"><a href="simpledb/BufferPool.html#flushPage-simpledb.PageId-">flushPage(PageId)</a></span> - Method in class simpledb.<a href="simpledb/BufferPool.html" title="class in simpledb">BufferPool</a></dt>
-<dd>
-<div class="block">Flushes a certain page to disk</div>
-</dd>
-<dt><span class="memberNameLink"><a href="simpledb/BufferPool.html#flushPages-simpledb.TransactionId-">flushPages(TransactionId)</a></span> - Method in class simpledb.<a href="simpledb/BufferPool.html" title="class in simpledb">BufferPool</a></dt>
-<dd>
-<div class="block">Write all pages of the specified transaction to disk.</div>
-</dd>
-<dt><span class="memberNameLink"><a href="simpledb/LogFile.html#force--">force()</a></span> - Method in class simpledb.<a href="simpledb/LogFile.html" title="class in simpledb">LogFile</a></dt>
-<dd>&nbsp;</dd>
-</dl>
-<a name="I:G">
-<!--   -->
-</a>
-<h2 class="title">G</h2>
-<dl>
-<dt><span class="memberNameLink"><a href="simpledb/SeqScan.html#getAlias--">getAlias()</a></span> - Method in class simpledb.<a href="simpledb/SeqScan.html" title="class in simpledb">SeqScan</a></dt>
-<dd>&nbsp;</dd>
-<dt><span class="memberNameLink"><a href="simpledb/HeapPage.html#getBeforeImage--">getBeforeImage()</a></span> - Method in class simpledb.<a href="simpledb/HeapPage.html" title="class in simpledb">HeapPage</a></dt>
-<dd>
-<div class="block">Return a view of this page before it was modified
-        -- used by recovery</div>
-</dd>
-<dt><span class="memberNameLink"><a href="simpledb/Page.html#getBeforeImage--">getBeforeImage()</a></span> - Method in interface simpledb.<a href="simpledb/Page.html" title="interface in simpledb">Page</a></dt>
-<dd>
-<div class="block">Provide a representation of this page before any modifications were made
-        to it.</div>
-</dd>
-<dt><span class="memberNameLink"><a href="simpledb/Database.html#getBufferPool--">getBufferPool()</a></span> - Static method in class simpledb.<a href="simpledb/Database.html" title="class in simpledb">Database</a></dt>
-<dd>
-<div class="block">Return the buffer pool of the static Database instance</div>
-</dd>
-<dt><span class="memberNameLink"><a href="simpledb/Database.html#getCatalog--">getCatalog()</a></span> - Static method in class simpledb.<a href="simpledb/Database.html" title="class in simpledb">Database</a></dt>
-<dd>
-<div class="block">Return the catalog of the static Database instance</div>
-</dd>
-<dt><span class="memberNameLink"><a href="simpledb/Catalog.html#getDatabaseFile-int-">getDatabaseFile(int)</a></span> - Method in class simpledb.<a href="simpledb/Catalog.html" title="class in simpledb">Catalog</a></dt>
-<dd>
-<div class="block">Returns the DbFile that can be used to read the contents of the
- specified table.</div>
-</dd>
-<dt><span class="memberNameLink"><a href="simpledb/Predicate.html#getField--">getField()</a></span> - Method in class simpledb.<a href="simpledb/Predicate.html" title="class in simpledb">Predicate</a></dt>
-<dd>&nbsp;</dd>
-<dt><span class="memberNameLink"><a href="simpledb/Tuple.html#getField-int-">getField(int)</a></span> - Method in class simpledb.<a href="simpledb/Tuple.html" title="class in simpledb">Tuple</a></dt>
-<dd>&nbsp;</dd>
-<dt><span class="memberNameLink"><a href="simpledb/TupleDesc.html#getFieldName-int-">getFieldName(int)</a></span> - Method in class simpledb.<a href="simpledb/TupleDesc.html" title="class in simpledb">TupleDesc</a></dt>
-<dd>
-<div class="block">Gets the (possibly null) field name of the ith field of this TupleDesc.</div>
-</dd>
-<dt><span class="memberNameLink"><a href="simpledb/TupleDesc.html#getFieldType-int-">getFieldType(int)</a></span> - Method in class simpledb.<a href="simpledb/TupleDesc.html" title="class in simpledb">TupleDesc</a></dt>
-<dd>
-<div class="block">Gets the type of the ith field of this TupleDesc.</div>
-</dd>
-<dt><span class="memberNameLink"><a href="simpledb/HeapFile.html#getFile--">getFile()</a></span> - Method in class simpledb.<a href="simpledb/HeapFile.html" title="class in simpledb">HeapFile</a></dt>
-<dd>
-<div class="block">Returns the File backing this HeapFile on disk.</div>
-</dd>
-<dt><span class="memberNameLink"><a href="simpledb/HeapPage.html#getHeaderSize--">getHeaderSize()</a></span> - Method in class simpledb.<a href="simpledb/HeapPage.html" title="class in simpledb">HeapPage</a></dt>
-<dd>
-<div class="block">Computes the number of bytes in the header of a page in a HeapFile with each tuple occupying tupleSize bytes</div>
-</dd>
-<dt><span class="memberNameLink"><a href="simpledb/Utility.html#getHeapTuple-int-">getHeapTuple(int)</a></span> - Static method in class simpledb.<a href="simpledb/Utility.html" title="class in simpledb">Utility</a></dt>
-<dd>&nbsp;</dd>
-<dt><span class="memberNameLink"><a href="simpledb/Utility.html#getHeapTuple-int:A-">getHeapTuple(int[])</a></span> - Static method in class simpledb.<a href="simpledb/Utility.html" title="class in simpledb">Utility</a></dt>
-<dd>&nbsp;</dd>
-<dt><span class="memberNameLink"><a href="simpledb/Utility.html#getHeapTuple-int-int-">getHeapTuple(int, int)</a></span> - Static method in class simpledb.<a href="simpledb/Utility.html" title="class in simpledb">Utility</a></dt>
-<dd>&nbsp;</dd>
-<dt><span class="memberNameLink"><a href="simpledb/DbFile.html#getId--">getId()</a></span> - Method in interface simpledb.<a href="simpledb/DbFile.html" title="interface in simpledb">DbFile</a></dt>
-<dd>
-<div class="block">Returns a unique ID used to identify this DbFile in the Catalog.</div>
-</dd>
-<dt><span class="memberNameLink"><a href="simpledb/HeapFile.html#getId--">getId()</a></span> - Method in class simpledb.<a href="simpledb/HeapFile.html" title="class in simpledb">HeapFile</a></dt>
-<dd>
-<div class="block">Returns an ID uniquely identifying this HeapFile.</div>
-</dd>
-<dt><span class="memberNameLink"><a href="simpledb/HeapPage.html#getId--">getId()</a></span> - Method in class simpledb.<a href="simpledb/HeapPage.html" title="class in simpledb">HeapPage</a></dt>
-<dd>&nbsp;</dd>
-<dt><span class="memberNameLink"><a href="simpledb/Page.html#getId--">getId()</a></span> - Method in interface simpledb.<a href="simpledb/Page.html" title="interface in simpledb">Page</a></dt>
-<dd>
-<div class="block">Return the id of this page.</div>
-</dd>
-<dt><span class="memberNameLink"><a href="simpledb/TransactionId.html#getId--">getId()</a></span> - Method in class simpledb.<a href="simpledb/TransactionId.html" title="class in simpledb">TransactionId</a></dt>
-<dd>&nbsp;</dd>
-<dt><span class="memberNameLink"><a href="simpledb/Type.html#getLen--">getLen()</a></span> - Method in enum simpledb.<a href="simpledb/Type.html" title="enum in simpledb">Type</a></dt>
-<dd>&nbsp;</dd>
-<dt><span class="memberNameLink"><a href="simpledb/Database.html#getLogFile--">getLogFile()</a></span> - Static method in class simpledb.<a href="simpledb/Database.html" title="class in simpledb">Database</a></dt>
-<dd>
-<div class="block">Return the log file of the static Database instance</div>
-</dd>
-<dt><span class="memberNameLink"><a href="simpledb/HeapPage.html#getNumEmptySlots--">getNumEmptySlots()</a></span> - Method in class simpledb.<a href="simpledb/HeapPage.html" title="class in simpledb">HeapPage</a></dt>
-<dd>
-<div class="block">Returns the number of empty slots on this page.</div>
-</dd>
-<dt><span class="memberNameLink"><a href="simpledb/HeapPage.html#getNumTuples--">getNumTuples()</a></span> - Method in class simpledb.<a href="simpledb/HeapPage.html" title="class in simpledb">HeapPage</a></dt>
-<dd>
-<div class="block">Retrieve the number of tuples on this page.</div>
-</dd>
-<dt><span class="memberNameLink"><a href="simpledb/Predicate.html#getOp--">getOp()</a></span> - Method in class simpledb.<a href="simpledb/Predicate.html" title="class in simpledb">Predicate</a></dt>
-<dd>&nbsp;</dd>
-<dt><span class="memberNameLink"><a href="simpledb/Predicate.Op.html#getOp-int-">getOp(int)</a></span> - Static method in enum simpledb.<a href="simpledb/Predicate.Op.html" title="enum in simpledb">Predicate.Op</a></dt>
-<dd>
-<div class="block">Interface to access operations by integer value for command-line
- convenience.</div>
-</dd>
-<dt><span class="memberNameLink"><a href="simpledb/Predicate.html#getOperand--">getOperand()</a></span> - Method in class simpledb.<a href="simpledb/Predicate.html" title="class in simpledb">Predicate</a></dt>
-<dd>&nbsp;</dd>
-<dt><span class="memberNameLink"><a href="simpledb/BufferPool.html#getPage-simpledb.TransactionId-simpledb.PageId-simpledb.Permissions-">getPage(TransactionId, PageId, Permissions)</a></span> - Method in class simpledb.<a href="simpledb/BufferPool.html" title="class in simpledb">BufferPool</a></dt>
-<dd>
-<div class="block">Retrieve the specified page with the associated permissions.</div>
-</dd>
-<dt><span class="memberNameLink"><a href="simpledb/HeapPage.html#getPageData--">getPageData()</a></span> - Method in class simpledb.<a href="simpledb/HeapPage.html" title="class in simpledb">HeapPage</a></dt>
-<dd>
-<div class="block">Generates a byte array representing the contents of this page.</div>
-</dd>
-<dt><span class="memberNameLink"><a href="simpledb/Page.html#getPageData--">getPageData()</a></span> - Method in interface simpledb.<a href="simpledb/Page.html" title="interface in simpledb">Page</a></dt>
-<dd>
-<div class="block">Generates a byte array representing the contents of this page.</div>
-</dd>
-<dt><span class="memberNameLink"><a href="simpledb/RecordId.html#getPageId--">getPageId()</a></span> - Method in class simpledb.<a href="simpledb/RecordId.html" title="class in simpledb">RecordId</a></dt>
-<dd>&nbsp;</dd>
-<dt><span class="memberNameLink"><a href="simpledb/BufferPool.html#getPageSize--">getPageSize()</a></span> - Static method in class simpledb.<a href="simpledb/BufferPool.html" title="class in simpledb">BufferPool</a></dt>
-<dd>&nbsp;</dd>
-<dt><span class="memberNameLink"><a href="simpledb/Catalog.html#getPrimaryKey-int-">getPrimaryKey(int)</a></span> - Method in class simpledb.<a href="simpledb/Catalog.html" title="class in simpledb">Catalog</a></dt>
-<dd>&nbsp;</dd>
-<dt><span class="memberNameLink"><a href="simpledb/Tuple.html#getRecordId--">getRecordId()</a></span> - Method in class simpledb.<a href="simpledb/Tuple.html" title="class in simpledb">Tuple</a></dt>
-<dd>&nbsp;</dd>
-<dt><span class="memberNameLink"><a href="simpledb/TupleDesc.html#getSize--">getSize()</a></span> - Method in class simpledb.<a href="simpledb/TupleDesc.html" title="class in simpledb">TupleDesc</a></dt>
-<dd>&nbsp;</dd>
-<dt><span class="memberNameLink"><a href="simpledb/Utility.html#getStrings-int-java.lang.String-">getStrings(int, String)</a></span> - Static method in class simpledb.<a href="simpledb/Utility.html" title="class in simpledb">Utility</a></dt>
-<dd>&nbsp;</dd>
-<dt><span class="memberNameLink"><a href="simpledb/Catalog.html#getTableId-java.lang.String-">getTableId(String)</a></span> - Method in class simpledb.<a href="simpledb/Catalog.html" title="class in simpledb">Catalog</a></dt>
-<dd>
-<div class="block">Return the id of the table with a specified name,</div>
-</dd>
-<dt><span class="memberNameLink"><a href="simpledb/HeapPageId.html#getTableId--">getTableId()</a></span> - Method in class simpledb.<a href="simpledb/HeapPageId.html" title="class in simpledb">HeapPageId</a></dt>
-<dd>&nbsp;</dd>
-<dt><span class="memberNameLink"><a href="simpledb/PageId.html#getTableId--">getTableId()</a></span> - Method in interface simpledb.<a href="simpledb/PageId.html" title="interface in simpledb">PageId</a></dt>
-<dd>&nbsp;</dd>
-<dt><span class="memberNameLink"><a href="simpledb/Catalog.html#getTableName-int-">getTableName(int)</a></span> - Method in class simpledb.<a href="simpledb/Catalog.html" title="class in simpledb">Catalog</a></dt>
-<dd>&nbsp;</dd>
-<dt><span class="memberNameLink"><a href="simpledb/SeqScan.html#getTableName--">getTableName()</a></span> - Method in class simpledb.<a href="simpledb/SeqScan.html" title="class in simpledb">SeqScan</a></dt>
-<dd>&nbsp;</dd>
-<dt><span class="memberNameLink"><a href="simpledb/LogFile.html#getTotalRecords--">getTotalRecords()</a></span> - Method in class simpledb.<a href="simpledb/LogFile.html" title="class in simpledb">LogFile</a></dt>
-<dd>&nbsp;</dd>
-<dt><span class="memberNameLink"><a href="simpledb/Utility.html#getTuple-int:A-int-">getTuple(int[], int)</a></span> - Static method in class simpledb.<a href="simpledb/Utility.html" title="class in simpledb">Utility</a></dt>
-<dd>&nbsp;</dd>
-<dt><span class="memberNameLink"><a href="simpledb/Catalog.html#getTupleDesc-int-">getTupleDesc(int)</a></span> - Method in class simpledb.<a href="simpledb/Catalog.html" title="class in simpledb">Catalog</a></dt>
-<dd>
-<div class="block">Returns the tuple descriptor (schema) of the specified table</div>
-</dd>
-<dt><span class="memberNameLink"><a href="simpledb/DbFile.html#getTupleDesc--">getTupleDesc()</a></span> - Method in interface simpledb.<a href="simpledb/DbFile.html" title="interface in simpledb">DbFile</a></dt>
-<dd>
-<div class="block">Returns the TupleDesc of the table stored in this DbFile.</div>
-</dd>
-<dt><span class="memberNameLink"><a href="simpledb/DbIterator.html#getTupleDesc--">getTupleDesc()</a></span> - Method in interface simpledb.<a href="simpledb/DbIterator.html" title="interface in simpledb">DbIterator</a></dt>
-<dd>
-<div class="block">Returns the TupleDesc associated with this DbIterator.</div>
-</dd>
-<dt><span class="memberNameLink"><a href="simpledb/HeapFile.html#getTupleDesc--">getTupleDesc()</a></span> - Method in class simpledb.<a href="simpledb/HeapFile.html" title="class in simpledb">HeapFile</a></dt>
-<dd>
-<div class="block">Returns the TupleDesc of the table stored in this DbFile.</div>
-</dd>
-<dt><span class="memberNameLink"><a href="simpledb/SeqScan.html#getTupleDesc--">getTupleDesc()</a></span> - Method in class simpledb.<a href="simpledb/SeqScan.html" title="class in simpledb">SeqScan</a></dt>
-<dd>
-<div class="block">Returns the TupleDesc with field names from the underlying HeapFile,
- prefixed with the tableAlias string from the constructor.</div>
-</dd>
-<dt><span class="memberNameLink"><a href="simpledb/Tuple.html#getTupleDesc--">getTupleDesc()</a></span> - Method in class simpledb.<a href="simpledb/Tuple.html" title="class in simpledb">Tuple</a></dt>
-<dd>&nbsp;</dd>
-<dt><span class="memberNameLink"><a href="simpledb/TupleIterator.html#getTupleDesc--">getTupleDesc()</a></span> - Method in class simpledb.<a href="simpledb/TupleIterator.html" title="class in simpledb">TupleIterator</a></dt>
-<dd>&nbsp;</dd>
-<dt><span class="memberNameLink"><a href="simpledb/Utility.html#getTupleDesc-int-java.lang.String-">getTupleDesc(int, String)</a></span> - Static method in class simpledb.<a href="simpledb/Utility.html" title="class in simpledb">Utility</a></dt>
-<dd>&nbsp;</dd>
-<dt><span class="memberNameLink"><a href="simpledb/Utility.html#getTupleDesc-int-">getTupleDesc(int)</a></span> - Static method in class simpledb.<a href="simpledb/Utility.html" title="class in simpledb">Utility</a></dt>
-<dd>&nbsp;</dd>
-<dt><span class="memberNameLink"><a href="simpledb/Field.html#getType--">getType()</a></span> - Method in interface simpledb.<a href="simpledb/Field.html" title="interface in simpledb">Field</a></dt>
-<dd>
-<div class="block">Returns the type of this field (see <a href="simpledb/Type.html#INT_TYPE"><code>Type.INT_TYPE</code></a> or <a href="simpledb/Type.html#STRING_TYPE"><code>Type.STRING_TYPE</code></a></div>
-</dd>
-<dt><span class="memberNameLink"><a href="simpledb/IntField.html#getType--">getType()</a></span> - Method in class simpledb.<a href="simpledb/IntField.html" title="class in simpledb">IntField</a></dt>
-<dd>
-<div class="block">Return the Type of this field.</div>
-</dd>
-<dt><span class="memberNameLink"><a href="simpledb/StringField.html#getType--">getType()</a></span> - Method in class simpledb.<a href="simpledb/StringField.html" title="class in simpledb">StringField</a></dt>
-<dd>&nbsp;</dd>
-<dt><span class="memberNameLink"><a href="simpledb/Utility.html#getTypes-int-">getTypes(int)</a></span> - Static method in class simpledb.<a href="simpledb/Utility.html" title="class in simpledb">Utility</a></dt>
-<dd>&nbsp;</dd>
-<dt><span class="memberNameLink"><a href="simpledb/IntField.html#getValue--">getValue()</a></span> - Method in class simpledb.<a href="simpledb/IntField.html" title="class in simpledb">IntField</a></dt>
-<dd>&nbsp;</dd>
-<dt><span class="memberNameLink"><a href="simpledb/StringField.html#getValue--">getValue()</a></span> - Method in class simpledb.<a href="simpledb/StringField.html" title="class in simpledb">StringField</a></dt>
-<dd>&nbsp;</dd>
-</dl>
-<a name="I:H">
-<!--   -->
-</a>
-<h2 class="title">H</h2>
-<dl>
-<dt><span class="memberNameLink"><a href="simpledb/Field.html#hashCode--">hashCode()</a></span> - Method in interface simpledb.<a href="simpledb/Field.html" title="interface in simpledb">Field</a></dt>
-<dd>
-<div class="block">Hash code.</div>
-</dd>
-<dt><span class="memberNameLink"><a href="simpledb/HeapPageId.html#hashCode--">hashCode()</a></span> - Method in class simpledb.<a href="simpledb/HeapPageId.html" title="class in simpledb">HeapPageId</a></dt>
-<dd>&nbsp;</dd>
-<dt><span class="memberNameLink"><a href="simpledb/IntField.html#hashCode--">hashCode()</a></span> - Method in class simpledb.<a href="simpledb/IntField.html" title="class in simpledb">IntField</a></dt>
-<dd>&nbsp;</dd>
-<dt><span class="memberNameLink"><a href="simpledb/PageId.html#hashCode--">hashCode()</a></span> - Method in interface simpledb.<a href="simpledb/PageId.html" title="interface in simpledb">PageId</a></dt>
-<dd>&nbsp;</dd>
-<dt><span class="memberNameLink"><a href="simpledb/RecordId.html#hashCode--">hashCode()</a></span> - Method in class simpledb.<a href="simpledb/RecordId.html" title="class in simpledb">RecordId</a></dt>
-<dd>
-<div class="block">You should implement the hashCode() so that two equal RecordId instances
- (with respect to equals()) have the same hashCode().</div>
-</dd>
-<dt><span class="memberNameLink"><a href="simpledb/StringField.html#hashCode--">hashCode()</a></span> - Method in class simpledb.<a href="simpledb/StringField.html" title="class in simpledb">StringField</a></dt>
-<dd>&nbsp;</dd>
-<dt><span class="memberNameLink"><a href="simpledb/TransactionId.html#hashCode--">hashCode()</a></span> - Method in class simpledb.<a href="simpledb/TransactionId.html" title="class in simpledb">TransactionId</a></dt>
-<dd>&nbsp;</dd>
-<dt><span class="memberNameLink"><a href="simpledb/TupleDesc.html#hashCode--">hashCode()</a></span> - Method in class simpledb.<a href="simpledb/TupleDesc.html" title="class in simpledb">TupleDesc</a></dt>
-<dd>&nbsp;</dd>
-<dt><span class="memberNameLink"><a href="simpledb/DbFileIterator.html#hasNext--">hasNext()</a></span> - Method in interface simpledb.<a href="simpledb/DbFileIterator.html" title="interface in simpledb">DbFileIterator</a></dt>
-<dd>&nbsp;</dd>
-<dt><span class="memberNameLink"><a href="simpledb/DbIterator.html#hasNext--">hasNext()</a></span> - Method in interface simpledb.<a href="simpledb/DbIterator.html" title="interface in simpledb">DbIterator</a></dt>
-<dd>
-<div class="block">Returns true if the iterator has more tuples.</div>
-</dd>
-<dt><span class="memberNameLink"><a href="simpledb/SeqScan.html#hasNext--">hasNext()</a></span> - Method in class simpledb.<a href="simpledb/SeqScan.html" title="class in simpledb">SeqScan</a></dt>
-<dd>&nbsp;</dd>
-<dt><span class="memberNameLink"><a href="simpledb/TupleIterator.html#hasNext--">hasNext()</a></span> - Method in class simpledb.<a href="simpledb/TupleIterator.html" title="class in simpledb">TupleIterator</a></dt>
-<dd>&nbsp;</dd>
-<dt><span class="memberNameLink"><a href="simpledb/HeapPage.html#header">header</a></span> - Variable in class simpledb.<a href="simpledb/HeapPage.html" title="class in simpledb">HeapPage</a></dt>
-<dd>&nbsp;</dd>
-<dt><a href="simpledb/HeapFile.html" title="class in simpledb"><span class="typeNameLink">HeapFile</span></a> - Class in <a href="simpledb/package-summary.html">simpledb</a></dt>
-<dd>
-<div class="block">HeapFile is an implementation of a DbFile that stores a collection of tuples
- in no particular order.</div>
-</dd>
-<dt><span class="memberNameLink"><a href="simpledb/HeapFile.html#HeapFile-java.io.File-simpledb.TupleDesc-">HeapFile(File, TupleDesc)</a></span> - Constructor for class simpledb.<a href="simpledb/HeapFile.html" title="class in simpledb">HeapFile</a></dt>
-<dd>
-<div class="block">Constructs a heap file backed by the specified file.</div>
-</dd>
-<dt><a href="simpledb/HeapFileEncoder.html" title="class in simpledb"><span class="typeNameLink">HeapFileEncoder</span></a> - Class in <a href="simpledb/package-summary.html">simpledb</a></dt>
-<dd>
-<div class="block">HeapFileEncoder reads a comma delimited text file or accepts
- an array of tuples and converts it to
- pages of binary data in the appropriate format for simpledb heap pages
- Pages are padded out to a specified length, and written consecutive in a
- data file.</div>
-</dd>
-<dt><span class="memberNameLink"><a href="simpledb/HeapFileEncoder.html#HeapFileEncoder--">HeapFileEncoder()</a></span> - Constructor for class simpledb.<a href="simpledb/HeapFileEncoder.html" title="class in simpledb">HeapFileEncoder</a></dt>
-<dd>&nbsp;</dd>
-<dt><a href="simpledb/HeapPage.html" title="class in simpledb"><span class="typeNameLink">HeapPage</span></a> - Class in <a href="simpledb/package-summary.html">simpledb</a></dt>
-<dd>
-<div class="block">Each instance of HeapPage stores data for one page of HeapFiles and 
- implements the Page interface that is used by BufferPool.</div>
-</dd>
-<dt><span class="memberNameLink"><a href="simpledb/HeapPage.html#HeapPage-simpledb.HeapPageId-byte:A-">HeapPage(HeapPageId, byte[])</a></span> - Constructor for class simpledb.<a href="simpledb/HeapPage.html" title="class in simpledb">HeapPage</a></dt>
-<dd>
-<div class="block">Create a HeapPage from a set of bytes of data read from disk.</div>
-</dd>
-<dt><a href="simpledb/HeapPageId.html" title="class in simpledb"><span class="typeNameLink">HeapPageId</span></a> - Class in <a href="simpledb/package-summary.html">simpledb</a></dt>
-<dd>
-<div class="block">Unique identifier for HeapPage objects.</div>
-</dd>
-<dt><span class="memberNameLink"><a href="simpledb/HeapPageId.html#HeapPageId-int-int-">HeapPageId(int, int)</a></span> - Constructor for class simpledb.<a href="simpledb/HeapPageId.html" title="class in simpledb">HeapPageId</a></dt>
-<dd>
-<div class="block">Constructor.</div>
-</dd>
-<dt><span class="memberNameLink"><a href="simpledb/BufferPool.html#holdsLock-simpledb.TransactionId-simpledb.PageId-">holdsLock(TransactionId, PageId)</a></span> - Method in class simpledb.<a href="simpledb/BufferPool.html" title="class in simpledb">BufferPool</a></dt>
-<dd>
-<div class="block">Return true if the specified transaction has a lock on the specified page</div>
-</dd>
-</dl>
-<a name="I:I">
-<!--   -->
-</a>
-<h2 class="title">I</h2>
-<dl>
-<dt><span class="memberNameLink"><a href="simpledb/TupleIterator.html#i">i</a></span> - Variable in class simpledb.<a href="simpledb/TupleIterator.html" title="class in simpledb">TupleIterator</a></dt>
-<dd>&nbsp;</dd>
-<dt><span class="memberNameLink"><a href="simpledb/BufferPool.html#insertTuple-simpledb.TransactionId-int-simpledb.Tuple-">insertTuple(TransactionId, int, Tuple)</a></span> - Method in class simpledb.<a href="simpledb/BufferPool.html" title="class in simpledb">BufferPool</a></dt>
-<dd>
-<div class="block">Add a tuple to the specified table on behalf of transaction tid.</div>
-</dd>
-<dt><span class="memberNameLink"><a href="simpledb/DbFile.html#insertTuple-simpledb.TransactionId-simpledb.Tuple-">insertTuple(TransactionId, Tuple)</a></span> - Method in interface simpledb.<a href="simpledb/DbFile.html" title="interface in simpledb">DbFile</a></dt>
-<dd>
-<div class="block">Inserts the specified tuple to the file on behalf of transaction.</div>
-</dd>
-<dt><span class="memberNameLink"><a href="simpledb/HeapFile.html#insertTuple-simpledb.TransactionId-simpledb.Tuple-">insertTuple(TransactionId, Tuple)</a></span> - Method in class simpledb.<a href="simpledb/HeapFile.html" title="class in simpledb">HeapFile</a></dt>
-<dd>&nbsp;</dd>
-<dt><span class="memberNameLink"><a href="simpledb/HeapPage.html#insertTuple-simpledb.Tuple-">insertTuple(Tuple)</a></span> - Method in class simpledb.<a href="simpledb/HeapPage.html" title="class in simpledb">HeapPage</a></dt>
-<dd>
-<div class="block">Adds the specified tuple to the page;  the tuple should be updated to reflect
-  that it is now stored on this page.</div>
-</dd>
-<dt><span class="memberNameLink"><a href="simpledb/LogFile.html#INT_SIZE">INT_SIZE</a></span> - Static variable in class simpledb.<a href="simpledb/LogFile.html" title="class in simpledb">LogFile</a></dt>
-<dd>&nbsp;</dd>
-<dt><a href="simpledb/IntField.html" title="class in simpledb"><span class="typeNameLink">IntField</span></a> - Class in <a href="simpledb/package-summary.html">simpledb</a></dt>
-<dd>
-<div class="block">Instance of Field that stores a single integer.</div>
-</dd>
-<dt><span class="memberNameLink"><a href="simpledb/IntField.html#IntField-int-">IntField(int)</a></span> - Constructor for class simpledb.<a href="simpledb/IntField.html" title="class in simpledb">IntField</a></dt>
-<dd>
-<div class="block">Constructor.</div>
-</dd>
-<dt><span class="memberNameLink"><a href="simpledb/HeapPage.html#isDirty--">isDirty()</a></span> - Method in class simpledb.<a href="simpledb/HeapPage.html" title="class in simpledb">HeapPage</a></dt>
-<dd>
-<div class="block">Returns the tid of the transaction that last dirtied this page, or null if the page is not dirty</div>
-</dd>
-<dt><span class="memberNameLink"><a href="simpledb/Page.html#isDirty--">isDirty()</a></span> - Method in interface simpledb.<a href="simpledb/Page.html" title="interface in simpledb">Page</a></dt>
-<dd>
-<div class="block">Get the id of the transaction that last dirtied this page, or null if the page is clean..</div>
-</dd>
-<dt><span class="memberNameLink"><a href="simpledb/Debug.html#isEnabled-int-">isEnabled(int)</a></span> - Static method in class simpledb.<a href="simpledb/Debug.html" title="class in simpledb">Debug</a></dt>
-<dd>&nbsp;</dd>
-<dt><span class="memberNameLink"><a href="simpledb/Debug.html#isEnabled--">isEnabled()</a></span> - Static method in class simpledb.<a href="simpledb/Debug.html" title="class in simpledb">Debug</a></dt>
-<dd>&nbsp;</dd>
-<dt><span class="memberNameLink"><a href="simpledb/HeapPage.html#isSlotUsed-int-">isSlotUsed(int)</a></span> - Method in class simpledb.<a href="simpledb/HeapPage.html" title="class in simpledb">HeapPage</a></dt>
-<dd>
-<div class="block">Returns true if associated slot on this page is filled.</div>
-</dd>
-<dt><span class="memberNameLink"><a href="simpledb/DbFile.html#iterator-simpledb.TransactionId-">iterator(TransactionId)</a></span> - Method in interface simpledb.<a href="simpledb/DbFile.html" title="interface in simpledb">DbFile</a></dt>
-<dd>
-<div class="block">Returns an iterator over all the tuples stored in this DbFile.</div>
-</dd>
-<dt><span class="memberNameLink"><a href="simpledb/HeapFile.html#iterator-simpledb.TransactionId-">iterator(TransactionId)</a></span> - Method in class simpledb.<a href="simpledb/HeapFile.html" title="class in simpledb">HeapFile</a></dt>
-<dd>&nbsp;</dd>
-<dt><span class="memberNameLink"><a href="simpledb/HeapPage.html#iterator--">iterator()</a></span> - Method in class simpledb.<a href="simpledb/HeapPage.html" title="class in simpledb">HeapPage</a></dt>
-<dd>&nbsp;</dd>
-<dt><span class="memberNameLink"><a href="simpledb/TupleDesc.html#iterator--">iterator()</a></span> - Method in class simpledb.<a href="simpledb/TupleDesc.html" title="class in simpledb">TupleDesc</a></dt>
-<dd>&nbsp;</dd>
-</dl>
-<a name="I:L">
-<!--   -->
-</a>
-<h2 class="title">L</h2>
-<dl>
-<dt><span class="memberNameLink"><a href="simpledb/Utility.html#listToString-java.util.ArrayList-">listToString(ArrayList&lt;Integer&gt;)</a></span> - Static method in class simpledb.<a href="simpledb/Utility.html" title="class in simpledb">Utility</a></dt>
-<dd>&nbsp;</dd>
-<dt><span class="memberNameLink"><a href="simpledb/Catalog.html#loadSchema-java.lang.String-">loadSchema(String)</a></span> - Method in class simpledb.<a href="simpledb/Catalog.html" title="class in simpledb">Catalog</a></dt>
-<dd>
-<div class="block">Reads the schema from a file and creates the appropriate tables in the database.</div>
-</dd>
-<dt><span class="memberNameLink"><a href="simpledb/Debug.html#log-int-java.lang.String-java.lang.Object...-">log(int, String, Object...)</a></span> - Static method in class simpledb.<a href="simpledb/Debug.html" title="class in simpledb">Debug</a></dt>
-<dd>
-<div class="block">Log message if the log level >= level.</div>
-</dd>
-<dt><span class="memberNameLink"><a href="simpledb/Debug.html#log-java.lang.String-java.lang.Object...-">log(String, Object...)</a></span> - Static method in class simpledb.<a href="simpledb/Debug.html" title="class in simpledb">Debug</a></dt>
-<dd>
-<div class="block">Logs message at the default log level.</div>
-</dd>
-<dt><span class="memberNameLink"><a href="simpledb/LogFile.html#logAbort-simpledb.TransactionId-">logAbort(TransactionId)</a></span> - Method in class simpledb.<a href="simpledb/LogFile.html" title="class in simpledb">LogFile</a></dt>
-<dd>
-<div class="block">Write an abort record to the log for the specified tid, force
-        the log to disk, and perform a rollback</div>
-</dd>
-<dt><span class="memberNameLink"><a href="simpledb/LogFile.html#logCheckpoint--">logCheckpoint()</a></span> - Method in class simpledb.<a href="simpledb/LogFile.html" title="class in simpledb">LogFile</a></dt>
-<dd>
-<div class="block">Checkpoint the log and write a checkpoint record.</div>
-</dd>
-<dt><span class="memberNameLink"><a href="simpledb/LogFile.html#logCommit-simpledb.TransactionId-">logCommit(TransactionId)</a></span> - Method in class simpledb.<a href="simpledb/LogFile.html" title="class in simpledb">LogFile</a></dt>
-<dd>
-<div class="block">Write a commit record to disk for the specified tid,
-        and force the log to disk.</div>
-</dd>
-<dt><a href="simpledb/LogFile.html" title="class in simpledb"><span class="typeNameLink">LogFile</span></a> - Class in <a href="simpledb/package-summary.html">simpledb</a></dt>
-<dd>
-<div class="block"> The format of the log file is as follows:
-
-
-
- The first long integer of the file represents the offset of the
-last written checkpoint, or -1 if there are no checkpoints
-
- All additional data in the log consists of log records.</div>
-</dd>
-<dt><span class="memberNameLink"><a href="simpledb/LogFile.html#LogFile-java.io.File-">LogFile(File)</a></span> - Constructor for class simpledb.<a href="simpledb/LogFile.html" title="class in simpledb">LogFile</a></dt>
-<dd>
-<div class="block">Constructor.</div>
-</dd>
-<dt><span class="memberNameLink"><a href="simpledb/LogFile.html#logFile">logFile</a></span> - Variable in class simpledb.<a href="simpledb/LogFile.html" title="class in simpledb">LogFile</a></dt>
-<dd>&nbsp;</dd>
-<dt><span class="memberNameLink"><a href="simpledb/Database.html#LOGFILENAME">LOGFILENAME</a></span> - Static variable in class simpledb.<a href="simpledb/Database.html" title="class in simpledb">Database</a></dt>
-<dd>&nbsp;</dd>
-<dt><span class="memberNameLink"><a href="simpledb/LogFile.html#logTruncate--">logTruncate()</a></span> - Method in class simpledb.<a href="simpledb/LogFile.html" title="class in simpledb">LogFile</a></dt>
-<dd>
-<div class="block">Truncate any unneeded portion of the log to reduce its space
-        consumption</div>
-</dd>
-<dt><span class="memberNameLink"><a href="simpledb/LogFile.html#logWrite-simpledb.TransactionId-simpledb.Page-simpledb.Page-">logWrite(TransactionId, Page, Page)</a></span> - Method in class simpledb.<a href="simpledb/LogFile.html" title="class in simpledb">LogFile</a></dt>
-<dd>
-<div class="block">Write an UPDATE record to disk for the specified tid and page
-        (with provided         before and after images.)</div>
-</dd>
-<dt><span class="memberNameLink"><a href="simpledb/LogFile.html#logXactionBegin-simpledb.TransactionId-">logXactionBegin(TransactionId)</a></span> - Method in class simpledb.<a href="simpledb/LogFile.html" title="class in simpledb">LogFile</a></dt>
-<dd>
-<div class="block">Write a BEGIN record for the specified transaction</div>
-</dd>
-<dt><span class="memberNameLink"><a href="simpledb/LogFile.html#LONG_SIZE">LONG_SIZE</a></span> - Static variable in class simpledb.<a href="simpledb/LogFile.html" title="class in simpledb">LogFile</a></dt>
-<dd>&nbsp;</dd>
-</dl>
-<a name="I:M">
-<!--   -->
-</a>
-<h2 class="title">M</h2>
-<dl>
-<dt><span class="memberNameLink"><a href="simpledb/SimpleDb.html#main-java.lang.String:A-">main(String[])</a></span> - Static method in class simpledb.<a href="simpledb/SimpleDb.html" title="class in simpledb">SimpleDb</a></dt>
-<dd>&nbsp;</dd>
-<dt><span class="memberNameLink"><a href="simpledb/HeapPage.html#markDirty-boolean-simpledb.TransactionId-">markDirty(boolean, TransactionId)</a></span> - Method in class simpledb.<a href="simpledb/HeapPage.html" title="class in simpledb">HeapPage</a></dt>
-<dd>
-<div class="block">Marks this page as dirty/not dirty and record that transaction
- that did the dirtying</div>
-</dd>
-<dt><span class="memberNameLink"><a href="simpledb/Page.html#markDirty-boolean-simpledb.TransactionId-">markDirty(boolean, TransactionId)</a></span> - Method in interface simpledb.<a href="simpledb/Page.html" title="interface in simpledb">Page</a></dt>
-<dd>
-<div class="block">Set the dirty state of this page as dirtied by a particular transaction</div>
-</dd>
-<dt><span class="memberNameLink"><a href="simpledb/HeapPage.html#markSlotUsed-int-boolean-">markSlotUsed(int, boolean)</a></span> - Method in class simpledb.<a href="simpledb/HeapPage.html" title="class in simpledb">HeapPage</a></dt>
-<dd>
-<div class="block">Abstraction to fill or clear a slot on this page.</div>
-</dd>
-<dt><span class="memberNameLink"><a href="simpledb/StringField.html#maxSize">maxSize</a></span> - Variable in class simpledb.<a href="simpledb/StringField.html" title="class in simpledb">StringField</a></dt>
-<dd>&nbsp;</dd>
-<dt><span class="memberNameLink"><a href="simpledb/TupleDesc.html#merge-simpledb.TupleDesc-simpledb.TupleDesc-">merge(TupleDesc, TupleDesc)</a></span> - Static method in class simpledb.<a href="simpledb/TupleDesc.html" title="class in simpledb">TupleDesc</a></dt>
-<dd>
-<div class="block">Merge two TupleDescs into one, with td1.numFields + td2.numFields fields,
- with the first td1.numFields coming from td1 and the remaining from td2.</div>
-</dd>
-<dt><span class="memberNameLink"><a href="simpledb/TransactionId.html#myid">myid</a></span> - Variable in class simpledb.<a href="simpledb/TransactionId.html" title="class in simpledb">TransactionId</a></dt>
-<dd>&nbsp;</dd>
-</dl>
-<a name="I:N">
-<!--   -->
-</a>
-<h2 class="title">N</h2>
-<dl>
-<dt><span class="memberNameLink"><a href="simpledb/DbFileIterator.html#next--">next()</a></span> - Method in interface simpledb.<a href="simpledb/DbFileIterator.html" title="interface in simpledb">DbFileIterator</a></dt>
-<dd>
-<div class="block">Gets the next tuple from the operator (typically implementing by reading
- from a child operator or an access method).</div>
-</dd>
-<dt><span class="memberNameLink"><a href="simpledb/DbIterator.html#next--">next()</a></span> - Method in interface simpledb.<a href="simpledb/DbIterator.html" title="interface in simpledb">DbIterator</a></dt>
-<dd>
-<div class="block">Returns the next tuple from the operator (typically implementing by reading
- from a child operator or an access method).</div>
-</dd>
-<dt><span class="memberNameLink"><a href="simpledb/SeqScan.html#next--">next()</a></span> - Method in class simpledb.<a href="simpledb/SeqScan.html" title="class in simpledb">SeqScan</a></dt>
-<dd>&nbsp;</dd>
-<dt><span class="memberNameLink"><a href="simpledb/TupleIterator.html#next--">next()</a></span> - Method in class simpledb.<a href="simpledb/TupleIterator.html" title="class in simpledb">TupleIterator</a></dt>
-<dd>&nbsp;</dd>
-<dt><span class="memberNameLink"><a href="simpledb/LogFile.html#NO_CHECKPOINT_ID">NO_CHECKPOINT_ID</a></span> - Static variable in class simpledb.<a href="simpledb/LogFile.html" title="class in simpledb">LogFile</a></dt>
-<dd>&nbsp;</dd>
-<dt><span class="memberNameLink"><a href="simpledb/TupleDesc.html#numFields--">numFields()</a></span> - Method in class simpledb.<a href="simpledb/TupleDesc.html" title="class in simpledb">TupleDesc</a></dt>
-<dd>&nbsp;</dd>
-<dt><span class="memberNameLink"><a href="simpledb/HeapFile.html#numPages--">numPages()</a></span> - Method in class simpledb.<a href="simpledb/HeapFile.html" title="class in simpledb">HeapFile</a></dt>
-<dd>
-<div class="block">Returns the number of pages in this HeapFile.</div>
-</dd>
-<dt><span class="memberNameLink"><a href="simpledb/HeapPage.html#numSlots">numSlots</a></span> - Variable in class simpledb.<a href="simpledb/HeapPage.html" title="class in simpledb">HeapPage</a></dt>
-<dd>&nbsp;</dd>
-</dl>
-<a name="I:O">
-<!--   -->
-</a>
-<h2 class="title">O</h2>
-<dl>
-<dt><span class="memberNameLink"><a href="simpledb/HeapPage.html#oldData">oldData</a></span> - Variable in class simpledb.<a href="simpledb/HeapPage.html" title="class in simpledb">HeapPage</a></dt>
-<dd>&nbsp;</dd>
-<dt><span class="memberNameLink"><a href="simpledb/HeapPage.html#oldDataLock">oldDataLock</a></span> - Variable in class simpledb.<a href="simpledb/HeapPage.html" title="class in simpledb">HeapPage</a></dt>
-<dd>&nbsp;</dd>
-<dt><span class="memberNameLink"><a href="simpledb/Predicate.Op.html#Op--">Op()</a></span> - Constructor for enum simpledb.<a href="simpledb/Predicate.Op.html" title="enum in simpledb">Predicate.Op</a></dt>
-<dd>&nbsp;</dd>
-<dt><span class="memberNameLink"><a href="simpledb/DbFileIterator.html#open--">open()</a></span> - Method in interface simpledb.<a href="simpledb/DbFileIterator.html" title="interface in simpledb">DbFileIterator</a></dt>
-<dd>
-<div class="block">Opens the iterator</div>
-</dd>
-<dt><span class="memberNameLink"><a href="simpledb/DbIterator.html#open--">open()</a></span> - Method in interface simpledb.<a href="simpledb/DbIterator.html" title="interface in simpledb">DbIterator</a></dt>
-<dd>
-<div class="block">Opens the iterator.</div>
-</dd>
-<dt><span class="memberNameLink"><a href="simpledb/SeqScan.html#open--">open()</a></span> - Method in class simpledb.<a href="simpledb/SeqScan.html" title="class in simpledb">SeqScan</a></dt>
-<dd>&nbsp;</dd>
-<dt><span class="memberNameLink"><a href="simpledb/TupleIterator.html#open--">open()</a></span> - Method in class simpledb.<a href="simpledb/TupleIterator.html" title="class in simpledb">TupleIterator</a></dt>
-<dd>&nbsp;</dd>
-<dt><span class="memberNameLink"><a href="simpledb/Utility.html#openHeapFile-int-java.io.File-">openHeapFile(int, File)</a></span> - Static method in class simpledb.<a href="simpledb/Utility.html" title="class in simpledb">Utility</a></dt>
-<dd>
-<div class="block">Opens a HeapFile and adds it to the catalog.</div>
-</dd>
-<dt><span class="memberNameLink"><a href="simpledb/Utility.html#openHeapFile-int-java.lang.String-java.io.File-">openHeapFile(int, String, File)</a></span> - Static method in class simpledb.<a href="simpledb/Utility.html" title="class in simpledb">Utility</a></dt>
-<dd>&nbsp;</dd>
-</dl>
-<a name="I:P">
-<!--   -->
-</a>
-<h2 class="title">P</h2>
-<dl>
-<dt><a href="simpledb/Page.html" title="interface in simpledb"><span class="typeNameLink">Page</span></a> - Interface in <a href="simpledb/package-summary.html">simpledb</a></dt>
-<dd>
-<div class="block">Page is the interface used to represent pages that are resident in the
- BufferPool.</div>
-</dd>
-<dt><span class="memberNameLink"><a href="simpledb/BufferPool.html#PAGE_SIZE">PAGE_SIZE</a></span> - Static variable in class simpledb.<a href="simpledb/BufferPool.html" title="class in simpledb">BufferPool</a></dt>
-<dd>
-<div class="block">Bytes per page, including header.</div>
-</dd>
-<dt><a href="simpledb/PageId.html" title="interface in simpledb"><span class="typeNameLink">PageId</span></a> - Interface in <a href="simpledb/package-summary.html">simpledb</a></dt>
-<dd>
-<div class="block">PageId is an interface to a specific page of a specific table.</div>
-</dd>
-<dt><span class="memberNameLink"><a href="simpledb/HeapPageId.html#pageNumber--">pageNumber()</a></span> - Method in class simpledb.<a href="simpledb/HeapPageId.html" title="class in simpledb">HeapPageId</a></dt>
-<dd>&nbsp;</dd>
-<dt><span class="memberNameLink"><a href="simpledb/PageId.html#pageNumber--">pageNumber()</a></span> - Method in interface simpledb.<a href="simpledb/PageId.html" title="interface in simpledb">PageId</a></dt>
-<dd>&nbsp;</dd>
-<dt><span class="memberNameLink"><a href="simpledb/BufferPool.html#pageSize">pageSize</a></span> - Static variable in class simpledb.<a href="simpledb/BufferPool.html" title="class in simpledb">BufferPool</a></dt>
-<dd>&nbsp;</dd>
-<dt><span class="memberNameLink"><a href="simpledb/Type.html#parse-java.io.DataInputStream-">parse(DataInputStream)</a></span> - Method in enum simpledb.<a href="simpledb/Type.html" title="enum in simpledb">Type</a></dt>
-<dd>&nbsp;</dd>
-<dt><a href="simpledb/Permissions.html" title="class in simpledb"><span class="typeNameLink">Permissions</span></a> - Class in <a href="simpledb/package-summary.html">simpledb</a></dt>
-<dd>
-<div class="block">Class representing requested permissions to a relation/file.</div>
-</dd>
-<dt><span class="memberNameLink"><a href="simpledb/Permissions.html#Permissions-int-">Permissions(int)</a></span> - Constructor for class simpledb.<a href="simpledb/Permissions.html" title="class in simpledb">Permissions</a></dt>
-<dd>&nbsp;</dd>
-<dt><span class="memberNameLink"><a href="simpledb/Permissions.html#permLevel">permLevel</a></span> - Variable in class simpledb.<a href="simpledb/Permissions.html" title="class in simpledb">Permissions</a></dt>
-<dd>&nbsp;</dd>
-<dt><span class="memberNameLink"><a href="simpledb/HeapPage.html#pid">pid</a></span> - Variable in class simpledb.<a href="simpledb/HeapPage.html" title="class in simpledb">HeapPage</a></dt>
-<dd>&nbsp;</dd>
-<dt><span class="memberNameLink"><a href="simpledb/LogFile.html#preAppend--">preAppend()</a></span> - Method in class simpledb.<a href="simpledb/LogFile.html" title="class in simpledb">LogFile</a></dt>
-<dd>&nbsp;</dd>
-<dt><a href="simpledb/Predicate.html" title="class in simpledb"><span class="typeNameLink">Predicate</span></a> - Class in <a href="simpledb/package-summary.html">simpledb</a></dt>
-<dd>
-<div class="block">Predicate compares tuples to a specified Field value.</div>
-</dd>
-<dt><span class="memberNameLink"><a href="simpledb/Predicate.html#Predicate-int-simpledb.Predicate.Op-simpledb.Field-">Predicate(int, Predicate.Op, Field)</a></span> - Constructor for class simpledb.<a href="simpledb/Predicate.html" title="class in simpledb">Predicate</a></dt>
-<dd>
-<div class="block">Constructor.</div>
-</dd>
-<dt><a href="simpledb/Predicate.Op.html" title="enum in simpledb"><span class="typeNameLink">Predicate.Op</span></a> - Enum in <a href="simpledb/package-summary.html">simpledb</a></dt>
-<dd>
-<div class="block">Constants used for return codes in Field.compare</div>
-</dd>
-<dt><span class="memberNameLink"><a href="simpledb/LogFile.html#print--">print()</a></span> - Method in class simpledb.<a href="simpledb/LogFile.html" title="class in simpledb">LogFile</a></dt>
-<dd>
-<div class="block">Print out a human readable represenation of the log</div>
-</dd>
-</dl>
-<a name="I:R">
-<!--   -->
-</a>
-<h2 class="title">R</h2>
-<dl>
-<dt><span class="memberNameLink"><a href="simpledb/LogFile.html#raf">raf</a></span> - Variable in class simpledb.<a href="simpledb/LogFile.html" title="class in simpledb">LogFile</a></dt>
-<dd>&nbsp;</dd>
-<dt><span class="memberNameLink"><a href="simpledb/Permissions.html#READ_ONLY">READ_ONLY</a></span> - Static variable in class simpledb.<a href="simpledb/Permissions.html" title="class in simpledb">Permissions</a></dt>
-<dd>&nbsp;</dd>
-<dt><span class="memberNameLink"><a href="simpledb/Permissions.html#READ_WRITE">READ_WRITE</a></span> - Static variable in class simpledb.<a href="simpledb/Permissions.html" title="class in simpledb">Permissions</a></dt>
-<dd>&nbsp;</dd>
-<dt><span class="memberNameLink"><a href="simpledb/HeapPage.html#readNextTuple-java.io.DataInputStream-int-">readNextTuple(DataInputStream, int)</a></span> - Method in class simpledb.<a href="simpledb/HeapPage.html" title="class in simpledb">HeapPage</a></dt>
-<dd>
-<div class="block">Suck up tuples from the source file.</div>
-</dd>
-<dt><span class="memberNameLink"><a href="simpledb/DbFile.html#readPage-simpledb.PageId-">readPage(PageId)</a></span> - Method in interface simpledb.<a href="simpledb/DbFile.html" title="interface in simpledb">DbFile</a></dt>
-<dd>
-<div class="block">Read the specified page from disk.</div>
-</dd>
-<dt><span class="memberNameLink"><a href="simpledb/HeapFile.html#readPage-simpledb.PageId-">readPage(PageId)</a></span> - Method in class simpledb.<a href="simpledb/HeapFile.html" title="class in simpledb">HeapFile</a></dt>
-<dd>&nbsp;</dd>
-<dt><span class="memberNameLink"><a href="simpledb/LogFile.html#readPageData-java.io.RandomAccessFile-">readPageData(RandomAccessFile)</a></span> - Method in class simpledb.<a href="simpledb/LogFile.html" title="class in simpledb">LogFile</a></dt>
-<dd>&nbsp;</dd>
-<dt><a href="simpledb/RecordId.html" title="class in simpledb"><span class="typeNameLink">RecordId</span></a> - Class in <a href="simpledb/package-summary.html">simpledb</a></dt>
-<dd>
-<div class="block">A RecordId is a reference to a specific tuple on a specific page of a
- specific table.</div>
-</dd>
-<dt><span class="memberNameLink"><a href="simpledb/RecordId.html#RecordId-simpledb.PageId-int-">RecordId(PageId, int)</a></span> - Constructor for class simpledb.<a href="simpledb/RecordId.html" title="class in simpledb">RecordId</a></dt>
-<dd>
-<div class="block">Creates a new RecordId referring to the specified PageId and tuple
- number.</div>
-</dd>
-<dt><span class="memberNameLink"><a href="simpledb/LogFile.html#recover--">recover()</a></span> - Method in class simpledb.<a href="simpledb/LogFile.html" title="class in simpledb">LogFile</a></dt>
-<dd>
-<div class="block">Recover the database system by ensuring that the updates of
-        committed transactions are installed and that the
-        updates of uncommitted transactions are not installed.</div>
-</dd>
-<dt><span class="memberNameLink"><a href="simpledb/LogFile.html#recoveryUndecided">recoveryUndecided</a></span> - Variable in class simpledb.<a href="simpledb/LogFile.html" title="class in simpledb">LogFile</a></dt>
-<dd>&nbsp;</dd>
-<dt><span class="memberNameLink"><a href="simpledb/BufferPool.html#releasePage-simpledb.TransactionId-simpledb.PageId-">releasePage(TransactionId, PageId)</a></span> - Method in class simpledb.<a href="simpledb/BufferPool.html" title="class in simpledb">BufferPool</a></dt>
-<dd>
-<div class="block">Releases the lock on a page.</div>
-</dd>
-<dt><span class="memberNameLink"><a href="simpledb/Database.html#reset--">reset()</a></span> - Static method in class simpledb.<a href="simpledb/Database.html" title="class in simpledb">Database</a></dt>
-<dd>&nbsp;</dd>
-<dt><span class="memberNameLink"><a href="simpledb/SeqScan.html#reset-int-java.lang.String-">reset(int, String)</a></span> - Method in class simpledb.<a href="simpledb/SeqScan.html" title="class in simpledb">SeqScan</a></dt>
-<dd>
-<div class="block">Reset the tableid, and tableAlias of this operator.</div>
-</dd>
-<dt><span class="memberNameLink"><a href="simpledb/Database.html#resetBufferPool-int-">resetBufferPool(int)</a></span> - Static method in class simpledb.<a href="simpledb/Database.html" title="class in simpledb">Database</a></dt>
-<dd>
-<div class="block">Method used for testing -- create a new instance of the buffer pool and
- return it</div>
-</dd>
-<dt><span class="memberNameLink"><a href="simpledb/BufferPool.html#resetPageSize--">resetPageSize()</a></span> - Static method in class simpledb.<a href="simpledb/BufferPool.html" title="class in simpledb">BufferPool</a></dt>
-<dd>&nbsp;</dd>
-<dt><span class="memberNameLink"><a href="simpledb/Tuple.html#resetTupleDesc-simpledb.TupleDesc-">resetTupleDesc(TupleDesc)</a></span> - Method in class simpledb.<a href="simpledb/Tuple.html" title="class in simpledb">Tuple</a></dt>
-<dd>
-<div class="block">reset the TupleDesc of thi tuple</div>
-</dd>
-<dt><span class="memberNameLink"><a href="simpledb/DbFileIterator.html#rewind--">rewind()</a></span> - Method in interface simpledb.<a href="simpledb/DbFileIterator.html" title="interface in simpledb">DbFileIterator</a></dt>
-<dd>
-<div class="block">Resets the iterator to the start.</div>
-</dd>
-<dt><span class="memberNameLink"><a href="simpledb/DbIterator.html#rewind--">rewind()</a></span> - Method in interface simpledb.<a href="simpledb/DbIterator.html" title="interface in simpledb">DbIterator</a></dt>
-<dd>
-<div class="block">Resets the iterator to the start.</div>
-</dd>
-<dt><span class="memberNameLink"><a href="simpledb/SeqScan.html#rewind--">rewind()</a></span> - Method in class simpledb.<a href="simpledb/SeqScan.html" title="class in simpledb">SeqScan</a></dt>
-<dd>&nbsp;</dd>
-<dt><span class="memberNameLink"><a href="simpledb/TupleIterator.html#rewind--">rewind()</a></span> - Method in class simpledb.<a href="simpledb/TupleIterator.html" title="class in simpledb">TupleIterator</a></dt>
-<dd>&nbsp;</dd>
-<dt><span class="memberNameLink"><a href="simpledb/LogFile.html#rollback-simpledb.TransactionId-">rollback(TransactionId)</a></span> - Method in class simpledb.<a href="simpledb/LogFile.html" title="class in simpledb">LogFile</a></dt>
-<dd>
-<div class="block">Rollback the specified transaction, setting the state of any
-        of pages it updated to their pre-updated state.</div>
-</dd>
-</dl>
-<a name="I:S">
-<!--   -->
-</a>
-<h2 class="title">S</h2>
-<dl>
-<dt><a href="simpledb/SeqScan.html" title="class in simpledb"><span class="typeNameLink">SeqScan</span></a> - Class in <a href="simpledb/package-summary.html">simpledb</a></dt>
-<dd>
-<div class="block">SeqScan is an implementation of a sequential scan access method that reads
- each tuple of a table in no particular order (e.g., as they are laid out on
- disk).</div>
-</dd>
-<dt><span class="memberNameLink"><a href="simpledb/SeqScan.html#SeqScan-simpledb.TransactionId-int-java.lang.String-">SeqScan(TransactionId, int, String)</a></span> - Constructor for class simpledb.<a href="simpledb/SeqScan.html" title="class in simpledb">SeqScan</a></dt>
-<dd>
-<div class="block">Creates a sequential scan over the specified table as a part of the
- specified transaction.</div>
-</dd>
-<dt><span class="memberNameLink"><a href="simpledb/SeqScan.html#SeqScan-simpledb.TransactionId-int-">SeqScan(TransactionId, int)</a></span> - Constructor for class simpledb.<a href="simpledb/SeqScan.html" title="class in simpledb">SeqScan</a></dt>
-<dd>&nbsp;</dd>
-<dt><span class="memberNameLink"><a href="simpledb/Field.html#serialize-java.io.DataOutputStream-">serialize(DataOutputStream)</a></span> - Method in interface simpledb.<a href="simpledb/Field.html" title="interface in simpledb">Field</a></dt>
-<dd>
-<div class="block">Write the bytes representing this field to the specified
- DataOutputStream.</div>
-</dd>
-<dt><span class="memberNameLink"><a href="simpledb/HeapPageId.html#serialize--">serialize()</a></span> - Method in class simpledb.<a href="simpledb/HeapPageId.html" title="class in simpledb">HeapPageId</a></dt>
-<dd>
-<div class="block">Return a representation of this object as an array of
-  integers, for writing to disk.</div>
-</dd>
-<dt><span class="memberNameLink"><a href="simpledb/IntField.html#serialize-java.io.DataOutputStream-">serialize(DataOutputStream)</a></span> - Method in class simpledb.<a href="simpledb/IntField.html" title="class in simpledb">IntField</a></dt>
-<dd>&nbsp;</dd>
-<dt><span class="memberNameLink"><a href="simpledb/PageId.html#serialize--">serialize()</a></span> - Method in interface simpledb.<a href="simpledb/PageId.html" title="interface in simpledb">PageId</a></dt>
-<dd>
-<div class="block">Return a representation of this page id object as a collection of
-        integers (used for logging)
-
-        This class MUST have a constructor that accepts n integer parameters,
-        where n is the number of integers returned in the array from serialize.</div>
-</dd>
-<dt><span class="memberNameLink"><a href="simpledb/StringField.html#serialize-java.io.DataOutputStream-">serialize(DataOutputStream)</a></span> - Method in class simpledb.<a href="simpledb/StringField.html" title="class in simpledb">StringField</a></dt>
-<dd>
-<div class="block">Write this string to dos.</div>
-</dd>
-<dt><span class="memberNameLink"><a href="simpledb/DbException.html#serialVersionUID">serialVersionUID</a></span> - Static variable in exception simpledb.<a href="simpledb/DbException.html" title="class in simpledb">DbException</a></dt>
-<dd>&nbsp;</dd>
-<dt><span class="memberNameLink"><a href="simpledb/IntField.html#serialVersionUID">serialVersionUID</a></span> - Static variable in class simpledb.<a href="simpledb/IntField.html" title="class in simpledb">IntField</a></dt>
-<dd>&nbsp;</dd>
-<dt><span class="memberNameLink"><a href="simpledb/Predicate.html#serialVersionUID">serialVersionUID</a></span> - Static variable in class simpledb.<a href="simpledb/Predicate.html" title="class in simpledb">Predicate</a></dt>
-<dd>&nbsp;</dd>
-<dt><span class="memberNameLink"><a href="simpledb/RecordId.html#serialVersionUID">serialVersionUID</a></span> - Static variable in class simpledb.<a href="simpledb/RecordId.html" title="class in simpledb">RecordId</a></dt>
-<dd>&nbsp;</dd>
-<dt><span class="memberNameLink"><a href="simpledb/SeqScan.html#serialVersionUID">serialVersionUID</a></span> - Static variable in class simpledb.<a href="simpledb/SeqScan.html" title="class in simpledb">SeqScan</a></dt>
-<dd>&nbsp;</dd>
-<dt><span class="memberNameLink"><a href="simpledb/StringField.html#serialVersionUID">serialVersionUID</a></span> - Static variable in class simpledb.<a href="simpledb/StringField.html" title="class in simpledb">StringField</a></dt>
-<dd>&nbsp;</dd>
-<dt><span class="memberNameLink"><a href="simpledb/TransactionAbortedException.html#serialVersionUID">serialVersionUID</a></span> - Static variable in exception simpledb.<a href="simpledb/TransactionAbortedException.html" title="class in simpledb">TransactionAbortedException</a></dt>
-<dd>&nbsp;</dd>
-<dt><span class="memberNameLink"><a href="simpledb/TransactionId.html#serialVersionUID">serialVersionUID</a></span> - Static variable in class simpledb.<a href="simpledb/TransactionId.html" title="class in simpledb">TransactionId</a></dt>
-<dd>&nbsp;</dd>
-<dt><span class="memberNameLink"><a href="simpledb/Tuple.html#serialVersionUID">serialVersionUID</a></span> - Static variable in class simpledb.<a href="simpledb/Tuple.html" title="class in simpledb">Tuple</a></dt>
-<dd>&nbsp;</dd>
-<dt><span class="memberNameLink"><a href="simpledb/TupleDesc.html#serialVersionUID">serialVersionUID</a></span> - Static variable in class simpledb.<a href="simpledb/TupleDesc.html" title="class in simpledb">TupleDesc</a></dt>
-<dd>&nbsp;</dd>
-<dt><span class="memberNameLink"><a href="simpledb/TupleDesc.TDItem.html#serialVersionUID">serialVersionUID</a></span> - Static variable in class simpledb.<a href="simpledb/TupleDesc.TDItem.html" title="class in simpledb">TupleDesc.TDItem</a></dt>
-<dd>&nbsp;</dd>
-<dt><span class="memberNameLink"><a href="simpledb/TupleIterator.html#serialVersionUID">serialVersionUID</a></span> - Static variable in class simpledb.<a href="simpledb/TupleIterator.html" title="class in simpledb">TupleIterator</a></dt>
-<dd>&nbsp;</dd>
-<dt><span class="memberNameLink"><a href="simpledb/HeapPage.html#setBeforeImage--">setBeforeImage()</a></span> - Method in class simpledb.<a href="simpledb/HeapPage.html" title="class in simpledb">HeapPage</a></dt>
-<dd>&nbsp;</dd>
-<dt><span class="memberNameLink"><a href="simpledb/Page.html#setBeforeImage--">setBeforeImage()</a></span> - Method in interface simpledb.<a href="simpledb/Page.html" title="interface in simpledb">Page</a></dt>
-<dd>&nbsp;</dd>
-<dt><span class="memberNameLink"><a href="simpledb/Tuple.html#setField-int-simpledb.Field-">setField(int, Field)</a></span> - Method in class simpledb.<a href="simpledb/Tuple.html" title="class in simpledb">Tuple</a></dt>
-<dd>
-<div class="block">Change the value of the ith field of this tuple.</div>
-</dd>
-<dt><span class="memberNameLink"><a href="simpledb/BufferPool.html#setPageSize-int-">setPageSize(int)</a></span> - Static method in class simpledb.<a href="simpledb/BufferPool.html" title="class in simpledb">BufferPool</a></dt>
-<dd>&nbsp;</dd>
-<dt><span class="memberNameLink"><a href="simpledb/Tuple.html#setRecordId-simpledb.RecordId-">setRecordId(RecordId)</a></span> - Method in class simpledb.<a href="simpledb/Tuple.html" title="class in simpledb">Tuple</a></dt>
-<dd>
-<div class="block">Set the RecordId information for this tuple.</div>
-</dd>
-<dt><span class="memberNameLink"><a href="simpledb/LogFile.html#shutdown--">shutdown()</a></span> - Method in class simpledb.<a href="simpledb/LogFile.html" title="class in simpledb">LogFile</a></dt>
-<dd>
-<div class="block">Shutdown the logging system, writing out whatever state
-        is necessary so that start up can happen quickly (without
-        extensive recovery.)</div>
-</dd>
-<dt><a href="simpledb/package-summary.html">simpledb</a> - package simpledb</dt>
-<dd>&nbsp;</dd>
-<dt><a href="simpledb/SimpleDb.html" title="class in simpledb"><span class="typeNameLink">SimpleDb</span></a> - Class in <a href="simpledb/package-summary.html">simpledb</a></dt>
-<dd>&nbsp;</dd>
-<dt><span class="memberNameLink"><a href="simpledb/SimpleDb.html#SimpleDb--">SimpleDb()</a></span> - Constructor for class simpledb.<a href="simpledb/SimpleDb.html" title="class in simpledb">SimpleDb</a></dt>
-<dd>&nbsp;</dd>
-<dt><span class="memberNameLink"><a href="simpledb/Type.html#STRING_LEN">STRING_LEN</a></span> - Static variable in enum simpledb.<a href="simpledb/Type.html" title="enum in simpledb">Type</a></dt>
-<dd>&nbsp;</dd>
-<dt><a href="simpledb/StringField.html" title="class in simpledb"><span class="typeNameLink">StringField</span></a> - Class in <a href="simpledb/package-summary.html">simpledb</a></dt>
-<dd>
-<div class="block">Instance of Field that stores a single String of a fixed length.</div>
-</dd>
-<dt><span class="memberNameLink"><a href="simpledb/StringField.html#StringField-java.lang.String-int-">StringField(String, int)</a></span> - Constructor for class simpledb.<a href="simpledb/StringField.html" title="class in simpledb">StringField</a></dt>
-<dd>
-<div class="block">Constructor.</div>
-</dd>
-</dl>
-<a name="I:T">
-<!--   -->
-</a>
-<h2 class="title">T</h2>
-<dl>
-<dt><span class="memberNameLink"><a href="simpledb/Catalog.html#tableIdIterator--">tableIdIterator()</a></span> - Method in class simpledb.<a href="simpledb/Catalog.html" title="class in simpledb">Catalog</a></dt>
-<dd>&nbsp;</dd>
-<dt><span class="memberNameLink"><a href="simpledb/HeapPage.html#td">td</a></span> - Variable in class simpledb.<a href="simpledb/HeapPage.html" title="class in simpledb">HeapPage</a></dt>
-<dd>&nbsp;</dd>
-<dt><span class="memberNameLink"><a href="simpledb/TupleIterator.html#td">td</a></span> - Variable in class simpledb.<a href="simpledb/TupleIterator.html" title="class in simpledb">TupleIterator</a></dt>
-<dd>&nbsp;</dd>
-<dt><span class="memberNameLink"><a href="simpledb/TupleDesc.TDItem.html#TDItem-simpledb.Type-java.lang.String-">TDItem(Type, String)</a></span> - Constructor for class simpledb.<a href="simpledb/TupleDesc.TDItem.html" title="class in simpledb">TupleDesc.TDItem</a></dt>
-<dd>&nbsp;</dd>
-<dt><span class="memberNameLink"><a href="simpledb/LogFile.html#tidToFirstLogRecord">tidToFirstLogRecord</a></span> - Variable in class simpledb.<a href="simpledb/LogFile.html" title="class in simpledb">LogFile</a></dt>
-<dd>&nbsp;</dd>
-<dt><span class="memberNameLink"><a href="simpledb/Field.html#toString--">toString()</a></span> - Method in interface simpledb.<a href="simpledb/Field.html" title="interface in simpledb">Field</a></dt>
-<dd>&nbsp;</dd>
-<dt><span class="memberNameLink"><a href="simpledb/IntField.html#toString--">toString()</a></span> - Method in class simpledb.<a href="simpledb/IntField.html" title="class in simpledb">IntField</a></dt>
-<dd>&nbsp;</dd>
-<dt><span class="memberNameLink"><a href="simpledb/Permissions.html#toString--">toString()</a></span> - Method in class simpledb.<a href="simpledb/Permissions.html" title="class in simpledb">Permissions</a></dt>
-<dd>&nbsp;</dd>
-<dt><span class="memberNameLink"><a href="simpledb/Predicate.Op.html#toString--">toString()</a></span> - Method in enum simpledb.<a href="simpledb/Predicate.Op.html" title="enum in simpledb">Predicate.Op</a></dt>
-<dd>&nbsp;</dd>
-<dt><span class="memberNameLink"><a href="simpledb/Predicate.html#toString--">toString()</a></span> - Method in class simpledb.<a href="simpledb/Predicate.html" title="class in simpledb">Predicate</a></dt>
-<dd>
-<div class="block">Returns something useful, like "f = field_id op = op_string operand =
- operand_string</div>
-</dd>
-<dt><span class="memberNameLink"><a href="simpledb/StringField.html#toString--">toString()</a></span> - Method in class simpledb.<a href="simpledb/StringField.html" title="class in simpledb">StringField</a></dt>
-<dd>&nbsp;</dd>
-<dt><span class="memberNameLink"><a href="simpledb/Tuple.html#toString--">toString()</a></span> - Method in class simpledb.<a href="simpledb/Tuple.html" title="class in simpledb">Tuple</a></dt>
-<dd>
-<div class="block">Returns the contents of this Tuple as a string.</div>
-</dd>
-<dt><span class="memberNameLink"><a href="simpledb/TupleDesc.TDItem.html#toString--">toString()</a></span> - Method in class simpledb.<a href="simpledb/TupleDesc.TDItem.html" title="class in simpledb">TupleDesc.TDItem</a></dt>
-<dd>&nbsp;</dd>
-<dt><span class="memberNameLink"><a href="simpledb/TupleDesc.html#toString--">toString()</a></span> - Method in class simpledb.<a href="simpledb/TupleDesc.html" title="class in simpledb">TupleDesc</a></dt>
-<dd>
-<div class="block">Returns a String describing this descriptor.</div>
-</dd>
-<dt><span class="memberNameLink"><a href="simpledb/LogFile.html#totalRecords">totalRecords</a></span> - Variable in class simpledb.<a href="simpledb/LogFile.html" title="class in simpledb">LogFile</a></dt>
-<dd>&nbsp;</dd>
-<dt><a href="simpledb/TransactionAbortedException.html" title="class in simpledb"><span class="typeNameLink">TransactionAbortedException</span></a> - Exception in <a href="simpledb/package-summary.html">simpledb</a></dt>
-<dd>
-<div class="block">Exception that is thrown when a transaction has aborted.</div>
-</dd>
-<dt><span class="memberNameLink"><a href="simpledb/TransactionAbortedException.html#TransactionAbortedException--">TransactionAbortedException()</a></span> - Constructor for exception simpledb.<a href="simpledb/TransactionAbortedException.html" title="class in simpledb">TransactionAbortedException</a></dt>
-<dd>&nbsp;</dd>
-<dt><span class="memberNameLink"><a href="simpledb/BufferPool.html#transactionComplete-simpledb.TransactionId-">transactionComplete(TransactionId)</a></span> - Method in class simpledb.<a href="simpledb/BufferPool.html" title="class in simpledb">BufferPool</a></dt>
-<dd>
-<div class="block">Release all locks associated with a given transaction.</div>
-</dd>
-<dt><span class="memberNameLink"><a href="simpledb/BufferPool.html#transactionComplete-simpledb.TransactionId-boolean-">transactionComplete(TransactionId, boolean)</a></span> - Method in class simpledb.<a href="simpledb/BufferPool.html" title="class in simpledb">BufferPool</a></dt>
-<dd>
-<div class="block">Commit or abort a given transaction; release all locks associated to
- the transaction.</div>
-</dd>
-<dt><a href="simpledb/TransactionId.html" title="class in simpledb"><span class="typeNameLink">TransactionId</span></a> - Class in <a href="simpledb/package-summary.html">simpledb</a></dt>
-<dd>
-<div class="block">TransactionId is a class that contains the identifier of a transaction.</div>
-</dd>
-<dt><span class="memberNameLink"><a href="simpledb/TransactionId.html#TransactionId--">TransactionId()</a></span> - Constructor for class simpledb.<a href="simpledb/TransactionId.html" title="class in simpledb">TransactionId</a></dt>
-<dd>&nbsp;</dd>
-<dt><a href="simpledb/Tuple.html" title="class in simpledb"><span class="typeNameLink">Tuple</span></a> - Class in <a href="simpledb/package-summary.html">simpledb</a></dt>
-<dd>
-<div class="block">Tuple maintains information about the contents of a tuple.</div>
-</dd>
-<dt><span class="memberNameLink"><a href="simpledb/Tuple.html#Tuple-simpledb.TupleDesc-">Tuple(TupleDesc)</a></span> - Constructor for class simpledb.<a href="simpledb/Tuple.html" title="class in simpledb">Tuple</a></dt>
-<dd>
-<div class="block">Create a new tuple with the specified schema (type).</div>
-</dd>
-<dt><a href="simpledb/TupleDesc.html" title="class in simpledb"><span class="typeNameLink">TupleDesc</span></a> - Class in <a href="simpledb/package-summary.html">simpledb</a></dt>
-<dd>
-<div class="block">TupleDesc describes the schema of a tuple.</div>
-</dd>
-<dt><span class="memberNameLink"><a href="simpledb/TupleDesc.html#TupleDesc-simpledb.Type:A-java.lang.String:A-">TupleDesc(Type[], String[])</a></span> - Constructor for class simpledb.<a href="simpledb/TupleDesc.html" title="class in simpledb">TupleDesc</a></dt>
-<dd>
-<div class="block">Create a new TupleDesc with typeAr.length fields with fields of the
- specified types, with associated named fields.</div>
-</dd>
-<dt><span class="memberNameLink"><a href="simpledb/TupleDesc.html#TupleDesc-simpledb.Type:A-">TupleDesc(Type[])</a></span> - Constructor for class simpledb.<a href="simpledb/TupleDesc.html" title="class in simpledb">TupleDesc</a></dt>
-<dd>
-<div class="block">Constructor.</div>
-</dd>
-<dt><a href="simpledb/TupleDesc.TDItem.html" title="class in simpledb"><span class="typeNameLink">TupleDesc.TDItem</span></a> - Class in <a href="simpledb/package-summary.html">simpledb</a></dt>
-<dd>
-<div class="block">A help class to facilitate organizing the information of each field</div>
-</dd>
-<dt><a href="simpledb/TupleIterator.html" title="class in simpledb"><span class="typeNameLink">TupleIterator</span></a> - Class in <a href="simpledb/package-summary.html">simpledb</a></dt>
-<dd>
-<div class="block">Implements a DbIterator by wrapping an Iterable<Tuple>.</div>
-</dd>
-<dt><span class="memberNameLink"><a href="simpledb/TupleIterator.html#TupleIterator-simpledb.TupleDesc-java.lang.Iterable-">TupleIterator(TupleDesc, Iterable&lt;Tuple&gt;)</a></span> - Constructor for class simpledb.<a href="simpledb/TupleIterator.html" title="class in simpledb">TupleIterator</a></dt>
-<dd>
-<div class="block">Constructs an iterator from the specified Iterable, and the specified
- descriptor.</div>
-</dd>
-<dt><span class="memberNameLink"><a href="simpledb/RecordId.html#tupleno--">tupleno()</a></span> - Method in class simpledb.<a href="simpledb/RecordId.html" title="class in simpledb">RecordId</a></dt>
-<dd>&nbsp;</dd>
-<dt><span class="memberNameLink"><a href="simpledb/HeapPage.html#tuples">tuples</a></span> - Variable in class simpledb.<a href="simpledb/HeapPage.html" title="class in simpledb">HeapPage</a></dt>
-<dd>&nbsp;</dd>
-<dt><span class="memberNameLink"><a href="simpledb/TupleIterator.html#tuples">tuples</a></span> - Variable in class simpledb.<a href="simpledb/TupleIterator.html" title="class in simpledb">TupleIterator</a></dt>
-<dd>&nbsp;</dd>
-<dt><a href="simpledb/Type.html" title="enum in simpledb"><span class="typeNameLink">Type</span></a> - Enum in <a href="simpledb/package-summary.html">simpledb</a></dt>
-<dd>
-<div class="block">Class representing a type in SimpleDB.</div>
-</dd>
-<dt><span class="memberNameLink"><a href="simpledb/Type.html#Type--">Type()</a></span> - Constructor for enum simpledb.<a href="simpledb/Type.html" title="enum in simpledb">Type</a></dt>
-<dd>&nbsp;</dd>
-</dl>
-<a name="I:U">
-<!--   -->
-</a>
-<h2 class="title">U</h2>
-<dl>
-<dt><span class="memberNameLink"><a href="simpledb/LogFile.html#UPDATE_RECORD">UPDATE_RECORD</a></span> - Static variable in class simpledb.<a href="simpledb/LogFile.html" title="class in simpledb">LogFile</a></dt>
-<dd>&nbsp;</dd>
-<dt><a href="simpledb/Utility.html" title="class in simpledb"><span class="typeNameLink">Utility</span></a> - Class in <a href="simpledb/package-summary.html">simpledb</a></dt>
-<dd>
-<div class="block">Helper methods used for testing and implementing random features.</div>
-</dd>
-<dt><span class="memberNameLink"><a href="simpledb/Utility.html#Utility--">Utility()</a></span> - Constructor for class simpledb.<a href="simpledb/Utility.html" title="class in simpledb">Utility</a></dt>
-<dd>&nbsp;</dd>
-</dl>
-<a name="I:V">
-<!--   -->
-</a>
-<h2 class="title">V</h2>
-<dl>
-<dt><span class="memberNameLink"><a href="simpledb/IntField.html#value">value</a></span> - Variable in class simpledb.<a href="simpledb/IntField.html" title="class in simpledb">IntField</a></dt>
-<dd>&nbsp;</dd>
-<dt><span class="memberNameLink"><a href="simpledb/StringField.html#value">value</a></span> - Variable in class simpledb.<a href="simpledb/StringField.html" title="class in simpledb">StringField</a></dt>
-<dd>&nbsp;</dd>
-<dt><span class="memberNameLink"><a href="simpledb/Predicate.Op.html#valueOf-java.lang.String-">valueOf(String)</a></span> - Static method in enum simpledb.<a href="simpledb/Predicate.Op.html" title="enum in simpledb">Predicate.Op</a></dt>
-<dd>
-<div class="block">Returns the enum constant of this type with the specified name.</div>
-</dd>
-<dt><span class="memberNameLink"><a href="simpledb/Type.html#valueOf-java.lang.String-">valueOf(String)</a></span> - Static method in enum simpledb.<a href="simpledb/Type.html" title="enum in simpledb">Type</a></dt>
-<dd>
-<div class="block">Returns the enum constant of this type with the specified name.</div>
-</dd>
-<dt><span class="memberNameLink"><a href="simpledb/Predicate.Op.html#values--">values()</a></span> - Static method in enum simpledb.<a href="simpledb/Predicate.Op.html" title="enum in simpledb">Predicate.Op</a></dt>
-<dd>
-<div class="block">Returns an array containing the constants of this enum type, in
-the order they are declared.</div>
-</dd>
-<dt><span class="memberNameLink"><a href="simpledb/Type.html#values--">values()</a></span> - Static method in enum simpledb.<a href="simpledb/Type.html" title="enum in simpledb">Type</a></dt>
-<dd>
-<div class="block">Returns an array containing the constants of this enum type, in
-the order they are declared.</div>
-</dd>
-</dl>
-<a name="I:W">
-<!--   -->
-</a>
-<h2 class="title">W</h2>
-<dl>
-<dt><span class="memberNameLink"><a href="simpledb/DbFile.html#writePage-simpledb.Page-">writePage(Page)</a></span> - Method in interface simpledb.<a href="simpledb/DbFile.html" title="interface in simpledb">DbFile</a></dt>
-<dd>
-<div class="block">Push the specified page to disk.</div>
-</dd>
-<dt><span class="memberNameLink"><a href="simpledb/HeapFile.html#writePage-simpledb.Page-">writePage(Page)</a></span> - Method in class simpledb.<a href="simpledb/HeapFile.html" title="class in simpledb">HeapFile</a></dt>
-<dd>&nbsp;</dd>
-<dt><span class="memberNameLink"><a href="simpledb/LogFile.html#writePageData-java.io.RandomAccessFile-simpledb.Page-">writePageData(RandomAccessFile, Page)</a></span> - Method in class simpledb.<a href="simpledb/LogFile.html" title="class in simpledb">LogFile</a></dt>
-<dd>&nbsp;</dd>
-</dl>
-<a name="I:Z:Z_">
-<!--   -->
-</a>
-<h2 class="title">_</h2>
-<dl>
-<dt><span class="memberNameLink"><a href="simpledb/Database.html#Z:Z_bufferpool">_bufferpool</a></span> - Variable in class simpledb.<a href="simpledb/Database.html" title="class in simpledb">Database</a></dt>
-<dd>&nbsp;</dd>
-<dt><span class="memberNameLink"><a href="simpledb/Database.html#Z:Z_catalog">_catalog</a></span> - Variable in class simpledb.<a href="simpledb/Database.html" title="class in simpledb">Database</a></dt>
-<dd>&nbsp;</dd>
-<dt><span class="memberNameLink"><a href="simpledb/Database.html#Z:Z_instance">_instance</a></span> - Static variable in class simpledb.<a href="simpledb/Database.html" title="class in simpledb">Database</a></dt>
-<dd>&nbsp;</dd>
-<dt><span class="memberNameLink"><a href="simpledb/Database.html#Z:Z_logfile">_logfile</a></span> - Variable in class simpledb.<a href="simpledb/Database.html" title="class in simpledb">Database</a></dt>
-<dd>&nbsp;</dd>
-</dl>
-<a href="#I:A">A</a>&nbsp;<a href="#I:B">B</a>&nbsp;<a href="#I:C">C</a>&nbsp;<a href="#I:D">D</a>&nbsp;<a href="#I:E">E</a>&nbsp;<a href="#I:F">F</a>&nbsp;<a href="#I:G">G</a>&nbsp;<a href="#I:H">H</a>&nbsp;<a href="#I:I">I</a>&nbsp;<a href="#I:L">L</a>&nbsp;<a href="#I:M">M</a>&nbsp;<a href="#I:N">N</a>&nbsp;<a href="#I:O">O</a>&nbsp;<a href="#I:P">P</a>&nbsp;<a href="#I:R">R</a>&nbsp;<a href="#I:S">S</a>&nbsp;<a href="#I:T">T</a>&nbsp;<a href="#I:U">U</a>&nbsp;<a href="#I:V">V</a>&nbsp;<a href="#I:W">W</a>&nbsp;<a href="#I:Z:Z_">_</a>&nbsp;</div>
-<!-- ======= START OF BOTTOM NAVBAR ====== -->
-<div class="bottomNav"><a name="navbar.bottom">
-<!--   -->
-</a>
-<div class="skipNav"><a href="#skip.navbar.bottom" title="Skip navigation links">Skip navigation links</a></div>
-<a name="navbar.bottom.firstrow">
-<!--   -->
-</a>
-<ul class="navList" title="Navigation">
-<li><a href="simpledb/package-summary.html">Package</a></li>
-<li>Class</li>
-<li><a href="overview-tree.html">Tree</a></li>
-<li><a href="deprecated-list.html">Deprecated</a></li>
-<li class="navBarCell1Rev">Index</li>
-<li><a href="help-doc.html">Help</a></li>
-</ul>
-</div>
-<div class="subNav">
-<ul class="navList">
-<li>Prev</li>
-<li>Next</li>
-</ul>
-<ul class="navList">
-<li><a href="index.html?index-all.html" target="_top">Frames</a></li>
-<li><a href="index-all.html" target="_top">No&nbsp;Frames</a></li>
-</ul>
-<ul class="navList" id="allclasses_navbar_bottom">
-<li><a href="allclasses-noframe.html">All&nbsp;Classes</a></li>
-</ul>
-<div>
-<script type="text/javascript"><!--
-  allClassesLink = document.getElementById("allclasses_navbar_bottom");
-  if(window==top) {
-    allClassesLink.style.display = "block";
-  }
-  else {
-    allClassesLink.style.display = "none";
-  }
-  //-->
-</script>
-</div>
-<a name="skip.navbar.bottom">
-<!--   -->
-</a></div>
-<!-- ======== END OF BOTTOM NAVBAR ======= -->
-</body>
-</html>
diff -ruN lab1/javadoc/index.html lab3/javadoc/index.html
--- lab1/javadoc/index.html	2016-11-02 22:06:58.000000000 -0500
+++ lab3/javadoc/index.html	1969-12-31 18:00:00.000000000 -0600
@@ -1,71 +0,0 @@
-<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Frameset//EN" "http://www.w3.org/TR/html4/frameset.dtd">
-<!-- NewPage -->
-<html lang="en">
-<head>
-<!-- Generated by javadoc (1.8.0_25) on Thu Oct 27 13:16:24 CDT 2016 -->
-<title>Generated Documentation (Untitled)</title>
-<script type="text/javascript">
-    targetPage = "" + window.location.search;
-    if (targetPage != "" && targetPage != "undefined")
-        targetPage = targetPage.substring(1);
-    if (targetPage.indexOf(":") != -1 || (targetPage != "" && !validURL(targetPage)))
-        targetPage = "undefined";
-    function validURL(url) {
-        try {
-            url = decodeURIComponent(url);
-        }
-        catch (error) {
-            return false;
-        }
-        var pos = url.indexOf(".html");
-        if (pos == -1 || pos != url.length - 5)
-            return false;
-        var allowNumber = false;
-        var allowSep = false;
-        var seenDot = false;
-        for (var i = 0; i < url.length - 5; i++) {
-            var ch = url.charAt(i);
-            if ('a' <= ch && ch <= 'z' ||
-                    'A' <= ch && ch <= 'Z' ||
-                    ch == '$' ||
-                    ch == '_' ||
-                    ch.charCodeAt(0) > 127) {
-                allowNumber = true;
-                allowSep = true;
-            } else if ('0' <= ch && ch <= '9'
-                    || ch == '-') {
-                if (!allowNumber)
-                     return false;
-            } else if (ch == '/' || ch == '.') {
-                if (!allowSep)
-                    return false;
-                allowNumber = false;
-                allowSep = false;
-                if (ch == '.')
-                     seenDot = true;
-                if (ch == '/' && seenDot)
-                     return false;
-            } else {
-                return false;
-            }
-        }
-        return true;
-    }
-    function loadFrames() {
-        if (targetPage != "" && targetPage != "undefined")
-             top.classFrame.location = top.targetPage;
-    }
-</script>
-</head>
-<frameset cols="20%,80%" title="Documentation frame" onload="top.loadFrames()">
-<frame src="allclasses-frame.html" name="packageFrame" title="All classes and interfaces (except non-static nested types)">
-<frame src="simpledb/package-summary.html" name="classFrame" title="Package, class and interface descriptions" scrolling="yes">
-<noframes>
-<noscript>
-<div>JavaScript is disabled on your browser.</div>
-</noscript>
-<h2>Frame Alert</h2>
-<p>This document is designed to be viewed using the frames feature. If you see this message, you are using a non-frame-capable web client. Link to <a href="simpledb/package-summary.html">Non-frame version</a>.</p>
-</noframes>
-</frameset>
-</html>
diff -ruN lab1/javadoc/overview-tree.html lab3/javadoc/overview-tree.html
--- lab1/javadoc/overview-tree.html	2016-11-02 22:06:58.000000000 -0500
+++ lab3/javadoc/overview-tree.html	1969-12-31 18:00:00.000000000 -0600
@@ -1,190 +0,0 @@
-<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
-<!-- NewPage -->
-<html lang="en">
-<head>
-<!-- Generated by javadoc (1.8.0_25) on Thu Oct 27 13:16:24 CDT 2016 -->
-<title>Class Hierarchy</title>
-<meta name="date" content="2016-10-27">
-<link rel="stylesheet" type="text/css" href="stylesheet.css" title="Style">
-<script type="text/javascript" src="script.js"></script>
-</head>
-<body>
-<script type="text/javascript"><!--
-    try {
-        if (location.href.indexOf('is-external=true') == -1) {
-            parent.document.title="Class Hierarchy";
-        }
-    }
-    catch(err) {
-    }
-//-->
-</script>
-<noscript>
-<div>JavaScript is disabled on your browser.</div>
-</noscript>
-<!-- ========= START OF TOP NAVBAR ======= -->
-<div class="topNav"><a name="navbar.top">
-<!--   -->
-</a>
-<div class="skipNav"><a href="#skip.navbar.top" title="Skip navigation links">Skip navigation links</a></div>
-<a name="navbar.top.firstrow">
-<!--   -->
-</a>
-<ul class="navList" title="Navigation">
-<li><a href="simpledb/package-summary.html">Package</a></li>
-<li>Class</li>
-<li class="navBarCell1Rev">Tree</li>
-<li><a href="deprecated-list.html">Deprecated</a></li>
-<li><a href="index-all.html">Index</a></li>
-<li><a href="help-doc.html">Help</a></li>
-</ul>
-</div>
-<div class="subNav">
-<ul class="navList">
-<li>Prev</li>
-<li>Next</li>
-</ul>
-<ul class="navList">
-<li><a href="index.html?overview-tree.html" target="_top">Frames</a></li>
-<li><a href="overview-tree.html" target="_top">No&nbsp;Frames</a></li>
-</ul>
-<ul class="navList" id="allclasses_navbar_top">
-<li><a href="allclasses-noframe.html">All&nbsp;Classes</a></li>
-</ul>
-<div>
-<script type="text/javascript"><!--
-  allClassesLink = document.getElementById("allclasses_navbar_top");
-  if(window==top) {
-    allClassesLink.style.display = "block";
-  }
-  else {
-    allClassesLink.style.display = "none";
-  }
-  //-->
-</script>
-</div>
-<a name="skip.navbar.top">
-<!--   -->
-</a></div>
-<!-- ========= END OF TOP NAVBAR ========= -->
-<div class="header">
-<h1 class="title">Hierarchy For All Packages</h1>
-<span class="packageHierarchyLabel">Package Hierarchies:</span>
-<ul class="horizontal">
-<li><a href="simpledb/package-tree.html">simpledb</a></li>
-</ul>
-</div>
-<div class="contentContainer">
-<h2 title="Class Hierarchy">Class Hierarchy</h2>
-<ul>
-<li type="circle">java.lang.Object
-<ul>
-<li type="circle">simpledb.<a href="simpledb/BufferPool.html" title="class in simpledb"><span class="typeNameLink">BufferPool</span></a></li>
-<li type="circle">simpledb.<a href="simpledb/Catalog.html" title="class in simpledb"><span class="typeNameLink">Catalog</span></a></li>
-<li type="circle">simpledb.<a href="simpledb/Database.html" title="class in simpledb"><span class="typeNameLink">Database</span></a></li>
-<li type="circle">simpledb.<a href="simpledb/Debug.html" title="class in simpledb"><span class="typeNameLink">Debug</span></a></li>
-<li type="circle">simpledb.<a href="simpledb/HeapFile.html" title="class in simpledb"><span class="typeNameLink">HeapFile</span></a> (implements simpledb.<a href="simpledb/DbFile.html" title="interface in simpledb">DbFile</a>)</li>
-<li type="circle">simpledb.<a href="simpledb/HeapFileEncoder.html" title="class in simpledb"><span class="typeNameLink">HeapFileEncoder</span></a></li>
-<li type="circle">simpledb.<a href="simpledb/HeapPage.html" title="class in simpledb"><span class="typeNameLink">HeapPage</span></a> (implements simpledb.<a href="simpledb/Page.html" title="interface in simpledb">Page</a>)</li>
-<li type="circle">simpledb.<a href="simpledb/HeapPageId.html" title="class in simpledb"><span class="typeNameLink">HeapPageId</span></a> (implements simpledb.<a href="simpledb/PageId.html" title="interface in simpledb">PageId</a>)</li>
-<li type="circle">simpledb.<a href="simpledb/IntField.html" title="class in simpledb"><span class="typeNameLink">IntField</span></a> (implements simpledb.<a href="simpledb/Field.html" title="interface in simpledb">Field</a>)</li>
-<li type="circle">simpledb.<a href="simpledb/LogFile.html" title="class in simpledb"><span class="typeNameLink">LogFile</span></a></li>
-<li type="circle">simpledb.<a href="simpledb/Permissions.html" title="class in simpledb"><span class="typeNameLink">Permissions</span></a></li>
-<li type="circle">simpledb.<a href="simpledb/Predicate.html" title="class in simpledb"><span class="typeNameLink">Predicate</span></a> (implements java.io.Serializable)</li>
-<li type="circle">simpledb.<a href="simpledb/RecordId.html" title="class in simpledb"><span class="typeNameLink">RecordId</span></a> (implements java.io.Serializable)</li>
-<li type="circle">simpledb.<a href="simpledb/SeqScan.html" title="class in simpledb"><span class="typeNameLink">SeqScan</span></a> (implements simpledb.<a href="simpledb/DbIterator.html" title="interface in simpledb">DbIterator</a>)</li>
-<li type="circle">simpledb.<a href="simpledb/SimpleDb.html" title="class in simpledb"><span class="typeNameLink">SimpleDb</span></a></li>
-<li type="circle">simpledb.<a href="simpledb/StringField.html" title="class in simpledb"><span class="typeNameLink">StringField</span></a> (implements simpledb.<a href="simpledb/Field.html" title="interface in simpledb">Field</a>)</li>
-<li type="circle">java.lang.Throwable (implements java.io.Serializable)
-<ul>
-<li type="circle">java.lang.Exception
-<ul>
-<li type="circle">simpledb.<a href="simpledb/DbException.html" title="class in simpledb"><span class="typeNameLink">DbException</span></a></li>
-<li type="circle">simpledb.<a href="simpledb/TransactionAbortedException.html" title="class in simpledb"><span class="typeNameLink">TransactionAbortedException</span></a></li>
-</ul>
-</li>
-</ul>
-</li>
-<li type="circle">simpledb.<a href="simpledb/TransactionId.html" title="class in simpledb"><span class="typeNameLink">TransactionId</span></a> (implements java.io.Serializable)</li>
-<li type="circle">simpledb.<a href="simpledb/Tuple.html" title="class in simpledb"><span class="typeNameLink">Tuple</span></a> (implements java.io.Serializable)</li>
-<li type="circle">simpledb.<a href="simpledb/TupleDesc.html" title="class in simpledb"><span class="typeNameLink">TupleDesc</span></a> (implements java.io.Serializable)</li>
-<li type="circle">simpledb.<a href="simpledb/TupleDesc.TDItem.html" title="class in simpledb"><span class="typeNameLink">TupleDesc.TDItem</span></a> (implements java.io.Serializable)</li>
-<li type="circle">simpledb.<a href="simpledb/TupleIterator.html" title="class in simpledb"><span class="typeNameLink">TupleIterator</span></a> (implements simpledb.<a href="simpledb/DbIterator.html" title="interface in simpledb">DbIterator</a>)</li>
-<li type="circle">simpledb.<a href="simpledb/Utility.html" title="class in simpledb"><span class="typeNameLink">Utility</span></a></li>
-</ul>
-</li>
-</ul>
-<h2 title="Interface Hierarchy">Interface Hierarchy</h2>
-<ul>
-<li type="circle">simpledb.<a href="simpledb/DbFile.html" title="interface in simpledb"><span class="typeNameLink">DbFile</span></a></li>
-<li type="circle">simpledb.<a href="simpledb/DbFileIterator.html" title="interface in simpledb"><span class="typeNameLink">DbFileIterator</span></a></li>
-<li type="circle">simpledb.<a href="simpledb/Page.html" title="interface in simpledb"><span class="typeNameLink">Page</span></a></li>
-<li type="circle">simpledb.<a href="simpledb/PageId.html" title="interface in simpledb"><span class="typeNameLink">PageId</span></a></li>
-<li type="circle">java.io.Serializable
-<ul>
-<li type="circle">simpledb.<a href="simpledb/DbIterator.html" title="interface in simpledb"><span class="typeNameLink">DbIterator</span></a></li>
-<li type="circle">simpledb.<a href="simpledb/Field.html" title="interface in simpledb"><span class="typeNameLink">Field</span></a></li>
-</ul>
-</li>
-</ul>
-<h2 title="Enum Hierarchy">Enum Hierarchy</h2>
-<ul>
-<li type="circle">java.lang.Object
-<ul>
-<li type="circle">java.lang.Enum&lt;E&gt; (implements java.lang.Comparable&lt;T&gt;, java.io.Serializable)
-<ul>
-<li type="circle">simpledb.<a href="simpledb/Predicate.Op.html" title="enum in simpledb"><span class="typeNameLink">Predicate.Op</span></a> (implements java.io.Serializable)</li>
-<li type="circle">simpledb.<a href="simpledb/Type.html" title="enum in simpledb"><span class="typeNameLink">Type</span></a> (implements java.io.Serializable)</li>
-</ul>
-</li>
-</ul>
-</li>
-</ul>
-</div>
-<!-- ======= START OF BOTTOM NAVBAR ====== -->
-<div class="bottomNav"><a name="navbar.bottom">
-<!--   -->
-</a>
-<div class="skipNav"><a href="#skip.navbar.bottom" title="Skip navigation links">Skip navigation links</a></div>
-<a name="navbar.bottom.firstrow">
-<!--   -->
-</a>
-<ul class="navList" title="Navigation">
-<li><a href="simpledb/package-summary.html">Package</a></li>
-<li>Class</li>
-<li class="navBarCell1Rev">Tree</li>
-<li><a href="deprecated-list.html">Deprecated</a></li>
-<li><a href="index-all.html">Index</a></li>
-<li><a href="help-doc.html">Help</a></li>
-</ul>
-</div>
-<div class="subNav">
-<ul class="navList">
-<li>Prev</li>
-<li>Next</li>
-</ul>
-<ul class="navList">
-<li><a href="index.html?overview-tree.html" target="_top">Frames</a></li>
-<li><a href="overview-tree.html" target="_top">No&nbsp;Frames</a></li>
-</ul>
-<ul class="navList" id="allclasses_navbar_bottom">
-<li><a href="allclasses-noframe.html">All&nbsp;Classes</a></li>
-</ul>
-<div>
-<script type="text/javascript"><!--
-  allClassesLink = document.getElementById("allclasses_navbar_bottom");
-  if(window==top) {
-    allClassesLink.style.display = "block";
-  }
-  else {
-    allClassesLink.style.display = "none";
-  }
-  //-->
-</script>
-</div>
-<a name="skip.navbar.bottom">
-<!--   -->
-</a></div>
-<!-- ======== END OF BOTTOM NAVBAR ======= -->
-</body>
-</html>
diff -ruN lab1/javadoc/package-list lab3/javadoc/package-list
--- lab1/javadoc/package-list	2016-11-02 22:06:58.000000000 -0500
+++ lab3/javadoc/package-list	1969-12-31 18:00:00.000000000 -0600
@@ -1 +0,0 @@
-simpledb
diff -ruN lab1/javadoc/script.js lab3/javadoc/script.js
--- lab1/javadoc/script.js	2016-11-02 22:06:58.000000000 -0500
+++ lab3/javadoc/script.js	1969-12-31 18:00:00.000000000 -0600
@@ -1,30 +0,0 @@
-function show(type)
-{
-    count = 0;
-    for (var key in methods) {
-        var row = document.getElementById(key);
-        if ((methods[key] &  type) != 0) {
-            row.style.display = '';
-            row.className = (count++ % 2) ? rowColor : altColor;
-        }
-        else
-            row.style.display = 'none';
-    }
-    updateTabs(type);
-}
-
-function updateTabs(type)
-{
-    for (var value in tabs) {
-        var sNode = document.getElementById(tabs[value][0]);
-        var spanNode = sNode.firstChild;
-        if (value == type) {
-            sNode.className = activeTableTab;
-            spanNode.innerHTML = tabs[value][1];
-        }
-        else {
-            sNode.className = tableTab;
-            spanNode.innerHTML = "<a href=\"javascript:show("+ value + ");\">" + tabs[value][1] + "</a>";
-        }
-    }
-}
diff -ruN lab1/javadoc/serialized-form.html lab3/javadoc/serialized-form.html
--- lab1/javadoc/serialized-form.html	2016-11-02 22:06:58.000000000 -0500
+++ lab3/javadoc/serialized-form.html	1969-12-31 18:00:00.000000000 -0600
@@ -1,309 +0,0 @@
-<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
-<!-- NewPage -->
-<html lang="en">
-<head>
-<!-- Generated by javadoc (1.8.0_25) on Thu Oct 27 13:16:24 CDT 2016 -->
-<title>Serialized Form</title>
-<meta name="date" content="2016-10-27">
-<link rel="stylesheet" type="text/css" href="stylesheet.css" title="Style">
-<script type="text/javascript" src="script.js"></script>
-</head>
-<body>
-<script type="text/javascript"><!--
-    try {
-        if (location.href.indexOf('is-external=true') == -1) {
-            parent.document.title="Serialized Form";
-        }
-    }
-    catch(err) {
-    }
-//-->
-</script>
-<noscript>
-<div>JavaScript is disabled on your browser.</div>
-</noscript>
-<!-- ========= START OF TOP NAVBAR ======= -->
-<div class="topNav"><a name="navbar.top">
-<!--   -->
-</a>
-<div class="skipNav"><a href="#skip.navbar.top" title="Skip navigation links">Skip navigation links</a></div>
-<a name="navbar.top.firstrow">
-<!--   -->
-</a>
-<ul class="navList" title="Navigation">
-<li><a href="simpledb/package-summary.html">Package</a></li>
-<li>Class</li>
-<li><a href="overview-tree.html">Tree</a></li>
-<li><a href="deprecated-list.html">Deprecated</a></li>
-<li><a href="index-all.html">Index</a></li>
-<li><a href="help-doc.html">Help</a></li>
-</ul>
-</div>
-<div class="subNav">
-<ul class="navList">
-<li>Prev</li>
-<li>Next</li>
-</ul>
-<ul class="navList">
-<li><a href="index.html?serialized-form.html" target="_top">Frames</a></li>
-<li><a href="serialized-form.html" target="_top">No&nbsp;Frames</a></li>
-</ul>
-<ul class="navList" id="allclasses_navbar_top">
-<li><a href="allclasses-noframe.html">All&nbsp;Classes</a></li>
-</ul>
-<div>
-<script type="text/javascript"><!--
-  allClassesLink = document.getElementById("allclasses_navbar_top");
-  if(window==top) {
-    allClassesLink.style.display = "block";
-  }
-  else {
-    allClassesLink.style.display = "none";
-  }
-  //-->
-</script>
-</div>
-<a name="skip.navbar.top">
-<!--   -->
-</a></div>
-<!-- ========= END OF TOP NAVBAR ========= -->
-<div class="header">
-<h1 title="Serialized Form" class="title">Serialized Form</h1>
-</div>
-<div class="serializedFormContainer">
-<ul class="blockList">
-<li class="blockList">
-<h2 title="Package">Package&nbsp;simpledb</h2>
-<ul class="blockList">
-<li class="blockList"><a name="simpledb.DbException">
-<!--   -->
-</a>
-<h3>Class <a href="simpledb/DbException.html" title="class in simpledb">simpledb.DbException</a> extends java.lang.Exception implements Serializable</h3>
-<dl class="nameValue">
-<dt>serialVersionUID:</dt>
-<dd>1L</dd>
-</dl>
-</li>
-<li class="blockList"><a name="simpledb.IntField">
-<!--   -->
-</a>
-<h3>Class <a href="simpledb/IntField.html" title="class in simpledb">simpledb.IntField</a> extends java.lang.Object implements Serializable</h3>
-<dl class="nameValue">
-<dt>serialVersionUID:</dt>
-<dd>1L</dd>
-</dl>
-<ul class="blockList">
-<li class="blockList">
-<h3>Serialized Fields</h3>
-<ul class="blockList">
-<li class="blockListLast">
-<h4>value</h4>
-<pre>int value</pre>
-</li>
-</ul>
-</li>
-</ul>
-</li>
-<li class="blockList"><a name="simpledb.Predicate">
-<!--   -->
-</a>
-<h3>Class <a href="simpledb/Predicate.html" title="class in simpledb">simpledb.Predicate</a> extends java.lang.Object implements Serializable</h3>
-<dl class="nameValue">
-<dt>serialVersionUID:</dt>
-<dd>1L</dd>
-</dl>
-</li>
-<li class="blockList"><a name="simpledb.RecordId">
-<!--   -->
-</a>
-<h3>Class <a href="simpledb/RecordId.html" title="class in simpledb">simpledb.RecordId</a> extends java.lang.Object implements Serializable</h3>
-<dl class="nameValue">
-<dt>serialVersionUID:</dt>
-<dd>1L</dd>
-</dl>
-</li>
-<li class="blockList"><a name="simpledb.SeqScan">
-<!--   -->
-</a>
-<h3>Class <a href="simpledb/SeqScan.html" title="class in simpledb">simpledb.SeqScan</a> extends java.lang.Object implements Serializable</h3>
-<dl class="nameValue">
-<dt>serialVersionUID:</dt>
-<dd>1L</dd>
-</dl>
-</li>
-<li class="blockList"><a name="simpledb.StringField">
-<!--   -->
-</a>
-<h3>Class <a href="simpledb/StringField.html" title="class in simpledb">simpledb.StringField</a> extends java.lang.Object implements Serializable</h3>
-<dl class="nameValue">
-<dt>serialVersionUID:</dt>
-<dd>1L</dd>
-</dl>
-<ul class="blockList">
-<li class="blockList">
-<h3>Serialized Fields</h3>
-<ul class="blockList">
-<li class="blockList">
-<h4>value</h4>
-<pre>java.lang.String value</pre>
-</li>
-<li class="blockListLast">
-<h4>maxSize</h4>
-<pre>int maxSize</pre>
-</li>
-</ul>
-</li>
-</ul>
-</li>
-<li class="blockList"><a name="simpledb.TransactionAbortedException">
-<!--   -->
-</a>
-<h3>Class <a href="simpledb/TransactionAbortedException.html" title="class in simpledb">simpledb.TransactionAbortedException</a> extends java.lang.Exception implements Serializable</h3>
-<dl class="nameValue">
-<dt>serialVersionUID:</dt>
-<dd>1L</dd>
-</dl>
-</li>
-<li class="blockList"><a name="simpledb.TransactionId">
-<!--   -->
-</a>
-<h3>Class <a href="simpledb/TransactionId.html" title="class in simpledb">simpledb.TransactionId</a> extends java.lang.Object implements Serializable</h3>
-<dl class="nameValue">
-<dt>serialVersionUID:</dt>
-<dd>1L</dd>
-</dl>
-<ul class="blockList">
-<li class="blockList">
-<h3>Serialized Fields</h3>
-<ul class="blockList">
-<li class="blockListLast">
-<h4>myid</h4>
-<pre>long myid</pre>
-</li>
-</ul>
-</li>
-</ul>
-</li>
-<li class="blockList"><a name="simpledb.Tuple">
-<!--   -->
-</a>
-<h3>Class <a href="simpledb/Tuple.html" title="class in simpledb">simpledb.Tuple</a> extends java.lang.Object implements Serializable</h3>
-<dl class="nameValue">
-<dt>serialVersionUID:</dt>
-<dd>1L</dd>
-</dl>
-</li>
-<li class="blockList"><a name="simpledb.TupleDesc">
-<!--   -->
-</a>
-<h3>Class <a href="simpledb/TupleDesc.html" title="class in simpledb">simpledb.TupleDesc</a> extends java.lang.Object implements Serializable</h3>
-<dl class="nameValue">
-<dt>serialVersionUID:</dt>
-<dd>1L</dd>
-</dl>
-</li>
-<li class="blockList"><a name="simpledb.TupleDesc.TDItem">
-<!--   -->
-</a>
-<h3>Class <a href="simpledb/TupleDesc.TDItem.html" title="class in simpledb">simpledb.TupleDesc.TDItem</a> extends java.lang.Object implements Serializable</h3>
-<dl class="nameValue">
-<dt>serialVersionUID:</dt>
-<dd>1L</dd>
-</dl>
-<ul class="blockList">
-<li class="blockList">
-<h3>Serialized Fields</h3>
-<ul class="blockList">
-<li class="blockList">
-<h4>fieldType</h4>
-<pre><a href="simpledb/Type.html" title="enum in simpledb">Type</a> fieldType</pre>
-<div class="block">The type of the field</div>
-</li>
-<li class="blockListLast">
-<h4>fieldName</h4>
-<pre>java.lang.String fieldName</pre>
-<div class="block">The name of the field</div>
-</li>
-</ul>
-</li>
-</ul>
-</li>
-<li class="blockList"><a name="simpledb.TupleIterator">
-<!--   -->
-</a>
-<h3>Class <a href="simpledb/TupleIterator.html" title="class in simpledb">simpledb.TupleIterator</a> extends java.lang.Object implements Serializable</h3>
-<dl class="nameValue">
-<dt>serialVersionUID:</dt>
-<dd>1L</dd>
-</dl>
-<ul class="blockList">
-<li class="blockList">
-<h3>Serialized Fields</h3>
-<ul class="blockList">
-<li class="blockList">
-<h4>i</h4>
-<pre>java.util.Iterator&lt;E&gt; i</pre>
-</li>
-<li class="blockList">
-<h4>td</h4>
-<pre><a href="simpledb/TupleDesc.html" title="class in simpledb">TupleDesc</a> td</pre>
-</li>
-<li class="blockListLast">
-<h4>tuples</h4>
-<pre>java.lang.Iterable&lt;T&gt; tuples</pre>
-</li>
-</ul>
-</li>
-</ul>
-</li>
-</ul>
-</li>
-</ul>
-</div>
-<!-- ======= START OF BOTTOM NAVBAR ====== -->
-<div class="bottomNav"><a name="navbar.bottom">
-<!--   -->
-</a>
-<div class="skipNav"><a href="#skip.navbar.bottom" title="Skip navigation links">Skip navigation links</a></div>
-<a name="navbar.bottom.firstrow">
-<!--   -->
-</a>
-<ul class="navList" title="Navigation">
-<li><a href="simpledb/package-summary.html">Package</a></li>
-<li>Class</li>
-<li><a href="overview-tree.html">Tree</a></li>
-<li><a href="deprecated-list.html">Deprecated</a></li>
-<li><a href="index-all.html">Index</a></li>
-<li><a href="help-doc.html">Help</a></li>
-</ul>
-</div>
-<div class="subNav">
-<ul class="navList">
-<li>Prev</li>
-<li>Next</li>
-</ul>
-<ul class="navList">
-<li><a href="index.html?serialized-form.html" target="_top">Frames</a></li>
-<li><a href="serialized-form.html" target="_top">No&nbsp;Frames</a></li>
-</ul>
-<ul class="navList" id="allclasses_navbar_bottom">
-<li><a href="allclasses-noframe.html">All&nbsp;Classes</a></li>
-</ul>
-<div>
-<script type="text/javascript"><!--
-  allClassesLink = document.getElementById("allclasses_navbar_bottom");
-  if(window==top) {
-    allClassesLink.style.display = "block";
-  }
-  else {
-    allClassesLink.style.display = "none";
-  }
-  //-->
-</script>
-</div>
-<a name="skip.navbar.bottom">
-<!--   -->
-</a></div>
-<!-- ======== END OF BOTTOM NAVBAR ======= -->
-</body>
-</html>
diff -ruN lab1/javadoc/simpledb/BufferPool.html lab3/javadoc/simpledb/BufferPool.html
--- lab1/javadoc/simpledb/BufferPool.html	2016-11-02 22:06:58.000000000 -0500
+++ lab3/javadoc/simpledb/BufferPool.html	1969-12-31 18:00:00.000000000 -0600
@@ -1,708 +0,0 @@
-<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
-<!-- NewPage -->
-<html lang="en">
-<head>
-<!-- Generated by javadoc (1.8.0_25) on Thu Oct 27 13:16:23 CDT 2016 -->
-<title>BufferPool</title>
-<meta name="date" content="2016-10-27">
-<link rel="stylesheet" type="text/css" href="../stylesheet.css" title="Style">
-<script type="text/javascript" src="../script.js"></script>
-</head>
-<body>
-<script type="text/javascript"><!--
-    try {
-        if (location.href.indexOf('is-external=true') == -1) {
-            parent.document.title="BufferPool";
-        }
-    }
-    catch(err) {
-    }
-//-->
-var methods = {"i0":10,"i1":10,"i2":10,"i3":10,"i4":10,"i5":10,"i6":10,"i7":9,"i8":10,"i9":10,"i10":10,"i11":9,"i12":9,"i13":10,"i14":10};
-var tabs = {65535:["t0","All Methods"],1:["t1","Static Methods"],2:["t2","Instance Methods"],8:["t4","Concrete Methods"]};
-var altColor = "altColor";
-var rowColor = "rowColor";
-var tableTab = "tableTab";
-var activeTableTab = "activeTableTab";
-</script>
-<noscript>
-<div>JavaScript is disabled on your browser.</div>
-</noscript>
-<!-- ========= START OF TOP NAVBAR ======= -->
-<div class="topNav"><a name="navbar.top">
-<!--   -->
-</a>
-<div class="skipNav"><a href="#skip.navbar.top" title="Skip navigation links">Skip navigation links</a></div>
-<a name="navbar.top.firstrow">
-<!--   -->
-</a>
-<ul class="navList" title="Navigation">
-<li><a href="../simpledb/package-summary.html">Package</a></li>
-<li class="navBarCell1Rev">Class</li>
-<li><a href="package-tree.html">Tree</a></li>
-<li><a href="../deprecated-list.html">Deprecated</a></li>
-<li><a href="../index-all.html">Index</a></li>
-<li><a href="../help-doc.html">Help</a></li>
-</ul>
-</div>
-<div class="subNav">
-<ul class="navList">
-<li>Prev&nbsp;Class</li>
-<li><a href="../simpledb/Catalog.html" title="class in simpledb"><span class="typeNameLink">Next&nbsp;Class</span></a></li>
-</ul>
-<ul class="navList">
-<li><a href="../index.html?simpledb/BufferPool.html" target="_top">Frames</a></li>
-<li><a href="BufferPool.html" target="_top">No&nbsp;Frames</a></li>
-</ul>
-<ul class="navList" id="allclasses_navbar_top">
-<li><a href="../allclasses-noframe.html">All&nbsp;Classes</a></li>
-</ul>
-<div>
-<script type="text/javascript"><!--
-  allClassesLink = document.getElementById("allclasses_navbar_top");
-  if(window==top) {
-    allClassesLink.style.display = "block";
-  }
-  else {
-    allClassesLink.style.display = "none";
-  }
-  //-->
-</script>
-</div>
-<div>
-<ul class="subNavList">
-<li>Summary:&nbsp;</li>
-<li>Nested&nbsp;|&nbsp;</li>
-<li><a href="#field.summary">Field</a>&nbsp;|&nbsp;</li>
-<li><a href="#constructor.summary">Constr</a>&nbsp;|&nbsp;</li>
-<li><a href="#method.summary">Method</a></li>
-</ul>
-<ul class="subNavList">
-<li>Detail:&nbsp;</li>
-<li><a href="#field.detail">Field</a>&nbsp;|&nbsp;</li>
-<li><a href="#constructor.detail">Constr</a>&nbsp;|&nbsp;</li>
-<li><a href="#method.detail">Method</a></li>
-</ul>
-</div>
-<a name="skip.navbar.top">
-<!--   -->
-</a></div>
-<!-- ========= END OF TOP NAVBAR ========= -->
-<!-- ======== START OF CLASS DATA ======== -->
-<div class="header">
-<div class="subTitle">simpledb</div>
-<h2 title="Class BufferPool" class="title">Class BufferPool</h2>
-</div>
-<div class="contentContainer">
-<ul class="inheritance">
-<li>java.lang.Object</li>
-<li>
-<ul class="inheritance">
-<li>simpledb.BufferPool</li>
-</ul>
-</li>
-</ul>
-<div class="description">
-<ul class="blockList">
-<li class="blockList">
-<hr>
-<br>
-<pre>public class <span class="typeNameLabel">BufferPool</span>
-extends java.lang.Object</pre>
-<div class="block">BufferPool manages the reading and writing of pages into memory from
- disk. Access methods call into it to retrieve pages, and it fetches
- pages from the appropriate location.
- <p>
- The BufferPool is also responsible for locking;  when a transaction fetches
- a page, BufferPool checks that the transaction has the appropriate
- locks to read/write the page.</div>
-</li>
-</ul>
-</div>
-<div class="summary">
-<ul class="blockList">
-<li class="blockList">
-<!-- =========== FIELD SUMMARY =========== -->
-<ul class="blockList">
-<li class="blockList"><a name="field.summary">
-<!--   -->
-</a>
-<h3>Field Summary</h3>
-<table class="memberSummary" border="0" cellpadding="3" cellspacing="0" summary="Field Summary table, listing fields, and an explanation">
-<caption><span>Fields</span><span class="tabEnd">&nbsp;</span></caption>
-<tr>
-<th class="colFirst" scope="col">Modifier and Type</th>
-<th class="colLast" scope="col">Field and Description</th>
-</tr>
-<tr class="altColor">
-<td class="colFirst"><code>static int</code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/BufferPool.html#DEFAULT_PAGES">DEFAULT_PAGES</a></span></code>
-<div class="block">Default number of pages passed to the constructor.</div>
-</td>
-</tr>
-<tr class="rowColor">
-<td class="colFirst"><code>private static int</code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/BufferPool.html#PAGE_SIZE">PAGE_SIZE</a></span></code>
-<div class="block">Bytes per page, including header.</div>
-</td>
-</tr>
-<tr class="altColor">
-<td class="colFirst"><code>private static int</code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/BufferPool.html#pageSize">pageSize</a></span></code>&nbsp;</td>
-</tr>
-</table>
-</li>
-</ul>
-<!-- ======== CONSTRUCTOR SUMMARY ======== -->
-<ul class="blockList">
-<li class="blockList"><a name="constructor.summary">
-<!--   -->
-</a>
-<h3>Constructor Summary</h3>
-<table class="memberSummary" border="0" cellpadding="3" cellspacing="0" summary="Constructor Summary table, listing constructors, and an explanation">
-<caption><span>Constructors</span><span class="tabEnd">&nbsp;</span></caption>
-<tr>
-<th class="colOne" scope="col">Constructor and Description</th>
-</tr>
-<tr class="altColor">
-<td class="colOne"><code><span class="memberNameLink"><a href="../simpledb/BufferPool.html#BufferPool-int-">BufferPool</a></span>(int&nbsp;numPages)</code>
-<div class="block">Creates a BufferPool that caches up to numPages pages.</div>
-</td>
-</tr>
-</table>
-</li>
-</ul>
-<!-- ========== METHOD SUMMARY =========== -->
-<ul class="blockList">
-<li class="blockList"><a name="method.summary">
-<!--   -->
-</a>
-<h3>Method Summary</h3>
-<table class="memberSummary" border="0" cellpadding="3" cellspacing="0" summary="Method Summary table, listing methods, and an explanation">
-<caption><span id="t0" class="activeTableTab"><span>All Methods</span><span class="tabEnd">&nbsp;</span></span><span id="t1" class="tableTab"><span><a href="javascript:show(1);">Static Methods</a></span><span class="tabEnd">&nbsp;</span></span><span id="t2" class="tableTab"><span><a href="javascript:show(2);">Instance Methods</a></span><span class="tabEnd">&nbsp;</span></span><span id="t4" class="tableTab"><span><a href="javascript:show(8);">Concrete Methods</a></span><span class="tabEnd">&nbsp;</span></span></caption>
-<tr>
-<th class="colFirst" scope="col">Modifier and Type</th>
-<th class="colLast" scope="col">Method and Description</th>
-</tr>
-<tr id="i0" class="altColor">
-<td class="colFirst"><code>void</code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/BufferPool.html#deleteTuple-simpledb.TransactionId-simpledb.Tuple-">deleteTuple</a></span>(<a href="../simpledb/TransactionId.html" title="class in simpledb">TransactionId</a>&nbsp;tid,
-           <a href="../simpledb/Tuple.html" title="class in simpledb">Tuple</a>&nbsp;t)</code>
-<div class="block">Remove the specified tuple from the buffer pool.</div>
-</td>
-</tr>
-<tr id="i1" class="rowColor">
-<td class="colFirst"><code>void</code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/BufferPool.html#discardPage-simpledb.PageId-">discardPage</a></span>(<a href="../simpledb/PageId.html" title="interface in simpledb">PageId</a>&nbsp;pid)</code>
-<div class="block">Remove the specific page id from the buffer pool.</div>
-</td>
-</tr>
-<tr id="i2" class="altColor">
-<td class="colFirst"><code>private void</code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/BufferPool.html#evictPage--">evictPage</a></span>()</code>
-<div class="block">Discards a page from the buffer pool.</div>
-</td>
-</tr>
-<tr id="i3" class="rowColor">
-<td class="colFirst"><code>void</code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/BufferPool.html#flushAllPages--">flushAllPages</a></span>()</code>
-<div class="block">Flush all dirty pages to disk.</div>
-</td>
-</tr>
-<tr id="i4" class="altColor">
-<td class="colFirst"><code>private void</code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/BufferPool.html#flushPage-simpledb.PageId-">flushPage</a></span>(<a href="../simpledb/PageId.html" title="interface in simpledb">PageId</a>&nbsp;pid)</code>
-<div class="block">Flushes a certain page to disk</div>
-</td>
-</tr>
-<tr id="i5" class="rowColor">
-<td class="colFirst"><code>void</code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/BufferPool.html#flushPages-simpledb.TransactionId-">flushPages</a></span>(<a href="../simpledb/TransactionId.html" title="class in simpledb">TransactionId</a>&nbsp;tid)</code>
-<div class="block">Write all pages of the specified transaction to disk.</div>
-</td>
-</tr>
-<tr id="i6" class="altColor">
-<td class="colFirst"><code><a href="../simpledb/Page.html" title="interface in simpledb">Page</a></code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/BufferPool.html#getPage-simpledb.TransactionId-simpledb.PageId-simpledb.Permissions-">getPage</a></span>(<a href="../simpledb/TransactionId.html" title="class in simpledb">TransactionId</a>&nbsp;tid,
-       <a href="../simpledb/PageId.html" title="interface in simpledb">PageId</a>&nbsp;pid,
-       <a href="../simpledb/Permissions.html" title="class in simpledb">Permissions</a>&nbsp;perm)</code>
-<div class="block">Retrieve the specified page with the associated permissions.</div>
-</td>
-</tr>
-<tr id="i7" class="rowColor">
-<td class="colFirst"><code>static int</code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/BufferPool.html#getPageSize--">getPageSize</a></span>()</code>&nbsp;</td>
-</tr>
-<tr id="i8" class="altColor">
-<td class="colFirst"><code>boolean</code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/BufferPool.html#holdsLock-simpledb.TransactionId-simpledb.PageId-">holdsLock</a></span>(<a href="../simpledb/TransactionId.html" title="class in simpledb">TransactionId</a>&nbsp;tid,
-         <a href="../simpledb/PageId.html" title="interface in simpledb">PageId</a>&nbsp;p)</code>
-<div class="block">Return true if the specified transaction has a lock on the specified page</div>
-</td>
-</tr>
-<tr id="i9" class="rowColor">
-<td class="colFirst"><code>void</code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/BufferPool.html#insertTuple-simpledb.TransactionId-int-simpledb.Tuple-">insertTuple</a></span>(<a href="../simpledb/TransactionId.html" title="class in simpledb">TransactionId</a>&nbsp;tid,
-           int&nbsp;tableId,
-           <a href="../simpledb/Tuple.html" title="class in simpledb">Tuple</a>&nbsp;t)</code>
-<div class="block">Add a tuple to the specified table on behalf of transaction tid.</div>
-</td>
-</tr>
-<tr id="i10" class="altColor">
-<td class="colFirst"><code>void</code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/BufferPool.html#releasePage-simpledb.TransactionId-simpledb.PageId-">releasePage</a></span>(<a href="../simpledb/TransactionId.html" title="class in simpledb">TransactionId</a>&nbsp;tid,
-           <a href="../simpledb/PageId.html" title="interface in simpledb">PageId</a>&nbsp;pid)</code>
-<div class="block">Releases the lock on a page.</div>
-</td>
-</tr>
-<tr id="i11" class="rowColor">
-<td class="colFirst"><code>static void</code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/BufferPool.html#resetPageSize--">resetPageSize</a></span>()</code>&nbsp;</td>
-</tr>
-<tr id="i12" class="altColor">
-<td class="colFirst"><code>static void</code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/BufferPool.html#setPageSize-int-">setPageSize</a></span>(int&nbsp;pageSize)</code>&nbsp;</td>
-</tr>
-<tr id="i13" class="rowColor">
-<td class="colFirst"><code>void</code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/BufferPool.html#transactionComplete-simpledb.TransactionId-">transactionComplete</a></span>(<a href="../simpledb/TransactionId.html" title="class in simpledb">TransactionId</a>&nbsp;tid)</code>
-<div class="block">Release all locks associated with a given transaction.</div>
-</td>
-</tr>
-<tr id="i14" class="altColor">
-<td class="colFirst"><code>void</code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/BufferPool.html#transactionComplete-simpledb.TransactionId-boolean-">transactionComplete</a></span>(<a href="../simpledb/TransactionId.html" title="class in simpledb">TransactionId</a>&nbsp;tid,
-                   boolean&nbsp;commit)</code>
-<div class="block">Commit or abort a given transaction; release all locks associated to
- the transaction.</div>
-</td>
-</tr>
-</table>
-<ul class="blockList">
-<li class="blockList"><a name="methods.inherited.from.class.java.lang.Object">
-<!--   -->
-</a>
-<h3>Methods inherited from class&nbsp;java.lang.Object</h3>
-<code>clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait</code></li>
-</ul>
-</li>
-</ul>
-</li>
-</ul>
-</div>
-<div class="details">
-<ul class="blockList">
-<li class="blockList">
-<!-- ============ FIELD DETAIL =========== -->
-<ul class="blockList">
-<li class="blockList"><a name="field.detail">
-<!--   -->
-</a>
-<h3>Field Detail</h3>
-<a name="PAGE_SIZE">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>PAGE_SIZE</h4>
-<pre>private static final&nbsp;int PAGE_SIZE</pre>
-<div class="block">Bytes per page, including header.</div>
-<dl>
-<dt><span class="seeLabel">See Also:</span></dt>
-<dd><a href="../constant-values.html#simpledb.BufferPool.PAGE_SIZE">Constant Field Values</a></dd>
-</dl>
-</li>
-</ul>
-<a name="pageSize">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>pageSize</h4>
-<pre>private static&nbsp;int pageSize</pre>
-</li>
-</ul>
-<a name="DEFAULT_PAGES">
-<!--   -->
-</a>
-<ul class="blockListLast">
-<li class="blockList">
-<h4>DEFAULT_PAGES</h4>
-<pre>public static final&nbsp;int DEFAULT_PAGES</pre>
-<div class="block">Default number of pages passed to the constructor. This is used by
-    other classes. BufferPool should use the numPages argument to the
-    constructor instead.</div>
-<dl>
-<dt><span class="seeLabel">See Also:</span></dt>
-<dd><a href="../constant-values.html#simpledb.BufferPool.DEFAULT_PAGES">Constant Field Values</a></dd>
-</dl>
-</li>
-</ul>
-</li>
-</ul>
-<!-- ========= CONSTRUCTOR DETAIL ======== -->
-<ul class="blockList">
-<li class="blockList"><a name="constructor.detail">
-<!--   -->
-</a>
-<h3>Constructor Detail</h3>
-<a name="BufferPool-int-">
-<!--   -->
-</a>
-<ul class="blockListLast">
-<li class="blockList">
-<h4>BufferPool</h4>
-<pre>public&nbsp;BufferPool(int&nbsp;numPages)</pre>
-<div class="block">Creates a BufferPool that caches up to numPages pages.</div>
-<dl>
-<dt><span class="paramLabel">Parameters:</span></dt>
-<dd><code>numPages</code> - maximum number of pages in this buffer pool.</dd>
-</dl>
-</li>
-</ul>
-</li>
-</ul>
-<!-- ============ METHOD DETAIL ========== -->
-<ul class="blockList">
-<li class="blockList"><a name="method.detail">
-<!--   -->
-</a>
-<h3>Method Detail</h3>
-<a name="getPageSize--">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>getPageSize</h4>
-<pre>public static&nbsp;int&nbsp;getPageSize()</pre>
-</li>
-</ul>
-<a name="setPageSize-int-">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>setPageSize</h4>
-<pre>public static&nbsp;void&nbsp;setPageSize(int&nbsp;pageSize)</pre>
-</li>
-</ul>
-<a name="resetPageSize--">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>resetPageSize</h4>
-<pre>public static&nbsp;void&nbsp;resetPageSize()</pre>
-</li>
-</ul>
-<a name="getPage-simpledb.TransactionId-simpledb.PageId-simpledb.Permissions-">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>getPage</h4>
-<pre>public&nbsp;<a href="../simpledb/Page.html" title="interface in simpledb">Page</a>&nbsp;getPage(<a href="../simpledb/TransactionId.html" title="class in simpledb">TransactionId</a>&nbsp;tid,
-                    <a href="../simpledb/PageId.html" title="interface in simpledb">PageId</a>&nbsp;pid,
-                    <a href="../simpledb/Permissions.html" title="class in simpledb">Permissions</a>&nbsp;perm)
-             throws <a href="../simpledb/TransactionAbortedException.html" title="class in simpledb">TransactionAbortedException</a>,
-                    <a href="../simpledb/DbException.html" title="class in simpledb">DbException</a></pre>
-<div class="block">Retrieve the specified page with the associated permissions.
- Will acquire a lock and may block if that lock is held by another
- transaction.
- <p>
- The retrieved page should be looked up in the buffer pool.  If it
- is present, it should be returned.  If it is not present, it should
- be added to the buffer pool and returned.  If there is insufficient
- space in the buffer pool, an page should be evicted and the new page
- should be added in its place.</div>
-<dl>
-<dt><span class="paramLabel">Parameters:</span></dt>
-<dd><code>tid</code> - the ID of the transaction requesting the page</dd>
-<dd><code>pid</code> - the ID of the requested page</dd>
-<dd><code>perm</code> - the requested permissions on the page</dd>
-<dt><span class="throwsLabel">Throws:</span></dt>
-<dd><code><a href="../simpledb/TransactionAbortedException.html" title="class in simpledb">TransactionAbortedException</a></code></dd>
-<dd><code><a href="../simpledb/DbException.html" title="class in simpledb">DbException</a></code></dd>
-</dl>
-</li>
-</ul>
-<a name="releasePage-simpledb.TransactionId-simpledb.PageId-">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>releasePage</h4>
-<pre>public&nbsp;void&nbsp;releasePage(<a href="../simpledb/TransactionId.html" title="class in simpledb">TransactionId</a>&nbsp;tid,
-                        <a href="../simpledb/PageId.html" title="interface in simpledb">PageId</a>&nbsp;pid)</pre>
-<div class="block">Releases the lock on a page.
- Calling this is very risky, and may result in wrong behavior. Think hard
- about who needs to call this and why, and why they can run the risk of
- calling it.</div>
-<dl>
-<dt><span class="paramLabel">Parameters:</span></dt>
-<dd><code>tid</code> - the ID of the transaction requesting the unlock</dd>
-<dd><code>pid</code> - the ID of the page to unlock</dd>
-</dl>
-</li>
-</ul>
-<a name="transactionComplete-simpledb.TransactionId-">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>transactionComplete</h4>
-<pre>public&nbsp;void&nbsp;transactionComplete(<a href="../simpledb/TransactionId.html" title="class in simpledb">TransactionId</a>&nbsp;tid)
-                         throws java.io.IOException</pre>
-<div class="block">Release all locks associated with a given transaction.</div>
-<dl>
-<dt><span class="paramLabel">Parameters:</span></dt>
-<dd><code>tid</code> - the ID of the transaction requesting the unlock</dd>
-<dt><span class="throwsLabel">Throws:</span></dt>
-<dd><code>java.io.IOException</code></dd>
-</dl>
-</li>
-</ul>
-<a name="holdsLock-simpledb.TransactionId-simpledb.PageId-">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>holdsLock</h4>
-<pre>public&nbsp;boolean&nbsp;holdsLock(<a href="../simpledb/TransactionId.html" title="class in simpledb">TransactionId</a>&nbsp;tid,
-                         <a href="../simpledb/PageId.html" title="interface in simpledb">PageId</a>&nbsp;p)</pre>
-<div class="block">Return true if the specified transaction has a lock on the specified page</div>
-</li>
-</ul>
-<a name="transactionComplete-simpledb.TransactionId-boolean-">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>transactionComplete</h4>
-<pre>public&nbsp;void&nbsp;transactionComplete(<a href="../simpledb/TransactionId.html" title="class in simpledb">TransactionId</a>&nbsp;tid,
-                                boolean&nbsp;commit)
-                         throws java.io.IOException</pre>
-<div class="block">Commit or abort a given transaction; release all locks associated to
- the transaction.</div>
-<dl>
-<dt><span class="paramLabel">Parameters:</span></dt>
-<dd><code>tid</code> - the ID of the transaction requesting the unlock</dd>
-<dd><code>commit</code> - a flag indicating whether we should commit or abort</dd>
-<dt><span class="throwsLabel">Throws:</span></dt>
-<dd><code>java.io.IOException</code></dd>
-</dl>
-</li>
-</ul>
-<a name="insertTuple-simpledb.TransactionId-int-simpledb.Tuple-">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>insertTuple</h4>
-<pre>public&nbsp;void&nbsp;insertTuple(<a href="../simpledb/TransactionId.html" title="class in simpledb">TransactionId</a>&nbsp;tid,
-                        int&nbsp;tableId,
-                        <a href="../simpledb/Tuple.html" title="class in simpledb">Tuple</a>&nbsp;t)
-                 throws <a href="../simpledb/DbException.html" title="class in simpledb">DbException</a>,
-                        java.io.IOException,
-                        <a href="../simpledb/TransactionAbortedException.html" title="class in simpledb">TransactionAbortedException</a></pre>
-<div class="block">Add a tuple to the specified table on behalf of transaction tid.  Will
- acquire a write lock on the page the tuple is added to and any other 
- pages that are updated (Lock acquisition is not needed for lab2). 
- May block if the lock(s) cannot be acquired.
- 
- Marks any pages that were dirtied by the operation as dirty by calling
- their markDirty bit, and adds versions of any pages that have 
- been dirtied to the cache (replacing any existing versions of those pages) so 
- that future requests see up-to-date pages.</div>
-<dl>
-<dt><span class="paramLabel">Parameters:</span></dt>
-<dd><code>tid</code> - the transaction adding the tuple</dd>
-<dd><code>tableId</code> - the table to add the tuple to</dd>
-<dd><code>t</code> - the tuple to add</dd>
-<dt><span class="throwsLabel">Throws:</span></dt>
-<dd><code><a href="../simpledb/DbException.html" title="class in simpledb">DbException</a></code></dd>
-<dd><code>java.io.IOException</code></dd>
-<dd><code><a href="../simpledb/TransactionAbortedException.html" title="class in simpledb">TransactionAbortedException</a></code></dd>
-</dl>
-</li>
-</ul>
-<a name="deleteTuple-simpledb.TransactionId-simpledb.Tuple-">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>deleteTuple</h4>
-<pre>public&nbsp;void&nbsp;deleteTuple(<a href="../simpledb/TransactionId.html" title="class in simpledb">TransactionId</a>&nbsp;tid,
-                        <a href="../simpledb/Tuple.html" title="class in simpledb">Tuple</a>&nbsp;t)
-                 throws <a href="../simpledb/DbException.html" title="class in simpledb">DbException</a>,
-                        java.io.IOException,
-                        <a href="../simpledb/TransactionAbortedException.html" title="class in simpledb">TransactionAbortedException</a></pre>
-<div class="block">Remove the specified tuple from the buffer pool.
- Will acquire a write lock on the page the tuple is removed from and any
- other pages that are updated. May block if the lock(s) cannot be acquired.
-
- Marks any pages that were dirtied by the operation as dirty by calling
- their markDirty bit, and adds versions of any pages that have 
- been dirtied to the cache (replacing any existing versions of those pages) so 
- that future requests see up-to-date pages.</div>
-<dl>
-<dt><span class="paramLabel">Parameters:</span></dt>
-<dd><code>tid</code> - the transaction deleting the tuple.</dd>
-<dd><code>t</code> - the tuple to delete</dd>
-<dt><span class="throwsLabel">Throws:</span></dt>
-<dd><code><a href="../simpledb/DbException.html" title="class in simpledb">DbException</a></code></dd>
-<dd><code>java.io.IOException</code></dd>
-<dd><code><a href="../simpledb/TransactionAbortedException.html" title="class in simpledb">TransactionAbortedException</a></code></dd>
-</dl>
-</li>
-</ul>
-<a name="flushAllPages--">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>flushAllPages</h4>
-<pre>public&nbsp;void&nbsp;flushAllPages()
-                   throws java.io.IOException</pre>
-<div class="block">Flush all dirty pages to disk.
- NB: Be careful using this routine -- it writes dirty data to disk so will
-     break simpledb if running in NO STEAL mode.</div>
-<dl>
-<dt><span class="throwsLabel">Throws:</span></dt>
-<dd><code>java.io.IOException</code></dd>
-</dl>
-</li>
-</ul>
-<a name="discardPage-simpledb.PageId-">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>discardPage</h4>
-<pre>public&nbsp;void&nbsp;discardPage(<a href="../simpledb/PageId.html" title="interface in simpledb">PageId</a>&nbsp;pid)</pre>
-<div class="block">Remove the specific page id from the buffer pool.
-        Needed by the recovery manager to ensure that the
-        buffer pool doesn't keep a rolled back page in its
-        cache.
-        
-        Also used by B+ tree files to ensure that deleted pages
-        are removed from the cache so they can be reused safely</div>
-</li>
-</ul>
-<a name="flushPage-simpledb.PageId-">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>flushPage</h4>
-<pre>private&nbsp;void&nbsp;flushPage(<a href="../simpledb/PageId.html" title="interface in simpledb">PageId</a>&nbsp;pid)
-                throws java.io.IOException</pre>
-<div class="block">Flushes a certain page to disk</div>
-<dl>
-<dt><span class="paramLabel">Parameters:</span></dt>
-<dd><code>pid</code> - an ID indicating the page to flush</dd>
-<dt><span class="throwsLabel">Throws:</span></dt>
-<dd><code>java.io.IOException</code></dd>
-</dl>
-</li>
-</ul>
-<a name="flushPages-simpledb.TransactionId-">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>flushPages</h4>
-<pre>public&nbsp;void&nbsp;flushPages(<a href="../simpledb/TransactionId.html" title="class in simpledb">TransactionId</a>&nbsp;tid)
-                throws java.io.IOException</pre>
-<div class="block">Write all pages of the specified transaction to disk.</div>
-<dl>
-<dt><span class="throwsLabel">Throws:</span></dt>
-<dd><code>java.io.IOException</code></dd>
-</dl>
-</li>
-</ul>
-<a name="evictPage--">
-<!--   -->
-</a>
-<ul class="blockListLast">
-<li class="blockList">
-<h4>evictPage</h4>
-<pre>private&nbsp;void&nbsp;evictPage()
-                throws <a href="../simpledb/DbException.html" title="class in simpledb">DbException</a></pre>
-<div class="block">Discards a page from the buffer pool.
- Flushes the page to disk to ensure dirty pages are updated on disk.</div>
-<dl>
-<dt><span class="throwsLabel">Throws:</span></dt>
-<dd><code><a href="../simpledb/DbException.html" title="class in simpledb">DbException</a></code></dd>
-</dl>
-</li>
-</ul>
-</li>
-</ul>
-</li>
-</ul>
-</div>
-</div>
-<!-- ========= END OF CLASS DATA ========= -->
-<!-- ======= START OF BOTTOM NAVBAR ====== -->
-<div class="bottomNav"><a name="navbar.bottom">
-<!--   -->
-</a>
-<div class="skipNav"><a href="#skip.navbar.bottom" title="Skip navigation links">Skip navigation links</a></div>
-<a name="navbar.bottom.firstrow">
-<!--   -->
-</a>
-<ul class="navList" title="Navigation">
-<li><a href="../simpledb/package-summary.html">Package</a></li>
-<li class="navBarCell1Rev">Class</li>
-<li><a href="package-tree.html">Tree</a></li>
-<li><a href="../deprecated-list.html">Deprecated</a></li>
-<li><a href="../index-all.html">Index</a></li>
-<li><a href="../help-doc.html">Help</a></li>
-</ul>
-</div>
-<div class="subNav">
-<ul class="navList">
-<li>Prev&nbsp;Class</li>
-<li><a href="../simpledb/Catalog.html" title="class in simpledb"><span class="typeNameLink">Next&nbsp;Class</span></a></li>
-</ul>
-<ul class="navList">
-<li><a href="../index.html?simpledb/BufferPool.html" target="_top">Frames</a></li>
-<li><a href="BufferPool.html" target="_top">No&nbsp;Frames</a></li>
-</ul>
-<ul class="navList" id="allclasses_navbar_bottom">
-<li><a href="../allclasses-noframe.html">All&nbsp;Classes</a></li>
-</ul>
-<div>
-<script type="text/javascript"><!--
-  allClassesLink = document.getElementById("allclasses_navbar_bottom");
-  if(window==top) {
-    allClassesLink.style.display = "block";
-  }
-  else {
-    allClassesLink.style.display = "none";
-  }
-  //-->
-</script>
-</div>
-<div>
-<ul class="subNavList">
-<li>Summary:&nbsp;</li>
-<li>Nested&nbsp;|&nbsp;</li>
-<li><a href="#field.summary">Field</a>&nbsp;|&nbsp;</li>
-<li><a href="#constructor.summary">Constr</a>&nbsp;|&nbsp;</li>
-<li><a href="#method.summary">Method</a></li>
-</ul>
-<ul class="subNavList">
-<li>Detail:&nbsp;</li>
-<li><a href="#field.detail">Field</a>&nbsp;|&nbsp;</li>
-<li><a href="#constructor.detail">Constr</a>&nbsp;|&nbsp;</li>
-<li><a href="#method.detail">Method</a></li>
-</ul>
-</div>
-<a name="skip.navbar.bottom">
-<!--   -->
-</a></div>
-<!-- ======== END OF BOTTOM NAVBAR ======= -->
-</body>
-</html>
diff -ruN lab1/javadoc/simpledb/Catalog.html lab3/javadoc/simpledb/Catalog.html
--- lab1/javadoc/simpledb/Catalog.html	2016-11-02 22:06:58.000000000 -0500
+++ lab3/javadoc/simpledb/Catalog.html	1969-12-31 18:00:00.000000000 -0600
@@ -1,476 +0,0 @@
-<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
-<!-- NewPage -->
-<html lang="en">
-<head>
-<!-- Generated by javadoc (1.8.0_25) on Thu Oct 27 13:16:23 CDT 2016 -->
-<title>Catalog</title>
-<meta name="date" content="2016-10-27">
-<link rel="stylesheet" type="text/css" href="../stylesheet.css" title="Style">
-<script type="text/javascript" src="../script.js"></script>
-</head>
-<body>
-<script type="text/javascript"><!--
-    try {
-        if (location.href.indexOf('is-external=true') == -1) {
-            parent.document.title="Catalog";
-        }
-    }
-    catch(err) {
-    }
-//-->
-var methods = {"i0":10,"i1":10,"i2":10,"i3":10,"i4":10,"i5":10,"i6":10,"i7":10,"i8":10,"i9":10,"i10":10};
-var tabs = {65535:["t0","All Methods"],2:["t2","Instance Methods"],8:["t4","Concrete Methods"]};
-var altColor = "altColor";
-var rowColor = "rowColor";
-var tableTab = "tableTab";
-var activeTableTab = "activeTableTab";
-</script>
-<noscript>
-<div>JavaScript is disabled on your browser.</div>
-</noscript>
-<!-- ========= START OF TOP NAVBAR ======= -->
-<div class="topNav"><a name="navbar.top">
-<!--   -->
-</a>
-<div class="skipNav"><a href="#skip.navbar.top" title="Skip navigation links">Skip navigation links</a></div>
-<a name="navbar.top.firstrow">
-<!--   -->
-</a>
-<ul class="navList" title="Navigation">
-<li><a href="../simpledb/package-summary.html">Package</a></li>
-<li class="navBarCell1Rev">Class</li>
-<li><a href="package-tree.html">Tree</a></li>
-<li><a href="../deprecated-list.html">Deprecated</a></li>
-<li><a href="../index-all.html">Index</a></li>
-<li><a href="../help-doc.html">Help</a></li>
-</ul>
-</div>
-<div class="subNav">
-<ul class="navList">
-<li><a href="../simpledb/BufferPool.html" title="class in simpledb"><span class="typeNameLink">Prev&nbsp;Class</span></a></li>
-<li><a href="../simpledb/Database.html" title="class in simpledb"><span class="typeNameLink">Next&nbsp;Class</span></a></li>
-</ul>
-<ul class="navList">
-<li><a href="../index.html?simpledb/Catalog.html" target="_top">Frames</a></li>
-<li><a href="Catalog.html" target="_top">No&nbsp;Frames</a></li>
-</ul>
-<ul class="navList" id="allclasses_navbar_top">
-<li><a href="../allclasses-noframe.html">All&nbsp;Classes</a></li>
-</ul>
-<div>
-<script type="text/javascript"><!--
-  allClassesLink = document.getElementById("allclasses_navbar_top");
-  if(window==top) {
-    allClassesLink.style.display = "block";
-  }
-  else {
-    allClassesLink.style.display = "none";
-  }
-  //-->
-</script>
-</div>
-<div>
-<ul class="subNavList">
-<li>Summary:&nbsp;</li>
-<li>Nested&nbsp;|&nbsp;</li>
-<li>Field&nbsp;|&nbsp;</li>
-<li><a href="#constructor.summary">Constr</a>&nbsp;|&nbsp;</li>
-<li><a href="#method.summary">Method</a></li>
-</ul>
-<ul class="subNavList">
-<li>Detail:&nbsp;</li>
-<li>Field&nbsp;|&nbsp;</li>
-<li><a href="#constructor.detail">Constr</a>&nbsp;|&nbsp;</li>
-<li><a href="#method.detail">Method</a></li>
-</ul>
-</div>
-<a name="skip.navbar.top">
-<!--   -->
-</a></div>
-<!-- ========= END OF TOP NAVBAR ========= -->
-<!-- ======== START OF CLASS DATA ======== -->
-<div class="header">
-<div class="subTitle">simpledb</div>
-<h2 title="Class Catalog" class="title">Class Catalog</h2>
-</div>
-<div class="contentContainer">
-<ul class="inheritance">
-<li>java.lang.Object</li>
-<li>
-<ul class="inheritance">
-<li>simpledb.Catalog</li>
-</ul>
-</li>
-</ul>
-<div class="description">
-<ul class="blockList">
-<li class="blockList">
-<hr>
-<br>
-<pre>public class <span class="typeNameLabel">Catalog</span>
-extends java.lang.Object</pre>
-<div class="block">The Catalog keeps track of all available tables in the database and their
- associated schemas.
- For now, this is a stub catalog that must be populated with tables by a
- user program before it can be used -- eventually, this should be converted
- to a catalog that reads a catalog table from disk.</div>
-</li>
-</ul>
-</div>
-<div class="summary">
-<ul class="blockList">
-<li class="blockList">
-<!-- ======== CONSTRUCTOR SUMMARY ======== -->
-<ul class="blockList">
-<li class="blockList"><a name="constructor.summary">
-<!--   -->
-</a>
-<h3>Constructor Summary</h3>
-<table class="memberSummary" border="0" cellpadding="3" cellspacing="0" summary="Constructor Summary table, listing constructors, and an explanation">
-<caption><span>Constructors</span><span class="tabEnd">&nbsp;</span></caption>
-<tr>
-<th class="colOne" scope="col">Constructor and Description</th>
-</tr>
-<tr class="altColor">
-<td class="colOne"><code><span class="memberNameLink"><a href="../simpledb/Catalog.html#Catalog--">Catalog</a></span>()</code>
-<div class="block">Constructor.</div>
-</td>
-</tr>
-</table>
-</li>
-</ul>
-<!-- ========== METHOD SUMMARY =========== -->
-<ul class="blockList">
-<li class="blockList"><a name="method.summary">
-<!--   -->
-</a>
-<h3>Method Summary</h3>
-<table class="memberSummary" border="0" cellpadding="3" cellspacing="0" summary="Method Summary table, listing methods, and an explanation">
-<caption><span id="t0" class="activeTableTab"><span>All Methods</span><span class="tabEnd">&nbsp;</span></span><span id="t2" class="tableTab"><span><a href="javascript:show(2);">Instance Methods</a></span><span class="tabEnd">&nbsp;</span></span><span id="t4" class="tableTab"><span><a href="javascript:show(8);">Concrete Methods</a></span><span class="tabEnd">&nbsp;</span></span></caption>
-<tr>
-<th class="colFirst" scope="col">Modifier and Type</th>
-<th class="colLast" scope="col">Method and Description</th>
-</tr>
-<tr id="i0" class="altColor">
-<td class="colFirst"><code>void</code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/Catalog.html#addTable-simpledb.DbFile-">addTable</a></span>(<a href="../simpledb/DbFile.html" title="interface in simpledb">DbFile</a>&nbsp;file)</code>
-<div class="block">Add a new table to the catalog.</div>
-</td>
-</tr>
-<tr id="i1" class="rowColor">
-<td class="colFirst"><code>void</code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/Catalog.html#addTable-simpledb.DbFile-java.lang.String-">addTable</a></span>(<a href="../simpledb/DbFile.html" title="interface in simpledb">DbFile</a>&nbsp;file,
-        java.lang.String&nbsp;name)</code>&nbsp;</td>
-</tr>
-<tr id="i2" class="altColor">
-<td class="colFirst"><code>void</code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/Catalog.html#addTable-simpledb.DbFile-java.lang.String-java.lang.String-">addTable</a></span>(<a href="../simpledb/DbFile.html" title="interface in simpledb">DbFile</a>&nbsp;file,
-        java.lang.String&nbsp;name,
-        java.lang.String&nbsp;pkeyField)</code>
-<div class="block">Add a new table to the catalog.</div>
-</td>
-</tr>
-<tr id="i3" class="rowColor">
-<td class="colFirst"><code>void</code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/Catalog.html#clear--">clear</a></span>()</code>
-<div class="block">Delete all tables from the catalog</div>
-</td>
-</tr>
-<tr id="i4" class="altColor">
-<td class="colFirst"><code><a href="../simpledb/DbFile.html" title="interface in simpledb">DbFile</a></code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/Catalog.html#getDatabaseFile-int-">getDatabaseFile</a></span>(int&nbsp;tableid)</code>
-<div class="block">Returns the DbFile that can be used to read the contents of the
- specified table.</div>
-</td>
-</tr>
-<tr id="i5" class="rowColor">
-<td class="colFirst"><code>java.lang.String</code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/Catalog.html#getPrimaryKey-int-">getPrimaryKey</a></span>(int&nbsp;tableid)</code>&nbsp;</td>
-</tr>
-<tr id="i6" class="altColor">
-<td class="colFirst"><code>int</code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/Catalog.html#getTableId-java.lang.String-">getTableId</a></span>(java.lang.String&nbsp;name)</code>
-<div class="block">Return the id of the table with a specified name,</div>
-</td>
-</tr>
-<tr id="i7" class="rowColor">
-<td class="colFirst"><code>java.lang.String</code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/Catalog.html#getTableName-int-">getTableName</a></span>(int&nbsp;id)</code>&nbsp;</td>
-</tr>
-<tr id="i8" class="altColor">
-<td class="colFirst"><code><a href="../simpledb/TupleDesc.html" title="class in simpledb">TupleDesc</a></code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/Catalog.html#getTupleDesc-int-">getTupleDesc</a></span>(int&nbsp;tableid)</code>
-<div class="block">Returns the tuple descriptor (schema) of the specified table</div>
-</td>
-</tr>
-<tr id="i9" class="rowColor">
-<td class="colFirst"><code>void</code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/Catalog.html#loadSchema-java.lang.String-">loadSchema</a></span>(java.lang.String&nbsp;catalogFile)</code>
-<div class="block">Reads the schema from a file and creates the appropriate tables in the database.</div>
-</td>
-</tr>
-<tr id="i10" class="altColor">
-<td class="colFirst"><code>java.util.Iterator&lt;java.lang.Integer&gt;</code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/Catalog.html#tableIdIterator--">tableIdIterator</a></span>()</code>&nbsp;</td>
-</tr>
-</table>
-<ul class="blockList">
-<li class="blockList"><a name="methods.inherited.from.class.java.lang.Object">
-<!--   -->
-</a>
-<h3>Methods inherited from class&nbsp;java.lang.Object</h3>
-<code>clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait</code></li>
-</ul>
-</li>
-</ul>
-</li>
-</ul>
-</div>
-<div class="details">
-<ul class="blockList">
-<li class="blockList">
-<!-- ========= CONSTRUCTOR DETAIL ======== -->
-<ul class="blockList">
-<li class="blockList"><a name="constructor.detail">
-<!--   -->
-</a>
-<h3>Constructor Detail</h3>
-<a name="Catalog--">
-<!--   -->
-</a>
-<ul class="blockListLast">
-<li class="blockList">
-<h4>Catalog</h4>
-<pre>public&nbsp;Catalog()</pre>
-<div class="block">Constructor.
- Creates a new, empty catalog.</div>
-</li>
-</ul>
-</li>
-</ul>
-<!-- ============ METHOD DETAIL ========== -->
-<ul class="blockList">
-<li class="blockList"><a name="method.detail">
-<!--   -->
-</a>
-<h3>Method Detail</h3>
-<a name="addTable-simpledb.DbFile-java.lang.String-java.lang.String-">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>addTable</h4>
-<pre>public&nbsp;void&nbsp;addTable(<a href="../simpledb/DbFile.html" title="interface in simpledb">DbFile</a>&nbsp;file,
-                     java.lang.String&nbsp;name,
-                     java.lang.String&nbsp;pkeyField)</pre>
-<div class="block">Add a new table to the catalog.
- This table's contents are stored in the specified DbFile.</div>
-<dl>
-<dt><span class="paramLabel">Parameters:</span></dt>
-<dd><code>file</code> - the contents of the table to add;  file.getId() is the identfier of
-    this file/tupledesc param for the calls getTupleDesc and getFile</dd>
-<dd><code>name</code> - the name of the table -- may be an empty string.  May not be null.  If a name
- conflict exists, use the last table to be added as the table for a given name.</dd>
-<dd><code>pkeyField</code> - the name of the primary key field</dd>
-</dl>
-</li>
-</ul>
-<a name="addTable-simpledb.DbFile-java.lang.String-">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>addTable</h4>
-<pre>public&nbsp;void&nbsp;addTable(<a href="../simpledb/DbFile.html" title="interface in simpledb">DbFile</a>&nbsp;file,
-                     java.lang.String&nbsp;name)</pre>
-</li>
-</ul>
-<a name="addTable-simpledb.DbFile-">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>addTable</h4>
-<pre>public&nbsp;void&nbsp;addTable(<a href="../simpledb/DbFile.html" title="interface in simpledb">DbFile</a>&nbsp;file)</pre>
-<div class="block">Add a new table to the catalog.
- This table has tuples formatted using the specified TupleDesc and its
- contents are stored in the specified DbFile.</div>
-<dl>
-<dt><span class="paramLabel">Parameters:</span></dt>
-<dd><code>file</code> - the contents of the table to add;  file.getId() is the identfier of
-    this file/tupledesc param for the calls getTupleDesc and getFile</dd>
-</dl>
-</li>
-</ul>
-<a name="getTableId-java.lang.String-">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>getTableId</h4>
-<pre>public&nbsp;int&nbsp;getTableId(java.lang.String&nbsp;name)
-               throws java.util.NoSuchElementException</pre>
-<div class="block">Return the id of the table with a specified name,</div>
-<dl>
-<dt><span class="throwsLabel">Throws:</span></dt>
-<dd><code>java.util.NoSuchElementException</code> - if the table doesn't exist</dd>
-</dl>
-</li>
-</ul>
-<a name="getTupleDesc-int-">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>getTupleDesc</h4>
-<pre>public&nbsp;<a href="../simpledb/TupleDesc.html" title="class in simpledb">TupleDesc</a>&nbsp;getTupleDesc(int&nbsp;tableid)
-                       throws java.util.NoSuchElementException</pre>
-<div class="block">Returns the tuple descriptor (schema) of the specified table</div>
-<dl>
-<dt><span class="paramLabel">Parameters:</span></dt>
-<dd><code>tableid</code> - The id of the table, as specified by the DbFile.getId()
-     function passed to addTable</dd>
-<dt><span class="throwsLabel">Throws:</span></dt>
-<dd><code>java.util.NoSuchElementException</code> - if the table doesn't exist</dd>
-</dl>
-</li>
-</ul>
-<a name="getDatabaseFile-int-">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>getDatabaseFile</h4>
-<pre>public&nbsp;<a href="../simpledb/DbFile.html" title="interface in simpledb">DbFile</a>&nbsp;getDatabaseFile(int&nbsp;tableid)
-                       throws java.util.NoSuchElementException</pre>
-<div class="block">Returns the DbFile that can be used to read the contents of the
- specified table.</div>
-<dl>
-<dt><span class="paramLabel">Parameters:</span></dt>
-<dd><code>tableid</code> - The id of the table, as specified by the DbFile.getId()
-     function passed to addTable</dd>
-<dt><span class="throwsLabel">Throws:</span></dt>
-<dd><code>java.util.NoSuchElementException</code></dd>
-</dl>
-</li>
-</ul>
-<a name="getPrimaryKey-int-">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>getPrimaryKey</h4>
-<pre>public&nbsp;java.lang.String&nbsp;getPrimaryKey(int&nbsp;tableid)</pre>
-</li>
-</ul>
-<a name="tableIdIterator--">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>tableIdIterator</h4>
-<pre>public&nbsp;java.util.Iterator&lt;java.lang.Integer&gt;&nbsp;tableIdIterator()</pre>
-</li>
-</ul>
-<a name="getTableName-int-">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>getTableName</h4>
-<pre>public&nbsp;java.lang.String&nbsp;getTableName(int&nbsp;id)</pre>
-</li>
-</ul>
-<a name="clear--">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>clear</h4>
-<pre>public&nbsp;void&nbsp;clear()</pre>
-<div class="block">Delete all tables from the catalog</div>
-</li>
-</ul>
-<a name="loadSchema-java.lang.String-">
-<!--   -->
-</a>
-<ul class="blockListLast">
-<li class="blockList">
-<h4>loadSchema</h4>
-<pre>public&nbsp;void&nbsp;loadSchema(java.lang.String&nbsp;catalogFile)</pre>
-<div class="block">Reads the schema from a file and creates the appropriate tables in the database.</div>
-<dl>
-<dt><span class="paramLabel">Parameters:</span></dt>
-<dd><code>catalogFile</code> - </dd>
-</dl>
-</li>
-</ul>
-</li>
-</ul>
-</li>
-</ul>
-</div>
-</div>
-<!-- ========= END OF CLASS DATA ========= -->
-<!-- ======= START OF BOTTOM NAVBAR ====== -->
-<div class="bottomNav"><a name="navbar.bottom">
-<!--   -->
-</a>
-<div class="skipNav"><a href="#skip.navbar.bottom" title="Skip navigation links">Skip navigation links</a></div>
-<a name="navbar.bottom.firstrow">
-<!--   -->
-</a>
-<ul class="navList" title="Navigation">
-<li><a href="../simpledb/package-summary.html">Package</a></li>
-<li class="navBarCell1Rev">Class</li>
-<li><a href="package-tree.html">Tree</a></li>
-<li><a href="../deprecated-list.html">Deprecated</a></li>
-<li><a href="../index-all.html">Index</a></li>
-<li><a href="../help-doc.html">Help</a></li>
-</ul>
-</div>
-<div class="subNav">
-<ul class="navList">
-<li><a href="../simpledb/BufferPool.html" title="class in simpledb"><span class="typeNameLink">Prev&nbsp;Class</span></a></li>
-<li><a href="../simpledb/Database.html" title="class in simpledb"><span class="typeNameLink">Next&nbsp;Class</span></a></li>
-</ul>
-<ul class="navList">
-<li><a href="../index.html?simpledb/Catalog.html" target="_top">Frames</a></li>
-<li><a href="Catalog.html" target="_top">No&nbsp;Frames</a></li>
-</ul>
-<ul class="navList" id="allclasses_navbar_bottom">
-<li><a href="../allclasses-noframe.html">All&nbsp;Classes</a></li>
-</ul>
-<div>
-<script type="text/javascript"><!--
-  allClassesLink = document.getElementById("allclasses_navbar_bottom");
-  if(window==top) {
-    allClassesLink.style.display = "block";
-  }
-  else {
-    allClassesLink.style.display = "none";
-  }
-  //-->
-</script>
-</div>
-<div>
-<ul class="subNavList">
-<li>Summary:&nbsp;</li>
-<li>Nested&nbsp;|&nbsp;</li>
-<li>Field&nbsp;|&nbsp;</li>
-<li><a href="#constructor.summary">Constr</a>&nbsp;|&nbsp;</li>
-<li><a href="#method.summary">Method</a></li>
-</ul>
-<ul class="subNavList">
-<li>Detail:&nbsp;</li>
-<li>Field&nbsp;|&nbsp;</li>
-<li><a href="#constructor.detail">Constr</a>&nbsp;|&nbsp;</li>
-<li><a href="#method.detail">Method</a></li>
-</ul>
-</div>
-<a name="skip.navbar.bottom">
-<!--   -->
-</a></div>
-<!-- ======== END OF BOTTOM NAVBAR ======= -->
-</body>
-</html>
diff -ruN lab1/javadoc/simpledb/Database.html lab3/javadoc/simpledb/Database.html
--- lab1/javadoc/simpledb/Database.html	2016-11-02 22:06:58.000000000 -0500
+++ lab3/javadoc/simpledb/Database.html	1969-12-31 18:00:00.000000000 -0600
@@ -1,433 +0,0 @@
-<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
-<!-- NewPage -->
-<html lang="en">
-<head>
-<!-- Generated by javadoc (1.8.0_25) on Thu Oct 27 13:16:23 CDT 2016 -->
-<title>Database</title>
-<meta name="date" content="2016-10-27">
-<link rel="stylesheet" type="text/css" href="../stylesheet.css" title="Style">
-<script type="text/javascript" src="../script.js"></script>
-</head>
-<body>
-<script type="text/javascript"><!--
-    try {
-        if (location.href.indexOf('is-external=true') == -1) {
-            parent.document.title="Database";
-        }
-    }
-    catch(err) {
-    }
-//-->
-var methods = {"i0":9,"i1":9,"i2":9,"i3":9,"i4":9};
-var tabs = {65535:["t0","All Methods"],1:["t1","Static Methods"],8:["t4","Concrete Methods"]};
-var altColor = "altColor";
-var rowColor = "rowColor";
-var tableTab = "tableTab";
-var activeTableTab = "activeTableTab";
-</script>
-<noscript>
-<div>JavaScript is disabled on your browser.</div>
-</noscript>
-<!-- ========= START OF TOP NAVBAR ======= -->
-<div class="topNav"><a name="navbar.top">
-<!--   -->
-</a>
-<div class="skipNav"><a href="#skip.navbar.top" title="Skip navigation links">Skip navigation links</a></div>
-<a name="navbar.top.firstrow">
-<!--   -->
-</a>
-<ul class="navList" title="Navigation">
-<li><a href="../simpledb/package-summary.html">Package</a></li>
-<li class="navBarCell1Rev">Class</li>
-<li><a href="package-tree.html">Tree</a></li>
-<li><a href="../deprecated-list.html">Deprecated</a></li>
-<li><a href="../index-all.html">Index</a></li>
-<li><a href="../help-doc.html">Help</a></li>
-</ul>
-</div>
-<div class="subNav">
-<ul class="navList">
-<li><a href="../simpledb/Catalog.html" title="class in simpledb"><span class="typeNameLink">Prev&nbsp;Class</span></a></li>
-<li><a href="../simpledb/DbException.html" title="class in simpledb"><span class="typeNameLink">Next&nbsp;Class</span></a></li>
-</ul>
-<ul class="navList">
-<li><a href="../index.html?simpledb/Database.html" target="_top">Frames</a></li>
-<li><a href="Database.html" target="_top">No&nbsp;Frames</a></li>
-</ul>
-<ul class="navList" id="allclasses_navbar_top">
-<li><a href="../allclasses-noframe.html">All&nbsp;Classes</a></li>
-</ul>
-<div>
-<script type="text/javascript"><!--
-  allClassesLink = document.getElementById("allclasses_navbar_top");
-  if(window==top) {
-    allClassesLink.style.display = "block";
-  }
-  else {
-    allClassesLink.style.display = "none";
-  }
-  //-->
-</script>
-</div>
-<div>
-<ul class="subNavList">
-<li>Summary:&nbsp;</li>
-<li>Nested&nbsp;|&nbsp;</li>
-<li><a href="#field.summary">Field</a>&nbsp;|&nbsp;</li>
-<li><a href="#constructor.summary">Constr</a>&nbsp;|&nbsp;</li>
-<li><a href="#method.summary">Method</a></li>
-</ul>
-<ul class="subNavList">
-<li>Detail:&nbsp;</li>
-<li><a href="#field.detail">Field</a>&nbsp;|&nbsp;</li>
-<li><a href="#constructor.detail">Constr</a>&nbsp;|&nbsp;</li>
-<li><a href="#method.detail">Method</a></li>
-</ul>
-</div>
-<a name="skip.navbar.top">
-<!--   -->
-</a></div>
-<!-- ========= END OF TOP NAVBAR ========= -->
-<!-- ======== START OF CLASS DATA ======== -->
-<div class="header">
-<div class="subTitle">simpledb</div>
-<h2 title="Class Database" class="title">Class Database</h2>
-</div>
-<div class="contentContainer">
-<ul class="inheritance">
-<li>java.lang.Object</li>
-<li>
-<ul class="inheritance">
-<li>simpledb.Database</li>
-</ul>
-</li>
-</ul>
-<div class="description">
-<ul class="blockList">
-<li class="blockList">
-<hr>
-<br>
-<pre>public class <span class="typeNameLabel">Database</span>
-extends java.lang.Object</pre>
-<div class="block">Database is a class that initializes several static variables used by the
- database system (the catalog, the buffer pool, and the log files, in
- particular.)
- <p>
- Provides a set of methods that can be used to access these variables from
- anywhere.</div>
-</li>
-</ul>
-</div>
-<div class="summary">
-<ul class="blockList">
-<li class="blockList">
-<!-- =========== FIELD SUMMARY =========== -->
-<ul class="blockList">
-<li class="blockList"><a name="field.summary">
-<!--   -->
-</a>
-<h3>Field Summary</h3>
-<table class="memberSummary" border="0" cellpadding="3" cellspacing="0" summary="Field Summary table, listing fields, and an explanation">
-<caption><span>Fields</span><span class="tabEnd">&nbsp;</span></caption>
-<tr>
-<th class="colFirst" scope="col">Modifier and Type</th>
-<th class="colLast" scope="col">Field and Description</th>
-</tr>
-<tr class="altColor">
-<td class="colFirst"><code>private <a href="../simpledb/BufferPool.html" title="class in simpledb">BufferPool</a></code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/Database.html#Z:Z_bufferpool">_bufferpool</a></span></code>&nbsp;</td>
-</tr>
-<tr class="rowColor">
-<td class="colFirst"><code>private <a href="../simpledb/Catalog.html" title="class in simpledb">Catalog</a></code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/Database.html#Z:Z_catalog">_catalog</a></span></code>&nbsp;</td>
-</tr>
-<tr class="altColor">
-<td class="colFirst"><code>private static java.util.concurrent.atomic.AtomicReference&lt;<a href="../simpledb/Database.html" title="class in simpledb">Database</a>&gt;</code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/Database.html#Z:Z_instance">_instance</a></span></code>&nbsp;</td>
-</tr>
-<tr class="rowColor">
-<td class="colFirst"><code>private <a href="../simpledb/LogFile.html" title="class in simpledb">LogFile</a></code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/Database.html#Z:Z_logfile">_logfile</a></span></code>&nbsp;</td>
-</tr>
-<tr class="altColor">
-<td class="colFirst"><code>private static java.lang.String</code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/Database.html#LOGFILENAME">LOGFILENAME</a></span></code>&nbsp;</td>
-</tr>
-</table>
-</li>
-</ul>
-<!-- ======== CONSTRUCTOR SUMMARY ======== -->
-<ul class="blockList">
-<li class="blockList"><a name="constructor.summary">
-<!--   -->
-</a>
-<h3>Constructor Summary</h3>
-<table class="memberSummary" border="0" cellpadding="3" cellspacing="0" summary="Constructor Summary table, listing constructors, and an explanation">
-<caption><span>Constructors</span><span class="tabEnd">&nbsp;</span></caption>
-<tr>
-<th class="colFirst" scope="col">Modifier</th>
-<th class="colLast" scope="col">Constructor and Description</th>
-</tr>
-<tr class="altColor">
-<td class="colFirst"><code>private </code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/Database.html#Database--">Database</a></span>()</code>&nbsp;</td>
-</tr>
-</table>
-</li>
-</ul>
-<!-- ========== METHOD SUMMARY =========== -->
-<ul class="blockList">
-<li class="blockList"><a name="method.summary">
-<!--   -->
-</a>
-<h3>Method Summary</h3>
-<table class="memberSummary" border="0" cellpadding="3" cellspacing="0" summary="Method Summary table, listing methods, and an explanation">
-<caption><span id="t0" class="activeTableTab"><span>All Methods</span><span class="tabEnd">&nbsp;</span></span><span id="t1" class="tableTab"><span><a href="javascript:show(1);">Static Methods</a></span><span class="tabEnd">&nbsp;</span></span><span id="t4" class="tableTab"><span><a href="javascript:show(8);">Concrete Methods</a></span><span class="tabEnd">&nbsp;</span></span></caption>
-<tr>
-<th class="colFirst" scope="col">Modifier and Type</th>
-<th class="colLast" scope="col">Method and Description</th>
-</tr>
-<tr id="i0" class="altColor">
-<td class="colFirst"><code>static <a href="../simpledb/BufferPool.html" title="class in simpledb">BufferPool</a></code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/Database.html#getBufferPool--">getBufferPool</a></span>()</code>
-<div class="block">Return the buffer pool of the static Database instance</div>
-</td>
-</tr>
-<tr id="i1" class="rowColor">
-<td class="colFirst"><code>static <a href="../simpledb/Catalog.html" title="class in simpledb">Catalog</a></code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/Database.html#getCatalog--">getCatalog</a></span>()</code>
-<div class="block">Return the catalog of the static Database instance</div>
-</td>
-</tr>
-<tr id="i2" class="altColor">
-<td class="colFirst"><code>static <a href="../simpledb/LogFile.html" title="class in simpledb">LogFile</a></code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/Database.html#getLogFile--">getLogFile</a></span>()</code>
-<div class="block">Return the log file of the static Database instance</div>
-</td>
-</tr>
-<tr id="i3" class="rowColor">
-<td class="colFirst"><code>static void</code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/Database.html#reset--">reset</a></span>()</code>&nbsp;</td>
-</tr>
-<tr id="i4" class="altColor">
-<td class="colFirst"><code>static <a href="../simpledb/BufferPool.html" title="class in simpledb">BufferPool</a></code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/Database.html#resetBufferPool-int-">resetBufferPool</a></span>(int&nbsp;pages)</code>
-<div class="block">Method used for testing -- create a new instance of the buffer pool and
- return it</div>
-</td>
-</tr>
-</table>
-<ul class="blockList">
-<li class="blockList"><a name="methods.inherited.from.class.java.lang.Object">
-<!--   -->
-</a>
-<h3>Methods inherited from class&nbsp;java.lang.Object</h3>
-<code>clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait</code></li>
-</ul>
-</li>
-</ul>
-</li>
-</ul>
-</div>
-<div class="details">
-<ul class="blockList">
-<li class="blockList">
-<!-- ============ FIELD DETAIL =========== -->
-<ul class="blockList">
-<li class="blockList"><a name="field.detail">
-<!--   -->
-</a>
-<h3>Field Detail</h3>
-<a name="Z:Z_instance">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>_instance</h4>
-<pre>private static&nbsp;java.util.concurrent.atomic.AtomicReference&lt;<a href="../simpledb/Database.html" title="class in simpledb">Database</a>&gt; _instance</pre>
-</li>
-</ul>
-<a name="Z:Z_catalog">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>_catalog</h4>
-<pre>private final&nbsp;<a href="../simpledb/Catalog.html" title="class in simpledb">Catalog</a> _catalog</pre>
-</li>
-</ul>
-<a name="Z:Z_bufferpool">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>_bufferpool</h4>
-<pre>private final&nbsp;<a href="../simpledb/BufferPool.html" title="class in simpledb">BufferPool</a> _bufferpool</pre>
-</li>
-</ul>
-<a name="LOGFILENAME">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>LOGFILENAME</h4>
-<pre>private static final&nbsp;java.lang.String LOGFILENAME</pre>
-<dl>
-<dt><span class="seeLabel">See Also:</span></dt>
-<dd><a href="../constant-values.html#simpledb.Database.LOGFILENAME">Constant Field Values</a></dd>
-</dl>
-</li>
-</ul>
-<a name="Z:Z_logfile">
-<!--   -->
-</a>
-<ul class="blockListLast">
-<li class="blockList">
-<h4>_logfile</h4>
-<pre>private final&nbsp;<a href="../simpledb/LogFile.html" title="class in simpledb">LogFile</a> _logfile</pre>
-</li>
-</ul>
-</li>
-</ul>
-<!-- ========= CONSTRUCTOR DETAIL ======== -->
-<ul class="blockList">
-<li class="blockList"><a name="constructor.detail">
-<!--   -->
-</a>
-<h3>Constructor Detail</h3>
-<a name="Database--">
-<!--   -->
-</a>
-<ul class="blockListLast">
-<li class="blockList">
-<h4>Database</h4>
-<pre>private&nbsp;Database()</pre>
-</li>
-</ul>
-</li>
-</ul>
-<!-- ============ METHOD DETAIL ========== -->
-<ul class="blockList">
-<li class="blockList"><a name="method.detail">
-<!--   -->
-</a>
-<h3>Method Detail</h3>
-<a name="getLogFile--">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>getLogFile</h4>
-<pre>public static&nbsp;<a href="../simpledb/LogFile.html" title="class in simpledb">LogFile</a>&nbsp;getLogFile()</pre>
-<div class="block">Return the log file of the static Database instance</div>
-</li>
-</ul>
-<a name="getBufferPool--">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>getBufferPool</h4>
-<pre>public static&nbsp;<a href="../simpledb/BufferPool.html" title="class in simpledb">BufferPool</a>&nbsp;getBufferPool()</pre>
-<div class="block">Return the buffer pool of the static Database instance</div>
-</li>
-</ul>
-<a name="getCatalog--">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>getCatalog</h4>
-<pre>public static&nbsp;<a href="../simpledb/Catalog.html" title="class in simpledb">Catalog</a>&nbsp;getCatalog()</pre>
-<div class="block">Return the catalog of the static Database instance</div>
-</li>
-</ul>
-<a name="resetBufferPool-int-">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>resetBufferPool</h4>
-<pre>public static&nbsp;<a href="../simpledb/BufferPool.html" title="class in simpledb">BufferPool</a>&nbsp;resetBufferPool(int&nbsp;pages)</pre>
-<div class="block">Method used for testing -- create a new instance of the buffer pool and
- return it</div>
-</li>
-</ul>
-<a name="reset--">
-<!--   -->
-</a>
-<ul class="blockListLast">
-<li class="blockList">
-<h4>reset</h4>
-<pre>public static&nbsp;void&nbsp;reset()</pre>
-</li>
-</ul>
-</li>
-</ul>
-</li>
-</ul>
-</div>
-</div>
-<!-- ========= END OF CLASS DATA ========= -->
-<!-- ======= START OF BOTTOM NAVBAR ====== -->
-<div class="bottomNav"><a name="navbar.bottom">
-<!--   -->
-</a>
-<div class="skipNav"><a href="#skip.navbar.bottom" title="Skip navigation links">Skip navigation links</a></div>
-<a name="navbar.bottom.firstrow">
-<!--   -->
-</a>
-<ul class="navList" title="Navigation">
-<li><a href="../simpledb/package-summary.html">Package</a></li>
-<li class="navBarCell1Rev">Class</li>
-<li><a href="package-tree.html">Tree</a></li>
-<li><a href="../deprecated-list.html">Deprecated</a></li>
-<li><a href="../index-all.html">Index</a></li>
-<li><a href="../help-doc.html">Help</a></li>
-</ul>
-</div>
-<div class="subNav">
-<ul class="navList">
-<li><a href="../simpledb/Catalog.html" title="class in simpledb"><span class="typeNameLink">Prev&nbsp;Class</span></a></li>
-<li><a href="../simpledb/DbException.html" title="class in simpledb"><span class="typeNameLink">Next&nbsp;Class</span></a></li>
-</ul>
-<ul class="navList">
-<li><a href="../index.html?simpledb/Database.html" target="_top">Frames</a></li>
-<li><a href="Database.html" target="_top">No&nbsp;Frames</a></li>
-</ul>
-<ul class="navList" id="allclasses_navbar_bottom">
-<li><a href="../allclasses-noframe.html">All&nbsp;Classes</a></li>
-</ul>
-<div>
-<script type="text/javascript"><!--
-  allClassesLink = document.getElementById("allclasses_navbar_bottom");
-  if(window==top) {
-    allClassesLink.style.display = "block";
-  }
-  else {
-    allClassesLink.style.display = "none";
-  }
-  //-->
-</script>
-</div>
-<div>
-<ul class="subNavList">
-<li>Summary:&nbsp;</li>
-<li>Nested&nbsp;|&nbsp;</li>
-<li><a href="#field.summary">Field</a>&nbsp;|&nbsp;</li>
-<li><a href="#constructor.summary">Constr</a>&nbsp;|&nbsp;</li>
-<li><a href="#method.summary">Method</a></li>
-</ul>
-<ul class="subNavList">
-<li>Detail:&nbsp;</li>
-<li><a href="#field.detail">Field</a>&nbsp;|&nbsp;</li>
-<li><a href="#constructor.detail">Constr</a>&nbsp;|&nbsp;</li>
-<li><a href="#method.detail">Method</a></li>
-</ul>
-</div>
-<a name="skip.navbar.bottom">
-<!--   -->
-</a></div>
-<!-- ======== END OF BOTTOM NAVBAR ======= -->
-</body>
-</html>
diff -ruN lab1/javadoc/simpledb/DbException.html lab3/javadoc/simpledb/DbException.html
--- lab1/javadoc/simpledb/DbException.html	2016-11-02 22:06:58.000000000 -0500
+++ lab3/javadoc/simpledb/DbException.html	1969-12-31 18:00:00.000000000 -0600
@@ -1,299 +0,0 @@
-<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
-<!-- NewPage -->
-<html lang="en">
-<head>
-<!-- Generated by javadoc (1.8.0_25) on Thu Oct 27 13:16:23 CDT 2016 -->
-<title>DbException</title>
-<meta name="date" content="2016-10-27">
-<link rel="stylesheet" type="text/css" href="../stylesheet.css" title="Style">
-<script type="text/javascript" src="../script.js"></script>
-</head>
-<body>
-<script type="text/javascript"><!--
-    try {
-        if (location.href.indexOf('is-external=true') == -1) {
-            parent.document.title="DbException";
-        }
-    }
-    catch(err) {
-    }
-//-->
-</script>
-<noscript>
-<div>JavaScript is disabled on your browser.</div>
-</noscript>
-<!-- ========= START OF TOP NAVBAR ======= -->
-<div class="topNav"><a name="navbar.top">
-<!--   -->
-</a>
-<div class="skipNav"><a href="#skip.navbar.top" title="Skip navigation links">Skip navigation links</a></div>
-<a name="navbar.top.firstrow">
-<!--   -->
-</a>
-<ul class="navList" title="Navigation">
-<li><a href="../simpledb/package-summary.html">Package</a></li>
-<li class="navBarCell1Rev">Class</li>
-<li><a href="package-tree.html">Tree</a></li>
-<li><a href="../deprecated-list.html">Deprecated</a></li>
-<li><a href="../index-all.html">Index</a></li>
-<li><a href="../help-doc.html">Help</a></li>
-</ul>
-</div>
-<div class="subNav">
-<ul class="navList">
-<li><a href="../simpledb/Database.html" title="class in simpledb"><span class="typeNameLink">Prev&nbsp;Class</span></a></li>
-<li><a href="../simpledb/DbFile.html" title="interface in simpledb"><span class="typeNameLink">Next&nbsp;Class</span></a></li>
-</ul>
-<ul class="navList">
-<li><a href="../index.html?simpledb/DbException.html" target="_top">Frames</a></li>
-<li><a href="DbException.html" target="_top">No&nbsp;Frames</a></li>
-</ul>
-<ul class="navList" id="allclasses_navbar_top">
-<li><a href="../allclasses-noframe.html">All&nbsp;Classes</a></li>
-</ul>
-<div>
-<script type="text/javascript"><!--
-  allClassesLink = document.getElementById("allclasses_navbar_top");
-  if(window==top) {
-    allClassesLink.style.display = "block";
-  }
-  else {
-    allClassesLink.style.display = "none";
-  }
-  //-->
-</script>
-</div>
-<div>
-<ul class="subNavList">
-<li>Summary:&nbsp;</li>
-<li>Nested&nbsp;|&nbsp;</li>
-<li><a href="#field.summary">Field</a>&nbsp;|&nbsp;</li>
-<li><a href="#constructor.summary">Constr</a>&nbsp;|&nbsp;</li>
-<li><a href="#methods.inherited.from.class.java.lang.Throwable">Method</a></li>
-</ul>
-<ul class="subNavList">
-<li>Detail:&nbsp;</li>
-<li><a href="#field.detail">Field</a>&nbsp;|&nbsp;</li>
-<li><a href="#constructor.detail">Constr</a>&nbsp;|&nbsp;</li>
-<li>Method</li>
-</ul>
-</div>
-<a name="skip.navbar.top">
-<!--   -->
-</a></div>
-<!-- ========= END OF TOP NAVBAR ========= -->
-<!-- ======== START OF CLASS DATA ======== -->
-<div class="header">
-<div class="subTitle">simpledb</div>
-<h2 title="Class DbException" class="title">Class DbException</h2>
-</div>
-<div class="contentContainer">
-<ul class="inheritance">
-<li>java.lang.Object</li>
-<li>
-<ul class="inheritance">
-<li>java.lang.Throwable</li>
-<li>
-<ul class="inheritance">
-<li>java.lang.Exception</li>
-<li>
-<ul class="inheritance">
-<li>simpledb.DbException</li>
-</ul>
-</li>
-</ul>
-</li>
-</ul>
-</li>
-</ul>
-<div class="description">
-<ul class="blockList">
-<li class="blockList">
-<dl>
-<dt>All Implemented Interfaces:</dt>
-<dd>java.io.Serializable</dd>
-</dl>
-<hr>
-<br>
-<pre>public class <span class="typeNameLabel">DbException</span>
-extends java.lang.Exception</pre>
-<div class="block">Generic database exception class</div>
-<dl>
-<dt><span class="seeLabel">See Also:</span></dt>
-<dd><a href="../serialized-form.html#simpledb.DbException">Serialized Form</a></dd>
-</dl>
-</li>
-</ul>
-</div>
-<div class="summary">
-<ul class="blockList">
-<li class="blockList">
-<!-- =========== FIELD SUMMARY =========== -->
-<ul class="blockList">
-<li class="blockList"><a name="field.summary">
-<!--   -->
-</a>
-<h3>Field Summary</h3>
-<table class="memberSummary" border="0" cellpadding="3" cellspacing="0" summary="Field Summary table, listing fields, and an explanation">
-<caption><span>Fields</span><span class="tabEnd">&nbsp;</span></caption>
-<tr>
-<th class="colFirst" scope="col">Modifier and Type</th>
-<th class="colLast" scope="col">Field and Description</th>
-</tr>
-<tr class="altColor">
-<td class="colFirst"><code>private static long</code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/DbException.html#serialVersionUID">serialVersionUID</a></span></code>&nbsp;</td>
-</tr>
-</table>
-</li>
-</ul>
-<!-- ======== CONSTRUCTOR SUMMARY ======== -->
-<ul class="blockList">
-<li class="blockList"><a name="constructor.summary">
-<!--   -->
-</a>
-<h3>Constructor Summary</h3>
-<table class="memberSummary" border="0" cellpadding="3" cellspacing="0" summary="Constructor Summary table, listing constructors, and an explanation">
-<caption><span>Constructors</span><span class="tabEnd">&nbsp;</span></caption>
-<tr>
-<th class="colOne" scope="col">Constructor and Description</th>
-</tr>
-<tr class="altColor">
-<td class="colOne"><code><span class="memberNameLink"><a href="../simpledb/DbException.html#DbException-java.lang.String-">DbException</a></span>(java.lang.String&nbsp;s)</code>&nbsp;</td>
-</tr>
-</table>
-</li>
-</ul>
-<!-- ========== METHOD SUMMARY =========== -->
-<ul class="blockList">
-<li class="blockList"><a name="method.summary">
-<!--   -->
-</a>
-<h3>Method Summary</h3>
-<ul class="blockList">
-<li class="blockList"><a name="methods.inherited.from.class.java.lang.Throwable">
-<!--   -->
-</a>
-<h3>Methods inherited from class&nbsp;java.lang.Throwable</h3>
-<code>addSuppressed, fillInStackTrace, getCause, getLocalizedMessage, getMessage, getStackTrace, getSuppressed, initCause, printStackTrace, printStackTrace, printStackTrace, setStackTrace, toString</code></li>
-</ul>
-<ul class="blockList">
-<li class="blockList"><a name="methods.inherited.from.class.java.lang.Object">
-<!--   -->
-</a>
-<h3>Methods inherited from class&nbsp;java.lang.Object</h3>
-<code>clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait</code></li>
-</ul>
-</li>
-</ul>
-</li>
-</ul>
-</div>
-<div class="details">
-<ul class="blockList">
-<li class="blockList">
-<!-- ============ FIELD DETAIL =========== -->
-<ul class="blockList">
-<li class="blockList"><a name="field.detail">
-<!--   -->
-</a>
-<h3>Field Detail</h3>
-<a name="serialVersionUID">
-<!--   -->
-</a>
-<ul class="blockListLast">
-<li class="blockList">
-<h4>serialVersionUID</h4>
-<pre>private static final&nbsp;long serialVersionUID</pre>
-<dl>
-<dt><span class="seeLabel">See Also:</span></dt>
-<dd><a href="../constant-values.html#simpledb.DbException.serialVersionUID">Constant Field Values</a></dd>
-</dl>
-</li>
-</ul>
-</li>
-</ul>
-<!-- ========= CONSTRUCTOR DETAIL ======== -->
-<ul class="blockList">
-<li class="blockList"><a name="constructor.detail">
-<!--   -->
-</a>
-<h3>Constructor Detail</h3>
-<a name="DbException-java.lang.String-">
-<!--   -->
-</a>
-<ul class="blockListLast">
-<li class="blockList">
-<h4>DbException</h4>
-<pre>public&nbsp;DbException(java.lang.String&nbsp;s)</pre>
-</li>
-</ul>
-</li>
-</ul>
-</li>
-</ul>
-</div>
-</div>
-<!-- ========= END OF CLASS DATA ========= -->
-<!-- ======= START OF BOTTOM NAVBAR ====== -->
-<div class="bottomNav"><a name="navbar.bottom">
-<!--   -->
-</a>
-<div class="skipNav"><a href="#skip.navbar.bottom" title="Skip navigation links">Skip navigation links</a></div>
-<a name="navbar.bottom.firstrow">
-<!--   -->
-</a>
-<ul class="navList" title="Navigation">
-<li><a href="../simpledb/package-summary.html">Package</a></li>
-<li class="navBarCell1Rev">Class</li>
-<li><a href="package-tree.html">Tree</a></li>
-<li><a href="../deprecated-list.html">Deprecated</a></li>
-<li><a href="../index-all.html">Index</a></li>
-<li><a href="../help-doc.html">Help</a></li>
-</ul>
-</div>
-<div class="subNav">
-<ul class="navList">
-<li><a href="../simpledb/Database.html" title="class in simpledb"><span class="typeNameLink">Prev&nbsp;Class</span></a></li>
-<li><a href="../simpledb/DbFile.html" title="interface in simpledb"><span class="typeNameLink">Next&nbsp;Class</span></a></li>
-</ul>
-<ul class="navList">
-<li><a href="../index.html?simpledb/DbException.html" target="_top">Frames</a></li>
-<li><a href="DbException.html" target="_top">No&nbsp;Frames</a></li>
-</ul>
-<ul class="navList" id="allclasses_navbar_bottom">
-<li><a href="../allclasses-noframe.html">All&nbsp;Classes</a></li>
-</ul>
-<div>
-<script type="text/javascript"><!--
-  allClassesLink = document.getElementById("allclasses_navbar_bottom");
-  if(window==top) {
-    allClassesLink.style.display = "block";
-  }
-  else {
-    allClassesLink.style.display = "none";
-  }
-  //-->
-</script>
-</div>
-<div>
-<ul class="subNavList">
-<li>Summary:&nbsp;</li>
-<li>Nested&nbsp;|&nbsp;</li>
-<li><a href="#field.summary">Field</a>&nbsp;|&nbsp;</li>
-<li><a href="#constructor.summary">Constr</a>&nbsp;|&nbsp;</li>
-<li><a href="#methods.inherited.from.class.java.lang.Throwable">Method</a></li>
-</ul>
-<ul class="subNavList">
-<li>Detail:&nbsp;</li>
-<li><a href="#field.detail">Field</a>&nbsp;|&nbsp;</li>
-<li><a href="#constructor.detail">Constr</a>&nbsp;|&nbsp;</li>
-<li>Method</li>
-</ul>
-</div>
-<a name="skip.navbar.bottom">
-<!--   -->
-</a></div>
-<!-- ======== END OF BOTTOM NAVBAR ======= -->
-</body>
-</html>
diff -ruN lab1/javadoc/simpledb/DbFile.html lab3/javadoc/simpledb/DbFile.html
--- lab1/javadoc/simpledb/DbFile.html	2016-11-02 22:06:58.000000000 -0500
+++ lab3/javadoc/simpledb/DbFile.html	1969-12-31 18:00:00.000000000 -0600
@@ -1,399 +0,0 @@
-<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
-<!-- NewPage -->
-<html lang="en">
-<head>
-<!-- Generated by javadoc (1.8.0_25) on Thu Oct 27 13:16:23 CDT 2016 -->
-<title>DbFile</title>
-<meta name="date" content="2016-10-27">
-<link rel="stylesheet" type="text/css" href="../stylesheet.css" title="Style">
-<script type="text/javascript" src="../script.js"></script>
-</head>
-<body>
-<script type="text/javascript"><!--
-    try {
-        if (location.href.indexOf('is-external=true') == -1) {
-            parent.document.title="DbFile";
-        }
-    }
-    catch(err) {
-    }
-//-->
-var methods = {"i0":6,"i1":6,"i2":6,"i3":6,"i4":6,"i5":6,"i6":6};
-var tabs = {65535:["t0","All Methods"],2:["t2","Instance Methods"],4:["t3","Abstract Methods"]};
-var altColor = "altColor";
-var rowColor = "rowColor";
-var tableTab = "tableTab";
-var activeTableTab = "activeTableTab";
-</script>
-<noscript>
-<div>JavaScript is disabled on your browser.</div>
-</noscript>
-<!-- ========= START OF TOP NAVBAR ======= -->
-<div class="topNav"><a name="navbar.top">
-<!--   -->
-</a>
-<div class="skipNav"><a href="#skip.navbar.top" title="Skip navigation links">Skip navigation links</a></div>
-<a name="navbar.top.firstrow">
-<!--   -->
-</a>
-<ul class="navList" title="Navigation">
-<li><a href="../simpledb/package-summary.html">Package</a></li>
-<li class="navBarCell1Rev">Class</li>
-<li><a href="package-tree.html">Tree</a></li>
-<li><a href="../deprecated-list.html">Deprecated</a></li>
-<li><a href="../index-all.html">Index</a></li>
-<li><a href="../help-doc.html">Help</a></li>
-</ul>
-</div>
-<div class="subNav">
-<ul class="navList">
-<li><a href="../simpledb/DbException.html" title="class in simpledb"><span class="typeNameLink">Prev&nbsp;Class</span></a></li>
-<li><a href="../simpledb/DbFileIterator.html" title="interface in simpledb"><span class="typeNameLink">Next&nbsp;Class</span></a></li>
-</ul>
-<ul class="navList">
-<li><a href="../index.html?simpledb/DbFile.html" target="_top">Frames</a></li>
-<li><a href="DbFile.html" target="_top">No&nbsp;Frames</a></li>
-</ul>
-<ul class="navList" id="allclasses_navbar_top">
-<li><a href="../allclasses-noframe.html">All&nbsp;Classes</a></li>
-</ul>
-<div>
-<script type="text/javascript"><!--
-  allClassesLink = document.getElementById("allclasses_navbar_top");
-  if(window==top) {
-    allClassesLink.style.display = "block";
-  }
-  else {
-    allClassesLink.style.display = "none";
-  }
-  //-->
-</script>
-</div>
-<div>
-<ul class="subNavList">
-<li>Summary:&nbsp;</li>
-<li>Nested&nbsp;|&nbsp;</li>
-<li>Field&nbsp;|&nbsp;</li>
-<li>Constr&nbsp;|&nbsp;</li>
-<li><a href="#method.summary">Method</a></li>
-</ul>
-<ul class="subNavList">
-<li>Detail:&nbsp;</li>
-<li>Field&nbsp;|&nbsp;</li>
-<li>Constr&nbsp;|&nbsp;</li>
-<li><a href="#method.detail">Method</a></li>
-</ul>
-</div>
-<a name="skip.navbar.top">
-<!--   -->
-</a></div>
-<!-- ========= END OF TOP NAVBAR ========= -->
-<!-- ======== START OF CLASS DATA ======== -->
-<div class="header">
-<div class="subTitle">simpledb</div>
-<h2 title="Interface DbFile" class="title">Interface DbFile</h2>
-</div>
-<div class="contentContainer">
-<div class="description">
-<ul class="blockList">
-<li class="blockList">
-<dl>
-<dt>All Known Implementing Classes:</dt>
-<dd><a href="../simpledb/HeapFile.html" title="class in simpledb">HeapFile</a></dd>
-</dl>
-<hr>
-<br>
-<pre>public interface <span class="typeNameLabel">DbFile</span></pre>
-<div class="block">The interface for database files on disk. Each table is represented by a
- single DbFile. DbFiles can fetch pages and iterate through tuples. Each
- file has a unique id used to store metadata about the table in the Catalog.
- DbFiles are generally accessed through the buffer pool, rather than directly
- by operators.</div>
-</li>
-</ul>
-</div>
-<div class="summary">
-<ul class="blockList">
-<li class="blockList">
-<!-- ========== METHOD SUMMARY =========== -->
-<ul class="blockList">
-<li class="blockList"><a name="method.summary">
-<!--   -->
-</a>
-<h3>Method Summary</h3>
-<table class="memberSummary" border="0" cellpadding="3" cellspacing="0" summary="Method Summary table, listing methods, and an explanation">
-<caption><span id="t0" class="activeTableTab"><span>All Methods</span><span class="tabEnd">&nbsp;</span></span><span id="t2" class="tableTab"><span><a href="javascript:show(2);">Instance Methods</a></span><span class="tabEnd">&nbsp;</span></span><span id="t3" class="tableTab"><span><a href="javascript:show(4);">Abstract Methods</a></span><span class="tabEnd">&nbsp;</span></span></caption>
-<tr>
-<th class="colFirst" scope="col">Modifier and Type</th>
-<th class="colLast" scope="col">Method and Description</th>
-</tr>
-<tr id="i0" class="altColor">
-<td class="colFirst"><code>java.util.ArrayList&lt;<a href="../simpledb/Page.html" title="interface in simpledb">Page</a>&gt;</code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/DbFile.html#deleteTuple-simpledb.TransactionId-simpledb.Tuple-">deleteTuple</a></span>(<a href="../simpledb/TransactionId.html" title="class in simpledb">TransactionId</a>&nbsp;tid,
-           <a href="../simpledb/Tuple.html" title="class in simpledb">Tuple</a>&nbsp;t)</code>
-<div class="block">Removes the specified tuple from the file on behalf of the specified
- transaction.</div>
-</td>
-</tr>
-<tr id="i1" class="rowColor">
-<td class="colFirst"><code>int</code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/DbFile.html#getId--">getId</a></span>()</code>
-<div class="block">Returns a unique ID used to identify this DbFile in the Catalog.</div>
-</td>
-</tr>
-<tr id="i2" class="altColor">
-<td class="colFirst"><code><a href="../simpledb/TupleDesc.html" title="class in simpledb">TupleDesc</a></code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/DbFile.html#getTupleDesc--">getTupleDesc</a></span>()</code>
-<div class="block">Returns the TupleDesc of the table stored in this DbFile.</div>
-</td>
-</tr>
-<tr id="i3" class="rowColor">
-<td class="colFirst"><code>java.util.ArrayList&lt;<a href="../simpledb/Page.html" title="interface in simpledb">Page</a>&gt;</code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/DbFile.html#insertTuple-simpledb.TransactionId-simpledb.Tuple-">insertTuple</a></span>(<a href="../simpledb/TransactionId.html" title="class in simpledb">TransactionId</a>&nbsp;tid,
-           <a href="../simpledb/Tuple.html" title="class in simpledb">Tuple</a>&nbsp;t)</code>
-<div class="block">Inserts the specified tuple to the file on behalf of transaction.</div>
-</td>
-</tr>
-<tr id="i4" class="altColor">
-<td class="colFirst"><code><a href="../simpledb/DbFileIterator.html" title="interface in simpledb">DbFileIterator</a></code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/DbFile.html#iterator-simpledb.TransactionId-">iterator</a></span>(<a href="../simpledb/TransactionId.html" title="class in simpledb">TransactionId</a>&nbsp;tid)</code>
-<div class="block">Returns an iterator over all the tuples stored in this DbFile.</div>
-</td>
-</tr>
-<tr id="i5" class="rowColor">
-<td class="colFirst"><code><a href="../simpledb/Page.html" title="interface in simpledb">Page</a></code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/DbFile.html#readPage-simpledb.PageId-">readPage</a></span>(<a href="../simpledb/PageId.html" title="interface in simpledb">PageId</a>&nbsp;id)</code>
-<div class="block">Read the specified page from disk.</div>
-</td>
-</tr>
-<tr id="i6" class="altColor">
-<td class="colFirst"><code>void</code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/DbFile.html#writePage-simpledb.Page-">writePage</a></span>(<a href="../simpledb/Page.html" title="interface in simpledb">Page</a>&nbsp;p)</code>
-<div class="block">Push the specified page to disk.</div>
-</td>
-</tr>
-</table>
-</li>
-</ul>
-</li>
-</ul>
-</div>
-<div class="details">
-<ul class="blockList">
-<li class="blockList">
-<!-- ============ METHOD DETAIL ========== -->
-<ul class="blockList">
-<li class="blockList"><a name="method.detail">
-<!--   -->
-</a>
-<h3>Method Detail</h3>
-<a name="readPage-simpledb.PageId-">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>readPage</h4>
-<pre><a href="../simpledb/Page.html" title="interface in simpledb">Page</a>&nbsp;readPage(<a href="../simpledb/PageId.html" title="interface in simpledb">PageId</a>&nbsp;id)</pre>
-<div class="block">Read the specified page from disk.</div>
-<dl>
-<dt><span class="throwsLabel">Throws:</span></dt>
-<dd><code>java.lang.IllegalArgumentException</code> - if the page does not exist in this file.</dd>
-</dl>
-</li>
-</ul>
-<a name="writePage-simpledb.Page-">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>writePage</h4>
-<pre>void&nbsp;writePage(<a href="../simpledb/Page.html" title="interface in simpledb">Page</a>&nbsp;p)
-        throws java.io.IOException</pre>
-<div class="block">Push the specified page to disk.</div>
-<dl>
-<dt><span class="paramLabel">Parameters:</span></dt>
-<dd><code>p</code> - The page to write.  page.getId().pageno() specifies the offset into the file where the page should be written.</dd>
-<dt><span class="throwsLabel">Throws:</span></dt>
-<dd><code>java.io.IOException</code> - if the write fails</dd>
-</dl>
-</li>
-</ul>
-<a name="insertTuple-simpledb.TransactionId-simpledb.Tuple-">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>insertTuple</h4>
-<pre>java.util.ArrayList&lt;<a href="../simpledb/Page.html" title="interface in simpledb">Page</a>&gt;&nbsp;insertTuple(<a href="../simpledb/TransactionId.html" title="class in simpledb">TransactionId</a>&nbsp;tid,
-                                      <a href="../simpledb/Tuple.html" title="class in simpledb">Tuple</a>&nbsp;t)
-                               throws <a href="../simpledb/DbException.html" title="class in simpledb">DbException</a>,
-                                      java.io.IOException,
-                                      <a href="../simpledb/TransactionAbortedException.html" title="class in simpledb">TransactionAbortedException</a></pre>
-<div class="block">Inserts the specified tuple to the file on behalf of transaction.
- This method will acquire a lock on the affected pages of the file, and
- may block until the lock can be acquired.</div>
-<dl>
-<dt><span class="paramLabel">Parameters:</span></dt>
-<dd><code>tid</code> - The transaction performing the update</dd>
-<dd><code>t</code> - The tuple to add.  This tuple should be updated to reflect that
-          it is now stored in this file.</dd>
-<dt><span class="returnLabel">Returns:</span></dt>
-<dd>An ArrayList contain the pages that were modified</dd>
-<dt><span class="throwsLabel">Throws:</span></dt>
-<dd><code><a href="../simpledb/DbException.html" title="class in simpledb">DbException</a></code> - if the tuple cannot be added</dd>
-<dd><code>java.io.IOException</code> - if the needed file can't be read/written</dd>
-<dd><code><a href="../simpledb/TransactionAbortedException.html" title="class in simpledb">TransactionAbortedException</a></code></dd>
-</dl>
-</li>
-</ul>
-<a name="deleteTuple-simpledb.TransactionId-simpledb.Tuple-">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>deleteTuple</h4>
-<pre>java.util.ArrayList&lt;<a href="../simpledb/Page.html" title="interface in simpledb">Page</a>&gt;&nbsp;deleteTuple(<a href="../simpledb/TransactionId.html" title="class in simpledb">TransactionId</a>&nbsp;tid,
-                                      <a href="../simpledb/Tuple.html" title="class in simpledb">Tuple</a>&nbsp;t)
-                               throws <a href="../simpledb/DbException.html" title="class in simpledb">DbException</a>,
-                                      java.io.IOException,
-                                      <a href="../simpledb/TransactionAbortedException.html" title="class in simpledb">TransactionAbortedException</a></pre>
-<div class="block">Removes the specified tuple from the file on behalf of the specified
- transaction.
- This method will acquire a lock on the affected pages of the file, and
- may block until the lock can be acquired.</div>
-<dl>
-<dt><span class="paramLabel">Parameters:</span></dt>
-<dd><code>tid</code> - The transaction performing the update</dd>
-<dd><code>t</code> - The tuple to delete.  This tuple should be updated to reflect that
-          it is no longer stored on any page.</dd>
-<dt><span class="returnLabel">Returns:</span></dt>
-<dd>An ArrayList contain the pages that were modified</dd>
-<dt><span class="throwsLabel">Throws:</span></dt>
-<dd><code><a href="../simpledb/DbException.html" title="class in simpledb">DbException</a></code> - if the tuple cannot be deleted or is not a member
-   of the file</dd>
-<dd><code>java.io.IOException</code></dd>
-<dd><code><a href="../simpledb/TransactionAbortedException.html" title="class in simpledb">TransactionAbortedException</a></code></dd>
-</dl>
-</li>
-</ul>
-<a name="iterator-simpledb.TransactionId-">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>iterator</h4>
-<pre><a href="../simpledb/DbFileIterator.html" title="interface in simpledb">DbFileIterator</a>&nbsp;iterator(<a href="../simpledb/TransactionId.html" title="class in simpledb">TransactionId</a>&nbsp;tid)</pre>
-<div class="block">Returns an iterator over all the tuples stored in this DbFile. The
- iterator must use <a href="../simpledb/BufferPool.html#getPage-simpledb.TransactionId-simpledb.PageId-simpledb.Permissions-"><code>BufferPool.getPage(simpledb.TransactionId, simpledb.PageId, simpledb.Permissions)</code></a>, rather than
- <a href="../simpledb/DbFile.html#readPage-simpledb.PageId-"><code>readPage(simpledb.PageId)</code></a> to iterate through the pages.</div>
-<dl>
-<dt><span class="returnLabel">Returns:</span></dt>
-<dd>an iterator over all the tuples stored in this DbFile.</dd>
-</dl>
-</li>
-</ul>
-<a name="getId--">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>getId</h4>
-<pre>int&nbsp;getId()</pre>
-<div class="block">Returns a unique ID used to identify this DbFile in the Catalog. This id
- can be used to look up the table via <a href="../simpledb/Catalog.html#getDatabaseFile-int-"><code>Catalog.getDatabaseFile(int)</code></a> and
- <a href="../simpledb/Catalog.html#getTupleDesc-int-"><code>Catalog.getTupleDesc(int)</code></a>.
- <p>
- Implementation note:  you will need to generate this tableid somewhere,
- ensure that each HeapFile has a "unique id," and that you always
- return the same value for a particular HeapFile. A simple implementation
- is to use the hash code of the absolute path of the file underlying
- the HeapFile, i.e. <code>f.getAbsoluteFile().hashCode()</code>.</div>
-<dl>
-<dt><span class="returnLabel">Returns:</span></dt>
-<dd>an ID uniquely identifying this HeapFile.</dd>
-</dl>
-</li>
-</ul>
-<a name="getTupleDesc--">
-<!--   -->
-</a>
-<ul class="blockListLast">
-<li class="blockList">
-<h4>getTupleDesc</h4>
-<pre><a href="../simpledb/TupleDesc.html" title="class in simpledb">TupleDesc</a>&nbsp;getTupleDesc()</pre>
-<div class="block">Returns the TupleDesc of the table stored in this DbFile.</div>
-<dl>
-<dt><span class="returnLabel">Returns:</span></dt>
-<dd>TupleDesc of this DbFile.</dd>
-</dl>
-</li>
-</ul>
-</li>
-</ul>
-</li>
-</ul>
-</div>
-</div>
-<!-- ========= END OF CLASS DATA ========= -->
-<!-- ======= START OF BOTTOM NAVBAR ====== -->
-<div class="bottomNav"><a name="navbar.bottom">
-<!--   -->
-</a>
-<div class="skipNav"><a href="#skip.navbar.bottom" title="Skip navigation links">Skip navigation links</a></div>
-<a name="navbar.bottom.firstrow">
-<!--   -->
-</a>
-<ul class="navList" title="Navigation">
-<li><a href="../simpledb/package-summary.html">Package</a></li>
-<li class="navBarCell1Rev">Class</li>
-<li><a href="package-tree.html">Tree</a></li>
-<li><a href="../deprecated-list.html">Deprecated</a></li>
-<li><a href="../index-all.html">Index</a></li>
-<li><a href="../help-doc.html">Help</a></li>
-</ul>
-</div>
-<div class="subNav">
-<ul class="navList">
-<li><a href="../simpledb/DbException.html" title="class in simpledb"><span class="typeNameLink">Prev&nbsp;Class</span></a></li>
-<li><a href="../simpledb/DbFileIterator.html" title="interface in simpledb"><span class="typeNameLink">Next&nbsp;Class</span></a></li>
-</ul>
-<ul class="navList">
-<li><a href="../index.html?simpledb/DbFile.html" target="_top">Frames</a></li>
-<li><a href="DbFile.html" target="_top">No&nbsp;Frames</a></li>
-</ul>
-<ul class="navList" id="allclasses_navbar_bottom">
-<li><a href="../allclasses-noframe.html">All&nbsp;Classes</a></li>
-</ul>
-<div>
-<script type="text/javascript"><!--
-  allClassesLink = document.getElementById("allclasses_navbar_bottom");
-  if(window==top) {
-    allClassesLink.style.display = "block";
-  }
-  else {
-    allClassesLink.style.display = "none";
-  }
-  //-->
-</script>
-</div>
-<div>
-<ul class="subNavList">
-<li>Summary:&nbsp;</li>
-<li>Nested&nbsp;|&nbsp;</li>
-<li>Field&nbsp;|&nbsp;</li>
-<li>Constr&nbsp;|&nbsp;</li>
-<li><a href="#method.summary">Method</a></li>
-</ul>
-<ul class="subNavList">
-<li>Detail:&nbsp;</li>
-<li>Field&nbsp;|&nbsp;</li>
-<li>Constr&nbsp;|&nbsp;</li>
-<li><a href="#method.detail">Method</a></li>
-</ul>
-</div>
-<a name="skip.navbar.bottom">
-<!--   -->
-</a></div>
-<!-- ======== END OF BOTTOM NAVBAR ======= -->
-</body>
-</html>
diff -ruN lab1/javadoc/simpledb/DbFileIterator.html lab3/javadoc/simpledb/DbFileIterator.html
--- lab1/javadoc/simpledb/DbFileIterator.html	2016-11-02 22:06:58.000000000 -0500
+++ lab3/javadoc/simpledb/DbFileIterator.html	1969-12-31 18:00:00.000000000 -0600
@@ -1,319 +0,0 @@
-<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
-<!-- NewPage -->
-<html lang="en">
-<head>
-<!-- Generated by javadoc (1.8.0_25) on Thu Oct 27 13:16:23 CDT 2016 -->
-<title>DbFileIterator</title>
-<meta name="date" content="2016-10-27">
-<link rel="stylesheet" type="text/css" href="../stylesheet.css" title="Style">
-<script type="text/javascript" src="../script.js"></script>
-</head>
-<body>
-<script type="text/javascript"><!--
-    try {
-        if (location.href.indexOf('is-external=true') == -1) {
-            parent.document.title="DbFileIterator";
-        }
-    }
-    catch(err) {
-    }
-//-->
-var methods = {"i0":6,"i1":6,"i2":6,"i3":6,"i4":6};
-var tabs = {65535:["t0","All Methods"],2:["t2","Instance Methods"],4:["t3","Abstract Methods"]};
-var altColor = "altColor";
-var rowColor = "rowColor";
-var tableTab = "tableTab";
-var activeTableTab = "activeTableTab";
-</script>
-<noscript>
-<div>JavaScript is disabled on your browser.</div>
-</noscript>
-<!-- ========= START OF TOP NAVBAR ======= -->
-<div class="topNav"><a name="navbar.top">
-<!--   -->
-</a>
-<div class="skipNav"><a href="#skip.navbar.top" title="Skip navigation links">Skip navigation links</a></div>
-<a name="navbar.top.firstrow">
-<!--   -->
-</a>
-<ul class="navList" title="Navigation">
-<li><a href="../simpledb/package-summary.html">Package</a></li>
-<li class="navBarCell1Rev">Class</li>
-<li><a href="package-tree.html">Tree</a></li>
-<li><a href="../deprecated-list.html">Deprecated</a></li>
-<li><a href="../index-all.html">Index</a></li>
-<li><a href="../help-doc.html">Help</a></li>
-</ul>
-</div>
-<div class="subNav">
-<ul class="navList">
-<li><a href="../simpledb/DbFile.html" title="interface in simpledb"><span class="typeNameLink">Prev&nbsp;Class</span></a></li>
-<li><a href="../simpledb/DbIterator.html" title="interface in simpledb"><span class="typeNameLink">Next&nbsp;Class</span></a></li>
-</ul>
-<ul class="navList">
-<li><a href="../index.html?simpledb/DbFileIterator.html" target="_top">Frames</a></li>
-<li><a href="DbFileIterator.html" target="_top">No&nbsp;Frames</a></li>
-</ul>
-<ul class="navList" id="allclasses_navbar_top">
-<li><a href="../allclasses-noframe.html">All&nbsp;Classes</a></li>
-</ul>
-<div>
-<script type="text/javascript"><!--
-  allClassesLink = document.getElementById("allclasses_navbar_top");
-  if(window==top) {
-    allClassesLink.style.display = "block";
-  }
-  else {
-    allClassesLink.style.display = "none";
-  }
-  //-->
-</script>
-</div>
-<div>
-<ul class="subNavList">
-<li>Summary:&nbsp;</li>
-<li>Nested&nbsp;|&nbsp;</li>
-<li>Field&nbsp;|&nbsp;</li>
-<li>Constr&nbsp;|&nbsp;</li>
-<li><a href="#method.summary">Method</a></li>
-</ul>
-<ul class="subNavList">
-<li>Detail:&nbsp;</li>
-<li>Field&nbsp;|&nbsp;</li>
-<li>Constr&nbsp;|&nbsp;</li>
-<li><a href="#method.detail">Method</a></li>
-</ul>
-</div>
-<a name="skip.navbar.top">
-<!--   -->
-</a></div>
-<!-- ========= END OF TOP NAVBAR ========= -->
-<!-- ======== START OF CLASS DATA ======== -->
-<div class="header">
-<div class="subTitle">simpledb</div>
-<h2 title="Interface DbFileIterator" class="title">Interface DbFileIterator</h2>
-</div>
-<div class="contentContainer">
-<div class="description">
-<ul class="blockList">
-<li class="blockList">
-<hr>
-<br>
-<pre>public interface <span class="typeNameLabel">DbFileIterator</span></pre>
-<div class="block">DbFileIterator is the iterator interface that all SimpleDB Dbfile should
- implement.</div>
-</li>
-</ul>
-</div>
-<div class="summary">
-<ul class="blockList">
-<li class="blockList">
-<!-- ========== METHOD SUMMARY =========== -->
-<ul class="blockList">
-<li class="blockList"><a name="method.summary">
-<!--   -->
-</a>
-<h3>Method Summary</h3>
-<table class="memberSummary" border="0" cellpadding="3" cellspacing="0" summary="Method Summary table, listing methods, and an explanation">
-<caption><span id="t0" class="activeTableTab"><span>All Methods</span><span class="tabEnd">&nbsp;</span></span><span id="t2" class="tableTab"><span><a href="javascript:show(2);">Instance Methods</a></span><span class="tabEnd">&nbsp;</span></span><span id="t3" class="tableTab"><span><a href="javascript:show(4);">Abstract Methods</a></span><span class="tabEnd">&nbsp;</span></span></caption>
-<tr>
-<th class="colFirst" scope="col">Modifier and Type</th>
-<th class="colLast" scope="col">Method and Description</th>
-</tr>
-<tr id="i0" class="altColor">
-<td class="colFirst"><code>void</code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/DbFileIterator.html#close--">close</a></span>()</code>
-<div class="block">Closes the iterator.</div>
-</td>
-</tr>
-<tr id="i1" class="rowColor">
-<td class="colFirst"><code>boolean</code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/DbFileIterator.html#hasNext--">hasNext</a></span>()</code>&nbsp;</td>
-</tr>
-<tr id="i2" class="altColor">
-<td class="colFirst"><code><a href="../simpledb/Tuple.html" title="class in simpledb">Tuple</a></code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/DbFileIterator.html#next--">next</a></span>()</code>
-<div class="block">Gets the next tuple from the operator (typically implementing by reading
- from a child operator or an access method).</div>
-</td>
-</tr>
-<tr id="i3" class="rowColor">
-<td class="colFirst"><code>void</code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/DbFileIterator.html#open--">open</a></span>()</code>
-<div class="block">Opens the iterator</div>
-</td>
-</tr>
-<tr id="i4" class="altColor">
-<td class="colFirst"><code>void</code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/DbFileIterator.html#rewind--">rewind</a></span>()</code>
-<div class="block">Resets the iterator to the start.</div>
-</td>
-</tr>
-</table>
-</li>
-</ul>
-</li>
-</ul>
-</div>
-<div class="details">
-<ul class="blockList">
-<li class="blockList">
-<!-- ============ METHOD DETAIL ========== -->
-<ul class="blockList">
-<li class="blockList"><a name="method.detail">
-<!--   -->
-</a>
-<h3>Method Detail</h3>
-<a name="open--">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>open</h4>
-<pre>void&nbsp;open()
-   throws <a href="../simpledb/DbException.html" title="class in simpledb">DbException</a>,
-          <a href="../simpledb/TransactionAbortedException.html" title="class in simpledb">TransactionAbortedException</a></pre>
-<div class="block">Opens the iterator</div>
-<dl>
-<dt><span class="throwsLabel">Throws:</span></dt>
-<dd><code><a href="../simpledb/DbException.html" title="class in simpledb">DbException</a></code> - when there are problems opening/accessing the database.</dd>
-<dd><code><a href="../simpledb/TransactionAbortedException.html" title="class in simpledb">TransactionAbortedException</a></code></dd>
-</dl>
-</li>
-</ul>
-<a name="hasNext--">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>hasNext</h4>
-<pre>boolean&nbsp;hasNext()
-         throws <a href="../simpledb/DbException.html" title="class in simpledb">DbException</a>,
-                <a href="../simpledb/TransactionAbortedException.html" title="class in simpledb">TransactionAbortedException</a></pre>
-<dl>
-<dt><span class="returnLabel">Returns:</span></dt>
-<dd>true if there are more tuples available, false if no more tuples or iterator isn't open.</dd>
-<dt><span class="throwsLabel">Throws:</span></dt>
-<dd><code><a href="../simpledb/DbException.html" title="class in simpledb">DbException</a></code></dd>
-<dd><code><a href="../simpledb/TransactionAbortedException.html" title="class in simpledb">TransactionAbortedException</a></code></dd>
-</dl>
-</li>
-</ul>
-<a name="next--">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>next</h4>
-<pre><a href="../simpledb/Tuple.html" title="class in simpledb">Tuple</a>&nbsp;next()
-    throws <a href="../simpledb/DbException.html" title="class in simpledb">DbException</a>,
-           <a href="../simpledb/TransactionAbortedException.html" title="class in simpledb">TransactionAbortedException</a>,
-           java.util.NoSuchElementException</pre>
-<div class="block">Gets the next tuple from the operator (typically implementing by reading
- from a child operator or an access method).</div>
-<dl>
-<dt><span class="returnLabel">Returns:</span></dt>
-<dd>The next tuple in the iterator.</dd>
-<dt><span class="throwsLabel">Throws:</span></dt>
-<dd><code>java.util.NoSuchElementException</code> - if there are no more tuples</dd>
-<dd><code><a href="../simpledb/DbException.html" title="class in simpledb">DbException</a></code></dd>
-<dd><code><a href="../simpledb/TransactionAbortedException.html" title="class in simpledb">TransactionAbortedException</a></code></dd>
-</dl>
-</li>
-</ul>
-<a name="rewind--">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>rewind</h4>
-<pre>void&nbsp;rewind()
-     throws <a href="../simpledb/DbException.html" title="class in simpledb">DbException</a>,
-            <a href="../simpledb/TransactionAbortedException.html" title="class in simpledb">TransactionAbortedException</a></pre>
-<div class="block">Resets the iterator to the start.</div>
-<dl>
-<dt><span class="throwsLabel">Throws:</span></dt>
-<dd><code><a href="../simpledb/DbException.html" title="class in simpledb">DbException</a></code> - When rewind is unsupported.</dd>
-<dd><code><a href="../simpledb/TransactionAbortedException.html" title="class in simpledb">TransactionAbortedException</a></code></dd>
-</dl>
-</li>
-</ul>
-<a name="close--">
-<!--   -->
-</a>
-<ul class="blockListLast">
-<li class="blockList">
-<h4>close</h4>
-<pre>void&nbsp;close()</pre>
-<div class="block">Closes the iterator.</div>
-</li>
-</ul>
-</li>
-</ul>
-</li>
-</ul>
-</div>
-</div>
-<!-- ========= END OF CLASS DATA ========= -->
-<!-- ======= START OF BOTTOM NAVBAR ====== -->
-<div class="bottomNav"><a name="navbar.bottom">
-<!--   -->
-</a>
-<div class="skipNav"><a href="#skip.navbar.bottom" title="Skip navigation links">Skip navigation links</a></div>
-<a name="navbar.bottom.firstrow">
-<!--   -->
-</a>
-<ul class="navList" title="Navigation">
-<li><a href="../simpledb/package-summary.html">Package</a></li>
-<li class="navBarCell1Rev">Class</li>
-<li><a href="package-tree.html">Tree</a></li>
-<li><a href="../deprecated-list.html">Deprecated</a></li>
-<li><a href="../index-all.html">Index</a></li>
-<li><a href="../help-doc.html">Help</a></li>
-</ul>
-</div>
-<div class="subNav">
-<ul class="navList">
-<li><a href="../simpledb/DbFile.html" title="interface in simpledb"><span class="typeNameLink">Prev&nbsp;Class</span></a></li>
-<li><a href="../simpledb/DbIterator.html" title="interface in simpledb"><span class="typeNameLink">Next&nbsp;Class</span></a></li>
-</ul>
-<ul class="navList">
-<li><a href="../index.html?simpledb/DbFileIterator.html" target="_top">Frames</a></li>
-<li><a href="DbFileIterator.html" target="_top">No&nbsp;Frames</a></li>
-</ul>
-<ul class="navList" id="allclasses_navbar_bottom">
-<li><a href="../allclasses-noframe.html">All&nbsp;Classes</a></li>
-</ul>
-<div>
-<script type="text/javascript"><!--
-  allClassesLink = document.getElementById("allclasses_navbar_bottom");
-  if(window==top) {
-    allClassesLink.style.display = "block";
-  }
-  else {
-    allClassesLink.style.display = "none";
-  }
-  //-->
-</script>
-</div>
-<div>
-<ul class="subNavList">
-<li>Summary:&nbsp;</li>
-<li>Nested&nbsp;|&nbsp;</li>
-<li>Field&nbsp;|&nbsp;</li>
-<li>Constr&nbsp;|&nbsp;</li>
-<li><a href="#method.summary">Method</a></li>
-</ul>
-<ul class="subNavList">
-<li>Detail:&nbsp;</li>
-<li>Field&nbsp;|&nbsp;</li>
-<li>Constr&nbsp;|&nbsp;</li>
-<li><a href="#method.detail">Method</a></li>
-</ul>
-</div>
-<a name="skip.navbar.bottom">
-<!--   -->
-</a></div>
-<!-- ======== END OF BOTTOM NAVBAR ======= -->
-</body>
-</html>
diff -ruN lab1/javadoc/simpledb/DbIterator.html lab3/javadoc/simpledb/DbIterator.html
--- lab1/javadoc/simpledb/DbIterator.html	2016-11-02 22:06:58.000000000 -0500
+++ lab3/javadoc/simpledb/DbIterator.html	1969-12-31 18:00:00.000000000 -0600
@@ -1,359 +0,0 @@
-<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
-<!-- NewPage -->
-<html lang="en">
-<head>
-<!-- Generated by javadoc (1.8.0_25) on Thu Oct 27 13:16:23 CDT 2016 -->
-<title>DbIterator</title>
-<meta name="date" content="2016-10-27">
-<link rel="stylesheet" type="text/css" href="../stylesheet.css" title="Style">
-<script type="text/javascript" src="../script.js"></script>
-</head>
-<body>
-<script type="text/javascript"><!--
-    try {
-        if (location.href.indexOf('is-external=true') == -1) {
-            parent.document.title="DbIterator";
-        }
-    }
-    catch(err) {
-    }
-//-->
-var methods = {"i0":6,"i1":6,"i2":6,"i3":6,"i4":6,"i5":6};
-var tabs = {65535:["t0","All Methods"],2:["t2","Instance Methods"],4:["t3","Abstract Methods"]};
-var altColor = "altColor";
-var rowColor = "rowColor";
-var tableTab = "tableTab";
-var activeTableTab = "activeTableTab";
-</script>
-<noscript>
-<div>JavaScript is disabled on your browser.</div>
-</noscript>
-<!-- ========= START OF TOP NAVBAR ======= -->
-<div class="topNav"><a name="navbar.top">
-<!--   -->
-</a>
-<div class="skipNav"><a href="#skip.navbar.top" title="Skip navigation links">Skip navigation links</a></div>
-<a name="navbar.top.firstrow">
-<!--   -->
-</a>
-<ul class="navList" title="Navigation">
-<li><a href="../simpledb/package-summary.html">Package</a></li>
-<li class="navBarCell1Rev">Class</li>
-<li><a href="package-tree.html">Tree</a></li>
-<li><a href="../deprecated-list.html">Deprecated</a></li>
-<li><a href="../index-all.html">Index</a></li>
-<li><a href="../help-doc.html">Help</a></li>
-</ul>
-</div>
-<div class="subNav">
-<ul class="navList">
-<li><a href="../simpledb/DbFileIterator.html" title="interface in simpledb"><span class="typeNameLink">Prev&nbsp;Class</span></a></li>
-<li><a href="../simpledb/Debug.html" title="class in simpledb"><span class="typeNameLink">Next&nbsp;Class</span></a></li>
-</ul>
-<ul class="navList">
-<li><a href="../index.html?simpledb/DbIterator.html" target="_top">Frames</a></li>
-<li><a href="DbIterator.html" target="_top">No&nbsp;Frames</a></li>
-</ul>
-<ul class="navList" id="allclasses_navbar_top">
-<li><a href="../allclasses-noframe.html">All&nbsp;Classes</a></li>
-</ul>
-<div>
-<script type="text/javascript"><!--
-  allClassesLink = document.getElementById("allclasses_navbar_top");
-  if(window==top) {
-    allClassesLink.style.display = "block";
-  }
-  else {
-    allClassesLink.style.display = "none";
-  }
-  //-->
-</script>
-</div>
-<div>
-<ul class="subNavList">
-<li>Summary:&nbsp;</li>
-<li>Nested&nbsp;|&nbsp;</li>
-<li>Field&nbsp;|&nbsp;</li>
-<li>Constr&nbsp;|&nbsp;</li>
-<li><a href="#method.summary">Method</a></li>
-</ul>
-<ul class="subNavList">
-<li>Detail:&nbsp;</li>
-<li>Field&nbsp;|&nbsp;</li>
-<li>Constr&nbsp;|&nbsp;</li>
-<li><a href="#method.detail">Method</a></li>
-</ul>
-</div>
-<a name="skip.navbar.top">
-<!--   -->
-</a></div>
-<!-- ========= END OF TOP NAVBAR ========= -->
-<!-- ======== START OF CLASS DATA ======== -->
-<div class="header">
-<div class="subTitle">simpledb</div>
-<h2 title="Interface DbIterator" class="title">Interface DbIterator</h2>
-</div>
-<div class="contentContainer">
-<div class="description">
-<ul class="blockList">
-<li class="blockList">
-<dl>
-<dt>All Superinterfaces:</dt>
-<dd>java.io.Serializable</dd>
-</dl>
-<dl>
-<dt>All Known Implementing Classes:</dt>
-<dd><a href="../simpledb/SeqScan.html" title="class in simpledb">SeqScan</a>, <a href="../simpledb/TupleIterator.html" title="class in simpledb">TupleIterator</a></dd>
-</dl>
-<hr>
-<br>
-<pre>public interface <span class="typeNameLabel">DbIterator</span>
-extends java.io.Serializable</pre>
-<div class="block">DbIterator is the iterator interface that all SimpleDB operators should
- implement. If the iterator is not open, none of the methods should work,
- and should throw an IllegalStateException.  In addition to any
- resource allocation/deallocation, an open method should call any
- child iterator open methods, and in a close method, an iterator
- should call its children's close methods.</div>
-</li>
-</ul>
-</div>
-<div class="summary">
-<ul class="blockList">
-<li class="blockList">
-<!-- ========== METHOD SUMMARY =========== -->
-<ul class="blockList">
-<li class="blockList"><a name="method.summary">
-<!--   -->
-</a>
-<h3>Method Summary</h3>
-<table class="memberSummary" border="0" cellpadding="3" cellspacing="0" summary="Method Summary table, listing methods, and an explanation">
-<caption><span id="t0" class="activeTableTab"><span>All Methods</span><span class="tabEnd">&nbsp;</span></span><span id="t2" class="tableTab"><span><a href="javascript:show(2);">Instance Methods</a></span><span class="tabEnd">&nbsp;</span></span><span id="t3" class="tableTab"><span><a href="javascript:show(4);">Abstract Methods</a></span><span class="tabEnd">&nbsp;</span></span></caption>
-<tr>
-<th class="colFirst" scope="col">Modifier and Type</th>
-<th class="colLast" scope="col">Method and Description</th>
-</tr>
-<tr id="i0" class="altColor">
-<td class="colFirst"><code>void</code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/DbIterator.html#close--">close</a></span>()</code>
-<div class="block">Closes the iterator.</div>
-</td>
-</tr>
-<tr id="i1" class="rowColor">
-<td class="colFirst"><code><a href="../simpledb/TupleDesc.html" title="class in simpledb">TupleDesc</a></code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/DbIterator.html#getTupleDesc--">getTupleDesc</a></span>()</code>
-<div class="block">Returns the TupleDesc associated with this DbIterator.</div>
-</td>
-</tr>
-<tr id="i2" class="altColor">
-<td class="colFirst"><code>boolean</code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/DbIterator.html#hasNext--">hasNext</a></span>()</code>
-<div class="block">Returns true if the iterator has more tuples.</div>
-</td>
-</tr>
-<tr id="i3" class="rowColor">
-<td class="colFirst"><code><a href="../simpledb/Tuple.html" title="class in simpledb">Tuple</a></code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/DbIterator.html#next--">next</a></span>()</code>
-<div class="block">Returns the next tuple from the operator (typically implementing by reading
- from a child operator or an access method).</div>
-</td>
-</tr>
-<tr id="i4" class="altColor">
-<td class="colFirst"><code>void</code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/DbIterator.html#open--">open</a></span>()</code>
-<div class="block">Opens the iterator.</div>
-</td>
-</tr>
-<tr id="i5" class="rowColor">
-<td class="colFirst"><code>void</code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/DbIterator.html#rewind--">rewind</a></span>()</code>
-<div class="block">Resets the iterator to the start.</div>
-</td>
-</tr>
-</table>
-</li>
-</ul>
-</li>
-</ul>
-</div>
-<div class="details">
-<ul class="blockList">
-<li class="blockList">
-<!-- ============ METHOD DETAIL ========== -->
-<ul class="blockList">
-<li class="blockList"><a name="method.detail">
-<!--   -->
-</a>
-<h3>Method Detail</h3>
-<a name="open--">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>open</h4>
-<pre>void&nbsp;open()
-   throws <a href="../simpledb/DbException.html" title="class in simpledb">DbException</a>,
-          <a href="../simpledb/TransactionAbortedException.html" title="class in simpledb">TransactionAbortedException</a></pre>
-<div class="block">Opens the iterator. This must be called before any of the other methods.</div>
-<dl>
-<dt><span class="throwsLabel">Throws:</span></dt>
-<dd><code><a href="../simpledb/DbException.html" title="class in simpledb">DbException</a></code> - when there are problems opening/accessing the database.</dd>
-<dd><code><a href="../simpledb/TransactionAbortedException.html" title="class in simpledb">TransactionAbortedException</a></code></dd>
-</dl>
-</li>
-</ul>
-<a name="hasNext--">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>hasNext</h4>
-<pre>boolean&nbsp;hasNext()
-         throws <a href="../simpledb/DbException.html" title="class in simpledb">DbException</a>,
-                <a href="../simpledb/TransactionAbortedException.html" title="class in simpledb">TransactionAbortedException</a></pre>
-<div class="block">Returns true if the iterator has more tuples.</div>
-<dl>
-<dt><span class="returnLabel">Returns:</span></dt>
-<dd>true f the iterator has more tuples.</dd>
-<dt><span class="throwsLabel">Throws:</span></dt>
-<dd><code>java.lang.IllegalStateException</code> - If the iterator has not been opened</dd>
-<dd><code><a href="../simpledb/DbException.html" title="class in simpledb">DbException</a></code></dd>
-<dd><code><a href="../simpledb/TransactionAbortedException.html" title="class in simpledb">TransactionAbortedException</a></code></dd>
-</dl>
-</li>
-</ul>
-<a name="next--">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>next</h4>
-<pre><a href="../simpledb/Tuple.html" title="class in simpledb">Tuple</a>&nbsp;next()
-    throws <a href="../simpledb/DbException.html" title="class in simpledb">DbException</a>,
-           <a href="../simpledb/TransactionAbortedException.html" title="class in simpledb">TransactionAbortedException</a>,
-           java.util.NoSuchElementException</pre>
-<div class="block">Returns the next tuple from the operator (typically implementing by reading
- from a child operator or an access method).</div>
-<dl>
-<dt><span class="returnLabel">Returns:</span></dt>
-<dd>the next tuple in the iteration.</dd>
-<dt><span class="throwsLabel">Throws:</span></dt>
-<dd><code>java.util.NoSuchElementException</code> - if there are no more tuples.</dd>
-<dd><code>java.lang.IllegalStateException</code> - If the iterator has not been opened</dd>
-<dd><code><a href="../simpledb/DbException.html" title="class in simpledb">DbException</a></code></dd>
-<dd><code><a href="../simpledb/TransactionAbortedException.html" title="class in simpledb">TransactionAbortedException</a></code></dd>
-</dl>
-</li>
-</ul>
-<a name="rewind--">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>rewind</h4>
-<pre>void&nbsp;rewind()
-     throws <a href="../simpledb/DbException.html" title="class in simpledb">DbException</a>,
-            <a href="../simpledb/TransactionAbortedException.html" title="class in simpledb">TransactionAbortedException</a></pre>
-<div class="block">Resets the iterator to the start.</div>
-<dl>
-<dt><span class="throwsLabel">Throws:</span></dt>
-<dd><code><a href="../simpledb/DbException.html" title="class in simpledb">DbException</a></code> - when rewind is unsupported.</dd>
-<dd><code>java.lang.IllegalStateException</code> - If the iterator has not been opened</dd>
-<dd><code><a href="../simpledb/TransactionAbortedException.html" title="class in simpledb">TransactionAbortedException</a></code></dd>
-</dl>
-</li>
-</ul>
-<a name="getTupleDesc--">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>getTupleDesc</h4>
-<pre><a href="../simpledb/TupleDesc.html" title="class in simpledb">TupleDesc</a>&nbsp;getTupleDesc()</pre>
-<div class="block">Returns the TupleDesc associated with this DbIterator.</div>
-<dl>
-<dt><span class="returnLabel">Returns:</span></dt>
-<dd>the TupleDesc associated with this DbIterator.</dd>
-</dl>
-</li>
-</ul>
-<a name="close--">
-<!--   -->
-</a>
-<ul class="blockListLast">
-<li class="blockList">
-<h4>close</h4>
-<pre>void&nbsp;close()</pre>
-<div class="block">Closes the iterator. When the iterator is closed, calling next(),
- hasNext(), or rewind() should fail by throwing IllegalStateException.</div>
-</li>
-</ul>
-</li>
-</ul>
-</li>
-</ul>
-</div>
-</div>
-<!-- ========= END OF CLASS DATA ========= -->
-<!-- ======= START OF BOTTOM NAVBAR ====== -->
-<div class="bottomNav"><a name="navbar.bottom">
-<!--   -->
-</a>
-<div class="skipNav"><a href="#skip.navbar.bottom" title="Skip navigation links">Skip navigation links</a></div>
-<a name="navbar.bottom.firstrow">
-<!--   -->
-</a>
-<ul class="navList" title="Navigation">
-<li><a href="../simpledb/package-summary.html">Package</a></li>
-<li class="navBarCell1Rev">Class</li>
-<li><a href="package-tree.html">Tree</a></li>
-<li><a href="../deprecated-list.html">Deprecated</a></li>
-<li><a href="../index-all.html">Index</a></li>
-<li><a href="../help-doc.html">Help</a></li>
-</ul>
-</div>
-<div class="subNav">
-<ul class="navList">
-<li><a href="../simpledb/DbFileIterator.html" title="interface in simpledb"><span class="typeNameLink">Prev&nbsp;Class</span></a></li>
-<li><a href="../simpledb/Debug.html" title="class in simpledb"><span class="typeNameLink">Next&nbsp;Class</span></a></li>
-</ul>
-<ul class="navList">
-<li><a href="../index.html?simpledb/DbIterator.html" target="_top">Frames</a></li>
-<li><a href="DbIterator.html" target="_top">No&nbsp;Frames</a></li>
-</ul>
-<ul class="navList" id="allclasses_navbar_bottom">
-<li><a href="../allclasses-noframe.html">All&nbsp;Classes</a></li>
-</ul>
-<div>
-<script type="text/javascript"><!--
-  allClassesLink = document.getElementById("allclasses_navbar_bottom");
-  if(window==top) {
-    allClassesLink.style.display = "block";
-  }
-  else {
-    allClassesLink.style.display = "none";
-  }
-  //-->
-</script>
-</div>
-<div>
-<ul class="subNavList">
-<li>Summary:&nbsp;</li>
-<li>Nested&nbsp;|&nbsp;</li>
-<li>Field&nbsp;|&nbsp;</li>
-<li>Constr&nbsp;|&nbsp;</li>
-<li><a href="#method.summary">Method</a></li>
-</ul>
-<ul class="subNavList">
-<li>Detail:&nbsp;</li>
-<li>Field&nbsp;|&nbsp;</li>
-<li>Constr&nbsp;|&nbsp;</li>
-<li><a href="#method.detail">Method</a></li>
-</ul>
-</div>
-<a name="skip.navbar.bottom">
-<!--   -->
-</a></div>
-<!-- ======== END OF BOTTOM NAVBAR ======= -->
-</body>
-</html>
diff -ruN lab1/javadoc/simpledb/Debug.html lab3/javadoc/simpledb/Debug.html
--- lab1/javadoc/simpledb/Debug.html	2016-11-02 22:06:58.000000000 -0500
+++ lab3/javadoc/simpledb/Debug.html	1969-12-31 18:00:00.000000000 -0600
@@ -1,387 +0,0 @@
-<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
-<!-- NewPage -->
-<html lang="en">
-<head>
-<!-- Generated by javadoc (1.8.0_25) on Thu Oct 27 13:16:23 CDT 2016 -->
-<title>Debug</title>
-<meta name="date" content="2016-10-27">
-<link rel="stylesheet" type="text/css" href="../stylesheet.css" title="Style">
-<script type="text/javascript" src="../script.js"></script>
-</head>
-<body>
-<script type="text/javascript"><!--
-    try {
-        if (location.href.indexOf('is-external=true') == -1) {
-            parent.document.title="Debug";
-        }
-    }
-    catch(err) {
-    }
-//-->
-var methods = {"i0":9,"i1":9,"i2":9,"i3":9};
-var tabs = {65535:["t0","All Methods"],1:["t1","Static Methods"],8:["t4","Concrete Methods"]};
-var altColor = "altColor";
-var rowColor = "rowColor";
-var tableTab = "tableTab";
-var activeTableTab = "activeTableTab";
-</script>
-<noscript>
-<div>JavaScript is disabled on your browser.</div>
-</noscript>
-<!-- ========= START OF TOP NAVBAR ======= -->
-<div class="topNav"><a name="navbar.top">
-<!--   -->
-</a>
-<div class="skipNav"><a href="#skip.navbar.top" title="Skip navigation links">Skip navigation links</a></div>
-<a name="navbar.top.firstrow">
-<!--   -->
-</a>
-<ul class="navList" title="Navigation">
-<li><a href="../simpledb/package-summary.html">Package</a></li>
-<li class="navBarCell1Rev">Class</li>
-<li><a href="package-tree.html">Tree</a></li>
-<li><a href="../deprecated-list.html">Deprecated</a></li>
-<li><a href="../index-all.html">Index</a></li>
-<li><a href="../help-doc.html">Help</a></li>
-</ul>
-</div>
-<div class="subNav">
-<ul class="navList">
-<li><a href="../simpledb/DbIterator.html" title="interface in simpledb"><span class="typeNameLink">Prev&nbsp;Class</span></a></li>
-<li><a href="../simpledb/Field.html" title="interface in simpledb"><span class="typeNameLink">Next&nbsp;Class</span></a></li>
-</ul>
-<ul class="navList">
-<li><a href="../index.html?simpledb/Debug.html" target="_top">Frames</a></li>
-<li><a href="Debug.html" target="_top">No&nbsp;Frames</a></li>
-</ul>
-<ul class="navList" id="allclasses_navbar_top">
-<li><a href="../allclasses-noframe.html">All&nbsp;Classes</a></li>
-</ul>
-<div>
-<script type="text/javascript"><!--
-  allClassesLink = document.getElementById("allclasses_navbar_top");
-  if(window==top) {
-    allClassesLink.style.display = "block";
-  }
-  else {
-    allClassesLink.style.display = "none";
-  }
-  //-->
-</script>
-</div>
-<div>
-<ul class="subNavList">
-<li>Summary:&nbsp;</li>
-<li>Nested&nbsp;|&nbsp;</li>
-<li><a href="#field.summary">Field</a>&nbsp;|&nbsp;</li>
-<li><a href="#constructor.summary">Constr</a>&nbsp;|&nbsp;</li>
-<li><a href="#method.summary">Method</a></li>
-</ul>
-<ul class="subNavList">
-<li>Detail:&nbsp;</li>
-<li><a href="#field.detail">Field</a>&nbsp;|&nbsp;</li>
-<li><a href="#constructor.detail">Constr</a>&nbsp;|&nbsp;</li>
-<li><a href="#method.detail">Method</a></li>
-</ul>
-</div>
-<a name="skip.navbar.top">
-<!--   -->
-</a></div>
-<!-- ========= END OF TOP NAVBAR ========= -->
-<!-- ======== START OF CLASS DATA ======== -->
-<div class="header">
-<div class="subTitle">simpledb</div>
-<h2 title="Class Debug" class="title">Class Debug</h2>
-</div>
-<div class="contentContainer">
-<ul class="inheritance">
-<li>java.lang.Object</li>
-<li>
-<ul class="inheritance">
-<li>simpledb.Debug</li>
-</ul>
-</li>
-</ul>
-<div class="description">
-<ul class="blockList">
-<li class="blockList">
-<hr>
-<br>
-<pre>public class <span class="typeNameLabel">Debug</span>
-extends java.lang.Object</pre>
-<div class="block">Debug is a utility class that wraps println statements and allows
- more or less command line output to be turned on.
- <p>
- Change the value of the DEBUG_LEVEL constant using a system property:
- simpledb.Debug. For example, on the command line, use -Dsimpledb.Debug=x,
- or simply -Dsimpledb.Debug to enable it at level 0.
- The log(level, message, ...) method will print to standard output if the
- level number is less than or equal to the currently set DEBUG_LEVEL.</div>
-</li>
-</ul>
-</div>
-<div class="summary">
-<ul class="blockList">
-<li class="blockList">
-<!-- =========== FIELD SUMMARY =========== -->
-<ul class="blockList">
-<li class="blockList"><a name="field.summary">
-<!--   -->
-</a>
-<h3>Field Summary</h3>
-<table class="memberSummary" border="0" cellpadding="3" cellspacing="0" summary="Field Summary table, listing fields, and an explanation">
-<caption><span>Fields</span><span class="tabEnd">&nbsp;</span></caption>
-<tr>
-<th class="colFirst" scope="col">Modifier and Type</th>
-<th class="colLast" scope="col">Field and Description</th>
-</tr>
-<tr class="altColor">
-<td class="colFirst"><code>private static int</code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/Debug.html#DEBUG_LEVEL">DEBUG_LEVEL</a></span></code>&nbsp;</td>
-</tr>
-<tr class="rowColor">
-<td class="colFirst"><code>private static int</code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/Debug.html#DEFAULT_LEVEL">DEFAULT_LEVEL</a></span></code>&nbsp;</td>
-</tr>
-</table>
-</li>
-</ul>
-<!-- ======== CONSTRUCTOR SUMMARY ======== -->
-<ul class="blockList">
-<li class="blockList"><a name="constructor.summary">
-<!--   -->
-</a>
-<h3>Constructor Summary</h3>
-<table class="memberSummary" border="0" cellpadding="3" cellspacing="0" summary="Constructor Summary table, listing constructors, and an explanation">
-<caption><span>Constructors</span><span class="tabEnd">&nbsp;</span></caption>
-<tr>
-<th class="colOne" scope="col">Constructor and Description</th>
-</tr>
-<tr class="altColor">
-<td class="colOne"><code><span class="memberNameLink"><a href="../simpledb/Debug.html#Debug--">Debug</a></span>()</code>&nbsp;</td>
-</tr>
-</table>
-</li>
-</ul>
-<!-- ========== METHOD SUMMARY =========== -->
-<ul class="blockList">
-<li class="blockList"><a name="method.summary">
-<!--   -->
-</a>
-<h3>Method Summary</h3>
-<table class="memberSummary" border="0" cellpadding="3" cellspacing="0" summary="Method Summary table, listing methods, and an explanation">
-<caption><span id="t0" class="activeTableTab"><span>All Methods</span><span class="tabEnd">&nbsp;</span></span><span id="t1" class="tableTab"><span><a href="javascript:show(1);">Static Methods</a></span><span class="tabEnd">&nbsp;</span></span><span id="t4" class="tableTab"><span><a href="javascript:show(8);">Concrete Methods</a></span><span class="tabEnd">&nbsp;</span></span></caption>
-<tr>
-<th class="colFirst" scope="col">Modifier and Type</th>
-<th class="colLast" scope="col">Method and Description</th>
-</tr>
-<tr id="i0" class="altColor">
-<td class="colFirst"><code>static boolean</code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/Debug.html#isEnabled--">isEnabled</a></span>()</code>&nbsp;</td>
-</tr>
-<tr id="i1" class="rowColor">
-<td class="colFirst"><code>static boolean</code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/Debug.html#isEnabled-int-">isEnabled</a></span>(int&nbsp;level)</code>&nbsp;</td>
-</tr>
-<tr id="i2" class="altColor">
-<td class="colFirst"><code>static void</code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/Debug.html#log-int-java.lang.String-java.lang.Object...-">log</a></span>(int&nbsp;level,
-   java.lang.String&nbsp;message,
-   java.lang.Object...&nbsp;args)</code>
-<div class="block">Log message if the log level >= level.</div>
-</td>
-</tr>
-<tr id="i3" class="rowColor">
-<td class="colFirst"><code>static void</code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/Debug.html#log-java.lang.String-java.lang.Object...-">log</a></span>(java.lang.String&nbsp;message,
-   java.lang.Object...&nbsp;args)</code>
-<div class="block">Logs message at the default log level.</div>
-</td>
-</tr>
-</table>
-<ul class="blockList">
-<li class="blockList"><a name="methods.inherited.from.class.java.lang.Object">
-<!--   -->
-</a>
-<h3>Methods inherited from class&nbsp;java.lang.Object</h3>
-<code>clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait</code></li>
-</ul>
-</li>
-</ul>
-</li>
-</ul>
-</div>
-<div class="details">
-<ul class="blockList">
-<li class="blockList">
-<!-- ============ FIELD DETAIL =========== -->
-<ul class="blockList">
-<li class="blockList"><a name="field.detail">
-<!--   -->
-</a>
-<h3>Field Detail</h3>
-<a name="DEBUG_LEVEL">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>DEBUG_LEVEL</h4>
-<pre>private static final&nbsp;int DEBUG_LEVEL</pre>
-</li>
-</ul>
-<a name="DEFAULT_LEVEL">
-<!--   -->
-</a>
-<ul class="blockListLast">
-<li class="blockList">
-<h4>DEFAULT_LEVEL</h4>
-<pre>private static final&nbsp;int DEFAULT_LEVEL</pre>
-<dl>
-<dt><span class="seeLabel">See Also:</span></dt>
-<dd><a href="../constant-values.html#simpledb.Debug.DEFAULT_LEVEL">Constant Field Values</a></dd>
-</dl>
-</li>
-</ul>
-</li>
-</ul>
-<!-- ========= CONSTRUCTOR DETAIL ======== -->
-<ul class="blockList">
-<li class="blockList"><a name="constructor.detail">
-<!--   -->
-</a>
-<h3>Constructor Detail</h3>
-<a name="Debug--">
-<!--   -->
-</a>
-<ul class="blockListLast">
-<li class="blockList">
-<h4>Debug</h4>
-<pre>public&nbsp;Debug()</pre>
-</li>
-</ul>
-</li>
-</ul>
-<!-- ============ METHOD DETAIL ========== -->
-<ul class="blockList">
-<li class="blockList"><a name="method.detail">
-<!--   -->
-</a>
-<h3>Method Detail</h3>
-<a name="log-int-java.lang.String-java.lang.Object...-">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>log</h4>
-<pre>public static&nbsp;void&nbsp;log(int&nbsp;level,
-                       java.lang.String&nbsp;message,
-                       java.lang.Object...&nbsp;args)</pre>
-<div class="block">Log message if the log level >= level. Uses printf.</div>
-</li>
-</ul>
-<a name="isEnabled-int-">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>isEnabled</h4>
-<pre>public static&nbsp;boolean&nbsp;isEnabled(int&nbsp;level)</pre>
-<dl>
-<dt><span class="returnLabel">Returns:</span></dt>
-<dd>true if level is being logged.</dd>
-</dl>
-</li>
-</ul>
-<a name="isEnabled--">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>isEnabled</h4>
-<pre>public static&nbsp;boolean&nbsp;isEnabled()</pre>
-<dl>
-<dt><span class="returnLabel">Returns:</span></dt>
-<dd>true if the default level is being logged.</dd>
-</dl>
-</li>
-</ul>
-<a name="log-java.lang.String-java.lang.Object...-">
-<!--   -->
-</a>
-<ul class="blockListLast">
-<li class="blockList">
-<h4>log</h4>
-<pre>public static&nbsp;void&nbsp;log(java.lang.String&nbsp;message,
-                       java.lang.Object...&nbsp;args)</pre>
-<div class="block">Logs message at the default log level.</div>
-</li>
-</ul>
-</li>
-</ul>
-</li>
-</ul>
-</div>
-</div>
-<!-- ========= END OF CLASS DATA ========= -->
-<!-- ======= START OF BOTTOM NAVBAR ====== -->
-<div class="bottomNav"><a name="navbar.bottom">
-<!--   -->
-</a>
-<div class="skipNav"><a href="#skip.navbar.bottom" title="Skip navigation links">Skip navigation links</a></div>
-<a name="navbar.bottom.firstrow">
-<!--   -->
-</a>
-<ul class="navList" title="Navigation">
-<li><a href="../simpledb/package-summary.html">Package</a></li>
-<li class="navBarCell1Rev">Class</li>
-<li><a href="package-tree.html">Tree</a></li>
-<li><a href="../deprecated-list.html">Deprecated</a></li>
-<li><a href="../index-all.html">Index</a></li>
-<li><a href="../help-doc.html">Help</a></li>
-</ul>
-</div>
-<div class="subNav">
-<ul class="navList">
-<li><a href="../simpledb/DbIterator.html" title="interface in simpledb"><span class="typeNameLink">Prev&nbsp;Class</span></a></li>
-<li><a href="../simpledb/Field.html" title="interface in simpledb"><span class="typeNameLink">Next&nbsp;Class</span></a></li>
-</ul>
-<ul class="navList">
-<li><a href="../index.html?simpledb/Debug.html" target="_top">Frames</a></li>
-<li><a href="Debug.html" target="_top">No&nbsp;Frames</a></li>
-</ul>
-<ul class="navList" id="allclasses_navbar_bottom">
-<li><a href="../allclasses-noframe.html">All&nbsp;Classes</a></li>
-</ul>
-<div>
-<script type="text/javascript"><!--
-  allClassesLink = document.getElementById("allclasses_navbar_bottom");
-  if(window==top) {
-    allClassesLink.style.display = "block";
-  }
-  else {
-    allClassesLink.style.display = "none";
-  }
-  //-->
-</script>
-</div>
-<div>
-<ul class="subNavList">
-<li>Summary:&nbsp;</li>
-<li>Nested&nbsp;|&nbsp;</li>
-<li><a href="#field.summary">Field</a>&nbsp;|&nbsp;</li>
-<li><a href="#constructor.summary">Constr</a>&nbsp;|&nbsp;</li>
-<li><a href="#method.summary">Method</a></li>
-</ul>
-<ul class="subNavList">
-<li>Detail:&nbsp;</li>
-<li><a href="#field.detail">Field</a>&nbsp;|&nbsp;</li>
-<li><a href="#constructor.detail">Constr</a>&nbsp;|&nbsp;</li>
-<li><a href="#method.detail">Method</a></li>
-</ul>
-</div>
-<a name="skip.navbar.bottom">
-<!--   -->
-</a></div>
-<!-- ======== END OF BOTTOM NAVBAR ======= -->
-</body>
-</html>
diff -ruN lab1/javadoc/simpledb/Field.html lab3/javadoc/simpledb/Field.html
--- lab1/javadoc/simpledb/Field.html	2016-11-02 22:06:58.000000000 -0500
+++ lab3/javadoc/simpledb/Field.html	1969-12-31 18:00:00.000000000 -0600
@@ -1,342 +0,0 @@
-<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
-<!-- NewPage -->
-<html lang="en">
-<head>
-<!-- Generated by javadoc (1.8.0_25) on Thu Oct 27 13:16:23 CDT 2016 -->
-<title>Field</title>
-<meta name="date" content="2016-10-27">
-<link rel="stylesheet" type="text/css" href="../stylesheet.css" title="Style">
-<script type="text/javascript" src="../script.js"></script>
-</head>
-<body>
-<script type="text/javascript"><!--
-    try {
-        if (location.href.indexOf('is-external=true') == -1) {
-            parent.document.title="Field";
-        }
-    }
-    catch(err) {
-    }
-//-->
-var methods = {"i0":6,"i1":6,"i2":6,"i3":6,"i4":6,"i5":6};
-var tabs = {65535:["t0","All Methods"],2:["t2","Instance Methods"],4:["t3","Abstract Methods"]};
-var altColor = "altColor";
-var rowColor = "rowColor";
-var tableTab = "tableTab";
-var activeTableTab = "activeTableTab";
-</script>
-<noscript>
-<div>JavaScript is disabled on your browser.</div>
-</noscript>
-<!-- ========= START OF TOP NAVBAR ======= -->
-<div class="topNav"><a name="navbar.top">
-<!--   -->
-</a>
-<div class="skipNav"><a href="#skip.navbar.top" title="Skip navigation links">Skip navigation links</a></div>
-<a name="navbar.top.firstrow">
-<!--   -->
-</a>
-<ul class="navList" title="Navigation">
-<li><a href="../simpledb/package-summary.html">Package</a></li>
-<li class="navBarCell1Rev">Class</li>
-<li><a href="package-tree.html">Tree</a></li>
-<li><a href="../deprecated-list.html">Deprecated</a></li>
-<li><a href="../index-all.html">Index</a></li>
-<li><a href="../help-doc.html">Help</a></li>
-</ul>
-</div>
-<div class="subNav">
-<ul class="navList">
-<li><a href="../simpledb/Debug.html" title="class in simpledb"><span class="typeNameLink">Prev&nbsp;Class</span></a></li>
-<li><a href="../simpledb/HeapFile.html" title="class in simpledb"><span class="typeNameLink">Next&nbsp;Class</span></a></li>
-</ul>
-<ul class="navList">
-<li><a href="../index.html?simpledb/Field.html" target="_top">Frames</a></li>
-<li><a href="Field.html" target="_top">No&nbsp;Frames</a></li>
-</ul>
-<ul class="navList" id="allclasses_navbar_top">
-<li><a href="../allclasses-noframe.html">All&nbsp;Classes</a></li>
-</ul>
-<div>
-<script type="text/javascript"><!--
-  allClassesLink = document.getElementById("allclasses_navbar_top");
-  if(window==top) {
-    allClassesLink.style.display = "block";
-  }
-  else {
-    allClassesLink.style.display = "none";
-  }
-  //-->
-</script>
-</div>
-<div>
-<ul class="subNavList">
-<li>Summary:&nbsp;</li>
-<li>Nested&nbsp;|&nbsp;</li>
-<li>Field&nbsp;|&nbsp;</li>
-<li>Constr&nbsp;|&nbsp;</li>
-<li><a href="#method.summary">Method</a></li>
-</ul>
-<ul class="subNavList">
-<li>Detail:&nbsp;</li>
-<li>Field&nbsp;|&nbsp;</li>
-<li>Constr&nbsp;|&nbsp;</li>
-<li><a href="#method.detail">Method</a></li>
-</ul>
-</div>
-<a name="skip.navbar.top">
-<!--   -->
-</a></div>
-<!-- ========= END OF TOP NAVBAR ========= -->
-<!-- ======== START OF CLASS DATA ======== -->
-<div class="header">
-<div class="subTitle">simpledb</div>
-<h2 title="Interface Field" class="title">Interface Field</h2>
-</div>
-<div class="contentContainer">
-<div class="description">
-<ul class="blockList">
-<li class="blockList">
-<dl>
-<dt>All Superinterfaces:</dt>
-<dd>java.io.Serializable</dd>
-</dl>
-<dl>
-<dt>All Known Implementing Classes:</dt>
-<dd><a href="../simpledb/IntField.html" title="class in simpledb">IntField</a>, <a href="../simpledb/StringField.html" title="class in simpledb">StringField</a></dd>
-</dl>
-<hr>
-<br>
-<pre>public interface <span class="typeNameLabel">Field</span>
-extends java.io.Serializable</pre>
-<div class="block">Interface for values of fields in tuples in SimpleDB.</div>
-</li>
-</ul>
-</div>
-<div class="summary">
-<ul class="blockList">
-<li class="blockList">
-<!-- ========== METHOD SUMMARY =========== -->
-<ul class="blockList">
-<li class="blockList"><a name="method.summary">
-<!--   -->
-</a>
-<h3>Method Summary</h3>
-<table class="memberSummary" border="0" cellpadding="3" cellspacing="0" summary="Method Summary table, listing methods, and an explanation">
-<caption><span id="t0" class="activeTableTab"><span>All Methods</span><span class="tabEnd">&nbsp;</span></span><span id="t2" class="tableTab"><span><a href="javascript:show(2);">Instance Methods</a></span><span class="tabEnd">&nbsp;</span></span><span id="t3" class="tableTab"><span><a href="javascript:show(4);">Abstract Methods</a></span><span class="tabEnd">&nbsp;</span></span></caption>
-<tr>
-<th class="colFirst" scope="col">Modifier and Type</th>
-<th class="colLast" scope="col">Method and Description</th>
-</tr>
-<tr id="i0" class="altColor">
-<td class="colFirst"><code>boolean</code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/Field.html#compare-simpledb.Predicate.Op-simpledb.Field-">compare</a></span>(<a href="../simpledb/Predicate.Op.html" title="enum in simpledb">Predicate.Op</a>&nbsp;op,
-       <a href="../simpledb/Field.html" title="interface in simpledb">Field</a>&nbsp;value)</code>
-<div class="block">Compare the value of this field object to the passed in value.</div>
-</td>
-</tr>
-<tr id="i1" class="rowColor">
-<td class="colFirst"><code>boolean</code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/Field.html#equals-java.lang.Object-">equals</a></span>(java.lang.Object&nbsp;field)</code>&nbsp;</td>
-</tr>
-<tr id="i2" class="altColor">
-<td class="colFirst"><code><a href="../simpledb/Type.html" title="enum in simpledb">Type</a></code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/Field.html#getType--">getType</a></span>()</code>
-<div class="block">Returns the type of this field (see <a href="../simpledb/Type.html#INT_TYPE"><code>Type.INT_TYPE</code></a> or <a href="../simpledb/Type.html#STRING_TYPE"><code>Type.STRING_TYPE</code></a></div>
-</td>
-</tr>
-<tr id="i3" class="rowColor">
-<td class="colFirst"><code>int</code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/Field.html#hashCode--">hashCode</a></span>()</code>
-<div class="block">Hash code.</div>
-</td>
-</tr>
-<tr id="i4" class="altColor">
-<td class="colFirst"><code>void</code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/Field.html#serialize-java.io.DataOutputStream-">serialize</a></span>(java.io.DataOutputStream&nbsp;dos)</code>
-<div class="block">Write the bytes representing this field to the specified
- DataOutputStream.</div>
-</td>
-</tr>
-<tr id="i5" class="rowColor">
-<td class="colFirst"><code>java.lang.String</code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/Field.html#toString--">toString</a></span>()</code>&nbsp;</td>
-</tr>
-</table>
-</li>
-</ul>
-</li>
-</ul>
-</div>
-<div class="details">
-<ul class="blockList">
-<li class="blockList">
-<!-- ============ METHOD DETAIL ========== -->
-<ul class="blockList">
-<li class="blockList"><a name="method.detail">
-<!--   -->
-</a>
-<h3>Method Detail</h3>
-<a name="serialize-java.io.DataOutputStream-">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>serialize</h4>
-<pre>void&nbsp;serialize(java.io.DataOutputStream&nbsp;dos)
-        throws java.io.IOException</pre>
-<div class="block">Write the bytes representing this field to the specified
- DataOutputStream.</div>
-<dl>
-<dt><span class="paramLabel">Parameters:</span></dt>
-<dd><code>dos</code> - The DataOutputStream to write to.</dd>
-<dt><span class="throwsLabel">Throws:</span></dt>
-<dd><code>java.io.IOException</code></dd>
-<dt><span class="seeLabel">See Also:</span></dt>
-<dd><code>DataOutputStream</code></dd>
-</dl>
-</li>
-</ul>
-<a name="compare-simpledb.Predicate.Op-simpledb.Field-">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>compare</h4>
-<pre>boolean&nbsp;compare(<a href="../simpledb/Predicate.Op.html" title="enum in simpledb">Predicate.Op</a>&nbsp;op,
-                <a href="../simpledb/Field.html" title="interface in simpledb">Field</a>&nbsp;value)</pre>
-<div class="block">Compare the value of this field object to the passed in value.</div>
-<dl>
-<dt><span class="paramLabel">Parameters:</span></dt>
-<dd><code>op</code> - The operator</dd>
-<dd><code>value</code> - The value to compare this Field to</dd>
-<dt><span class="returnLabel">Returns:</span></dt>
-<dd>Whether or not the comparison yields true.</dd>
-</dl>
-</li>
-</ul>
-<a name="getType--">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>getType</h4>
-<pre><a href="../simpledb/Type.html" title="enum in simpledb">Type</a>&nbsp;getType()</pre>
-<div class="block">Returns the type of this field (see <a href="../simpledb/Type.html#INT_TYPE"><code>Type.INT_TYPE</code></a> or <a href="../simpledb/Type.html#STRING_TYPE"><code>Type.STRING_TYPE</code></a></div>
-<dl>
-<dt><span class="returnLabel">Returns:</span></dt>
-<dd>type of this field</dd>
-</dl>
-</li>
-</ul>
-<a name="hashCode--">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>hashCode</h4>
-<pre>int&nbsp;hashCode()</pre>
-<div class="block">Hash code.
- Different Field objects representing the same value should probably
- return the same hashCode.</div>
-<dl>
-<dt><span class="overrideSpecifyLabel">Overrides:</span></dt>
-<dd><code>hashCode</code>&nbsp;in class&nbsp;<code>java.lang.Object</code></dd>
-</dl>
-</li>
-</ul>
-<a name="equals-java.lang.Object-">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>equals</h4>
-<pre>boolean&nbsp;equals(java.lang.Object&nbsp;field)</pre>
-<dl>
-<dt><span class="overrideSpecifyLabel">Overrides:</span></dt>
-<dd><code>equals</code>&nbsp;in class&nbsp;<code>java.lang.Object</code></dd>
-</dl>
-</li>
-</ul>
-<a name="toString--">
-<!--   -->
-</a>
-<ul class="blockListLast">
-<li class="blockList">
-<h4>toString</h4>
-<pre>java.lang.String&nbsp;toString()</pre>
-<dl>
-<dt><span class="overrideSpecifyLabel">Overrides:</span></dt>
-<dd><code>toString</code>&nbsp;in class&nbsp;<code>java.lang.Object</code></dd>
-</dl>
-</li>
-</ul>
-</li>
-</ul>
-</li>
-</ul>
-</div>
-</div>
-<!-- ========= END OF CLASS DATA ========= -->
-<!-- ======= START OF BOTTOM NAVBAR ====== -->
-<div class="bottomNav"><a name="navbar.bottom">
-<!--   -->
-</a>
-<div class="skipNav"><a href="#skip.navbar.bottom" title="Skip navigation links">Skip navigation links</a></div>
-<a name="navbar.bottom.firstrow">
-<!--   -->
-</a>
-<ul class="navList" title="Navigation">
-<li><a href="../simpledb/package-summary.html">Package</a></li>
-<li class="navBarCell1Rev">Class</li>
-<li><a href="package-tree.html">Tree</a></li>
-<li><a href="../deprecated-list.html">Deprecated</a></li>
-<li><a href="../index-all.html">Index</a></li>
-<li><a href="../help-doc.html">Help</a></li>
-</ul>
-</div>
-<div class="subNav">
-<ul class="navList">
-<li><a href="../simpledb/Debug.html" title="class in simpledb"><span class="typeNameLink">Prev&nbsp;Class</span></a></li>
-<li><a href="../simpledb/HeapFile.html" title="class in simpledb"><span class="typeNameLink">Next&nbsp;Class</span></a></li>
-</ul>
-<ul class="navList">
-<li><a href="../index.html?simpledb/Field.html" target="_top">Frames</a></li>
-<li><a href="Field.html" target="_top">No&nbsp;Frames</a></li>
-</ul>
-<ul class="navList" id="allclasses_navbar_bottom">
-<li><a href="../allclasses-noframe.html">All&nbsp;Classes</a></li>
-</ul>
-<div>
-<script type="text/javascript"><!--
-  allClassesLink = document.getElementById("allclasses_navbar_bottom");
-  if(window==top) {
-    allClassesLink.style.display = "block";
-  }
-  else {
-    allClassesLink.style.display = "none";
-  }
-  //-->
-</script>
-</div>
-<div>
-<ul class="subNavList">
-<li>Summary:&nbsp;</li>
-<li>Nested&nbsp;|&nbsp;</li>
-<li>Field&nbsp;|&nbsp;</li>
-<li>Constr&nbsp;|&nbsp;</li>
-<li><a href="#method.summary">Method</a></li>
-</ul>
-<ul class="subNavList">
-<li>Detail:&nbsp;</li>
-<li>Field&nbsp;|&nbsp;</li>
-<li>Constr&nbsp;|&nbsp;</li>
-<li><a href="#method.detail">Method</a></li>
-</ul>
-</div>
-<a name="skip.navbar.bottom">
-<!--   -->
-</a></div>
-<!-- ======== END OF BOTTOM NAVBAR ======= -->
-</body>
-</html>
diff -ruN lab1/javadoc/simpledb/HeapFile.html lab3/javadoc/simpledb/HeapFile.html
--- lab1/javadoc/simpledb/HeapFile.html	2016-11-02 22:06:58.000000000 -0500
+++ lab3/javadoc/simpledb/HeapFile.html	1969-12-31 18:00:00.000000000 -0600
@@ -1,513 +0,0 @@
-<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
-<!-- NewPage -->
-<html lang="en">
-<head>
-<!-- Generated by javadoc (1.8.0_25) on Thu Oct 27 13:16:23 CDT 2016 -->
-<title>HeapFile</title>
-<meta name="date" content="2016-10-27">
-<link rel="stylesheet" type="text/css" href="../stylesheet.css" title="Style">
-<script type="text/javascript" src="../script.js"></script>
-</head>
-<body>
-<script type="text/javascript"><!--
-    try {
-        if (location.href.indexOf('is-external=true') == -1) {
-            parent.document.title="HeapFile";
-        }
-    }
-    catch(err) {
-    }
-//-->
-var methods = {"i0":10,"i1":10,"i2":10,"i3":10,"i4":10,"i5":10,"i6":10,"i7":10,"i8":10};
-var tabs = {65535:["t0","All Methods"],2:["t2","Instance Methods"],8:["t4","Concrete Methods"]};
-var altColor = "altColor";
-var rowColor = "rowColor";
-var tableTab = "tableTab";
-var activeTableTab = "activeTableTab";
-</script>
-<noscript>
-<div>JavaScript is disabled on your browser.</div>
-</noscript>
-<!-- ========= START OF TOP NAVBAR ======= -->
-<div class="topNav"><a name="navbar.top">
-<!--   -->
-</a>
-<div class="skipNav"><a href="#skip.navbar.top" title="Skip navigation links">Skip navigation links</a></div>
-<a name="navbar.top.firstrow">
-<!--   -->
-</a>
-<ul class="navList" title="Navigation">
-<li><a href="../simpledb/package-summary.html">Package</a></li>
-<li class="navBarCell1Rev">Class</li>
-<li><a href="package-tree.html">Tree</a></li>
-<li><a href="../deprecated-list.html">Deprecated</a></li>
-<li><a href="../index-all.html">Index</a></li>
-<li><a href="../help-doc.html">Help</a></li>
-</ul>
-</div>
-<div class="subNav">
-<ul class="navList">
-<li><a href="../simpledb/Field.html" title="interface in simpledb"><span class="typeNameLink">Prev&nbsp;Class</span></a></li>
-<li><a href="../simpledb/HeapFileEncoder.html" title="class in simpledb"><span class="typeNameLink">Next&nbsp;Class</span></a></li>
-</ul>
-<ul class="navList">
-<li><a href="../index.html?simpledb/HeapFile.html" target="_top">Frames</a></li>
-<li><a href="HeapFile.html" target="_top">No&nbsp;Frames</a></li>
-</ul>
-<ul class="navList" id="allclasses_navbar_top">
-<li><a href="../allclasses-noframe.html">All&nbsp;Classes</a></li>
-</ul>
-<div>
-<script type="text/javascript"><!--
-  allClassesLink = document.getElementById("allclasses_navbar_top");
-  if(window==top) {
-    allClassesLink.style.display = "block";
-  }
-  else {
-    allClassesLink.style.display = "none";
-  }
-  //-->
-</script>
-</div>
-<div>
-<ul class="subNavList">
-<li>Summary:&nbsp;</li>
-<li>Nested&nbsp;|&nbsp;</li>
-<li>Field&nbsp;|&nbsp;</li>
-<li><a href="#constructor.summary">Constr</a>&nbsp;|&nbsp;</li>
-<li><a href="#method.summary">Method</a></li>
-</ul>
-<ul class="subNavList">
-<li>Detail:&nbsp;</li>
-<li>Field&nbsp;|&nbsp;</li>
-<li><a href="#constructor.detail">Constr</a>&nbsp;|&nbsp;</li>
-<li><a href="#method.detail">Method</a></li>
-</ul>
-</div>
-<a name="skip.navbar.top">
-<!--   -->
-</a></div>
-<!-- ========= END OF TOP NAVBAR ========= -->
-<!-- ======== START OF CLASS DATA ======== -->
-<div class="header">
-<div class="subTitle">simpledb</div>
-<h2 title="Class HeapFile" class="title">Class HeapFile</h2>
-</div>
-<div class="contentContainer">
-<ul class="inheritance">
-<li>java.lang.Object</li>
-<li>
-<ul class="inheritance">
-<li>simpledb.HeapFile</li>
-</ul>
-</li>
-</ul>
-<div class="description">
-<ul class="blockList">
-<li class="blockList">
-<dl>
-<dt>All Implemented Interfaces:</dt>
-<dd><a href="../simpledb/DbFile.html" title="interface in simpledb">DbFile</a></dd>
-</dl>
-<hr>
-<br>
-<pre>public class <span class="typeNameLabel">HeapFile</span>
-extends java.lang.Object
-implements <a href="../simpledb/DbFile.html" title="interface in simpledb">DbFile</a></pre>
-<div class="block">HeapFile is an implementation of a DbFile that stores a collection of tuples
- in no particular order. Tuples are stored on pages, each of which is a fixed
- size, and the file is simply a collection of those pages. HeapFile works
- closely with HeapPage. The format of HeapPages is described in the HeapPage
- constructor.</div>
-<dl>
-<dt><span class="simpleTagLabel">Author:</span></dt>
-<dd>Sam Madden</dd>
-<dt><span class="seeLabel">See Also:</span></dt>
-<dd><a href="../simpledb/HeapPage.html#HeapPage-simpledb.HeapPageId-byte:A-"><code>HeapPage.HeapPage(simpledb.HeapPageId, byte[])</code></a></dd>
-</dl>
-</li>
-</ul>
-</div>
-<div class="summary">
-<ul class="blockList">
-<li class="blockList">
-<!-- ======== CONSTRUCTOR SUMMARY ======== -->
-<ul class="blockList">
-<li class="blockList"><a name="constructor.summary">
-<!--   -->
-</a>
-<h3>Constructor Summary</h3>
-<table class="memberSummary" border="0" cellpadding="3" cellspacing="0" summary="Constructor Summary table, listing constructors, and an explanation">
-<caption><span>Constructors</span><span class="tabEnd">&nbsp;</span></caption>
-<tr>
-<th class="colOne" scope="col">Constructor and Description</th>
-</tr>
-<tr class="altColor">
-<td class="colOne"><code><span class="memberNameLink"><a href="../simpledb/HeapFile.html#HeapFile-java.io.File-simpledb.TupleDesc-">HeapFile</a></span>(java.io.File&nbsp;f,
-        <a href="../simpledb/TupleDesc.html" title="class in simpledb">TupleDesc</a>&nbsp;td)</code>
-<div class="block">Constructs a heap file backed by the specified file.</div>
-</td>
-</tr>
-</table>
-</li>
-</ul>
-<!-- ========== METHOD SUMMARY =========== -->
-<ul class="blockList">
-<li class="blockList"><a name="method.summary">
-<!--   -->
-</a>
-<h3>Method Summary</h3>
-<table class="memberSummary" border="0" cellpadding="3" cellspacing="0" summary="Method Summary table, listing methods, and an explanation">
-<caption><span id="t0" class="activeTableTab"><span>All Methods</span><span class="tabEnd">&nbsp;</span></span><span id="t2" class="tableTab"><span><a href="javascript:show(2);">Instance Methods</a></span><span class="tabEnd">&nbsp;</span></span><span id="t4" class="tableTab"><span><a href="javascript:show(8);">Concrete Methods</a></span><span class="tabEnd">&nbsp;</span></span></caption>
-<tr>
-<th class="colFirst" scope="col">Modifier and Type</th>
-<th class="colLast" scope="col">Method and Description</th>
-</tr>
-<tr id="i0" class="altColor">
-<td class="colFirst"><code>java.util.ArrayList&lt;<a href="../simpledb/Page.html" title="interface in simpledb">Page</a>&gt;</code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/HeapFile.html#deleteTuple-simpledb.TransactionId-simpledb.Tuple-">deleteTuple</a></span>(<a href="../simpledb/TransactionId.html" title="class in simpledb">TransactionId</a>&nbsp;tid,
-           <a href="../simpledb/Tuple.html" title="class in simpledb">Tuple</a>&nbsp;t)</code>
-<div class="block">Removes the specified tuple from the file on behalf of the specified
- transaction.</div>
-</td>
-</tr>
-<tr id="i1" class="rowColor">
-<td class="colFirst"><code>java.io.File</code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/HeapFile.html#getFile--">getFile</a></span>()</code>
-<div class="block">Returns the File backing this HeapFile on disk.</div>
-</td>
-</tr>
-<tr id="i2" class="altColor">
-<td class="colFirst"><code>int</code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/HeapFile.html#getId--">getId</a></span>()</code>
-<div class="block">Returns an ID uniquely identifying this HeapFile.</div>
-</td>
-</tr>
-<tr id="i3" class="rowColor">
-<td class="colFirst"><code><a href="../simpledb/TupleDesc.html" title="class in simpledb">TupleDesc</a></code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/HeapFile.html#getTupleDesc--">getTupleDesc</a></span>()</code>
-<div class="block">Returns the TupleDesc of the table stored in this DbFile.</div>
-</td>
-</tr>
-<tr id="i4" class="altColor">
-<td class="colFirst"><code>java.util.ArrayList&lt;<a href="../simpledb/Page.html" title="interface in simpledb">Page</a>&gt;</code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/HeapFile.html#insertTuple-simpledb.TransactionId-simpledb.Tuple-">insertTuple</a></span>(<a href="../simpledb/TransactionId.html" title="class in simpledb">TransactionId</a>&nbsp;tid,
-           <a href="../simpledb/Tuple.html" title="class in simpledb">Tuple</a>&nbsp;t)</code>
-<div class="block">Inserts the specified tuple to the file on behalf of transaction.</div>
-</td>
-</tr>
-<tr id="i5" class="rowColor">
-<td class="colFirst"><code><a href="../simpledb/DbFileIterator.html" title="interface in simpledb">DbFileIterator</a></code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/HeapFile.html#iterator-simpledb.TransactionId-">iterator</a></span>(<a href="../simpledb/TransactionId.html" title="class in simpledb">TransactionId</a>&nbsp;tid)</code>
-<div class="block">Returns an iterator over all the tuples stored in this DbFile.</div>
-</td>
-</tr>
-<tr id="i6" class="altColor">
-<td class="colFirst"><code>int</code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/HeapFile.html#numPages--">numPages</a></span>()</code>
-<div class="block">Returns the number of pages in this HeapFile.</div>
-</td>
-</tr>
-<tr id="i7" class="rowColor">
-<td class="colFirst"><code><a href="../simpledb/Page.html" title="interface in simpledb">Page</a></code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/HeapFile.html#readPage-simpledb.PageId-">readPage</a></span>(<a href="../simpledb/PageId.html" title="interface in simpledb">PageId</a>&nbsp;pid)</code>
-<div class="block">Read the specified page from disk.</div>
-</td>
-</tr>
-<tr id="i8" class="altColor">
-<td class="colFirst"><code>void</code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/HeapFile.html#writePage-simpledb.Page-">writePage</a></span>(<a href="../simpledb/Page.html" title="interface in simpledb">Page</a>&nbsp;page)</code>
-<div class="block">Push the specified page to disk.</div>
-</td>
-</tr>
-</table>
-<ul class="blockList">
-<li class="blockList"><a name="methods.inherited.from.class.java.lang.Object">
-<!--   -->
-</a>
-<h3>Methods inherited from class&nbsp;java.lang.Object</h3>
-<code>clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait</code></li>
-</ul>
-</li>
-</ul>
-</li>
-</ul>
-</div>
-<div class="details">
-<ul class="blockList">
-<li class="blockList">
-<!-- ========= CONSTRUCTOR DETAIL ======== -->
-<ul class="blockList">
-<li class="blockList"><a name="constructor.detail">
-<!--   -->
-</a>
-<h3>Constructor Detail</h3>
-<a name="HeapFile-java.io.File-simpledb.TupleDesc-">
-<!--   -->
-</a>
-<ul class="blockListLast">
-<li class="blockList">
-<h4>HeapFile</h4>
-<pre>public&nbsp;HeapFile(java.io.File&nbsp;f,
-                <a href="../simpledb/TupleDesc.html" title="class in simpledb">TupleDesc</a>&nbsp;td)</pre>
-<div class="block">Constructs a heap file backed by the specified file.</div>
-<dl>
-<dt><span class="paramLabel">Parameters:</span></dt>
-<dd><code>f</code> - the file that stores the on-disk backing store for this heap
-            file.</dd>
-</dl>
-</li>
-</ul>
-</li>
-</ul>
-<!-- ============ METHOD DETAIL ========== -->
-<ul class="blockList">
-<li class="blockList"><a name="method.detail">
-<!--   -->
-</a>
-<h3>Method Detail</h3>
-<a name="getFile--">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>getFile</h4>
-<pre>public&nbsp;java.io.File&nbsp;getFile()</pre>
-<div class="block">Returns the File backing this HeapFile on disk.</div>
-<dl>
-<dt><span class="returnLabel">Returns:</span></dt>
-<dd>the File backing this HeapFile on disk.</dd>
-</dl>
-</li>
-</ul>
-<a name="getId--">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>getId</h4>
-<pre>public&nbsp;int&nbsp;getId()</pre>
-<div class="block">Returns an ID uniquely identifying this HeapFile. Implementation note:
- you will need to generate this tableid somewhere ensure that each
- HeapFile has a "unique id," and that you always return the same value for
- a particular HeapFile. We suggest hashing the absolute file name of the
- file underlying the heapfile, i.e. f.getAbsoluteFile().hashCode().</div>
-<dl>
-<dt><span class="overrideSpecifyLabel">Specified by:</span></dt>
-<dd><code><a href="../simpledb/DbFile.html#getId--">getId</a></code>&nbsp;in interface&nbsp;<code><a href="../simpledb/DbFile.html" title="interface in simpledb">DbFile</a></code></dd>
-<dt><span class="returnLabel">Returns:</span></dt>
-<dd>an ID uniquely identifying this HeapFile.</dd>
-</dl>
-</li>
-</ul>
-<a name="getTupleDesc--">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>getTupleDesc</h4>
-<pre>public&nbsp;<a href="../simpledb/TupleDesc.html" title="class in simpledb">TupleDesc</a>&nbsp;getTupleDesc()</pre>
-<div class="block">Returns the TupleDesc of the table stored in this DbFile.</div>
-<dl>
-<dt><span class="overrideSpecifyLabel">Specified by:</span></dt>
-<dd><code><a href="../simpledb/DbFile.html#getTupleDesc--">getTupleDesc</a></code>&nbsp;in interface&nbsp;<code><a href="../simpledb/DbFile.html" title="interface in simpledb">DbFile</a></code></dd>
-<dt><span class="returnLabel">Returns:</span></dt>
-<dd>TupleDesc of this DbFile.</dd>
-</dl>
-</li>
-</ul>
-<a name="readPage-simpledb.PageId-">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>readPage</h4>
-<pre>public&nbsp;<a href="../simpledb/Page.html" title="interface in simpledb">Page</a>&nbsp;readPage(<a href="../simpledb/PageId.html" title="interface in simpledb">PageId</a>&nbsp;pid)</pre>
-<div class="block"><span class="descfrmTypeLabel">Description copied from interface:&nbsp;<code><a href="../simpledb/DbFile.html#readPage-simpledb.PageId-">DbFile</a></code></span></div>
-<div class="block">Read the specified page from disk.</div>
-<dl>
-<dt><span class="overrideSpecifyLabel">Specified by:</span></dt>
-<dd><code><a href="../simpledb/DbFile.html#readPage-simpledb.PageId-">readPage</a></code>&nbsp;in interface&nbsp;<code><a href="../simpledb/DbFile.html" title="interface in simpledb">DbFile</a></code></dd>
-</dl>
-</li>
-</ul>
-<a name="writePage-simpledb.Page-">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>writePage</h4>
-<pre>public&nbsp;void&nbsp;writePage(<a href="../simpledb/Page.html" title="interface in simpledb">Page</a>&nbsp;page)
-               throws java.io.IOException</pre>
-<div class="block"><span class="descfrmTypeLabel">Description copied from interface:&nbsp;<code><a href="../simpledb/DbFile.html#writePage-simpledb.Page-">DbFile</a></code></span></div>
-<div class="block">Push the specified page to disk.</div>
-<dl>
-<dt><span class="overrideSpecifyLabel">Specified by:</span></dt>
-<dd><code><a href="../simpledb/DbFile.html#writePage-simpledb.Page-">writePage</a></code>&nbsp;in interface&nbsp;<code><a href="../simpledb/DbFile.html" title="interface in simpledb">DbFile</a></code></dd>
-<dt><span class="paramLabel">Parameters:</span></dt>
-<dd><code>page</code> - The page to write.  page.getId().pageno() specifies the offset into the file where the page should be written.</dd>
-<dt><span class="throwsLabel">Throws:</span></dt>
-<dd><code>java.io.IOException</code> - if the write fails</dd>
-</dl>
-</li>
-</ul>
-<a name="numPages--">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>numPages</h4>
-<pre>public&nbsp;int&nbsp;numPages()</pre>
-<div class="block">Returns the number of pages in this HeapFile.</div>
-</li>
-</ul>
-<a name="insertTuple-simpledb.TransactionId-simpledb.Tuple-">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>insertTuple</h4>
-<pre>public&nbsp;java.util.ArrayList&lt;<a href="../simpledb/Page.html" title="interface in simpledb">Page</a>&gt;&nbsp;insertTuple(<a href="../simpledb/TransactionId.html" title="class in simpledb">TransactionId</a>&nbsp;tid,
-                                             <a href="../simpledb/Tuple.html" title="class in simpledb">Tuple</a>&nbsp;t)
-                                      throws <a href="../simpledb/DbException.html" title="class in simpledb">DbException</a>,
-                                             java.io.IOException,
-                                             <a href="../simpledb/TransactionAbortedException.html" title="class in simpledb">TransactionAbortedException</a></pre>
-<div class="block"><span class="descfrmTypeLabel">Description copied from interface:&nbsp;<code><a href="../simpledb/DbFile.html#insertTuple-simpledb.TransactionId-simpledb.Tuple-">DbFile</a></code></span></div>
-<div class="block">Inserts the specified tuple to the file on behalf of transaction.
- This method will acquire a lock on the affected pages of the file, and
- may block until the lock can be acquired.</div>
-<dl>
-<dt><span class="overrideSpecifyLabel">Specified by:</span></dt>
-<dd><code><a href="../simpledb/DbFile.html#insertTuple-simpledb.TransactionId-simpledb.Tuple-">insertTuple</a></code>&nbsp;in interface&nbsp;<code><a href="../simpledb/DbFile.html" title="interface in simpledb">DbFile</a></code></dd>
-<dt><span class="paramLabel">Parameters:</span></dt>
-<dd><code>tid</code> - The transaction performing the update</dd>
-<dd><code>t</code> - The tuple to add.  This tuple should be updated to reflect that
-          it is now stored in this file.</dd>
-<dt><span class="returnLabel">Returns:</span></dt>
-<dd>An ArrayList contain the pages that were modified</dd>
-<dt><span class="throwsLabel">Throws:</span></dt>
-<dd><code><a href="../simpledb/DbException.html" title="class in simpledb">DbException</a></code> - if the tuple cannot be added</dd>
-<dd><code>java.io.IOException</code> - if the needed file can't be read/written</dd>
-<dd><code><a href="../simpledb/TransactionAbortedException.html" title="class in simpledb">TransactionAbortedException</a></code></dd>
-</dl>
-</li>
-</ul>
-<a name="deleteTuple-simpledb.TransactionId-simpledb.Tuple-">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>deleteTuple</h4>
-<pre>public&nbsp;java.util.ArrayList&lt;<a href="../simpledb/Page.html" title="interface in simpledb">Page</a>&gt;&nbsp;deleteTuple(<a href="../simpledb/TransactionId.html" title="class in simpledb">TransactionId</a>&nbsp;tid,
-                                             <a href="../simpledb/Tuple.html" title="class in simpledb">Tuple</a>&nbsp;t)
-                                      throws <a href="../simpledb/DbException.html" title="class in simpledb">DbException</a>,
-                                             <a href="../simpledb/TransactionAbortedException.html" title="class in simpledb">TransactionAbortedException</a></pre>
-<div class="block"><span class="descfrmTypeLabel">Description copied from interface:&nbsp;<code><a href="../simpledb/DbFile.html#deleteTuple-simpledb.TransactionId-simpledb.Tuple-">DbFile</a></code></span></div>
-<div class="block">Removes the specified tuple from the file on behalf of the specified
- transaction.
- This method will acquire a lock on the affected pages of the file, and
- may block until the lock can be acquired.</div>
-<dl>
-<dt><span class="overrideSpecifyLabel">Specified by:</span></dt>
-<dd><code><a href="../simpledb/DbFile.html#deleteTuple-simpledb.TransactionId-simpledb.Tuple-">deleteTuple</a></code>&nbsp;in interface&nbsp;<code><a href="../simpledb/DbFile.html" title="interface in simpledb">DbFile</a></code></dd>
-<dt><span class="paramLabel">Parameters:</span></dt>
-<dd><code>tid</code> - The transaction performing the update</dd>
-<dd><code>t</code> - The tuple to delete.  This tuple should be updated to reflect that
-          it is no longer stored on any page.</dd>
-<dt><span class="returnLabel">Returns:</span></dt>
-<dd>An ArrayList contain the pages that were modified</dd>
-<dt><span class="throwsLabel">Throws:</span></dt>
-<dd><code><a href="../simpledb/DbException.html" title="class in simpledb">DbException</a></code> - if the tuple cannot be deleted or is not a member
-   of the file</dd>
-<dd><code><a href="../simpledb/TransactionAbortedException.html" title="class in simpledb">TransactionAbortedException</a></code></dd>
-</dl>
-</li>
-</ul>
-<a name="iterator-simpledb.TransactionId-">
-<!--   -->
-</a>
-<ul class="blockListLast">
-<li class="blockList">
-<h4>iterator</h4>
-<pre>public&nbsp;<a href="../simpledb/DbFileIterator.html" title="interface in simpledb">DbFileIterator</a>&nbsp;iterator(<a href="../simpledb/TransactionId.html" title="class in simpledb">TransactionId</a>&nbsp;tid)</pre>
-<div class="block"><span class="descfrmTypeLabel">Description copied from interface:&nbsp;<code><a href="../simpledb/DbFile.html#iterator-simpledb.TransactionId-">DbFile</a></code></span></div>
-<div class="block">Returns an iterator over all the tuples stored in this DbFile. The
- iterator must use <a href="../simpledb/BufferPool.html#getPage-simpledb.TransactionId-simpledb.PageId-simpledb.Permissions-"><code>BufferPool.getPage(simpledb.TransactionId, simpledb.PageId, simpledb.Permissions)</code></a>, rather than
- <a href="../simpledb/DbFile.html#readPage-simpledb.PageId-"><code>DbFile.readPage(simpledb.PageId)</code></a> to iterate through the pages.</div>
-<dl>
-<dt><span class="overrideSpecifyLabel">Specified by:</span></dt>
-<dd><code><a href="../simpledb/DbFile.html#iterator-simpledb.TransactionId-">iterator</a></code>&nbsp;in interface&nbsp;<code><a href="../simpledb/DbFile.html" title="interface in simpledb">DbFile</a></code></dd>
-<dt><span class="returnLabel">Returns:</span></dt>
-<dd>an iterator over all the tuples stored in this DbFile.</dd>
-</dl>
-</li>
-</ul>
-</li>
-</ul>
-</li>
-</ul>
-</div>
-</div>
-<!-- ========= END OF CLASS DATA ========= -->
-<!-- ======= START OF BOTTOM NAVBAR ====== -->
-<div class="bottomNav"><a name="navbar.bottom">
-<!--   -->
-</a>
-<div class="skipNav"><a href="#skip.navbar.bottom" title="Skip navigation links">Skip navigation links</a></div>
-<a name="navbar.bottom.firstrow">
-<!--   -->
-</a>
-<ul class="navList" title="Navigation">
-<li><a href="../simpledb/package-summary.html">Package</a></li>
-<li class="navBarCell1Rev">Class</li>
-<li><a href="package-tree.html">Tree</a></li>
-<li><a href="../deprecated-list.html">Deprecated</a></li>
-<li><a href="../index-all.html">Index</a></li>
-<li><a href="../help-doc.html">Help</a></li>
-</ul>
-</div>
-<div class="subNav">
-<ul class="navList">
-<li><a href="../simpledb/Field.html" title="interface in simpledb"><span class="typeNameLink">Prev&nbsp;Class</span></a></li>
-<li><a href="../simpledb/HeapFileEncoder.html" title="class in simpledb"><span class="typeNameLink">Next&nbsp;Class</span></a></li>
-</ul>
-<ul class="navList">
-<li><a href="../index.html?simpledb/HeapFile.html" target="_top">Frames</a></li>
-<li><a href="HeapFile.html" target="_top">No&nbsp;Frames</a></li>
-</ul>
-<ul class="navList" id="allclasses_navbar_bottom">
-<li><a href="../allclasses-noframe.html">All&nbsp;Classes</a></li>
-</ul>
-<div>
-<script type="text/javascript"><!--
-  allClassesLink = document.getElementById("allclasses_navbar_bottom");
-  if(window==top) {
-    allClassesLink.style.display = "block";
-  }
-  else {
-    allClassesLink.style.display = "none";
-  }
-  //-->
-</script>
-</div>
-<div>
-<ul class="subNavList">
-<li>Summary:&nbsp;</li>
-<li>Nested&nbsp;|&nbsp;</li>
-<li>Field&nbsp;|&nbsp;</li>
-<li><a href="#constructor.summary">Constr</a>&nbsp;|&nbsp;</li>
-<li><a href="#method.summary">Method</a></li>
-</ul>
-<ul class="subNavList">
-<li>Detail:&nbsp;</li>
-<li>Field&nbsp;|&nbsp;</li>
-<li><a href="#constructor.detail">Constr</a>&nbsp;|&nbsp;</li>
-<li><a href="#method.detail">Method</a></li>
-</ul>
-</div>
-<a name="skip.navbar.bottom">
-<!--   -->
-</a></div>
-<!-- ======== END OF BOTTOM NAVBAR ======= -->
-</body>
-</html>
diff -ruN lab1/javadoc/simpledb/HeapFileEncoder.html lab3/javadoc/simpledb/HeapFileEncoder.html
--- lab1/javadoc/simpledb/HeapFileEncoder.html	2016-11-02 22:06:58.000000000 -0500
+++ lab3/javadoc/simpledb/HeapFileEncoder.html	1969-12-31 18:00:00.000000000 -0600
@@ -1,401 +0,0 @@
-<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
-<!-- NewPage -->
-<html lang="en">
-<head>
-<!-- Generated by javadoc (1.8.0_25) on Thu Oct 27 13:16:23 CDT 2016 -->
-<title>HeapFileEncoder</title>
-<meta name="date" content="2016-10-27">
-<link rel="stylesheet" type="text/css" href="../stylesheet.css" title="Style">
-<script type="text/javascript" src="../script.js"></script>
-</head>
-<body>
-<script type="text/javascript"><!--
-    try {
-        if (location.href.indexOf('is-external=true') == -1) {
-            parent.document.title="HeapFileEncoder";
-        }
-    }
-    catch(err) {
-    }
-//-->
-var methods = {"i0":9,"i1":9,"i2":9,"i3":9};
-var tabs = {65535:["t0","All Methods"],1:["t1","Static Methods"],8:["t4","Concrete Methods"]};
-var altColor = "altColor";
-var rowColor = "rowColor";
-var tableTab = "tableTab";
-var activeTableTab = "activeTableTab";
-</script>
-<noscript>
-<div>JavaScript is disabled on your browser.</div>
-</noscript>
-<!-- ========= START OF TOP NAVBAR ======= -->
-<div class="topNav"><a name="navbar.top">
-<!--   -->
-</a>
-<div class="skipNav"><a href="#skip.navbar.top" title="Skip navigation links">Skip navigation links</a></div>
-<a name="navbar.top.firstrow">
-<!--   -->
-</a>
-<ul class="navList" title="Navigation">
-<li><a href="../simpledb/package-summary.html">Package</a></li>
-<li class="navBarCell1Rev">Class</li>
-<li><a href="package-tree.html">Tree</a></li>
-<li><a href="../deprecated-list.html">Deprecated</a></li>
-<li><a href="../index-all.html">Index</a></li>
-<li><a href="../help-doc.html">Help</a></li>
-</ul>
-</div>
-<div class="subNav">
-<ul class="navList">
-<li><a href="../simpledb/HeapFile.html" title="class in simpledb"><span class="typeNameLink">Prev&nbsp;Class</span></a></li>
-<li><a href="../simpledb/HeapPage.html" title="class in simpledb"><span class="typeNameLink">Next&nbsp;Class</span></a></li>
-</ul>
-<ul class="navList">
-<li><a href="../index.html?simpledb/HeapFileEncoder.html" target="_top">Frames</a></li>
-<li><a href="HeapFileEncoder.html" target="_top">No&nbsp;Frames</a></li>
-</ul>
-<ul class="navList" id="allclasses_navbar_top">
-<li><a href="../allclasses-noframe.html">All&nbsp;Classes</a></li>
-</ul>
-<div>
-<script type="text/javascript"><!--
-  allClassesLink = document.getElementById("allclasses_navbar_top");
-  if(window==top) {
-    allClassesLink.style.display = "block";
-  }
-  else {
-    allClassesLink.style.display = "none";
-  }
-  //-->
-</script>
-</div>
-<div>
-<ul class="subNavList">
-<li>Summary:&nbsp;</li>
-<li>Nested&nbsp;|&nbsp;</li>
-<li>Field&nbsp;|&nbsp;</li>
-<li><a href="#constructor.summary">Constr</a>&nbsp;|&nbsp;</li>
-<li><a href="#method.summary">Method</a></li>
-</ul>
-<ul class="subNavList">
-<li>Detail:&nbsp;</li>
-<li>Field&nbsp;|&nbsp;</li>
-<li><a href="#constructor.detail">Constr</a>&nbsp;|&nbsp;</li>
-<li><a href="#method.detail">Method</a></li>
-</ul>
-</div>
-<a name="skip.navbar.top">
-<!--   -->
-</a></div>
-<!-- ========= END OF TOP NAVBAR ========= -->
-<!-- ======== START OF CLASS DATA ======== -->
-<div class="header">
-<div class="subTitle">simpledb</div>
-<h2 title="Class HeapFileEncoder" class="title">Class HeapFileEncoder</h2>
-</div>
-<div class="contentContainer">
-<ul class="inheritance">
-<li>java.lang.Object</li>
-<li>
-<ul class="inheritance">
-<li>simpledb.HeapFileEncoder</li>
-</ul>
-</li>
-</ul>
-<div class="description">
-<ul class="blockList">
-<li class="blockList">
-<hr>
-<br>
-<pre>public class <span class="typeNameLabel">HeapFileEncoder</span>
-extends java.lang.Object</pre>
-<div class="block">HeapFileEncoder reads a comma delimited text file or accepts
- an array of tuples and converts it to
- pages of binary data in the appropriate format for simpledb heap pages
- Pages are padded out to a specified length, and written consecutive in a
- data file.</div>
-</li>
-</ul>
-</div>
-<div class="summary">
-<ul class="blockList">
-<li class="blockList">
-<!-- ======== CONSTRUCTOR SUMMARY ======== -->
-<ul class="blockList">
-<li class="blockList"><a name="constructor.summary">
-<!--   -->
-</a>
-<h3>Constructor Summary</h3>
-<table class="memberSummary" border="0" cellpadding="3" cellspacing="0" summary="Constructor Summary table, listing constructors, and an explanation">
-<caption><span>Constructors</span><span class="tabEnd">&nbsp;</span></caption>
-<tr>
-<th class="colOne" scope="col">Constructor and Description</th>
-</tr>
-<tr class="altColor">
-<td class="colOne"><code><span class="memberNameLink"><a href="../simpledb/HeapFileEncoder.html#HeapFileEncoder--">HeapFileEncoder</a></span>()</code>&nbsp;</td>
-</tr>
-</table>
-</li>
-</ul>
-<!-- ========== METHOD SUMMARY =========== -->
-<ul class="blockList">
-<li class="blockList"><a name="method.summary">
-<!--   -->
-</a>
-<h3>Method Summary</h3>
-<table class="memberSummary" border="0" cellpadding="3" cellspacing="0" summary="Method Summary table, listing methods, and an explanation">
-<caption><span id="t0" class="activeTableTab"><span>All Methods</span><span class="tabEnd">&nbsp;</span></span><span id="t1" class="tableTab"><span><a href="javascript:show(1);">Static Methods</a></span><span class="tabEnd">&nbsp;</span></span><span id="t4" class="tableTab"><span><a href="javascript:show(8);">Concrete Methods</a></span><span class="tabEnd">&nbsp;</span></span></caption>
-<tr>
-<th class="colFirst" scope="col">Modifier and Type</th>
-<th class="colLast" scope="col">Method and Description</th>
-</tr>
-<tr id="i0" class="altColor">
-<td class="colFirst"><code>static void</code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/HeapFileEncoder.html#convert-java.util.ArrayList-java.io.File-int-int-">convert</a></span>(java.util.ArrayList&lt;java.util.ArrayList&lt;java.lang.Integer&gt;&gt;&nbsp;tuples,
-       java.io.File&nbsp;outFile,
-       int&nbsp;npagebytes,
-       int&nbsp;numFields)</code>
-<div class="block">Convert the specified tuple list (with only integer fields) into a binary
- page file.</div>
-</td>
-</tr>
-<tr id="i1" class="rowColor">
-<td class="colFirst"><code>static void</code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/HeapFileEncoder.html#convert-java.io.File-java.io.File-int-int-">convert</a></span>(java.io.File&nbsp;inFile,
-       java.io.File&nbsp;outFile,
-       int&nbsp;npagebytes,
-       int&nbsp;numFields)</code>&nbsp;</td>
-</tr>
-<tr id="i2" class="altColor">
-<td class="colFirst"><code>static void</code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/HeapFileEncoder.html#convert-java.io.File-java.io.File-int-int-simpledb.Type:A-">convert</a></span>(java.io.File&nbsp;inFile,
-       java.io.File&nbsp;outFile,
-       int&nbsp;npagebytes,
-       int&nbsp;numFields,
-       <a href="../simpledb/Type.html" title="enum in simpledb">Type</a>[]&nbsp;typeAr)</code>&nbsp;</td>
-</tr>
-<tr id="i3" class="rowColor">
-<td class="colFirst"><code>static void</code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/HeapFileEncoder.html#convert-java.io.File-java.io.File-int-int-simpledb.Type:A-char-">convert</a></span>(java.io.File&nbsp;inFile,
-       java.io.File&nbsp;outFile,
-       int&nbsp;npagebytes,
-       int&nbsp;numFields,
-       <a href="../simpledb/Type.html" title="enum in simpledb">Type</a>[]&nbsp;typeAr,
-       char&nbsp;fieldSeparator)</code>
-<div class="block">Convert the specified input text file into a binary
- page file.</div>
-</td>
-</tr>
-</table>
-<ul class="blockList">
-<li class="blockList"><a name="methods.inherited.from.class.java.lang.Object">
-<!--   -->
-</a>
-<h3>Methods inherited from class&nbsp;java.lang.Object</h3>
-<code>clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait</code></li>
-</ul>
-</li>
-</ul>
-</li>
-</ul>
-</div>
-<div class="details">
-<ul class="blockList">
-<li class="blockList">
-<!-- ========= CONSTRUCTOR DETAIL ======== -->
-<ul class="blockList">
-<li class="blockList"><a name="constructor.detail">
-<!--   -->
-</a>
-<h3>Constructor Detail</h3>
-<a name="HeapFileEncoder--">
-<!--   -->
-</a>
-<ul class="blockListLast">
-<li class="blockList">
-<h4>HeapFileEncoder</h4>
-<pre>public&nbsp;HeapFileEncoder()</pre>
-</li>
-</ul>
-</li>
-</ul>
-<!-- ============ METHOD DETAIL ========== -->
-<ul class="blockList">
-<li class="blockList"><a name="method.detail">
-<!--   -->
-</a>
-<h3>Method Detail</h3>
-<a name="convert-java.util.ArrayList-java.io.File-int-int-">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>convert</h4>
-<pre>public static&nbsp;void&nbsp;convert(java.util.ArrayList&lt;java.util.ArrayList&lt;java.lang.Integer&gt;&gt;&nbsp;tuples,
-                           java.io.File&nbsp;outFile,
-                           int&nbsp;npagebytes,
-                           int&nbsp;numFields)
-                    throws java.io.IOException</pre>
-<div class="block">Convert the specified tuple list (with only integer fields) into a binary
- page file. <br>
-
- The format of the output file will be as specified in HeapPage and
- HeapFile.</div>
-<dl>
-<dt><span class="paramLabel">Parameters:</span></dt>
-<dd><code>tuples</code> - the tuples - a list of tuples, each represented by a list of integers that are
-        the field values for that tuple.</dd>
-<dd><code>outFile</code> - The output file to write data to</dd>
-<dd><code>npagebytes</code> - The number of bytes per page in the output file</dd>
-<dd><code>numFields</code> - the number of fields in each input tuple</dd>
-<dt><span class="throwsLabel">Throws:</span></dt>
-<dd><code>java.io.IOException</code> - if the temporary/output file can't be opened</dd>
-<dt><span class="seeLabel">See Also:</span></dt>
-<dd><a href="../simpledb/HeapPage.html" title="class in simpledb"><code>HeapPage</code></a>, 
-<a href="../simpledb/HeapFile.html" title="class in simpledb"><code>HeapFile</code></a></dd>
-</dl>
-</li>
-</ul>
-<a name="convert-java.io.File-java.io.File-int-int-">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>convert</h4>
-<pre>public static&nbsp;void&nbsp;convert(java.io.File&nbsp;inFile,
-                           java.io.File&nbsp;outFile,
-                           int&nbsp;npagebytes,
-                           int&nbsp;numFields)
-                    throws java.io.IOException</pre>
-<dl>
-<dt><span class="throwsLabel">Throws:</span></dt>
-<dd><code>java.io.IOException</code></dd>
-</dl>
-</li>
-</ul>
-<a name="convert-java.io.File-java.io.File-int-int-simpledb.Type:A-">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>convert</h4>
-<pre>public static&nbsp;void&nbsp;convert(java.io.File&nbsp;inFile,
-                           java.io.File&nbsp;outFile,
-                           int&nbsp;npagebytes,
-                           int&nbsp;numFields,
-                           <a href="../simpledb/Type.html" title="enum in simpledb">Type</a>[]&nbsp;typeAr)
-                    throws java.io.IOException</pre>
-<dl>
-<dt><span class="throwsLabel">Throws:</span></dt>
-<dd><code>java.io.IOException</code></dd>
-</dl>
-</li>
-</ul>
-<a name="convert-java.io.File-java.io.File-int-int-simpledb.Type:A-char-">
-<!--   -->
-</a>
-<ul class="blockListLast">
-<li class="blockList">
-<h4>convert</h4>
-<pre>public static&nbsp;void&nbsp;convert(java.io.File&nbsp;inFile,
-                           java.io.File&nbsp;outFile,
-                           int&nbsp;npagebytes,
-                           int&nbsp;numFields,
-                           <a href="../simpledb/Type.html" title="enum in simpledb">Type</a>[]&nbsp;typeAr,
-                           char&nbsp;fieldSeparator)
-                    throws java.io.IOException</pre>
-<div class="block">Convert the specified input text file into a binary
- page file. <br>
- Assume format of the input file is (note that only integer fields are
- supported):<br>
- int,...,int\n<br>
- int,...,int\n<br>
- ...<br>
- where each row represents a tuple.<br>
- <p>
- The format of the output file will be as specified in HeapPage and
- HeapFile.</div>
-<dl>
-<dt><span class="paramLabel">Parameters:</span></dt>
-<dd><code>inFile</code> - The input file to read data from</dd>
-<dd><code>outFile</code> - The output file to write data to</dd>
-<dd><code>npagebytes</code> - The number of bytes per page in the output file</dd>
-<dd><code>numFields</code> - the number of fields in each input line/output tuple</dd>
-<dt><span class="throwsLabel">Throws:</span></dt>
-<dd><code>java.io.IOException</code> - if the input/output file can't be opened or a
-   malformed input line is encountered</dd>
-<dt><span class="seeLabel">See Also:</span></dt>
-<dd><a href="../simpledb/HeapPage.html" title="class in simpledb"><code>HeapPage</code></a>, 
-<a href="../simpledb/HeapFile.html" title="class in simpledb"><code>HeapFile</code></a></dd>
-</dl>
-</li>
-</ul>
-</li>
-</ul>
-</li>
-</ul>
-</div>
-</div>
-<!-- ========= END OF CLASS DATA ========= -->
-<!-- ======= START OF BOTTOM NAVBAR ====== -->
-<div class="bottomNav"><a name="navbar.bottom">
-<!--   -->
-</a>
-<div class="skipNav"><a href="#skip.navbar.bottom" title="Skip navigation links">Skip navigation links</a></div>
-<a name="navbar.bottom.firstrow">
-<!--   -->
-</a>
-<ul class="navList" title="Navigation">
-<li><a href="../simpledb/package-summary.html">Package</a></li>
-<li class="navBarCell1Rev">Class</li>
-<li><a href="package-tree.html">Tree</a></li>
-<li><a href="../deprecated-list.html">Deprecated</a></li>
-<li><a href="../index-all.html">Index</a></li>
-<li><a href="../help-doc.html">Help</a></li>
-</ul>
-</div>
-<div class="subNav">
-<ul class="navList">
-<li><a href="../simpledb/HeapFile.html" title="class in simpledb"><span class="typeNameLink">Prev&nbsp;Class</span></a></li>
-<li><a href="../simpledb/HeapPage.html" title="class in simpledb"><span class="typeNameLink">Next&nbsp;Class</span></a></li>
-</ul>
-<ul class="navList">
-<li><a href="../index.html?simpledb/HeapFileEncoder.html" target="_top">Frames</a></li>
-<li><a href="HeapFileEncoder.html" target="_top">No&nbsp;Frames</a></li>
-</ul>
-<ul class="navList" id="allclasses_navbar_bottom">
-<li><a href="../allclasses-noframe.html">All&nbsp;Classes</a></li>
-</ul>
-<div>
-<script type="text/javascript"><!--
-  allClassesLink = document.getElementById("allclasses_navbar_bottom");
-  if(window==top) {
-    allClassesLink.style.display = "block";
-  }
-  else {
-    allClassesLink.style.display = "none";
-  }
-  //-->
-</script>
-</div>
-<div>
-<ul class="subNavList">
-<li>Summary:&nbsp;</li>
-<li>Nested&nbsp;|&nbsp;</li>
-<li>Field&nbsp;|&nbsp;</li>
-<li><a href="#constructor.summary">Constr</a>&nbsp;|&nbsp;</li>
-<li><a href="#method.summary">Method</a></li>
-</ul>
-<ul class="subNavList">
-<li>Detail:&nbsp;</li>
-<li>Field&nbsp;|&nbsp;</li>
-<li><a href="#constructor.detail">Constr</a>&nbsp;|&nbsp;</li>
-<li><a href="#method.detail">Method</a></li>
-</ul>
-</div>
-<a name="skip.navbar.bottom">
-<!--   -->
-</a></div>
-<!-- ======== END OF BOTTOM NAVBAR ======= -->
-</body>
-</html>
diff -ruN lab1/javadoc/simpledb/HeapPage.html lab3/javadoc/simpledb/HeapPage.html
--- lab1/javadoc/simpledb/HeapPage.html	2016-11-02 22:06:58.000000000 -0500
+++ lab3/javadoc/simpledb/HeapPage.html	1969-12-31 18:00:00.000000000 -0600
@@ -1,751 +0,0 @@
-<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
-<!-- NewPage -->
-<html lang="en">
-<head>
-<!-- Generated by javadoc (1.8.0_25) on Thu Oct 27 13:16:23 CDT 2016 -->
-<title>HeapPage</title>
-<meta name="date" content="2016-10-27">
-<link rel="stylesheet" type="text/css" href="../stylesheet.css" title="Style">
-<script type="text/javascript" src="../script.js"></script>
-</head>
-<body>
-<script type="text/javascript"><!--
-    try {
-        if (location.href.indexOf('is-external=true') == -1) {
-            parent.document.title="HeapPage";
-        }
-    }
-    catch(err) {
-    }
-//-->
-var methods = {"i0":9,"i1":10,"i2":10,"i3":10,"i4":10,"i5":10,"i6":10,"i7":10,"i8":10,"i9":10,"i10":10,"i11":10,"i12":10,"i13":10,"i14":10,"i15":10};
-var tabs = {65535:["t0","All Methods"],1:["t1","Static Methods"],2:["t2","Instance Methods"],8:["t4","Concrete Methods"]};
-var altColor = "altColor";
-var rowColor = "rowColor";
-var tableTab = "tableTab";
-var activeTableTab = "activeTableTab";
-</script>
-<noscript>
-<div>JavaScript is disabled on your browser.</div>
-</noscript>
-<!-- ========= START OF TOP NAVBAR ======= -->
-<div class="topNav"><a name="navbar.top">
-<!--   -->
-</a>
-<div class="skipNav"><a href="#skip.navbar.top" title="Skip navigation links">Skip navigation links</a></div>
-<a name="navbar.top.firstrow">
-<!--   -->
-</a>
-<ul class="navList" title="Navigation">
-<li><a href="../simpledb/package-summary.html">Package</a></li>
-<li class="navBarCell1Rev">Class</li>
-<li><a href="package-tree.html">Tree</a></li>
-<li><a href="../deprecated-list.html">Deprecated</a></li>
-<li><a href="../index-all.html">Index</a></li>
-<li><a href="../help-doc.html">Help</a></li>
-</ul>
-</div>
-<div class="subNav">
-<ul class="navList">
-<li><a href="../simpledb/HeapFileEncoder.html" title="class in simpledb"><span class="typeNameLink">Prev&nbsp;Class</span></a></li>
-<li><a href="../simpledb/HeapPageId.html" title="class in simpledb"><span class="typeNameLink">Next&nbsp;Class</span></a></li>
-</ul>
-<ul class="navList">
-<li><a href="../index.html?simpledb/HeapPage.html" target="_top">Frames</a></li>
-<li><a href="HeapPage.html" target="_top">No&nbsp;Frames</a></li>
-</ul>
-<ul class="navList" id="allclasses_navbar_top">
-<li><a href="../allclasses-noframe.html">All&nbsp;Classes</a></li>
-</ul>
-<div>
-<script type="text/javascript"><!--
-  allClassesLink = document.getElementById("allclasses_navbar_top");
-  if(window==top) {
-    allClassesLink.style.display = "block";
-  }
-  else {
-    allClassesLink.style.display = "none";
-  }
-  //-->
-</script>
-</div>
-<div>
-<ul class="subNavList">
-<li>Summary:&nbsp;</li>
-<li>Nested&nbsp;|&nbsp;</li>
-<li><a href="#field.summary">Field</a>&nbsp;|&nbsp;</li>
-<li><a href="#constructor.summary">Constr</a>&nbsp;|&nbsp;</li>
-<li><a href="#method.summary">Method</a></li>
-</ul>
-<ul class="subNavList">
-<li>Detail:&nbsp;</li>
-<li><a href="#field.detail">Field</a>&nbsp;|&nbsp;</li>
-<li><a href="#constructor.detail">Constr</a>&nbsp;|&nbsp;</li>
-<li><a href="#method.detail">Method</a></li>
-</ul>
-</div>
-<a name="skip.navbar.top">
-<!--   -->
-</a></div>
-<!-- ========= END OF TOP NAVBAR ========= -->
-<!-- ======== START OF CLASS DATA ======== -->
-<div class="header">
-<div class="subTitle">simpledb</div>
-<h2 title="Class HeapPage" class="title">Class HeapPage</h2>
-</div>
-<div class="contentContainer">
-<ul class="inheritance">
-<li>java.lang.Object</li>
-<li>
-<ul class="inheritance">
-<li>simpledb.HeapPage</li>
-</ul>
-</li>
-</ul>
-<div class="description">
-<ul class="blockList">
-<li class="blockList">
-<dl>
-<dt>All Implemented Interfaces:</dt>
-<dd><a href="../simpledb/Page.html" title="interface in simpledb">Page</a></dd>
-</dl>
-<hr>
-<br>
-<pre>public class <span class="typeNameLabel">HeapPage</span>
-extends java.lang.Object
-implements <a href="../simpledb/Page.html" title="interface in simpledb">Page</a></pre>
-<div class="block">Each instance of HeapPage stores data for one page of HeapFiles and 
- implements the Page interface that is used by BufferPool.</div>
-<dl>
-<dt><span class="seeLabel">See Also:</span></dt>
-<dd><a href="../simpledb/HeapFile.html" title="class in simpledb"><code>HeapFile</code></a>, 
-<a href="../simpledb/BufferPool.html" title="class in simpledb"><code>BufferPool</code></a></dd>
-</dl>
-</li>
-</ul>
-</div>
-<div class="summary">
-<ul class="blockList">
-<li class="blockList">
-<!-- =========== FIELD SUMMARY =========== -->
-<ul class="blockList">
-<li class="blockList"><a name="field.summary">
-<!--   -->
-</a>
-<h3>Field Summary</h3>
-<table class="memberSummary" border="0" cellpadding="3" cellspacing="0" summary="Field Summary table, listing fields, and an explanation">
-<caption><span>Fields</span><span class="tabEnd">&nbsp;</span></caption>
-<tr>
-<th class="colFirst" scope="col">Modifier and Type</th>
-<th class="colLast" scope="col">Field and Description</th>
-</tr>
-<tr class="altColor">
-<td class="colFirst"><code>(package private) byte[]</code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/HeapPage.html#header">header</a></span></code>&nbsp;</td>
-</tr>
-<tr class="rowColor">
-<td class="colFirst"><code>(package private) int</code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/HeapPage.html#numSlots">numSlots</a></span></code>&nbsp;</td>
-</tr>
-<tr class="altColor">
-<td class="colFirst"><code>(package private) byte[]</code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/HeapPage.html#oldData">oldData</a></span></code>&nbsp;</td>
-</tr>
-<tr class="rowColor">
-<td class="colFirst"><code>private java.lang.Byte</code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/HeapPage.html#oldDataLock">oldDataLock</a></span></code>&nbsp;</td>
-</tr>
-<tr class="altColor">
-<td class="colFirst"><code>(package private) <a href="../simpledb/HeapPageId.html" title="class in simpledb">HeapPageId</a></code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/HeapPage.html#pid">pid</a></span></code>&nbsp;</td>
-</tr>
-<tr class="rowColor">
-<td class="colFirst"><code>(package private) <a href="../simpledb/TupleDesc.html" title="class in simpledb">TupleDesc</a></code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/HeapPage.html#td">td</a></span></code>&nbsp;</td>
-</tr>
-<tr class="altColor">
-<td class="colFirst"><code>(package private) <a href="../simpledb/Tuple.html" title="class in simpledb">Tuple</a>[]</code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/HeapPage.html#tuples">tuples</a></span></code>&nbsp;</td>
-</tr>
-</table>
-</li>
-</ul>
-<!-- ======== CONSTRUCTOR SUMMARY ======== -->
-<ul class="blockList">
-<li class="blockList"><a name="constructor.summary">
-<!--   -->
-</a>
-<h3>Constructor Summary</h3>
-<table class="memberSummary" border="0" cellpadding="3" cellspacing="0" summary="Constructor Summary table, listing constructors, and an explanation">
-<caption><span>Constructors</span><span class="tabEnd">&nbsp;</span></caption>
-<tr>
-<th class="colOne" scope="col">Constructor and Description</th>
-</tr>
-<tr class="altColor">
-<td class="colOne"><code><span class="memberNameLink"><a href="../simpledb/HeapPage.html#HeapPage-simpledb.HeapPageId-byte:A-">HeapPage</a></span>(<a href="../simpledb/HeapPageId.html" title="class in simpledb">HeapPageId</a>&nbsp;id,
-        byte[]&nbsp;data)</code>
-<div class="block">Create a HeapPage from a set of bytes of data read from disk.</div>
-</td>
-</tr>
-</table>
-</li>
-</ul>
-<!-- ========== METHOD SUMMARY =========== -->
-<ul class="blockList">
-<li class="blockList"><a name="method.summary">
-<!--   -->
-</a>
-<h3>Method Summary</h3>
-<table class="memberSummary" border="0" cellpadding="3" cellspacing="0" summary="Method Summary table, listing methods, and an explanation">
-<caption><span id="t0" class="activeTableTab"><span>All Methods</span><span class="tabEnd">&nbsp;</span></span><span id="t1" class="tableTab"><span><a href="javascript:show(1);">Static Methods</a></span><span class="tabEnd">&nbsp;</span></span><span id="t2" class="tableTab"><span><a href="javascript:show(2);">Instance Methods</a></span><span class="tabEnd">&nbsp;</span></span><span id="t4" class="tableTab"><span><a href="javascript:show(8);">Concrete Methods</a></span><span class="tabEnd">&nbsp;</span></span></caption>
-<tr>
-<th class="colFirst" scope="col">Modifier and Type</th>
-<th class="colLast" scope="col">Method and Description</th>
-</tr>
-<tr id="i0" class="altColor">
-<td class="colFirst"><code>static byte[]</code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/HeapPage.html#createEmptyPageData--">createEmptyPageData</a></span>()</code>
-<div class="block">Static method to generate a byte array corresponding to an empty
- HeapPage.</div>
-</td>
-</tr>
-<tr id="i1" class="rowColor">
-<td class="colFirst"><code>void</code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/HeapPage.html#deleteTuple-simpledb.Tuple-">deleteTuple</a></span>(<a href="../simpledb/Tuple.html" title="class in simpledb">Tuple</a>&nbsp;t)</code>
-<div class="block">Delete the specified tuple from the page;  the tuple should be updated to reflect
-   that it is no longer stored on any page.</div>
-</td>
-</tr>
-<tr id="i2" class="altColor">
-<td class="colFirst"><code><a href="../simpledb/HeapPage.html" title="class in simpledb">HeapPage</a></code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/HeapPage.html#getBeforeImage--">getBeforeImage</a></span>()</code>
-<div class="block">Return a view of this page before it was modified
-        -- used by recovery</div>
-</td>
-</tr>
-<tr id="i3" class="rowColor">
-<td class="colFirst"><code>private int</code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/HeapPage.html#getHeaderSize--">getHeaderSize</a></span>()</code>
-<div class="block">Computes the number of bytes in the header of a page in a HeapFile with each tuple occupying tupleSize bytes</div>
-</td>
-</tr>
-<tr id="i4" class="altColor">
-<td class="colFirst"><code><a href="../simpledb/HeapPageId.html" title="class in simpledb">HeapPageId</a></code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/HeapPage.html#getId--">getId</a></span>()</code>
-<div class="block">Return the id of this page.</div>
-</td>
-</tr>
-<tr id="i5" class="rowColor">
-<td class="colFirst"><code>int</code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/HeapPage.html#getNumEmptySlots--">getNumEmptySlots</a></span>()</code>
-<div class="block">Returns the number of empty slots on this page.</div>
-</td>
-</tr>
-<tr id="i6" class="altColor">
-<td class="colFirst"><code>private int</code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/HeapPage.html#getNumTuples--">getNumTuples</a></span>()</code>
-<div class="block">Retrieve the number of tuples on this page.</div>
-</td>
-</tr>
-<tr id="i7" class="rowColor">
-<td class="colFirst"><code>byte[]</code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/HeapPage.html#getPageData--">getPageData</a></span>()</code>
-<div class="block">Generates a byte array representing the contents of this page.</div>
-</td>
-</tr>
-<tr id="i8" class="altColor">
-<td class="colFirst"><code>void</code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/HeapPage.html#insertTuple-simpledb.Tuple-">insertTuple</a></span>(<a href="../simpledb/Tuple.html" title="class in simpledb">Tuple</a>&nbsp;t)</code>
-<div class="block">Adds the specified tuple to the page;  the tuple should be updated to reflect
-  that it is now stored on this page.</div>
-</td>
-</tr>
-<tr id="i9" class="rowColor">
-<td class="colFirst"><code><a href="../simpledb/TransactionId.html" title="class in simpledb">TransactionId</a></code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/HeapPage.html#isDirty--">isDirty</a></span>()</code>
-<div class="block">Returns the tid of the transaction that last dirtied this page, or null if the page is not dirty</div>
-</td>
-</tr>
-<tr id="i10" class="altColor">
-<td class="colFirst"><code>boolean</code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/HeapPage.html#isSlotUsed-int-">isSlotUsed</a></span>(int&nbsp;i)</code>
-<div class="block">Returns true if associated slot on this page is filled.</div>
-</td>
-</tr>
-<tr id="i11" class="rowColor">
-<td class="colFirst"><code>java.util.Iterator&lt;<a href="../simpledb/Tuple.html" title="class in simpledb">Tuple</a>&gt;</code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/HeapPage.html#iterator--">iterator</a></span>()</code>&nbsp;</td>
-</tr>
-<tr id="i12" class="altColor">
-<td class="colFirst"><code>void</code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/HeapPage.html#markDirty-boolean-simpledb.TransactionId-">markDirty</a></span>(boolean&nbsp;dirty,
-         <a href="../simpledb/TransactionId.html" title="class in simpledb">TransactionId</a>&nbsp;tid)</code>
-<div class="block">Marks this page as dirty/not dirty and record that transaction
- that did the dirtying</div>
-</td>
-</tr>
-<tr id="i13" class="rowColor">
-<td class="colFirst"><code>private void</code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/HeapPage.html#markSlotUsed-int-boolean-">markSlotUsed</a></span>(int&nbsp;i,
-            boolean&nbsp;value)</code>
-<div class="block">Abstraction to fill or clear a slot on this page.</div>
-</td>
-</tr>
-<tr id="i14" class="altColor">
-<td class="colFirst"><code>private <a href="../simpledb/Tuple.html" title="class in simpledb">Tuple</a></code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/HeapPage.html#readNextTuple-java.io.DataInputStream-int-">readNextTuple</a></span>(java.io.DataInputStream&nbsp;dis,
-             int&nbsp;slotId)</code>
-<div class="block">Suck up tuples from the source file.</div>
-</td>
-</tr>
-<tr id="i15" class="rowColor">
-<td class="colFirst"><code>void</code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/HeapPage.html#setBeforeImage--">setBeforeImage</a></span>()</code>&nbsp;</td>
-</tr>
-</table>
-<ul class="blockList">
-<li class="blockList"><a name="methods.inherited.from.class.java.lang.Object">
-<!--   -->
-</a>
-<h3>Methods inherited from class&nbsp;java.lang.Object</h3>
-<code>clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait</code></li>
-</ul>
-</li>
-</ul>
-</li>
-</ul>
-</div>
-<div class="details">
-<ul class="blockList">
-<li class="blockList">
-<!-- ============ FIELD DETAIL =========== -->
-<ul class="blockList">
-<li class="blockList"><a name="field.detail">
-<!--   -->
-</a>
-<h3>Field Detail</h3>
-<a name="pid">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>pid</h4>
-<pre>final&nbsp;<a href="../simpledb/HeapPageId.html" title="class in simpledb">HeapPageId</a> pid</pre>
-</li>
-</ul>
-<a name="td">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>td</h4>
-<pre>final&nbsp;<a href="../simpledb/TupleDesc.html" title="class in simpledb">TupleDesc</a> td</pre>
-</li>
-</ul>
-<a name="header">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>header</h4>
-<pre>final&nbsp;byte[] header</pre>
-</li>
-</ul>
-<a name="tuples">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>tuples</h4>
-<pre>final&nbsp;<a href="../simpledb/Tuple.html" title="class in simpledb">Tuple</a>[] tuples</pre>
-</li>
-</ul>
-<a name="numSlots">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>numSlots</h4>
-<pre>final&nbsp;int numSlots</pre>
-</li>
-</ul>
-<a name="oldData">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>oldData</h4>
-<pre>byte[] oldData</pre>
-</li>
-</ul>
-<a name="oldDataLock">
-<!--   -->
-</a>
-<ul class="blockListLast">
-<li class="blockList">
-<h4>oldDataLock</h4>
-<pre>private final&nbsp;java.lang.Byte oldDataLock</pre>
-</li>
-</ul>
-</li>
-</ul>
-<!-- ========= CONSTRUCTOR DETAIL ======== -->
-<ul class="blockList">
-<li class="blockList"><a name="constructor.detail">
-<!--   -->
-</a>
-<h3>Constructor Detail</h3>
-<a name="HeapPage-simpledb.HeapPageId-byte:A-">
-<!--   -->
-</a>
-<ul class="blockListLast">
-<li class="blockList">
-<h4>HeapPage</h4>
-<pre>public&nbsp;HeapPage(<a href="../simpledb/HeapPageId.html" title="class in simpledb">HeapPageId</a>&nbsp;id,
-                byte[]&nbsp;data)
-         throws java.io.IOException</pre>
-<div class="block">Create a HeapPage from a set of bytes of data read from disk.
- The format of a HeapPage is a set of header bytes indicating
- the slots of the page that are in use, some number of tuple slots.
-  Specifically, the number of tuples is equal to: <p>
-          floor((BufferPool.getPageSize()*8) / (tuple size * 8 + 1))
- <p> where tuple size is the size of tuples in this
- database table, which can be determined via <a href="../simpledb/Catalog.html#getTupleDesc-int-"><code>Catalog.getTupleDesc(int)</code></a>.
- The number of 8-bit header words is equal to:
- <p>
-      ceiling(no. tuple slots / 8)
- <p></div>
-<dl>
-<dt><span class="throwsLabel">Throws:</span></dt>
-<dd><code>java.io.IOException</code></dd>
-<dt><span class="seeLabel">See Also:</span></dt>
-<dd><a href="../simpledb/Database.html#getCatalog--"><code>Database.getCatalog()</code></a>, 
-<a href="../simpledb/Catalog.html#getTupleDesc-int-"><code>Catalog.getTupleDesc(int)</code></a>, 
-<a href="../simpledb/BufferPool.html#getPageSize--"><code>BufferPool.getPageSize()</code></a></dd>
-</dl>
-</li>
-</ul>
-</li>
-</ul>
-<!-- ============ METHOD DETAIL ========== -->
-<ul class="blockList">
-<li class="blockList"><a name="method.detail">
-<!--   -->
-</a>
-<h3>Method Detail</h3>
-<a name="getNumTuples--">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>getNumTuples</h4>
-<pre>private&nbsp;int&nbsp;getNumTuples()</pre>
-<div class="block">Retrieve the number of tuples on this page.</div>
-<dl>
-<dt><span class="returnLabel">Returns:</span></dt>
-<dd>the number of tuples on this page</dd>
-</dl>
-</li>
-</ul>
-<a name="getHeaderSize--">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>getHeaderSize</h4>
-<pre>private&nbsp;int&nbsp;getHeaderSize()</pre>
-<div class="block">Computes the number of bytes in the header of a page in a HeapFile with each tuple occupying tupleSize bytes</div>
-<dl>
-<dt><span class="returnLabel">Returns:</span></dt>
-<dd>the number of bytes in the header of a page in a HeapFile with each tuple occupying tupleSize bytes</dd>
-</dl>
-</li>
-</ul>
-<a name="getBeforeImage--">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>getBeforeImage</h4>
-<pre>public&nbsp;<a href="../simpledb/HeapPage.html" title="class in simpledb">HeapPage</a>&nbsp;getBeforeImage()</pre>
-<div class="block">Return a view of this page before it was modified
-        -- used by recovery</div>
-<dl>
-<dt><span class="overrideSpecifyLabel">Specified by:</span></dt>
-<dd><code><a href="../simpledb/Page.html#getBeforeImage--">getBeforeImage</a></code>&nbsp;in interface&nbsp;<code><a href="../simpledb/Page.html" title="interface in simpledb">Page</a></code></dd>
-</dl>
-</li>
-</ul>
-<a name="setBeforeImage--">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>setBeforeImage</h4>
-<pre>public&nbsp;void&nbsp;setBeforeImage()</pre>
-<dl>
-<dt><span class="overrideSpecifyLabel">Specified by:</span></dt>
-<dd><code><a href="../simpledb/Page.html#setBeforeImage--">setBeforeImage</a></code>&nbsp;in interface&nbsp;<code><a href="../simpledb/Page.html" title="interface in simpledb">Page</a></code></dd>
-</dl>
-</li>
-</ul>
-<a name="getId--">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>getId</h4>
-<pre>public&nbsp;<a href="../simpledb/HeapPageId.html" title="class in simpledb">HeapPageId</a>&nbsp;getId()</pre>
-<div class="block"><span class="descfrmTypeLabel">Description copied from interface:&nbsp;<code><a href="../simpledb/Page.html#getId--">Page</a></code></span></div>
-<div class="block">Return the id of this page.  The id is a unique identifier for a page
- that can be used to look up the page on disk or determine if the page
- is resident in the buffer pool.</div>
-<dl>
-<dt><span class="overrideSpecifyLabel">Specified by:</span></dt>
-<dd><code><a href="../simpledb/Page.html#getId--">getId</a></code>&nbsp;in interface&nbsp;<code><a href="../simpledb/Page.html" title="interface in simpledb">Page</a></code></dd>
-<dt><span class="returnLabel">Returns:</span></dt>
-<dd>the PageId associated with this page.</dd>
-</dl>
-</li>
-</ul>
-<a name="readNextTuple-java.io.DataInputStream-int-">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>readNextTuple</h4>
-<pre>private&nbsp;<a href="../simpledb/Tuple.html" title="class in simpledb">Tuple</a>&nbsp;readNextTuple(java.io.DataInputStream&nbsp;dis,
-                            int&nbsp;slotId)
-                     throws java.util.NoSuchElementException</pre>
-<div class="block">Suck up tuples from the source file.</div>
-<dl>
-<dt><span class="throwsLabel">Throws:</span></dt>
-<dd><code>java.util.NoSuchElementException</code></dd>
-</dl>
-</li>
-</ul>
-<a name="getPageData--">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>getPageData</h4>
-<pre>public&nbsp;byte[]&nbsp;getPageData()</pre>
-<div class="block">Generates a byte array representing the contents of this page.
- Used to serialize this page to disk.
- <p>
- The invariant here is that it should be possible to pass the byte
- array generated by getPageData to the HeapPage constructor and
- have it produce an identical HeapPage object.</div>
-<dl>
-<dt><span class="overrideSpecifyLabel">Specified by:</span></dt>
-<dd><code><a href="../simpledb/Page.html#getPageData--">getPageData</a></code>&nbsp;in interface&nbsp;<code><a href="../simpledb/Page.html" title="interface in simpledb">Page</a></code></dd>
-<dt><span class="returnLabel">Returns:</span></dt>
-<dd>A byte array correspond to the bytes of this page.</dd>
-<dt><span class="seeLabel">See Also:</span></dt>
-<dd><a href="../simpledb/HeapPage.html#HeapPage-simpledb.HeapPageId-byte:A-"><code>HeapPage(simpledb.HeapPageId, byte[])</code></a></dd>
-</dl>
-</li>
-</ul>
-<a name="createEmptyPageData--">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>createEmptyPageData</h4>
-<pre>public static&nbsp;byte[]&nbsp;createEmptyPageData()</pre>
-<div class="block">Static method to generate a byte array corresponding to an empty
- HeapPage.
- Used to add new, empty pages to the file. Passing the results of
- this method to the HeapPage constructor will create a HeapPage with
- no valid tuples in it.</div>
-<dl>
-<dt><span class="returnLabel">Returns:</span></dt>
-<dd>The returned ByteArray.</dd>
-</dl>
-</li>
-</ul>
-<a name="deleteTuple-simpledb.Tuple-">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>deleteTuple</h4>
-<pre>public&nbsp;void&nbsp;deleteTuple(<a href="../simpledb/Tuple.html" title="class in simpledb">Tuple</a>&nbsp;t)
-                 throws <a href="../simpledb/DbException.html" title="class in simpledb">DbException</a></pre>
-<div class="block">Delete the specified tuple from the page;  the tuple should be updated to reflect
-   that it is no longer stored on any page.</div>
-<dl>
-<dt><span class="paramLabel">Parameters:</span></dt>
-<dd><code>t</code> - The tuple to delete</dd>
-<dt><span class="throwsLabel">Throws:</span></dt>
-<dd><code><a href="../simpledb/DbException.html" title="class in simpledb">DbException</a></code> - if this tuple is not on this page, or tuple slot is
-         already empty.</dd>
-</dl>
-</li>
-</ul>
-<a name="insertTuple-simpledb.Tuple-">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>insertTuple</h4>
-<pre>public&nbsp;void&nbsp;insertTuple(<a href="../simpledb/Tuple.html" title="class in simpledb">Tuple</a>&nbsp;t)
-                 throws <a href="../simpledb/DbException.html" title="class in simpledb">DbException</a></pre>
-<div class="block">Adds the specified tuple to the page;  the tuple should be updated to reflect
-  that it is now stored on this page.</div>
-<dl>
-<dt><span class="paramLabel">Parameters:</span></dt>
-<dd><code>t</code> - The tuple to add.</dd>
-<dt><span class="throwsLabel">Throws:</span></dt>
-<dd><code><a href="../simpledb/DbException.html" title="class in simpledb">DbException</a></code> - if the page is full (no empty slots) or tupledesc
-         is mismatch.</dd>
-</dl>
-</li>
-</ul>
-<a name="markDirty-boolean-simpledb.TransactionId-">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>markDirty</h4>
-<pre>public&nbsp;void&nbsp;markDirty(boolean&nbsp;dirty,
-                      <a href="../simpledb/TransactionId.html" title="class in simpledb">TransactionId</a>&nbsp;tid)</pre>
-<div class="block">Marks this page as dirty/not dirty and record that transaction
- that did the dirtying</div>
-<dl>
-<dt><span class="overrideSpecifyLabel">Specified by:</span></dt>
-<dd><code><a href="../simpledb/Page.html#markDirty-boolean-simpledb.TransactionId-">markDirty</a></code>&nbsp;in interface&nbsp;<code><a href="../simpledb/Page.html" title="interface in simpledb">Page</a></code></dd>
-</dl>
-</li>
-</ul>
-<a name="isDirty--">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>isDirty</h4>
-<pre>public&nbsp;<a href="../simpledb/TransactionId.html" title="class in simpledb">TransactionId</a>&nbsp;isDirty()</pre>
-<div class="block">Returns the tid of the transaction that last dirtied this page, or null if the page is not dirty</div>
-<dl>
-<dt><span class="overrideSpecifyLabel">Specified by:</span></dt>
-<dd><code><a href="../simpledb/Page.html#isDirty--">isDirty</a></code>&nbsp;in interface&nbsp;<code><a href="../simpledb/Page.html" title="interface in simpledb">Page</a></code></dd>
-<dt><span class="returnLabel">Returns:</span></dt>
-<dd>The id of the transaction that last dirtied this page, or null</dd>
-</dl>
-</li>
-</ul>
-<a name="getNumEmptySlots--">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>getNumEmptySlots</h4>
-<pre>public&nbsp;int&nbsp;getNumEmptySlots()</pre>
-<div class="block">Returns the number of empty slots on this page.</div>
-</li>
-</ul>
-<a name="isSlotUsed-int-">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>isSlotUsed</h4>
-<pre>public&nbsp;boolean&nbsp;isSlotUsed(int&nbsp;i)</pre>
-<div class="block">Returns true if associated slot on this page is filled.</div>
-</li>
-</ul>
-<a name="markSlotUsed-int-boolean-">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>markSlotUsed</h4>
-<pre>private&nbsp;void&nbsp;markSlotUsed(int&nbsp;i,
-                          boolean&nbsp;value)</pre>
-<div class="block">Abstraction to fill or clear a slot on this page.</div>
-</li>
-</ul>
-<a name="iterator--">
-<!--   -->
-</a>
-<ul class="blockListLast">
-<li class="blockList">
-<h4>iterator</h4>
-<pre>public&nbsp;java.util.Iterator&lt;<a href="../simpledb/Tuple.html" title="class in simpledb">Tuple</a>&gt;&nbsp;iterator()</pre>
-<dl>
-<dt><span class="returnLabel">Returns:</span></dt>
-<dd>an iterator over all tuples on this page (calling remove on this iterator throws an UnsupportedOperationException)
- (note that this iterator shouldn't return tuples in empty slots!)</dd>
-</dl>
-</li>
-</ul>
-</li>
-</ul>
-</li>
-</ul>
-</div>
-</div>
-<!-- ========= END OF CLASS DATA ========= -->
-<!-- ======= START OF BOTTOM NAVBAR ====== -->
-<div class="bottomNav"><a name="navbar.bottom">
-<!--   -->
-</a>
-<div class="skipNav"><a href="#skip.navbar.bottom" title="Skip navigation links">Skip navigation links</a></div>
-<a name="navbar.bottom.firstrow">
-<!--   -->
-</a>
-<ul class="navList" title="Navigation">
-<li><a href="../simpledb/package-summary.html">Package</a></li>
-<li class="navBarCell1Rev">Class</li>
-<li><a href="package-tree.html">Tree</a></li>
-<li><a href="../deprecated-list.html">Deprecated</a></li>
-<li><a href="../index-all.html">Index</a></li>
-<li><a href="../help-doc.html">Help</a></li>
-</ul>
-</div>
-<div class="subNav">
-<ul class="navList">
-<li><a href="../simpledb/HeapFileEncoder.html" title="class in simpledb"><span class="typeNameLink">Prev&nbsp;Class</span></a></li>
-<li><a href="../simpledb/HeapPageId.html" title="class in simpledb"><span class="typeNameLink">Next&nbsp;Class</span></a></li>
-</ul>
-<ul class="navList">
-<li><a href="../index.html?simpledb/HeapPage.html" target="_top">Frames</a></li>
-<li><a href="HeapPage.html" target="_top">No&nbsp;Frames</a></li>
-</ul>
-<ul class="navList" id="allclasses_navbar_bottom">
-<li><a href="../allclasses-noframe.html">All&nbsp;Classes</a></li>
-</ul>
-<div>
-<script type="text/javascript"><!--
-  allClassesLink = document.getElementById("allclasses_navbar_bottom");
-  if(window==top) {
-    allClassesLink.style.display = "block";
-  }
-  else {
-    allClassesLink.style.display = "none";
-  }
-  //-->
-</script>
-</div>
-<div>
-<ul class="subNavList">
-<li>Summary:&nbsp;</li>
-<li>Nested&nbsp;|&nbsp;</li>
-<li><a href="#field.summary">Field</a>&nbsp;|&nbsp;</li>
-<li><a href="#constructor.summary">Constr</a>&nbsp;|&nbsp;</li>
-<li><a href="#method.summary">Method</a></li>
-</ul>
-<ul class="subNavList">
-<li>Detail:&nbsp;</li>
-<li><a href="#field.detail">Field</a>&nbsp;|&nbsp;</li>
-<li><a href="#constructor.detail">Constr</a>&nbsp;|&nbsp;</li>
-<li><a href="#method.detail">Method</a></li>
-</ul>
-</div>
-<a name="skip.navbar.bottom">
-<!--   -->
-</a></div>
-<!-- ======== END OF BOTTOM NAVBAR ======= -->
-</body>
-</html>
diff -ruN lab1/javadoc/simpledb/HeapPageId.html lab3/javadoc/simpledb/HeapPageId.html
--- lab1/javadoc/simpledb/HeapPageId.html	2016-11-02 22:06:58.000000000 -0500
+++ lab3/javadoc/simpledb/HeapPageId.html	1969-12-31 18:00:00.000000000 -0600
@@ -1,386 +0,0 @@
-<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
-<!-- NewPage -->
-<html lang="en">
-<head>
-<!-- Generated by javadoc (1.8.0_25) on Thu Oct 27 13:16:23 CDT 2016 -->
-<title>HeapPageId</title>
-<meta name="date" content="2016-10-27">
-<link rel="stylesheet" type="text/css" href="../stylesheet.css" title="Style">
-<script type="text/javascript" src="../script.js"></script>
-</head>
-<body>
-<script type="text/javascript"><!--
-    try {
-        if (location.href.indexOf('is-external=true') == -1) {
-            parent.document.title="HeapPageId";
-        }
-    }
-    catch(err) {
-    }
-//-->
-var methods = {"i0":10,"i1":10,"i2":10,"i3":10,"i4":10};
-var tabs = {65535:["t0","All Methods"],2:["t2","Instance Methods"],8:["t4","Concrete Methods"]};
-var altColor = "altColor";
-var rowColor = "rowColor";
-var tableTab = "tableTab";
-var activeTableTab = "activeTableTab";
-</script>
-<noscript>
-<div>JavaScript is disabled on your browser.</div>
-</noscript>
-<!-- ========= START OF TOP NAVBAR ======= -->
-<div class="topNav"><a name="navbar.top">
-<!--   -->
-</a>
-<div class="skipNav"><a href="#skip.navbar.top" title="Skip navigation links">Skip navigation links</a></div>
-<a name="navbar.top.firstrow">
-<!--   -->
-</a>
-<ul class="navList" title="Navigation">
-<li><a href="../simpledb/package-summary.html">Package</a></li>
-<li class="navBarCell1Rev">Class</li>
-<li><a href="package-tree.html">Tree</a></li>
-<li><a href="../deprecated-list.html">Deprecated</a></li>
-<li><a href="../index-all.html">Index</a></li>
-<li><a href="../help-doc.html">Help</a></li>
-</ul>
-</div>
-<div class="subNav">
-<ul class="navList">
-<li><a href="../simpledb/HeapPage.html" title="class in simpledb"><span class="typeNameLink">Prev&nbsp;Class</span></a></li>
-<li><a href="../simpledb/IntField.html" title="class in simpledb"><span class="typeNameLink">Next&nbsp;Class</span></a></li>
-</ul>
-<ul class="navList">
-<li><a href="../index.html?simpledb/HeapPageId.html" target="_top">Frames</a></li>
-<li><a href="HeapPageId.html" target="_top">No&nbsp;Frames</a></li>
-</ul>
-<ul class="navList" id="allclasses_navbar_top">
-<li><a href="../allclasses-noframe.html">All&nbsp;Classes</a></li>
-</ul>
-<div>
-<script type="text/javascript"><!--
-  allClassesLink = document.getElementById("allclasses_navbar_top");
-  if(window==top) {
-    allClassesLink.style.display = "block";
-  }
-  else {
-    allClassesLink.style.display = "none";
-  }
-  //-->
-</script>
-</div>
-<div>
-<ul class="subNavList">
-<li>Summary:&nbsp;</li>
-<li>Nested&nbsp;|&nbsp;</li>
-<li>Field&nbsp;|&nbsp;</li>
-<li><a href="#constructor.summary">Constr</a>&nbsp;|&nbsp;</li>
-<li><a href="#method.summary">Method</a></li>
-</ul>
-<ul class="subNavList">
-<li>Detail:&nbsp;</li>
-<li>Field&nbsp;|&nbsp;</li>
-<li><a href="#constructor.detail">Constr</a>&nbsp;|&nbsp;</li>
-<li><a href="#method.detail">Method</a></li>
-</ul>
-</div>
-<a name="skip.navbar.top">
-<!--   -->
-</a></div>
-<!-- ========= END OF TOP NAVBAR ========= -->
-<!-- ======== START OF CLASS DATA ======== -->
-<div class="header">
-<div class="subTitle">simpledb</div>
-<h2 title="Class HeapPageId" class="title">Class HeapPageId</h2>
-</div>
-<div class="contentContainer">
-<ul class="inheritance">
-<li>java.lang.Object</li>
-<li>
-<ul class="inheritance">
-<li>simpledb.HeapPageId</li>
-</ul>
-</li>
-</ul>
-<div class="description">
-<ul class="blockList">
-<li class="blockList">
-<dl>
-<dt>All Implemented Interfaces:</dt>
-<dd><a href="../simpledb/PageId.html" title="interface in simpledb">PageId</a></dd>
-</dl>
-<hr>
-<br>
-<pre>public class <span class="typeNameLabel">HeapPageId</span>
-extends java.lang.Object
-implements <a href="../simpledb/PageId.html" title="interface in simpledb">PageId</a></pre>
-<div class="block">Unique identifier for HeapPage objects.</div>
-</li>
-</ul>
-</div>
-<div class="summary">
-<ul class="blockList">
-<li class="blockList">
-<!-- ======== CONSTRUCTOR SUMMARY ======== -->
-<ul class="blockList">
-<li class="blockList"><a name="constructor.summary">
-<!--   -->
-</a>
-<h3>Constructor Summary</h3>
-<table class="memberSummary" border="0" cellpadding="3" cellspacing="0" summary="Constructor Summary table, listing constructors, and an explanation">
-<caption><span>Constructors</span><span class="tabEnd">&nbsp;</span></caption>
-<tr>
-<th class="colOne" scope="col">Constructor and Description</th>
-</tr>
-<tr class="altColor">
-<td class="colOne"><code><span class="memberNameLink"><a href="../simpledb/HeapPageId.html#HeapPageId-int-int-">HeapPageId</a></span>(int&nbsp;tableId,
-          int&nbsp;pgNo)</code>
-<div class="block">Constructor.</div>
-</td>
-</tr>
-</table>
-</li>
-</ul>
-<!-- ========== METHOD SUMMARY =========== -->
-<ul class="blockList">
-<li class="blockList"><a name="method.summary">
-<!--   -->
-</a>
-<h3>Method Summary</h3>
-<table class="memberSummary" border="0" cellpadding="3" cellspacing="0" summary="Method Summary table, listing methods, and an explanation">
-<caption><span id="t0" class="activeTableTab"><span>All Methods</span><span class="tabEnd">&nbsp;</span></span><span id="t2" class="tableTab"><span><a href="javascript:show(2);">Instance Methods</a></span><span class="tabEnd">&nbsp;</span></span><span id="t4" class="tableTab"><span><a href="javascript:show(8);">Concrete Methods</a></span><span class="tabEnd">&nbsp;</span></span></caption>
-<tr>
-<th class="colFirst" scope="col">Modifier and Type</th>
-<th class="colLast" scope="col">Method and Description</th>
-</tr>
-<tr id="i0" class="altColor">
-<td class="colFirst"><code>boolean</code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/HeapPageId.html#equals-java.lang.Object-">equals</a></span>(java.lang.Object&nbsp;o)</code>
-<div class="block">Compares one PageId to another.</div>
-</td>
-</tr>
-<tr id="i1" class="rowColor">
-<td class="colFirst"><code>int</code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/HeapPageId.html#getTableId--">getTableId</a></span>()</code>&nbsp;</td>
-</tr>
-<tr id="i2" class="altColor">
-<td class="colFirst"><code>int</code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/HeapPageId.html#hashCode--">hashCode</a></span>()</code>&nbsp;</td>
-</tr>
-<tr id="i3" class="rowColor">
-<td class="colFirst"><code>int</code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/HeapPageId.html#pageNumber--">pageNumber</a></span>()</code>&nbsp;</td>
-</tr>
-<tr id="i4" class="altColor">
-<td class="colFirst"><code>int[]</code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/HeapPageId.html#serialize--">serialize</a></span>()</code>
-<div class="block">Return a representation of this object as an array of
-  integers, for writing to disk.</div>
-</td>
-</tr>
-</table>
-<ul class="blockList">
-<li class="blockList"><a name="methods.inherited.from.class.java.lang.Object">
-<!--   -->
-</a>
-<h3>Methods inherited from class&nbsp;java.lang.Object</h3>
-<code>clone, finalize, getClass, notify, notifyAll, toString, wait, wait, wait</code></li>
-</ul>
-</li>
-</ul>
-</li>
-</ul>
-</div>
-<div class="details">
-<ul class="blockList">
-<li class="blockList">
-<!-- ========= CONSTRUCTOR DETAIL ======== -->
-<ul class="blockList">
-<li class="blockList"><a name="constructor.detail">
-<!--   -->
-</a>
-<h3>Constructor Detail</h3>
-<a name="HeapPageId-int-int-">
-<!--   -->
-</a>
-<ul class="blockListLast">
-<li class="blockList">
-<h4>HeapPageId</h4>
-<pre>public&nbsp;HeapPageId(int&nbsp;tableId,
-                  int&nbsp;pgNo)</pre>
-<div class="block">Constructor. Create a page id structure for a specific page of a
- specific table.</div>
-<dl>
-<dt><span class="paramLabel">Parameters:</span></dt>
-<dd><code>tableId</code> - The table that is being referenced</dd>
-<dd><code>pgNo</code> - The page number in that table.</dd>
-</dl>
-</li>
-</ul>
-</li>
-</ul>
-<!-- ============ METHOD DETAIL ========== -->
-<ul class="blockList">
-<li class="blockList"><a name="method.detail">
-<!--   -->
-</a>
-<h3>Method Detail</h3>
-<a name="getTableId--">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>getTableId</h4>
-<pre>public&nbsp;int&nbsp;getTableId()</pre>
-<dl>
-<dt><span class="overrideSpecifyLabel">Specified by:</span></dt>
-<dd><code><a href="../simpledb/PageId.html#getTableId--">getTableId</a></code>&nbsp;in interface&nbsp;<code><a href="../simpledb/PageId.html" title="interface in simpledb">PageId</a></code></dd>
-<dt><span class="returnLabel">Returns:</span></dt>
-<dd>the table associated with this PageId</dd>
-</dl>
-</li>
-</ul>
-<a name="pageNumber--">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>pageNumber</h4>
-<pre>public&nbsp;int&nbsp;pageNumber()</pre>
-<dl>
-<dt><span class="overrideSpecifyLabel">Specified by:</span></dt>
-<dd><code><a href="../simpledb/PageId.html#pageNumber--">pageNumber</a></code>&nbsp;in interface&nbsp;<code><a href="../simpledb/PageId.html" title="interface in simpledb">PageId</a></code></dd>
-<dt><span class="returnLabel">Returns:</span></dt>
-<dd>the page number in the table getTableId() associated with
-   this PageId</dd>
-</dl>
-</li>
-</ul>
-<a name="hashCode--">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>hashCode</h4>
-<pre>public&nbsp;int&nbsp;hashCode()</pre>
-<dl>
-<dt><span class="overrideSpecifyLabel">Specified by:</span></dt>
-<dd><code><a href="../simpledb/PageId.html#hashCode--">hashCode</a></code>&nbsp;in interface&nbsp;<code><a href="../simpledb/PageId.html" title="interface in simpledb">PageId</a></code></dd>
-<dt><span class="overrideSpecifyLabel">Overrides:</span></dt>
-<dd><code>hashCode</code>&nbsp;in class&nbsp;<code>java.lang.Object</code></dd>
-<dt><span class="returnLabel">Returns:</span></dt>
-<dd>a hash code for this page, represented by the concatenation of
-   the table number and the page number (needed if a PageId is used as a
-   key in a hash table in the BufferPool, for example.)</dd>
-<dt><span class="seeLabel">See Also:</span></dt>
-<dd><a href="../simpledb/BufferPool.html" title="class in simpledb"><code>BufferPool</code></a></dd>
-</dl>
-</li>
-</ul>
-<a name="equals-java.lang.Object-">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>equals</h4>
-<pre>public&nbsp;boolean&nbsp;equals(java.lang.Object&nbsp;o)</pre>
-<div class="block">Compares one PageId to another.</div>
-<dl>
-<dt><span class="overrideSpecifyLabel">Specified by:</span></dt>
-<dd><code><a href="../simpledb/PageId.html#equals-java.lang.Object-">equals</a></code>&nbsp;in interface&nbsp;<code><a href="../simpledb/PageId.html" title="interface in simpledb">PageId</a></code></dd>
-<dt><span class="overrideSpecifyLabel">Overrides:</span></dt>
-<dd><code>equals</code>&nbsp;in class&nbsp;<code>java.lang.Object</code></dd>
-<dt><span class="paramLabel">Parameters:</span></dt>
-<dd><code>o</code> - The object to compare against (must be a PageId)</dd>
-<dt><span class="returnLabel">Returns:</span></dt>
-<dd>true if the objects are equal (e.g., page numbers and table
-   ids are the same)</dd>
-</dl>
-</li>
-</ul>
-<a name="serialize--">
-<!--   -->
-</a>
-<ul class="blockListLast">
-<li class="blockList">
-<h4>serialize</h4>
-<pre>public&nbsp;int[]&nbsp;serialize()</pre>
-<div class="block">Return a representation of this object as an array of
-  integers, for writing to disk.  Size of returned array must contain
-  number of integers that corresponds to number of args to one of the
-  constructors.</div>
-<dl>
-<dt><span class="overrideSpecifyLabel">Specified by:</span></dt>
-<dd><code><a href="../simpledb/PageId.html#serialize--">serialize</a></code>&nbsp;in interface&nbsp;<code><a href="../simpledb/PageId.html" title="interface in simpledb">PageId</a></code></dd>
-</dl>
-</li>
-</ul>
-</li>
-</ul>
-</li>
-</ul>
-</div>
-</div>
-<!-- ========= END OF CLASS DATA ========= -->
-<!-- ======= START OF BOTTOM NAVBAR ====== -->
-<div class="bottomNav"><a name="navbar.bottom">
-<!--   -->
-</a>
-<div class="skipNav"><a href="#skip.navbar.bottom" title="Skip navigation links">Skip navigation links</a></div>
-<a name="navbar.bottom.firstrow">
-<!--   -->
-</a>
-<ul class="navList" title="Navigation">
-<li><a href="../simpledb/package-summary.html">Package</a></li>
-<li class="navBarCell1Rev">Class</li>
-<li><a href="package-tree.html">Tree</a></li>
-<li><a href="../deprecated-list.html">Deprecated</a></li>
-<li><a href="../index-all.html">Index</a></li>
-<li><a href="../help-doc.html">Help</a></li>
-</ul>
-</div>
-<div class="subNav">
-<ul class="navList">
-<li><a href="../simpledb/HeapPage.html" title="class in simpledb"><span class="typeNameLink">Prev&nbsp;Class</span></a></li>
-<li><a href="../simpledb/IntField.html" title="class in simpledb"><span class="typeNameLink">Next&nbsp;Class</span></a></li>
-</ul>
-<ul class="navList">
-<li><a href="../index.html?simpledb/HeapPageId.html" target="_top">Frames</a></li>
-<li><a href="HeapPageId.html" target="_top">No&nbsp;Frames</a></li>
-</ul>
-<ul class="navList" id="allclasses_navbar_bottom">
-<li><a href="../allclasses-noframe.html">All&nbsp;Classes</a></li>
-</ul>
-<div>
-<script type="text/javascript"><!--
-  allClassesLink = document.getElementById("allclasses_navbar_bottom");
-  if(window==top) {
-    allClassesLink.style.display = "block";
-  }
-  else {
-    allClassesLink.style.display = "none";
-  }
-  //-->
-</script>
-</div>
-<div>
-<ul class="subNavList">
-<li>Summary:&nbsp;</li>
-<li>Nested&nbsp;|&nbsp;</li>
-<li>Field&nbsp;|&nbsp;</li>
-<li><a href="#constructor.summary">Constr</a>&nbsp;|&nbsp;</li>
-<li><a href="#method.summary">Method</a></li>
-</ul>
-<ul class="subNavList">
-<li>Detail:&nbsp;</li>
-<li>Field&nbsp;|&nbsp;</li>
-<li><a href="#constructor.detail">Constr</a>&nbsp;|&nbsp;</li>
-<li><a href="#method.detail">Method</a></li>
-</ul>
-</div>
-<a name="skip.navbar.bottom">
-<!--   -->
-</a></div>
-<!-- ======== END OF BOTTOM NAVBAR ======= -->
-</body>
-</html>
diff -ruN lab1/javadoc/simpledb/IntField.html lab3/javadoc/simpledb/IntField.html
--- lab1/javadoc/simpledb/IntField.html	2016-11-02 22:06:58.000000000 -0500
+++ lab3/javadoc/simpledb/IntField.html	1969-12-31 18:00:00.000000000 -0600
@@ -1,484 +0,0 @@
-<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
-<!-- NewPage -->
-<html lang="en">
-<head>
-<!-- Generated by javadoc (1.8.0_25) on Thu Oct 27 13:16:23 CDT 2016 -->
-<title>IntField</title>
-<meta name="date" content="2016-10-27">
-<link rel="stylesheet" type="text/css" href="../stylesheet.css" title="Style">
-<script type="text/javascript" src="../script.js"></script>
-</head>
-<body>
-<script type="text/javascript"><!--
-    try {
-        if (location.href.indexOf('is-external=true') == -1) {
-            parent.document.title="IntField";
-        }
-    }
-    catch(err) {
-    }
-//-->
-var methods = {"i0":10,"i1":10,"i2":10,"i3":10,"i4":10,"i5":10,"i6":10};
-var tabs = {65535:["t0","All Methods"],2:["t2","Instance Methods"],8:["t4","Concrete Methods"]};
-var altColor = "altColor";
-var rowColor = "rowColor";
-var tableTab = "tableTab";
-var activeTableTab = "activeTableTab";
-</script>
-<noscript>
-<div>JavaScript is disabled on your browser.</div>
-</noscript>
-<!-- ========= START OF TOP NAVBAR ======= -->
-<div class="topNav"><a name="navbar.top">
-<!--   -->
-</a>
-<div class="skipNav"><a href="#skip.navbar.top" title="Skip navigation links">Skip navigation links</a></div>
-<a name="navbar.top.firstrow">
-<!--   -->
-</a>
-<ul class="navList" title="Navigation">
-<li><a href="../simpledb/package-summary.html">Package</a></li>
-<li class="navBarCell1Rev">Class</li>
-<li><a href="package-tree.html">Tree</a></li>
-<li><a href="../deprecated-list.html">Deprecated</a></li>
-<li><a href="../index-all.html">Index</a></li>
-<li><a href="../help-doc.html">Help</a></li>
-</ul>
-</div>
-<div class="subNav">
-<ul class="navList">
-<li><a href="../simpledb/HeapPageId.html" title="class in simpledb"><span class="typeNameLink">Prev&nbsp;Class</span></a></li>
-<li><a href="../simpledb/LogFile.html" title="class in simpledb"><span class="typeNameLink">Next&nbsp;Class</span></a></li>
-</ul>
-<ul class="navList">
-<li><a href="../index.html?simpledb/IntField.html" target="_top">Frames</a></li>
-<li><a href="IntField.html" target="_top">No&nbsp;Frames</a></li>
-</ul>
-<ul class="navList" id="allclasses_navbar_top">
-<li><a href="../allclasses-noframe.html">All&nbsp;Classes</a></li>
-</ul>
-<div>
-<script type="text/javascript"><!--
-  allClassesLink = document.getElementById("allclasses_navbar_top");
-  if(window==top) {
-    allClassesLink.style.display = "block";
-  }
-  else {
-    allClassesLink.style.display = "none";
-  }
-  //-->
-</script>
-</div>
-<div>
-<ul class="subNavList">
-<li>Summary:&nbsp;</li>
-<li>Nested&nbsp;|&nbsp;</li>
-<li><a href="#field.summary">Field</a>&nbsp;|&nbsp;</li>
-<li><a href="#constructor.summary">Constr</a>&nbsp;|&nbsp;</li>
-<li><a href="#method.summary">Method</a></li>
-</ul>
-<ul class="subNavList">
-<li>Detail:&nbsp;</li>
-<li><a href="#field.detail">Field</a>&nbsp;|&nbsp;</li>
-<li><a href="#constructor.detail">Constr</a>&nbsp;|&nbsp;</li>
-<li><a href="#method.detail">Method</a></li>
-</ul>
-</div>
-<a name="skip.navbar.top">
-<!--   -->
-</a></div>
-<!-- ========= END OF TOP NAVBAR ========= -->
-<!-- ======== START OF CLASS DATA ======== -->
-<div class="header">
-<div class="subTitle">simpledb</div>
-<h2 title="Class IntField" class="title">Class IntField</h2>
-</div>
-<div class="contentContainer">
-<ul class="inheritance">
-<li>java.lang.Object</li>
-<li>
-<ul class="inheritance">
-<li>simpledb.IntField</li>
-</ul>
-</li>
-</ul>
-<div class="description">
-<ul class="blockList">
-<li class="blockList">
-<dl>
-<dt>All Implemented Interfaces:</dt>
-<dd>java.io.Serializable, <a href="../simpledb/Field.html" title="interface in simpledb">Field</a></dd>
-</dl>
-<hr>
-<br>
-<pre>public class <span class="typeNameLabel">IntField</span>
-extends java.lang.Object
-implements <a href="../simpledb/Field.html" title="interface in simpledb">Field</a></pre>
-<div class="block">Instance of Field that stores a single integer.</div>
-<dl>
-<dt><span class="seeLabel">See Also:</span></dt>
-<dd><a href="../serialized-form.html#simpledb.IntField">Serialized Form</a></dd>
-</dl>
-</li>
-</ul>
-</div>
-<div class="summary">
-<ul class="blockList">
-<li class="blockList">
-<!-- =========== FIELD SUMMARY =========== -->
-<ul class="blockList">
-<li class="blockList"><a name="field.summary">
-<!--   -->
-</a>
-<h3>Field Summary</h3>
-<table class="memberSummary" border="0" cellpadding="3" cellspacing="0" summary="Field Summary table, listing fields, and an explanation">
-<caption><span>Fields</span><span class="tabEnd">&nbsp;</span></caption>
-<tr>
-<th class="colFirst" scope="col">Modifier and Type</th>
-<th class="colLast" scope="col">Field and Description</th>
-</tr>
-<tr class="altColor">
-<td class="colFirst"><code>private static long</code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/IntField.html#serialVersionUID">serialVersionUID</a></span></code>&nbsp;</td>
-</tr>
-<tr class="rowColor">
-<td class="colFirst"><code>private int</code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/IntField.html#value">value</a></span></code>&nbsp;</td>
-</tr>
-</table>
-</li>
-</ul>
-<!-- ======== CONSTRUCTOR SUMMARY ======== -->
-<ul class="blockList">
-<li class="blockList"><a name="constructor.summary">
-<!--   -->
-</a>
-<h3>Constructor Summary</h3>
-<table class="memberSummary" border="0" cellpadding="3" cellspacing="0" summary="Constructor Summary table, listing constructors, and an explanation">
-<caption><span>Constructors</span><span class="tabEnd">&nbsp;</span></caption>
-<tr>
-<th class="colOne" scope="col">Constructor and Description</th>
-</tr>
-<tr class="altColor">
-<td class="colOne"><code><span class="memberNameLink"><a href="../simpledb/IntField.html#IntField-int-">IntField</a></span>(int&nbsp;i)</code>
-<div class="block">Constructor.</div>
-</td>
-</tr>
-</table>
-</li>
-</ul>
-<!-- ========== METHOD SUMMARY =========== -->
-<ul class="blockList">
-<li class="blockList"><a name="method.summary">
-<!--   -->
-</a>
-<h3>Method Summary</h3>
-<table class="memberSummary" border="0" cellpadding="3" cellspacing="0" summary="Method Summary table, listing methods, and an explanation">
-<caption><span id="t0" class="activeTableTab"><span>All Methods</span><span class="tabEnd">&nbsp;</span></span><span id="t2" class="tableTab"><span><a href="javascript:show(2);">Instance Methods</a></span><span class="tabEnd">&nbsp;</span></span><span id="t4" class="tableTab"><span><a href="javascript:show(8);">Concrete Methods</a></span><span class="tabEnd">&nbsp;</span></span></caption>
-<tr>
-<th class="colFirst" scope="col">Modifier and Type</th>
-<th class="colLast" scope="col">Method and Description</th>
-</tr>
-<tr id="i0" class="altColor">
-<td class="colFirst"><code>boolean</code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/IntField.html#compare-simpledb.Predicate.Op-simpledb.Field-">compare</a></span>(<a href="../simpledb/Predicate.Op.html" title="enum in simpledb">Predicate.Op</a>&nbsp;op,
-       <a href="../simpledb/Field.html" title="interface in simpledb">Field</a>&nbsp;val)</code>
-<div class="block">Compare the specified field to the value of this Field.</div>
-</td>
-</tr>
-<tr id="i1" class="rowColor">
-<td class="colFirst"><code>boolean</code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/IntField.html#equals-java.lang.Object-">equals</a></span>(java.lang.Object&nbsp;field)</code>&nbsp;</td>
-</tr>
-<tr id="i2" class="altColor">
-<td class="colFirst"><code><a href="../simpledb/Type.html" title="enum in simpledb">Type</a></code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/IntField.html#getType--">getType</a></span>()</code>
-<div class="block">Return the Type of this field.</div>
-</td>
-</tr>
-<tr id="i3" class="rowColor">
-<td class="colFirst"><code>int</code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/IntField.html#getValue--">getValue</a></span>()</code>&nbsp;</td>
-</tr>
-<tr id="i4" class="altColor">
-<td class="colFirst"><code>int</code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/IntField.html#hashCode--">hashCode</a></span>()</code>
-<div class="block">Hash code.</div>
-</td>
-</tr>
-<tr id="i5" class="rowColor">
-<td class="colFirst"><code>void</code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/IntField.html#serialize-java.io.DataOutputStream-">serialize</a></span>(java.io.DataOutputStream&nbsp;dos)</code>
-<div class="block">Write the bytes representing this field to the specified
- DataOutputStream.</div>
-</td>
-</tr>
-<tr id="i6" class="altColor">
-<td class="colFirst"><code>java.lang.String</code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/IntField.html#toString--">toString</a></span>()</code>&nbsp;</td>
-</tr>
-</table>
-<ul class="blockList">
-<li class="blockList"><a name="methods.inherited.from.class.java.lang.Object">
-<!--   -->
-</a>
-<h3>Methods inherited from class&nbsp;java.lang.Object</h3>
-<code>clone, finalize, getClass, notify, notifyAll, wait, wait, wait</code></li>
-</ul>
-</li>
-</ul>
-</li>
-</ul>
-</div>
-<div class="details">
-<ul class="blockList">
-<li class="blockList">
-<!-- ============ FIELD DETAIL =========== -->
-<ul class="blockList">
-<li class="blockList"><a name="field.detail">
-<!--   -->
-</a>
-<h3>Field Detail</h3>
-<a name="serialVersionUID">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>serialVersionUID</h4>
-<pre>private static final&nbsp;long serialVersionUID</pre>
-<dl>
-<dt><span class="seeLabel">See Also:</span></dt>
-<dd><a href="../constant-values.html#simpledb.IntField.serialVersionUID">Constant Field Values</a></dd>
-</dl>
-</li>
-</ul>
-<a name="value">
-<!--   -->
-</a>
-<ul class="blockListLast">
-<li class="blockList">
-<h4>value</h4>
-<pre>private final&nbsp;int value</pre>
-</li>
-</ul>
-</li>
-</ul>
-<!-- ========= CONSTRUCTOR DETAIL ======== -->
-<ul class="blockList">
-<li class="blockList"><a name="constructor.detail">
-<!--   -->
-</a>
-<h3>Constructor Detail</h3>
-<a name="IntField-int-">
-<!--   -->
-</a>
-<ul class="blockListLast">
-<li class="blockList">
-<h4>IntField</h4>
-<pre>public&nbsp;IntField(int&nbsp;i)</pre>
-<div class="block">Constructor.</div>
-<dl>
-<dt><span class="paramLabel">Parameters:</span></dt>
-<dd><code>i</code> - The value of this field.</dd>
-</dl>
-</li>
-</ul>
-</li>
-</ul>
-<!-- ============ METHOD DETAIL ========== -->
-<ul class="blockList">
-<li class="blockList"><a name="method.detail">
-<!--   -->
-</a>
-<h3>Method Detail</h3>
-<a name="getValue--">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>getValue</h4>
-<pre>public&nbsp;int&nbsp;getValue()</pre>
-</li>
-</ul>
-<a name="toString--">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>toString</h4>
-<pre>public&nbsp;java.lang.String&nbsp;toString()</pre>
-<dl>
-<dt><span class="overrideSpecifyLabel">Specified by:</span></dt>
-<dd><code><a href="../simpledb/Field.html#toString--">toString</a></code>&nbsp;in interface&nbsp;<code><a href="../simpledb/Field.html" title="interface in simpledb">Field</a></code></dd>
-<dt><span class="overrideSpecifyLabel">Overrides:</span></dt>
-<dd><code>toString</code>&nbsp;in class&nbsp;<code>java.lang.Object</code></dd>
-</dl>
-</li>
-</ul>
-<a name="hashCode--">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>hashCode</h4>
-<pre>public&nbsp;int&nbsp;hashCode()</pre>
-<div class="block"><span class="descfrmTypeLabel">Description copied from interface:&nbsp;<code><a href="../simpledb/Field.html#hashCode--">Field</a></code></span></div>
-<div class="block">Hash code.
- Different Field objects representing the same value should probably
- return the same hashCode.</div>
-<dl>
-<dt><span class="overrideSpecifyLabel">Specified by:</span></dt>
-<dd><code><a href="../simpledb/Field.html#hashCode--">hashCode</a></code>&nbsp;in interface&nbsp;<code><a href="../simpledb/Field.html" title="interface in simpledb">Field</a></code></dd>
-<dt><span class="overrideSpecifyLabel">Overrides:</span></dt>
-<dd><code>hashCode</code>&nbsp;in class&nbsp;<code>java.lang.Object</code></dd>
-</dl>
-</li>
-</ul>
-<a name="equals-java.lang.Object-">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>equals</h4>
-<pre>public&nbsp;boolean&nbsp;equals(java.lang.Object&nbsp;field)</pre>
-<dl>
-<dt><span class="overrideSpecifyLabel">Specified by:</span></dt>
-<dd><code><a href="../simpledb/Field.html#equals-java.lang.Object-">equals</a></code>&nbsp;in interface&nbsp;<code><a href="../simpledb/Field.html" title="interface in simpledb">Field</a></code></dd>
-<dt><span class="overrideSpecifyLabel">Overrides:</span></dt>
-<dd><code>equals</code>&nbsp;in class&nbsp;<code>java.lang.Object</code></dd>
-</dl>
-</li>
-</ul>
-<a name="serialize-java.io.DataOutputStream-">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>serialize</h4>
-<pre>public&nbsp;void&nbsp;serialize(java.io.DataOutputStream&nbsp;dos)
-               throws java.io.IOException</pre>
-<div class="block"><span class="descfrmTypeLabel">Description copied from interface:&nbsp;<code><a href="../simpledb/Field.html#serialize-java.io.DataOutputStream-">Field</a></code></span></div>
-<div class="block">Write the bytes representing this field to the specified
- DataOutputStream.</div>
-<dl>
-<dt><span class="overrideSpecifyLabel">Specified by:</span></dt>
-<dd><code><a href="../simpledb/Field.html#serialize-java.io.DataOutputStream-">serialize</a></code>&nbsp;in interface&nbsp;<code><a href="../simpledb/Field.html" title="interface in simpledb">Field</a></code></dd>
-<dt><span class="paramLabel">Parameters:</span></dt>
-<dd><code>dos</code> - The DataOutputStream to write to.</dd>
-<dt><span class="throwsLabel">Throws:</span></dt>
-<dd><code>java.io.IOException</code></dd>
-<dt><span class="seeLabel">See Also:</span></dt>
-<dd><code>DataOutputStream</code></dd>
-</dl>
-</li>
-</ul>
-<a name="compare-simpledb.Predicate.Op-simpledb.Field-">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>compare</h4>
-<pre>public&nbsp;boolean&nbsp;compare(<a href="../simpledb/Predicate.Op.html" title="enum in simpledb">Predicate.Op</a>&nbsp;op,
-                       <a href="../simpledb/Field.html" title="interface in simpledb">Field</a>&nbsp;val)</pre>
-<div class="block">Compare the specified field to the value of this Field.
- Return semantics are as specified by Field.compare</div>
-<dl>
-<dt><span class="overrideSpecifyLabel">Specified by:</span></dt>
-<dd><code><a href="../simpledb/Field.html#compare-simpledb.Predicate.Op-simpledb.Field-">compare</a></code>&nbsp;in interface&nbsp;<code><a href="../simpledb/Field.html" title="interface in simpledb">Field</a></code></dd>
-<dt><span class="paramLabel">Parameters:</span></dt>
-<dd><code>op</code> - The operator</dd>
-<dd><code>val</code> - The value to compare this Field to</dd>
-<dt><span class="returnLabel">Returns:</span></dt>
-<dd>Whether or not the comparison yields true.</dd>
-<dt><span class="throwsLabel">Throws:</span></dt>
-<dd><code>IllegalCastException</code> - if val is not an IntField</dd>
-<dt><span class="seeLabel">See Also:</span></dt>
-<dd><a href="../simpledb/Field.html#compare-simpledb.Predicate.Op-simpledb.Field-"><code>Field.compare(simpledb.Predicate.Op, simpledb.Field)</code></a></dd>
-</dl>
-</li>
-</ul>
-<a name="getType--">
-<!--   -->
-</a>
-<ul class="blockListLast">
-<li class="blockList">
-<h4>getType</h4>
-<pre>public&nbsp;<a href="../simpledb/Type.html" title="enum in simpledb">Type</a>&nbsp;getType()</pre>
-<div class="block">Return the Type of this field.</div>
-<dl>
-<dt><span class="overrideSpecifyLabel">Specified by:</span></dt>
-<dd><code><a href="../simpledb/Field.html#getType--">getType</a></code>&nbsp;in interface&nbsp;<code><a href="../simpledb/Field.html" title="interface in simpledb">Field</a></code></dd>
-<dt><span class="returnLabel">Returns:</span></dt>
-<dd>Type.INT_TYPE</dd>
-</dl>
-</li>
-</ul>
-</li>
-</ul>
-</li>
-</ul>
-</div>
-</div>
-<!-- ========= END OF CLASS DATA ========= -->
-<!-- ======= START OF BOTTOM NAVBAR ====== -->
-<div class="bottomNav"><a name="navbar.bottom">
-<!--   -->
-</a>
-<div class="skipNav"><a href="#skip.navbar.bottom" title="Skip navigation links">Skip navigation links</a></div>
-<a name="navbar.bottom.firstrow">
-<!--   -->
-</a>
-<ul class="navList" title="Navigation">
-<li><a href="../simpledb/package-summary.html">Package</a></li>
-<li class="navBarCell1Rev">Class</li>
-<li><a href="package-tree.html">Tree</a></li>
-<li><a href="../deprecated-list.html">Deprecated</a></li>
-<li><a href="../index-all.html">Index</a></li>
-<li><a href="../help-doc.html">Help</a></li>
-</ul>
-</div>
-<div class="subNav">
-<ul class="navList">
-<li><a href="../simpledb/HeapPageId.html" title="class in simpledb"><span class="typeNameLink">Prev&nbsp;Class</span></a></li>
-<li><a href="../simpledb/LogFile.html" title="class in simpledb"><span class="typeNameLink">Next&nbsp;Class</span></a></li>
-</ul>
-<ul class="navList">
-<li><a href="../index.html?simpledb/IntField.html" target="_top">Frames</a></li>
-<li><a href="IntField.html" target="_top">No&nbsp;Frames</a></li>
-</ul>
-<ul class="navList" id="allclasses_navbar_bottom">
-<li><a href="../allclasses-noframe.html">All&nbsp;Classes</a></li>
-</ul>
-<div>
-<script type="text/javascript"><!--
-  allClassesLink = document.getElementById("allclasses_navbar_bottom");
-  if(window==top) {
-    allClassesLink.style.display = "block";
-  }
-  else {
-    allClassesLink.style.display = "none";
-  }
-  //-->
-</script>
-</div>
-<div>
-<ul class="subNavList">
-<li>Summary:&nbsp;</li>
-<li>Nested&nbsp;|&nbsp;</li>
-<li><a href="#field.summary">Field</a>&nbsp;|&nbsp;</li>
-<li><a href="#constructor.summary">Constr</a>&nbsp;|&nbsp;</li>
-<li><a href="#method.summary">Method</a></li>
-</ul>
-<ul class="subNavList">
-<li>Detail:&nbsp;</li>
-<li><a href="#field.detail">Field</a>&nbsp;|&nbsp;</li>
-<li><a href="#constructor.detail">Constr</a>&nbsp;|&nbsp;</li>
-<li><a href="#method.detail">Method</a></li>
-</ul>
-</div>
-<a name="skip.navbar.bottom">
-<!--   -->
-</a></div>
-<!-- ======== END OF BOTTOM NAVBAR ======= -->
-</body>
-</html>
diff -ruN lab1/javadoc/simpledb/LogFile.html lab3/javadoc/simpledb/LogFile.html
--- lab1/javadoc/simpledb/LogFile.html	2016-11-02 22:06:58.000000000 -0500
+++ lab3/javadoc/simpledb/LogFile.html	1969-12-31 18:00:00.000000000 -0600
@@ -1,874 +0,0 @@
-<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
-<!-- NewPage -->
-<html lang="en">
-<head>
-<!-- Generated by javadoc (1.8.0_25) on Thu Oct 27 13:16:23 CDT 2016 -->
-<title>LogFile</title>
-<meta name="date" content="2016-10-27">
-<link rel="stylesheet" type="text/css" href="../stylesheet.css" title="Style">
-<script type="text/javascript" src="../script.js"></script>
-</head>
-<body>
-<script type="text/javascript"><!--
-    try {
-        if (location.href.indexOf('is-external=true') == -1) {
-            parent.document.title="LogFile";
-        }
-    }
-    catch(err) {
-    }
-//-->
-var methods = {"i0":10,"i1":10,"i2":10,"i3":10,"i4":10,"i5":10,"i6":10,"i7":10,"i8":10,"i9":10,"i10":10,"i11":10,"i12":10,"i13":10,"i14":10};
-var tabs = {65535:["t0","All Methods"],2:["t2","Instance Methods"],8:["t4","Concrete Methods"]};
-var altColor = "altColor";
-var rowColor = "rowColor";
-var tableTab = "tableTab";
-var activeTableTab = "activeTableTab";
-</script>
-<noscript>
-<div>JavaScript is disabled on your browser.</div>
-</noscript>
-<!-- ========= START OF TOP NAVBAR ======= -->
-<div class="topNav"><a name="navbar.top">
-<!--   -->
-</a>
-<div class="skipNav"><a href="#skip.navbar.top" title="Skip navigation links">Skip navigation links</a></div>
-<a name="navbar.top.firstrow">
-<!--   -->
-</a>
-<ul class="navList" title="Navigation">
-<li><a href="../simpledb/package-summary.html">Package</a></li>
-<li class="navBarCell1Rev">Class</li>
-<li><a href="package-tree.html">Tree</a></li>
-<li><a href="../deprecated-list.html">Deprecated</a></li>
-<li><a href="../index-all.html">Index</a></li>
-<li><a href="../help-doc.html">Help</a></li>
-</ul>
-</div>
-<div class="subNav">
-<ul class="navList">
-<li><a href="../simpledb/IntField.html" title="class in simpledb"><span class="typeNameLink">Prev&nbsp;Class</span></a></li>
-<li><a href="../simpledb/Page.html" title="interface in simpledb"><span class="typeNameLink">Next&nbsp;Class</span></a></li>
-</ul>
-<ul class="navList">
-<li><a href="../index.html?simpledb/LogFile.html" target="_top">Frames</a></li>
-<li><a href="LogFile.html" target="_top">No&nbsp;Frames</a></li>
-</ul>
-<ul class="navList" id="allclasses_navbar_top">
-<li><a href="../allclasses-noframe.html">All&nbsp;Classes</a></li>
-</ul>
-<div>
-<script type="text/javascript"><!--
-  allClassesLink = document.getElementById("allclasses_navbar_top");
-  if(window==top) {
-    allClassesLink.style.display = "block";
-  }
-  else {
-    allClassesLink.style.display = "none";
-  }
-  //-->
-</script>
-</div>
-<div>
-<ul class="subNavList">
-<li>Summary:&nbsp;</li>
-<li>Nested&nbsp;|&nbsp;</li>
-<li><a href="#field.summary">Field</a>&nbsp;|&nbsp;</li>
-<li><a href="#constructor.summary">Constr</a>&nbsp;|&nbsp;</li>
-<li><a href="#method.summary">Method</a></li>
-</ul>
-<ul class="subNavList">
-<li>Detail:&nbsp;</li>
-<li><a href="#field.detail">Field</a>&nbsp;|&nbsp;</li>
-<li><a href="#constructor.detail">Constr</a>&nbsp;|&nbsp;</li>
-<li><a href="#method.detail">Method</a></li>
-</ul>
-</div>
-<a name="skip.navbar.top">
-<!--   -->
-</a></div>
-<!-- ========= END OF TOP NAVBAR ========= -->
-<!-- ======== START OF CLASS DATA ======== -->
-<div class="header">
-<div class="subTitle">simpledb</div>
-<h2 title="Class LogFile" class="title">Class LogFile</h2>
-</div>
-<div class="contentContainer">
-<ul class="inheritance">
-<li>java.lang.Object</li>
-<li>
-<ul class="inheritance">
-<li>simpledb.LogFile</li>
-</ul>
-</li>
-</ul>
-<div class="description">
-<ul class="blockList">
-<li class="blockList">
-<hr>
-<br>
-<pre>public class <span class="typeNameLabel">LogFile</span>
-extends java.lang.Object</pre>
-<div class="block"><p> The format of the log file is as follows:
-
-<ul>
-
-<li> The first long integer of the file represents the offset of the
-last written checkpoint, or -1 if there are no checkpoints
-
-<li> All additional data in the log consists of log records.  Log
-records are variable length.
-
-<li> Each log record begins with an integer type and a long integer
-transaction id.
-
-<li> Each log record ends with a long integer file offset representing
-the position in the log file where the record began.
-
-<li> There are five record types: ABORT, COMMIT, UPDATE, BEGIN, and
-CHECKPOINT
-
-<li> ABORT, COMMIT, and BEGIN records contain no additional data
-
-<li>UPDATE RECORDS consist of two entries, a before image and an
-after image.  These images are serialized Page objects, and can be
-accessed with the LogFile.readPageData() and LogFile.writePageData()
-methods.  See LogFile.print() for an example.
-
-<li> CHECKPOINT records consist of active transactions at the time
-the checkpoint was taken and their first log record on disk.  The format
-of the record is an integer count of the number of transactions, as well
-as a long integer transaction id and a long integer first record offset
-for each active transaction.
-
-</ul></div>
-</li>
-</ul>
-</div>
-<div class="summary">
-<ul class="blockList">
-<li class="blockList">
-<!-- =========== FIELD SUMMARY =========== -->
-<ul class="blockList">
-<li class="blockList"><a name="field.summary">
-<!--   -->
-</a>
-<h3>Field Summary</h3>
-<table class="memberSummary" border="0" cellpadding="3" cellspacing="0" summary="Field Summary table, listing fields, and an explanation">
-<caption><span>Fields</span><span class="tabEnd">&nbsp;</span></caption>
-<tr>
-<th class="colFirst" scope="col">Modifier and Type</th>
-<th class="colLast" scope="col">Field and Description</th>
-</tr>
-<tr class="altColor">
-<td class="colFirst"><code>(package private) static int</code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/LogFile.html#ABORT_RECORD">ABORT_RECORD</a></span></code>&nbsp;</td>
-</tr>
-<tr class="rowColor">
-<td class="colFirst"><code>(package private) static int</code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/LogFile.html#BEGIN_RECORD">BEGIN_RECORD</a></span></code>&nbsp;</td>
-</tr>
-<tr class="altColor">
-<td class="colFirst"><code>(package private) static int</code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/LogFile.html#CHECKPOINT_RECORD">CHECKPOINT_RECORD</a></span></code>&nbsp;</td>
-</tr>
-<tr class="rowColor">
-<td class="colFirst"><code>(package private) static int</code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/LogFile.html#COMMIT_RECORD">COMMIT_RECORD</a></span></code>&nbsp;</td>
-</tr>
-<tr class="altColor">
-<td class="colFirst"><code>(package private) long</code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/LogFile.html#currentOffset">currentOffset</a></span></code>&nbsp;</td>
-</tr>
-<tr class="rowColor">
-<td class="colFirst"><code>(package private) static int</code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/LogFile.html#INT_SIZE">INT_SIZE</a></span></code>&nbsp;</td>
-</tr>
-<tr class="altColor">
-<td class="colFirst"><code>(package private) java.io.File</code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/LogFile.html#logFile">logFile</a></span></code>&nbsp;</td>
-</tr>
-<tr class="rowColor">
-<td class="colFirst"><code>(package private) static int</code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/LogFile.html#LONG_SIZE">LONG_SIZE</a></span></code>&nbsp;</td>
-</tr>
-<tr class="altColor">
-<td class="colFirst"><code>(package private) static long</code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/LogFile.html#NO_CHECKPOINT_ID">NO_CHECKPOINT_ID</a></span></code>&nbsp;</td>
-</tr>
-<tr class="rowColor">
-<td class="colFirst"><code>private java.io.RandomAccessFile</code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/LogFile.html#raf">raf</a></span></code>&nbsp;</td>
-</tr>
-<tr class="altColor">
-<td class="colFirst"><code>(package private) java.lang.Boolean</code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/LogFile.html#recoveryUndecided">recoveryUndecided</a></span></code>&nbsp;</td>
-</tr>
-<tr class="rowColor">
-<td class="colFirst"><code>(package private) java.util.HashMap&lt;java.lang.Long,java.lang.Long&gt;</code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/LogFile.html#tidToFirstLogRecord">tidToFirstLogRecord</a></span></code>&nbsp;</td>
-</tr>
-<tr class="altColor">
-<td class="colFirst"><code>(package private) int</code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/LogFile.html#totalRecords">totalRecords</a></span></code>&nbsp;</td>
-</tr>
-<tr class="rowColor">
-<td class="colFirst"><code>(package private) static int</code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/LogFile.html#UPDATE_RECORD">UPDATE_RECORD</a></span></code>&nbsp;</td>
-</tr>
-</table>
-</li>
-</ul>
-<!-- ======== CONSTRUCTOR SUMMARY ======== -->
-<ul class="blockList">
-<li class="blockList"><a name="constructor.summary">
-<!--   -->
-</a>
-<h3>Constructor Summary</h3>
-<table class="memberSummary" border="0" cellpadding="3" cellspacing="0" summary="Constructor Summary table, listing constructors, and an explanation">
-<caption><span>Constructors</span><span class="tabEnd">&nbsp;</span></caption>
-<tr>
-<th class="colOne" scope="col">Constructor and Description</th>
-</tr>
-<tr class="altColor">
-<td class="colOne"><code><span class="memberNameLink"><a href="../simpledb/LogFile.html#LogFile-java.io.File-">LogFile</a></span>(java.io.File&nbsp;f)</code>
-<div class="block">Constructor.</div>
-</td>
-</tr>
-</table>
-</li>
-</ul>
-<!-- ========== METHOD SUMMARY =========== -->
-<ul class="blockList">
-<li class="blockList"><a name="method.summary">
-<!--   -->
-</a>
-<h3>Method Summary</h3>
-<table class="memberSummary" border="0" cellpadding="3" cellspacing="0" summary="Method Summary table, listing methods, and an explanation">
-<caption><span id="t0" class="activeTableTab"><span>All Methods</span><span class="tabEnd">&nbsp;</span></span><span id="t2" class="tableTab"><span><a href="javascript:show(2);">Instance Methods</a></span><span class="tabEnd">&nbsp;</span></span><span id="t4" class="tableTab"><span><a href="javascript:show(8);">Concrete Methods</a></span><span class="tabEnd">&nbsp;</span></span></caption>
-<tr>
-<th class="colFirst" scope="col">Modifier and Type</th>
-<th class="colLast" scope="col">Method and Description</th>
-</tr>
-<tr id="i0" class="altColor">
-<td class="colFirst"><code>void</code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/LogFile.html#force--">force</a></span>()</code>&nbsp;</td>
-</tr>
-<tr id="i1" class="rowColor">
-<td class="colFirst"><code>int</code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/LogFile.html#getTotalRecords--">getTotalRecords</a></span>()</code>&nbsp;</td>
-</tr>
-<tr id="i2" class="altColor">
-<td class="colFirst"><code>void</code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/LogFile.html#logAbort-simpledb.TransactionId-">logAbort</a></span>(<a href="../simpledb/TransactionId.html" title="class in simpledb">TransactionId</a>&nbsp;tid)</code>
-<div class="block">Write an abort record to the log for the specified tid, force
-        the log to disk, and perform a rollback</div>
-</td>
-</tr>
-<tr id="i3" class="rowColor">
-<td class="colFirst"><code>void</code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/LogFile.html#logCheckpoint--">logCheckpoint</a></span>()</code>
-<div class="block">Checkpoint the log and write a checkpoint record.</div>
-</td>
-</tr>
-<tr id="i4" class="altColor">
-<td class="colFirst"><code>void</code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/LogFile.html#logCommit-simpledb.TransactionId-">logCommit</a></span>(<a href="../simpledb/TransactionId.html" title="class in simpledb">TransactionId</a>&nbsp;tid)</code>
-<div class="block">Write a commit record to disk for the specified tid,
-        and force the log to disk.</div>
-</td>
-</tr>
-<tr id="i5" class="rowColor">
-<td class="colFirst"><code>void</code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/LogFile.html#logTruncate--">logTruncate</a></span>()</code>
-<div class="block">Truncate any unneeded portion of the log to reduce its space
-        consumption</div>
-</td>
-</tr>
-<tr id="i6" class="altColor">
-<td class="colFirst"><code>void</code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/LogFile.html#logWrite-simpledb.TransactionId-simpledb.Page-simpledb.Page-">logWrite</a></span>(<a href="../simpledb/TransactionId.html" title="class in simpledb">TransactionId</a>&nbsp;tid,
-        <a href="../simpledb/Page.html" title="interface in simpledb">Page</a>&nbsp;before,
-        <a href="../simpledb/Page.html" title="interface in simpledb">Page</a>&nbsp;after)</code>
-<div class="block">Write an UPDATE record to disk for the specified tid and page
-        (with provided         before and after images.)</div>
-</td>
-</tr>
-<tr id="i7" class="rowColor">
-<td class="colFirst"><code>void</code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/LogFile.html#logXactionBegin-simpledb.TransactionId-">logXactionBegin</a></span>(<a href="../simpledb/TransactionId.html" title="class in simpledb">TransactionId</a>&nbsp;tid)</code>
-<div class="block">Write a BEGIN record for the specified transaction</div>
-</td>
-</tr>
-<tr id="i8" class="altColor">
-<td class="colFirst"><code>(package private) void</code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/LogFile.html#preAppend--">preAppend</a></span>()</code>&nbsp;</td>
-</tr>
-<tr id="i9" class="rowColor">
-<td class="colFirst"><code>void</code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/LogFile.html#print--">print</a></span>()</code>
-<div class="block">Print out a human readable represenation of the log</div>
-</td>
-</tr>
-<tr id="i10" class="altColor">
-<td class="colFirst"><code>(package private) <a href="../simpledb/Page.html" title="interface in simpledb">Page</a></code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/LogFile.html#readPageData-java.io.RandomAccessFile-">readPageData</a></span>(java.io.RandomAccessFile&nbsp;raf)</code>&nbsp;</td>
-</tr>
-<tr id="i11" class="rowColor">
-<td class="colFirst"><code>void</code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/LogFile.html#recover--">recover</a></span>()</code>
-<div class="block">Recover the database system by ensuring that the updates of
-        committed transactions are installed and that the
-        updates of uncommitted transactions are not installed.</div>
-</td>
-</tr>
-<tr id="i12" class="altColor">
-<td class="colFirst"><code>void</code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/LogFile.html#rollback-simpledb.TransactionId-">rollback</a></span>(<a href="../simpledb/TransactionId.html" title="class in simpledb">TransactionId</a>&nbsp;tid)</code>
-<div class="block">Rollback the specified transaction, setting the state of any
-        of pages it updated to their pre-updated state.</div>
-</td>
-</tr>
-<tr id="i13" class="rowColor">
-<td class="colFirst"><code>void</code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/LogFile.html#shutdown--">shutdown</a></span>()</code>
-<div class="block">Shutdown the logging system, writing out whatever state
-        is necessary so that start up can happen quickly (without
-        extensive recovery.)</div>
-</td>
-</tr>
-<tr id="i14" class="altColor">
-<td class="colFirst"><code>(package private) void</code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/LogFile.html#writePageData-java.io.RandomAccessFile-simpledb.Page-">writePageData</a></span>(java.io.RandomAccessFile&nbsp;raf,
-             <a href="../simpledb/Page.html" title="interface in simpledb">Page</a>&nbsp;p)</code>&nbsp;</td>
-</tr>
-</table>
-<ul class="blockList">
-<li class="blockList"><a name="methods.inherited.from.class.java.lang.Object">
-<!--   -->
-</a>
-<h3>Methods inherited from class&nbsp;java.lang.Object</h3>
-<code>clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait</code></li>
-</ul>
-</li>
-</ul>
-</li>
-</ul>
-</div>
-<div class="details">
-<ul class="blockList">
-<li class="blockList">
-<!-- ============ FIELD DETAIL =========== -->
-<ul class="blockList">
-<li class="blockList"><a name="field.detail">
-<!--   -->
-</a>
-<h3>Field Detail</h3>
-<a name="logFile">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>logFile</h4>
-<pre>final&nbsp;java.io.File logFile</pre>
-</li>
-</ul>
-<a name="raf">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>raf</h4>
-<pre>private&nbsp;java.io.RandomAccessFile raf</pre>
-</li>
-</ul>
-<a name="recoveryUndecided">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>recoveryUndecided</h4>
-<pre>java.lang.Boolean recoveryUndecided</pre>
-</li>
-</ul>
-<a name="ABORT_RECORD">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>ABORT_RECORD</h4>
-<pre>static final&nbsp;int ABORT_RECORD</pre>
-<dl>
-<dt><span class="seeLabel">See Also:</span></dt>
-<dd><a href="../constant-values.html#simpledb.LogFile.ABORT_RECORD">Constant Field Values</a></dd>
-</dl>
-</li>
-</ul>
-<a name="COMMIT_RECORD">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>COMMIT_RECORD</h4>
-<pre>static final&nbsp;int COMMIT_RECORD</pre>
-<dl>
-<dt><span class="seeLabel">See Also:</span></dt>
-<dd><a href="../constant-values.html#simpledb.LogFile.COMMIT_RECORD">Constant Field Values</a></dd>
-</dl>
-</li>
-</ul>
-<a name="UPDATE_RECORD">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>UPDATE_RECORD</h4>
-<pre>static final&nbsp;int UPDATE_RECORD</pre>
-<dl>
-<dt><span class="seeLabel">See Also:</span></dt>
-<dd><a href="../constant-values.html#simpledb.LogFile.UPDATE_RECORD">Constant Field Values</a></dd>
-</dl>
-</li>
-</ul>
-<a name="BEGIN_RECORD">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>BEGIN_RECORD</h4>
-<pre>static final&nbsp;int BEGIN_RECORD</pre>
-<dl>
-<dt><span class="seeLabel">See Also:</span></dt>
-<dd><a href="../constant-values.html#simpledb.LogFile.BEGIN_RECORD">Constant Field Values</a></dd>
-</dl>
-</li>
-</ul>
-<a name="CHECKPOINT_RECORD">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>CHECKPOINT_RECORD</h4>
-<pre>static final&nbsp;int CHECKPOINT_RECORD</pre>
-<dl>
-<dt><span class="seeLabel">See Also:</span></dt>
-<dd><a href="../constant-values.html#simpledb.LogFile.CHECKPOINT_RECORD">Constant Field Values</a></dd>
-</dl>
-</li>
-</ul>
-<a name="NO_CHECKPOINT_ID">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>NO_CHECKPOINT_ID</h4>
-<pre>static final&nbsp;long NO_CHECKPOINT_ID</pre>
-<dl>
-<dt><span class="seeLabel">See Also:</span></dt>
-<dd><a href="../constant-values.html#simpledb.LogFile.NO_CHECKPOINT_ID">Constant Field Values</a></dd>
-</dl>
-</li>
-</ul>
-<a name="INT_SIZE">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>INT_SIZE</h4>
-<pre>static final&nbsp;int INT_SIZE</pre>
-<dl>
-<dt><span class="seeLabel">See Also:</span></dt>
-<dd><a href="../constant-values.html#simpledb.LogFile.INT_SIZE">Constant Field Values</a></dd>
-</dl>
-</li>
-</ul>
-<a name="LONG_SIZE">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>LONG_SIZE</h4>
-<pre>static final&nbsp;int LONG_SIZE</pre>
-<dl>
-<dt><span class="seeLabel">See Also:</span></dt>
-<dd><a href="../constant-values.html#simpledb.LogFile.LONG_SIZE">Constant Field Values</a></dd>
-</dl>
-</li>
-</ul>
-<a name="currentOffset">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>currentOffset</h4>
-<pre>long currentOffset</pre>
-</li>
-</ul>
-<a name="totalRecords">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>totalRecords</h4>
-<pre>int totalRecords</pre>
-</li>
-</ul>
-<a name="tidToFirstLogRecord">
-<!--   -->
-</a>
-<ul class="blockListLast">
-<li class="blockList">
-<h4>tidToFirstLogRecord</h4>
-<pre>java.util.HashMap&lt;java.lang.Long,java.lang.Long&gt; tidToFirstLogRecord</pre>
-</li>
-</ul>
-</li>
-</ul>
-<!-- ========= CONSTRUCTOR DETAIL ======== -->
-<ul class="blockList">
-<li class="blockList"><a name="constructor.detail">
-<!--   -->
-</a>
-<h3>Constructor Detail</h3>
-<a name="LogFile-java.io.File-">
-<!--   -->
-</a>
-<ul class="blockListLast">
-<li class="blockList">
-<h4>LogFile</h4>
-<pre>public&nbsp;LogFile(java.io.File&nbsp;f)
-        throws java.io.IOException</pre>
-<div class="block">Constructor.
-        Initialize and back the log file with the specified file.
-        We're not sure yet whether the caller is creating a brand new DB,
-        in which case we should ignore the log file, or whether the caller
-        will eventually want to recover (after populating the Catalog).
-        So we make this decision lazily: if someone calls recover(), then
-        do it, while if someone starts adding log file entries, then first
-        throw out the initial log file contents.</div>
-<dl>
-<dt><span class="paramLabel">Parameters:</span></dt>
-<dd><code>f</code> - The log file's name</dd>
-<dt><span class="throwsLabel">Throws:</span></dt>
-<dd><code>java.io.IOException</code></dd>
-</dl>
-</li>
-</ul>
-</li>
-</ul>
-<!-- ============ METHOD DETAIL ========== -->
-<ul class="blockList">
-<li class="blockList"><a name="method.detail">
-<!--   -->
-</a>
-<h3>Method Detail</h3>
-<a name="preAppend--">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>preAppend</h4>
-<pre>void&nbsp;preAppend()
-        throws java.io.IOException</pre>
-<dl>
-<dt><span class="throwsLabel">Throws:</span></dt>
-<dd><code>java.io.IOException</code></dd>
-</dl>
-</li>
-</ul>
-<a name="getTotalRecords--">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>getTotalRecords</h4>
-<pre>public&nbsp;int&nbsp;getTotalRecords()</pre>
-</li>
-</ul>
-<a name="logAbort-simpledb.TransactionId-">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>logAbort</h4>
-<pre>public&nbsp;void&nbsp;logAbort(<a href="../simpledb/TransactionId.html" title="class in simpledb">TransactionId</a>&nbsp;tid)
-              throws java.io.IOException</pre>
-<div class="block">Write an abort record to the log for the specified tid, force
-        the log to disk, and perform a rollback</div>
-<dl>
-<dt><span class="paramLabel">Parameters:</span></dt>
-<dd><code>tid</code> - The aborting transaction.</dd>
-<dt><span class="throwsLabel">Throws:</span></dt>
-<dd><code>java.io.IOException</code></dd>
-</dl>
-</li>
-</ul>
-<a name="logCommit-simpledb.TransactionId-">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>logCommit</h4>
-<pre>public&nbsp;void&nbsp;logCommit(<a href="../simpledb/TransactionId.html" title="class in simpledb">TransactionId</a>&nbsp;tid)
-               throws java.io.IOException</pre>
-<div class="block">Write a commit record to disk for the specified tid,
-        and force the log to disk.</div>
-<dl>
-<dt><span class="paramLabel">Parameters:</span></dt>
-<dd><code>tid</code> - The committing transaction.</dd>
-<dt><span class="throwsLabel">Throws:</span></dt>
-<dd><code>java.io.IOException</code></dd>
-</dl>
-</li>
-</ul>
-<a name="logWrite-simpledb.TransactionId-simpledb.Page-simpledb.Page-">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>logWrite</h4>
-<pre>public&nbsp;void&nbsp;logWrite(<a href="../simpledb/TransactionId.html" title="class in simpledb">TransactionId</a>&nbsp;tid,
-                     <a href="../simpledb/Page.html" title="interface in simpledb">Page</a>&nbsp;before,
-                     <a href="../simpledb/Page.html" title="interface in simpledb">Page</a>&nbsp;after)
-              throws java.io.IOException</pre>
-<div class="block">Write an UPDATE record to disk for the specified tid and page
-        (with provided         before and after images.)</div>
-<dl>
-<dt><span class="paramLabel">Parameters:</span></dt>
-<dd><code>tid</code> - The transaction performing the write</dd>
-<dd><code>before</code> - The before image of the page</dd>
-<dd><code>after</code> - The after image of the page</dd>
-<dt><span class="throwsLabel">Throws:</span></dt>
-<dd><code>java.io.IOException</code></dd>
-<dt><span class="seeLabel">See Also:</span></dt>
-<dd><a href="../simpledb/Page.html#getBeforeImage--"><code>Page.getBeforeImage()</code></a></dd>
-</dl>
-</li>
-</ul>
-<a name="writePageData-java.io.RandomAccessFile-simpledb.Page-">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>writePageData</h4>
-<pre>void&nbsp;writePageData(java.io.RandomAccessFile&nbsp;raf,
-                   <a href="../simpledb/Page.html" title="interface in simpledb">Page</a>&nbsp;p)
-            throws java.io.IOException</pre>
-<dl>
-<dt><span class="throwsLabel">Throws:</span></dt>
-<dd><code>java.io.IOException</code></dd>
-</dl>
-</li>
-</ul>
-<a name="readPageData-java.io.RandomAccessFile-">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>readPageData</h4>
-<pre><a href="../simpledb/Page.html" title="interface in simpledb">Page</a>&nbsp;readPageData(java.io.RandomAccessFile&nbsp;raf)
-           throws java.io.IOException</pre>
-<dl>
-<dt><span class="throwsLabel">Throws:</span></dt>
-<dd><code>java.io.IOException</code></dd>
-</dl>
-</li>
-</ul>
-<a name="logXactionBegin-simpledb.TransactionId-">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>logXactionBegin</h4>
-<pre>public&nbsp;void&nbsp;logXactionBegin(<a href="../simpledb/TransactionId.html" title="class in simpledb">TransactionId</a>&nbsp;tid)
-                     throws java.io.IOException</pre>
-<div class="block">Write a BEGIN record for the specified transaction</div>
-<dl>
-<dt><span class="paramLabel">Parameters:</span></dt>
-<dd><code>tid</code> - The transaction that is beginning</dd>
-<dt><span class="throwsLabel">Throws:</span></dt>
-<dd><code>java.io.IOException</code></dd>
-</dl>
-</li>
-</ul>
-<a name="logCheckpoint--">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>logCheckpoint</h4>
-<pre>public&nbsp;void&nbsp;logCheckpoint()
-                   throws java.io.IOException</pre>
-<div class="block">Checkpoint the log and write a checkpoint record.</div>
-<dl>
-<dt><span class="throwsLabel">Throws:</span></dt>
-<dd><code>java.io.IOException</code></dd>
-</dl>
-</li>
-</ul>
-<a name="logTruncate--">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>logTruncate</h4>
-<pre>public&nbsp;void&nbsp;logTruncate()
-                 throws java.io.IOException</pre>
-<div class="block">Truncate any unneeded portion of the log to reduce its space
-        consumption</div>
-<dl>
-<dt><span class="throwsLabel">Throws:</span></dt>
-<dd><code>java.io.IOException</code></dd>
-</dl>
-</li>
-</ul>
-<a name="rollback-simpledb.TransactionId-">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>rollback</h4>
-<pre>public&nbsp;void&nbsp;rollback(<a href="../simpledb/TransactionId.html" title="class in simpledb">TransactionId</a>&nbsp;tid)
-              throws java.util.NoSuchElementException,
-                     java.io.IOException</pre>
-<div class="block">Rollback the specified transaction, setting the state of any
-        of pages it updated to their pre-updated state.  To preserve
-        transaction semantics, this should not be called on
-        transactions that have already committed (though this may not
-        be enforced by this method.)</div>
-<dl>
-<dt><span class="paramLabel">Parameters:</span></dt>
-<dd><code>tid</code> - The transaction to rollback</dd>
-<dt><span class="throwsLabel">Throws:</span></dt>
-<dd><code>java.util.NoSuchElementException</code></dd>
-<dd><code>java.io.IOException</code></dd>
-</dl>
-</li>
-</ul>
-<a name="shutdown--">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>shutdown</h4>
-<pre>public&nbsp;void&nbsp;shutdown()</pre>
-<div class="block">Shutdown the logging system, writing out whatever state
-        is necessary so that start up can happen quickly (without
-        extensive recovery.)</div>
-</li>
-</ul>
-<a name="recover--">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>recover</h4>
-<pre>public&nbsp;void&nbsp;recover()
-             throws java.io.IOException</pre>
-<div class="block">Recover the database system by ensuring that the updates of
-        committed transactions are installed and that the
-        updates of uncommitted transactions are not installed.</div>
-<dl>
-<dt><span class="throwsLabel">Throws:</span></dt>
-<dd><code>java.io.IOException</code></dd>
-</dl>
-</li>
-</ul>
-<a name="print--">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>print</h4>
-<pre>public&nbsp;void&nbsp;print()
-           throws java.io.IOException</pre>
-<div class="block">Print out a human readable represenation of the log</div>
-<dl>
-<dt><span class="throwsLabel">Throws:</span></dt>
-<dd><code>java.io.IOException</code></dd>
-</dl>
-</li>
-</ul>
-<a name="force--">
-<!--   -->
-</a>
-<ul class="blockListLast">
-<li class="blockList">
-<h4>force</h4>
-<pre>public&nbsp;void&nbsp;force()
-           throws java.io.IOException</pre>
-<dl>
-<dt><span class="throwsLabel">Throws:</span></dt>
-<dd><code>java.io.IOException</code></dd>
-</dl>
-</li>
-</ul>
-</li>
-</ul>
-</li>
-</ul>
-</div>
-</div>
-<!-- ========= END OF CLASS DATA ========= -->
-<!-- ======= START OF BOTTOM NAVBAR ====== -->
-<div class="bottomNav"><a name="navbar.bottom">
-<!--   -->
-</a>
-<div class="skipNav"><a href="#skip.navbar.bottom" title="Skip navigation links">Skip navigation links</a></div>
-<a name="navbar.bottom.firstrow">
-<!--   -->
-</a>
-<ul class="navList" title="Navigation">
-<li><a href="../simpledb/package-summary.html">Package</a></li>
-<li class="navBarCell1Rev">Class</li>
-<li><a href="package-tree.html">Tree</a></li>
-<li><a href="../deprecated-list.html">Deprecated</a></li>
-<li><a href="../index-all.html">Index</a></li>
-<li><a href="../help-doc.html">Help</a></li>
-</ul>
-</div>
-<div class="subNav">
-<ul class="navList">
-<li><a href="../simpledb/IntField.html" title="class in simpledb"><span class="typeNameLink">Prev&nbsp;Class</span></a></li>
-<li><a href="../simpledb/Page.html" title="interface in simpledb"><span class="typeNameLink">Next&nbsp;Class</span></a></li>
-</ul>
-<ul class="navList">
-<li><a href="../index.html?simpledb/LogFile.html" target="_top">Frames</a></li>
-<li><a href="LogFile.html" target="_top">No&nbsp;Frames</a></li>
-</ul>
-<ul class="navList" id="allclasses_navbar_bottom">
-<li><a href="../allclasses-noframe.html">All&nbsp;Classes</a></li>
-</ul>
-<div>
-<script type="text/javascript"><!--
-  allClassesLink = document.getElementById("allclasses_navbar_bottom");
-  if(window==top) {
-    allClassesLink.style.display = "block";
-  }
-  else {
-    allClassesLink.style.display = "none";
-  }
-  //-->
-</script>
-</div>
-<div>
-<ul class="subNavList">
-<li>Summary:&nbsp;</li>
-<li>Nested&nbsp;|&nbsp;</li>
-<li><a href="#field.summary">Field</a>&nbsp;|&nbsp;</li>
-<li><a href="#constructor.summary">Constr</a>&nbsp;|&nbsp;</li>
-<li><a href="#method.summary">Method</a></li>
-</ul>
-<ul class="subNavList">
-<li>Detail:&nbsp;</li>
-<li><a href="#field.detail">Field</a>&nbsp;|&nbsp;</li>
-<li><a href="#constructor.detail">Constr</a>&nbsp;|&nbsp;</li>
-<li><a href="#method.detail">Method</a></li>
-</ul>
-</div>
-<a name="skip.navbar.bottom">
-<!--   -->
-</a></div>
-<!-- ======== END OF BOTTOM NAVBAR ======= -->
-</body>
-</html>
diff -ruN lab1/javadoc/simpledb/Page.html lab3/javadoc/simpledb/Page.html
--- lab1/javadoc/simpledb/Page.html	2016-11-02 22:06:58.000000000 -0500
+++ lab3/javadoc/simpledb/Page.html	1969-12-31 18:00:00.000000000 -0600
@@ -1,332 +0,0 @@
-<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
-<!-- NewPage -->
-<html lang="en">
-<head>
-<!-- Generated by javadoc (1.8.0_25) on Thu Oct 27 13:16:23 CDT 2016 -->
-<title>Page</title>
-<meta name="date" content="2016-10-27">
-<link rel="stylesheet" type="text/css" href="../stylesheet.css" title="Style">
-<script type="text/javascript" src="../script.js"></script>
-</head>
-<body>
-<script type="text/javascript"><!--
-    try {
-        if (location.href.indexOf('is-external=true') == -1) {
-            parent.document.title="Page";
-        }
-    }
-    catch(err) {
-    }
-//-->
-var methods = {"i0":6,"i1":6,"i2":6,"i3":6,"i4":6,"i5":6};
-var tabs = {65535:["t0","All Methods"],2:["t2","Instance Methods"],4:["t3","Abstract Methods"]};
-var altColor = "altColor";
-var rowColor = "rowColor";
-var tableTab = "tableTab";
-var activeTableTab = "activeTableTab";
-</script>
-<noscript>
-<div>JavaScript is disabled on your browser.</div>
-</noscript>
-<!-- ========= START OF TOP NAVBAR ======= -->
-<div class="topNav"><a name="navbar.top">
-<!--   -->
-</a>
-<div class="skipNav"><a href="#skip.navbar.top" title="Skip navigation links">Skip navigation links</a></div>
-<a name="navbar.top.firstrow">
-<!--   -->
-</a>
-<ul class="navList" title="Navigation">
-<li><a href="../simpledb/package-summary.html">Package</a></li>
-<li class="navBarCell1Rev">Class</li>
-<li><a href="package-tree.html">Tree</a></li>
-<li><a href="../deprecated-list.html">Deprecated</a></li>
-<li><a href="../index-all.html">Index</a></li>
-<li><a href="../help-doc.html">Help</a></li>
-</ul>
-</div>
-<div class="subNav">
-<ul class="navList">
-<li><a href="../simpledb/LogFile.html" title="class in simpledb"><span class="typeNameLink">Prev&nbsp;Class</span></a></li>
-<li><a href="../simpledb/PageId.html" title="interface in simpledb"><span class="typeNameLink">Next&nbsp;Class</span></a></li>
-</ul>
-<ul class="navList">
-<li><a href="../index.html?simpledb/Page.html" target="_top">Frames</a></li>
-<li><a href="Page.html" target="_top">No&nbsp;Frames</a></li>
-</ul>
-<ul class="navList" id="allclasses_navbar_top">
-<li><a href="../allclasses-noframe.html">All&nbsp;Classes</a></li>
-</ul>
-<div>
-<script type="text/javascript"><!--
-  allClassesLink = document.getElementById("allclasses_navbar_top");
-  if(window==top) {
-    allClassesLink.style.display = "block";
-  }
-  else {
-    allClassesLink.style.display = "none";
-  }
-  //-->
-</script>
-</div>
-<div>
-<ul class="subNavList">
-<li>Summary:&nbsp;</li>
-<li>Nested&nbsp;|&nbsp;</li>
-<li>Field&nbsp;|&nbsp;</li>
-<li>Constr&nbsp;|&nbsp;</li>
-<li><a href="#method.summary">Method</a></li>
-</ul>
-<ul class="subNavList">
-<li>Detail:&nbsp;</li>
-<li>Field&nbsp;|&nbsp;</li>
-<li>Constr&nbsp;|&nbsp;</li>
-<li><a href="#method.detail">Method</a></li>
-</ul>
-</div>
-<a name="skip.navbar.top">
-<!--   -->
-</a></div>
-<!-- ========= END OF TOP NAVBAR ========= -->
-<!-- ======== START OF CLASS DATA ======== -->
-<div class="header">
-<div class="subTitle">simpledb</div>
-<h2 title="Interface Page" class="title">Interface Page</h2>
-</div>
-<div class="contentContainer">
-<div class="description">
-<ul class="blockList">
-<li class="blockList">
-<dl>
-<dt>All Known Implementing Classes:</dt>
-<dd><a href="../simpledb/HeapPage.html" title="class in simpledb">HeapPage</a></dd>
-</dl>
-<hr>
-<br>
-<pre>public interface <span class="typeNameLabel">Page</span></pre>
-<div class="block">Page is the interface used to represent pages that are resident in the
- BufferPool.  Typically, DbFiles will read and write pages from disk.
- <p>
- Pages may be "dirty", indicating that they have been modified since they
- were last written out to disk.
-
- For recovery purposes, pages MUST have a single constructor of the form:
-     Page(PageId id, byte[] data)</div>
-</li>
-</ul>
-</div>
-<div class="summary">
-<ul class="blockList">
-<li class="blockList">
-<!-- ========== METHOD SUMMARY =========== -->
-<ul class="blockList">
-<li class="blockList"><a name="method.summary">
-<!--   -->
-</a>
-<h3>Method Summary</h3>
-<table class="memberSummary" border="0" cellpadding="3" cellspacing="0" summary="Method Summary table, listing methods, and an explanation">
-<caption><span id="t0" class="activeTableTab"><span>All Methods</span><span class="tabEnd">&nbsp;</span></span><span id="t2" class="tableTab"><span><a href="javascript:show(2);">Instance Methods</a></span><span class="tabEnd">&nbsp;</span></span><span id="t3" class="tableTab"><span><a href="javascript:show(4);">Abstract Methods</a></span><span class="tabEnd">&nbsp;</span></span></caption>
-<tr>
-<th class="colFirst" scope="col">Modifier and Type</th>
-<th class="colLast" scope="col">Method and Description</th>
-</tr>
-<tr id="i0" class="altColor">
-<td class="colFirst"><code><a href="../simpledb/Page.html" title="interface in simpledb">Page</a></code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/Page.html#getBeforeImage--">getBeforeImage</a></span>()</code>
-<div class="block">Provide a representation of this page before any modifications were made
-        to it.</div>
-</td>
-</tr>
-<tr id="i1" class="rowColor">
-<td class="colFirst"><code><a href="../simpledb/PageId.html" title="interface in simpledb">PageId</a></code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/Page.html#getId--">getId</a></span>()</code>
-<div class="block">Return the id of this page.</div>
-</td>
-</tr>
-<tr id="i2" class="altColor">
-<td class="colFirst"><code>byte[]</code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/Page.html#getPageData--">getPageData</a></span>()</code>
-<div class="block">Generates a byte array representing the contents of this page.</div>
-</td>
-</tr>
-<tr id="i3" class="rowColor">
-<td class="colFirst"><code><a href="../simpledb/TransactionId.html" title="class in simpledb">TransactionId</a></code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/Page.html#isDirty--">isDirty</a></span>()</code>
-<div class="block">Get the id of the transaction that last dirtied this page, or null if the page is clean..</div>
-</td>
-</tr>
-<tr id="i4" class="altColor">
-<td class="colFirst"><code>void</code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/Page.html#markDirty-boolean-simpledb.TransactionId-">markDirty</a></span>(boolean&nbsp;dirty,
-         <a href="../simpledb/TransactionId.html" title="class in simpledb">TransactionId</a>&nbsp;tid)</code>
-<div class="block">Set the dirty state of this page as dirtied by a particular transaction</div>
-</td>
-</tr>
-<tr id="i5" class="rowColor">
-<td class="colFirst"><code>void</code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/Page.html#setBeforeImage--">setBeforeImage</a></span>()</code>&nbsp;</td>
-</tr>
-</table>
-</li>
-</ul>
-</li>
-</ul>
-</div>
-<div class="details">
-<ul class="blockList">
-<li class="blockList">
-<!-- ============ METHOD DETAIL ========== -->
-<ul class="blockList">
-<li class="blockList"><a name="method.detail">
-<!--   -->
-</a>
-<h3>Method Detail</h3>
-<a name="getId--">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>getId</h4>
-<pre><a href="../simpledb/PageId.html" title="interface in simpledb">PageId</a>&nbsp;getId()</pre>
-<div class="block">Return the id of this page.  The id is a unique identifier for a page
- that can be used to look up the page on disk or determine if the page
- is resident in the buffer pool.</div>
-<dl>
-<dt><span class="returnLabel">Returns:</span></dt>
-<dd>the id of this page</dd>
-</dl>
-</li>
-</ul>
-<a name="isDirty--">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>isDirty</h4>
-<pre><a href="../simpledb/TransactionId.html" title="class in simpledb">TransactionId</a>&nbsp;isDirty()</pre>
-<div class="block">Get the id of the transaction that last dirtied this page, or null if the page is clean..</div>
-<dl>
-<dt><span class="returnLabel">Returns:</span></dt>
-<dd>The id of the transaction that last dirtied this page, or null</dd>
-</dl>
-</li>
-</ul>
-<a name="markDirty-boolean-simpledb.TransactionId-">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>markDirty</h4>
-<pre>void&nbsp;markDirty(boolean&nbsp;dirty,
-               <a href="../simpledb/TransactionId.html" title="class in simpledb">TransactionId</a>&nbsp;tid)</pre>
-<div class="block">Set the dirty state of this page as dirtied by a particular transaction</div>
-</li>
-</ul>
-<a name="getPageData--">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>getPageData</h4>
-<pre>byte[]&nbsp;getPageData()</pre>
-<div class="block">Generates a byte array representing the contents of this page.
- Used to serialize this page to disk.
- <p>
- The invariant here is that it should be possible to pass the byte array
- generated by getPageData to the Page constructor and have it produce
- an identical Page object.</div>
-<dl>
-<dt><span class="returnLabel">Returns:</span></dt>
-<dd>A byte array correspond to the bytes of this page.</dd>
-</dl>
-</li>
-</ul>
-<a name="getBeforeImage--">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>getBeforeImage</h4>
-<pre><a href="../simpledb/Page.html" title="interface in simpledb">Page</a>&nbsp;getBeforeImage()</pre>
-<div class="block">Provide a representation of this page before any modifications were made
-        to it.  Used by recovery.</div>
-</li>
-</ul>
-<a name="setBeforeImage--">
-<!--   -->
-</a>
-<ul class="blockListLast">
-<li class="blockList">
-<h4>setBeforeImage</h4>
-<pre>void&nbsp;setBeforeImage()</pre>
-</li>
-</ul>
-</li>
-</ul>
-</li>
-</ul>
-</div>
-</div>
-<!-- ========= END OF CLASS DATA ========= -->
-<!-- ======= START OF BOTTOM NAVBAR ====== -->
-<div class="bottomNav"><a name="navbar.bottom">
-<!--   -->
-</a>
-<div class="skipNav"><a href="#skip.navbar.bottom" title="Skip navigation links">Skip navigation links</a></div>
-<a name="navbar.bottom.firstrow">
-<!--   -->
-</a>
-<ul class="navList" title="Navigation">
-<li><a href="../simpledb/package-summary.html">Package</a></li>
-<li class="navBarCell1Rev">Class</li>
-<li><a href="package-tree.html">Tree</a></li>
-<li><a href="../deprecated-list.html">Deprecated</a></li>
-<li><a href="../index-all.html">Index</a></li>
-<li><a href="../help-doc.html">Help</a></li>
-</ul>
-</div>
-<div class="subNav">
-<ul class="navList">
-<li><a href="../simpledb/LogFile.html" title="class in simpledb"><span class="typeNameLink">Prev&nbsp;Class</span></a></li>
-<li><a href="../simpledb/PageId.html" title="interface in simpledb"><span class="typeNameLink">Next&nbsp;Class</span></a></li>
-</ul>
-<ul class="navList">
-<li><a href="../index.html?simpledb/Page.html" target="_top">Frames</a></li>
-<li><a href="Page.html" target="_top">No&nbsp;Frames</a></li>
-</ul>
-<ul class="navList" id="allclasses_navbar_bottom">
-<li><a href="../allclasses-noframe.html">All&nbsp;Classes</a></li>
-</ul>
-<div>
-<script type="text/javascript"><!--
-  allClassesLink = document.getElementById("allclasses_navbar_bottom");
-  if(window==top) {
-    allClassesLink.style.display = "block";
-  }
-  else {
-    allClassesLink.style.display = "none";
-  }
-  //-->
-</script>
-</div>
-<div>
-<ul class="subNavList">
-<li>Summary:&nbsp;</li>
-<li>Nested&nbsp;|&nbsp;</li>
-<li>Field&nbsp;|&nbsp;</li>
-<li>Constr&nbsp;|&nbsp;</li>
-<li><a href="#method.summary">Method</a></li>
-</ul>
-<ul class="subNavList">
-<li>Detail:&nbsp;</li>
-<li>Field&nbsp;|&nbsp;</li>
-<li>Constr&nbsp;|&nbsp;</li>
-<li><a href="#method.detail">Method</a></li>
-</ul>
-</div>
-<a name="skip.navbar.bottom">
-<!--   -->
-</a></div>
-<!-- ======== END OF BOTTOM NAVBAR ======= -->
-</body>
-</html>
diff -ruN lab1/javadoc/simpledb/PageId.html lab3/javadoc/simpledb/PageId.html
--- lab1/javadoc/simpledb/PageId.html	2016-11-02 22:06:58.000000000 -0500
+++ lab3/javadoc/simpledb/PageId.html	1969-12-31 18:00:00.000000000 -0600
@@ -1,311 +0,0 @@
-<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
-<!-- NewPage -->
-<html lang="en">
-<head>
-<!-- Generated by javadoc (1.8.0_25) on Thu Oct 27 13:16:23 CDT 2016 -->
-<title>PageId</title>
-<meta name="date" content="2016-10-27">
-<link rel="stylesheet" type="text/css" href="../stylesheet.css" title="Style">
-<script type="text/javascript" src="../script.js"></script>
-</head>
-<body>
-<script type="text/javascript"><!--
-    try {
-        if (location.href.indexOf('is-external=true') == -1) {
-            parent.document.title="PageId";
-        }
-    }
-    catch(err) {
-    }
-//-->
-var methods = {"i0":6,"i1":6,"i2":6,"i3":6,"i4":6};
-var tabs = {65535:["t0","All Methods"],2:["t2","Instance Methods"],4:["t3","Abstract Methods"]};
-var altColor = "altColor";
-var rowColor = "rowColor";
-var tableTab = "tableTab";
-var activeTableTab = "activeTableTab";
-</script>
-<noscript>
-<div>JavaScript is disabled on your browser.</div>
-</noscript>
-<!-- ========= START OF TOP NAVBAR ======= -->
-<div class="topNav"><a name="navbar.top">
-<!--   -->
-</a>
-<div class="skipNav"><a href="#skip.navbar.top" title="Skip navigation links">Skip navigation links</a></div>
-<a name="navbar.top.firstrow">
-<!--   -->
-</a>
-<ul class="navList" title="Navigation">
-<li><a href="../simpledb/package-summary.html">Package</a></li>
-<li class="navBarCell1Rev">Class</li>
-<li><a href="package-tree.html">Tree</a></li>
-<li><a href="../deprecated-list.html">Deprecated</a></li>
-<li><a href="../index-all.html">Index</a></li>
-<li><a href="../help-doc.html">Help</a></li>
-</ul>
-</div>
-<div class="subNav">
-<ul class="navList">
-<li><a href="../simpledb/Page.html" title="interface in simpledb"><span class="typeNameLink">Prev&nbsp;Class</span></a></li>
-<li><a href="../simpledb/Permissions.html" title="class in simpledb"><span class="typeNameLink">Next&nbsp;Class</span></a></li>
-</ul>
-<ul class="navList">
-<li><a href="../index.html?simpledb/PageId.html" target="_top">Frames</a></li>
-<li><a href="PageId.html" target="_top">No&nbsp;Frames</a></li>
-</ul>
-<ul class="navList" id="allclasses_navbar_top">
-<li><a href="../allclasses-noframe.html">All&nbsp;Classes</a></li>
-</ul>
-<div>
-<script type="text/javascript"><!--
-  allClassesLink = document.getElementById("allclasses_navbar_top");
-  if(window==top) {
-    allClassesLink.style.display = "block";
-  }
-  else {
-    allClassesLink.style.display = "none";
-  }
-  //-->
-</script>
-</div>
-<div>
-<ul class="subNavList">
-<li>Summary:&nbsp;</li>
-<li>Nested&nbsp;|&nbsp;</li>
-<li>Field&nbsp;|&nbsp;</li>
-<li>Constr&nbsp;|&nbsp;</li>
-<li><a href="#method.summary">Method</a></li>
-</ul>
-<ul class="subNavList">
-<li>Detail:&nbsp;</li>
-<li>Field&nbsp;|&nbsp;</li>
-<li>Constr&nbsp;|&nbsp;</li>
-<li><a href="#method.detail">Method</a></li>
-</ul>
-</div>
-<a name="skip.navbar.top">
-<!--   -->
-</a></div>
-<!-- ========= END OF TOP NAVBAR ========= -->
-<!-- ======== START OF CLASS DATA ======== -->
-<div class="header">
-<div class="subTitle">simpledb</div>
-<h2 title="Interface PageId" class="title">Interface PageId</h2>
-</div>
-<div class="contentContainer">
-<div class="description">
-<ul class="blockList">
-<li class="blockList">
-<dl>
-<dt>All Known Implementing Classes:</dt>
-<dd><a href="../simpledb/HeapPageId.html" title="class in simpledb">HeapPageId</a></dd>
-</dl>
-<hr>
-<br>
-<pre>public interface <span class="typeNameLabel">PageId</span></pre>
-<div class="block">PageId is an interface to a specific page of a specific table.</div>
-</li>
-</ul>
-</div>
-<div class="summary">
-<ul class="blockList">
-<li class="blockList">
-<!-- ========== METHOD SUMMARY =========== -->
-<ul class="blockList">
-<li class="blockList"><a name="method.summary">
-<!--   -->
-</a>
-<h3>Method Summary</h3>
-<table class="memberSummary" border="0" cellpadding="3" cellspacing="0" summary="Method Summary table, listing methods, and an explanation">
-<caption><span id="t0" class="activeTableTab"><span>All Methods</span><span class="tabEnd">&nbsp;</span></span><span id="t2" class="tableTab"><span><a href="javascript:show(2);">Instance Methods</a></span><span class="tabEnd">&nbsp;</span></span><span id="t3" class="tableTab"><span><a href="javascript:show(4);">Abstract Methods</a></span><span class="tabEnd">&nbsp;</span></span></caption>
-<tr>
-<th class="colFirst" scope="col">Modifier and Type</th>
-<th class="colLast" scope="col">Method and Description</th>
-</tr>
-<tr id="i0" class="altColor">
-<td class="colFirst"><code>boolean</code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/PageId.html#equals-java.lang.Object-">equals</a></span>(java.lang.Object&nbsp;o)</code>
-<div class="block">Compares one PageId to another.</div>
-</td>
-</tr>
-<tr id="i1" class="rowColor">
-<td class="colFirst"><code>int</code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/PageId.html#getTableId--">getTableId</a></span>()</code>&nbsp;</td>
-</tr>
-<tr id="i2" class="altColor">
-<td class="colFirst"><code>int</code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/PageId.html#hashCode--">hashCode</a></span>()</code>&nbsp;</td>
-</tr>
-<tr id="i3" class="rowColor">
-<td class="colFirst"><code>int</code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/PageId.html#pageNumber--">pageNumber</a></span>()</code>&nbsp;</td>
-</tr>
-<tr id="i4" class="altColor">
-<td class="colFirst"><code>int[]</code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/PageId.html#serialize--">serialize</a></span>()</code>
-<div class="block">Return a representation of this page id object as a collection of
-        integers (used for logging)
-
-        This class MUST have a constructor that accepts n integer parameters,
-        where n is the number of integers returned in the array from serialize.</div>
-</td>
-</tr>
-</table>
-</li>
-</ul>
-</li>
-</ul>
-</div>
-<div class="details">
-<ul class="blockList">
-<li class="blockList">
-<!-- ============ METHOD DETAIL ========== -->
-<ul class="blockList">
-<li class="blockList"><a name="method.detail">
-<!--   -->
-</a>
-<h3>Method Detail</h3>
-<a name="serialize--">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>serialize</h4>
-<pre>int[]&nbsp;serialize()</pre>
-<div class="block">Return a representation of this page id object as a collection of
-        integers (used for logging)
-
-        This class MUST have a constructor that accepts n integer parameters,
-        where n is the number of integers returned in the array from serialize.</div>
-</li>
-</ul>
-<a name="getTableId--">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>getTableId</h4>
-<pre>int&nbsp;getTableId()</pre>
-<dl>
-<dt><span class="returnLabel">Returns:</span></dt>
-<dd>the unique tableid hashcode with this PageId</dd>
-</dl>
-</li>
-</ul>
-<a name="hashCode--">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>hashCode</h4>
-<pre>int&nbsp;hashCode()</pre>
-<dl>
-<dt><span class="overrideSpecifyLabel">Overrides:</span></dt>
-<dd><code>hashCode</code>&nbsp;in class&nbsp;<code>java.lang.Object</code></dd>
-<dt><span class="returnLabel">Returns:</span></dt>
-<dd>a hash code for this page, represented by the concatenation of
-   the table number and the page number (needed if a PageId is used as a
-   key in a hash table in the BufferPool, for example.)</dd>
-<dt><span class="seeLabel">See Also:</span></dt>
-<dd><a href="../simpledb/BufferPool.html" title="class in simpledb"><code>BufferPool</code></a></dd>
-</dl>
-</li>
-</ul>
-<a name="equals-java.lang.Object-">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>equals</h4>
-<pre>boolean&nbsp;equals(java.lang.Object&nbsp;o)</pre>
-<div class="block">Compares one PageId to another.</div>
-<dl>
-<dt><span class="overrideSpecifyLabel">Overrides:</span></dt>
-<dd><code>equals</code>&nbsp;in class&nbsp;<code>java.lang.Object</code></dd>
-<dt><span class="paramLabel">Parameters:</span></dt>
-<dd><code>o</code> - The object to compare against (must be a PageId)</dd>
-<dt><span class="returnLabel">Returns:</span></dt>
-<dd>true if the objects are equal (e.g., page numbers and table
-   ids are the same)</dd>
-</dl>
-</li>
-</ul>
-<a name="pageNumber--">
-<!--   -->
-</a>
-<ul class="blockListLast">
-<li class="blockList">
-<h4>pageNumber</h4>
-<pre>int&nbsp;pageNumber()</pre>
-</li>
-</ul>
-</li>
-</ul>
-</li>
-</ul>
-</div>
-</div>
-<!-- ========= END OF CLASS DATA ========= -->
-<!-- ======= START OF BOTTOM NAVBAR ====== -->
-<div class="bottomNav"><a name="navbar.bottom">
-<!--   -->
-</a>
-<div class="skipNav"><a href="#skip.navbar.bottom" title="Skip navigation links">Skip navigation links</a></div>
-<a name="navbar.bottom.firstrow">
-<!--   -->
-</a>
-<ul class="navList" title="Navigation">
-<li><a href="../simpledb/package-summary.html">Package</a></li>
-<li class="navBarCell1Rev">Class</li>
-<li><a href="package-tree.html">Tree</a></li>
-<li><a href="../deprecated-list.html">Deprecated</a></li>
-<li><a href="../index-all.html">Index</a></li>
-<li><a href="../help-doc.html">Help</a></li>
-</ul>
-</div>
-<div class="subNav">
-<ul class="navList">
-<li><a href="../simpledb/Page.html" title="interface in simpledb"><span class="typeNameLink">Prev&nbsp;Class</span></a></li>
-<li><a href="../simpledb/Permissions.html" title="class in simpledb"><span class="typeNameLink">Next&nbsp;Class</span></a></li>
-</ul>
-<ul class="navList">
-<li><a href="../index.html?simpledb/PageId.html" target="_top">Frames</a></li>
-<li><a href="PageId.html" target="_top">No&nbsp;Frames</a></li>
-</ul>
-<ul class="navList" id="allclasses_navbar_bottom">
-<li><a href="../allclasses-noframe.html">All&nbsp;Classes</a></li>
-</ul>
-<div>
-<script type="text/javascript"><!--
-  allClassesLink = document.getElementById("allclasses_navbar_bottom");
-  if(window==top) {
-    allClassesLink.style.display = "block";
-  }
-  else {
-    allClassesLink.style.display = "none";
-  }
-  //-->
-</script>
-</div>
-<div>
-<ul class="subNavList">
-<li>Summary:&nbsp;</li>
-<li>Nested&nbsp;|&nbsp;</li>
-<li>Field&nbsp;|&nbsp;</li>
-<li>Constr&nbsp;|&nbsp;</li>
-<li><a href="#method.summary">Method</a></li>
-</ul>
-<ul class="subNavList">
-<li>Detail:&nbsp;</li>
-<li>Field&nbsp;|&nbsp;</li>
-<li>Constr&nbsp;|&nbsp;</li>
-<li><a href="#method.detail">Method</a></li>
-</ul>
-</div>
-<a name="skip.navbar.bottom">
-<!--   -->
-</a></div>
-<!-- ======== END OF BOTTOM NAVBAR ======= -->
-</body>
-</html>
diff -ruN lab1/javadoc/simpledb/Permissions.html lab3/javadoc/simpledb/Permissions.html
--- lab1/javadoc/simpledb/Permissions.html	2016-11-02 22:06:58.000000000 -0500
+++ lab3/javadoc/simpledb/Permissions.html	1969-12-31 18:00:00.000000000 -0600
@@ -1,338 +0,0 @@
-<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
-<!-- NewPage -->
-<html lang="en">
-<head>
-<!-- Generated by javadoc (1.8.0_25) on Thu Oct 27 13:16:23 CDT 2016 -->
-<title>Permissions</title>
-<meta name="date" content="2016-10-27">
-<link rel="stylesheet" type="text/css" href="../stylesheet.css" title="Style">
-<script type="text/javascript" src="../script.js"></script>
-</head>
-<body>
-<script type="text/javascript"><!--
-    try {
-        if (location.href.indexOf('is-external=true') == -1) {
-            parent.document.title="Permissions";
-        }
-    }
-    catch(err) {
-    }
-//-->
-var methods = {"i0":10};
-var tabs = {65535:["t0","All Methods"],2:["t2","Instance Methods"],8:["t4","Concrete Methods"]};
-var altColor = "altColor";
-var rowColor = "rowColor";
-var tableTab = "tableTab";
-var activeTableTab = "activeTableTab";
-</script>
-<noscript>
-<div>JavaScript is disabled on your browser.</div>
-</noscript>
-<!-- ========= START OF TOP NAVBAR ======= -->
-<div class="topNav"><a name="navbar.top">
-<!--   -->
-</a>
-<div class="skipNav"><a href="#skip.navbar.top" title="Skip navigation links">Skip navigation links</a></div>
-<a name="navbar.top.firstrow">
-<!--   -->
-</a>
-<ul class="navList" title="Navigation">
-<li><a href="../simpledb/package-summary.html">Package</a></li>
-<li class="navBarCell1Rev">Class</li>
-<li><a href="package-tree.html">Tree</a></li>
-<li><a href="../deprecated-list.html">Deprecated</a></li>
-<li><a href="../index-all.html">Index</a></li>
-<li><a href="../help-doc.html">Help</a></li>
-</ul>
-</div>
-<div class="subNav">
-<ul class="navList">
-<li><a href="../simpledb/PageId.html" title="interface in simpledb"><span class="typeNameLink">Prev&nbsp;Class</span></a></li>
-<li><a href="../simpledb/Predicate.html" title="class in simpledb"><span class="typeNameLink">Next&nbsp;Class</span></a></li>
-</ul>
-<ul class="navList">
-<li><a href="../index.html?simpledb/Permissions.html" target="_top">Frames</a></li>
-<li><a href="Permissions.html" target="_top">No&nbsp;Frames</a></li>
-</ul>
-<ul class="navList" id="allclasses_navbar_top">
-<li><a href="../allclasses-noframe.html">All&nbsp;Classes</a></li>
-</ul>
-<div>
-<script type="text/javascript"><!--
-  allClassesLink = document.getElementById("allclasses_navbar_top");
-  if(window==top) {
-    allClassesLink.style.display = "block";
-  }
-  else {
-    allClassesLink.style.display = "none";
-  }
-  //-->
-</script>
-</div>
-<div>
-<ul class="subNavList">
-<li>Summary:&nbsp;</li>
-<li>Nested&nbsp;|&nbsp;</li>
-<li><a href="#field.summary">Field</a>&nbsp;|&nbsp;</li>
-<li><a href="#constructor.summary">Constr</a>&nbsp;|&nbsp;</li>
-<li><a href="#method.summary">Method</a></li>
-</ul>
-<ul class="subNavList">
-<li>Detail:&nbsp;</li>
-<li><a href="#field.detail">Field</a>&nbsp;|&nbsp;</li>
-<li><a href="#constructor.detail">Constr</a>&nbsp;|&nbsp;</li>
-<li><a href="#method.detail">Method</a></li>
-</ul>
-</div>
-<a name="skip.navbar.top">
-<!--   -->
-</a></div>
-<!-- ========= END OF TOP NAVBAR ========= -->
-<!-- ======== START OF CLASS DATA ======== -->
-<div class="header">
-<div class="subTitle">simpledb</div>
-<h2 title="Class Permissions" class="title">Class Permissions</h2>
-</div>
-<div class="contentContainer">
-<ul class="inheritance">
-<li>java.lang.Object</li>
-<li>
-<ul class="inheritance">
-<li>simpledb.Permissions</li>
-</ul>
-</li>
-</ul>
-<div class="description">
-<ul class="blockList">
-<li class="blockList">
-<hr>
-<br>
-<pre>public class <span class="typeNameLabel">Permissions</span>
-extends java.lang.Object</pre>
-<div class="block">Class representing requested permissions to a relation/file.
- Private constructor with two static objects READ_ONLY and READ_WRITE that
- represent the two levels of permission.</div>
-</li>
-</ul>
-</div>
-<div class="summary">
-<ul class="blockList">
-<li class="blockList">
-<!-- =========== FIELD SUMMARY =========== -->
-<ul class="blockList">
-<li class="blockList"><a name="field.summary">
-<!--   -->
-</a>
-<h3>Field Summary</h3>
-<table class="memberSummary" border="0" cellpadding="3" cellspacing="0" summary="Field Summary table, listing fields, and an explanation">
-<caption><span>Fields</span><span class="tabEnd">&nbsp;</span></caption>
-<tr>
-<th class="colFirst" scope="col">Modifier and Type</th>
-<th class="colLast" scope="col">Field and Description</th>
-</tr>
-<tr class="altColor">
-<td class="colFirst"><code>(package private) int</code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/Permissions.html#permLevel">permLevel</a></span></code>&nbsp;</td>
-</tr>
-<tr class="rowColor">
-<td class="colFirst"><code>static <a href="../simpledb/Permissions.html" title="class in simpledb">Permissions</a></code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/Permissions.html#READ_ONLY">READ_ONLY</a></span></code>&nbsp;</td>
-</tr>
-<tr class="altColor">
-<td class="colFirst"><code>static <a href="../simpledb/Permissions.html" title="class in simpledb">Permissions</a></code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/Permissions.html#READ_WRITE">READ_WRITE</a></span></code>&nbsp;</td>
-</tr>
-</table>
-</li>
-</ul>
-<!-- ======== CONSTRUCTOR SUMMARY ======== -->
-<ul class="blockList">
-<li class="blockList"><a name="constructor.summary">
-<!--   -->
-</a>
-<h3>Constructor Summary</h3>
-<table class="memberSummary" border="0" cellpadding="3" cellspacing="0" summary="Constructor Summary table, listing constructors, and an explanation">
-<caption><span>Constructors</span><span class="tabEnd">&nbsp;</span></caption>
-<tr>
-<th class="colFirst" scope="col">Modifier</th>
-<th class="colLast" scope="col">Constructor and Description</th>
-</tr>
-<tr class="altColor">
-<td class="colFirst"><code>private </code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/Permissions.html#Permissions-int-">Permissions</a></span>(int&nbsp;permLevel)</code>&nbsp;</td>
-</tr>
-</table>
-</li>
-</ul>
-<!-- ========== METHOD SUMMARY =========== -->
-<ul class="blockList">
-<li class="blockList"><a name="method.summary">
-<!--   -->
-</a>
-<h3>Method Summary</h3>
-<table class="memberSummary" border="0" cellpadding="3" cellspacing="0" summary="Method Summary table, listing methods, and an explanation">
-<caption><span id="t0" class="activeTableTab"><span>All Methods</span><span class="tabEnd">&nbsp;</span></span><span id="t2" class="tableTab"><span><a href="javascript:show(2);">Instance Methods</a></span><span class="tabEnd">&nbsp;</span></span><span id="t4" class="tableTab"><span><a href="javascript:show(8);">Concrete Methods</a></span><span class="tabEnd">&nbsp;</span></span></caption>
-<tr>
-<th class="colFirst" scope="col">Modifier and Type</th>
-<th class="colLast" scope="col">Method and Description</th>
-</tr>
-<tr id="i0" class="altColor">
-<td class="colFirst"><code>java.lang.String</code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/Permissions.html#toString--">toString</a></span>()</code>&nbsp;</td>
-</tr>
-</table>
-<ul class="blockList">
-<li class="blockList"><a name="methods.inherited.from.class.java.lang.Object">
-<!--   -->
-</a>
-<h3>Methods inherited from class&nbsp;java.lang.Object</h3>
-<code>clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait</code></li>
-</ul>
-</li>
-</ul>
-</li>
-</ul>
-</div>
-<div class="details">
-<ul class="blockList">
-<li class="blockList">
-<!-- ============ FIELD DETAIL =========== -->
-<ul class="blockList">
-<li class="blockList"><a name="field.detail">
-<!--   -->
-</a>
-<h3>Field Detail</h3>
-<a name="permLevel">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>permLevel</h4>
-<pre>int permLevel</pre>
-</li>
-</ul>
-<a name="READ_ONLY">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>READ_ONLY</h4>
-<pre>public static final&nbsp;<a href="../simpledb/Permissions.html" title="class in simpledb">Permissions</a> READ_ONLY</pre>
-</li>
-</ul>
-<a name="READ_WRITE">
-<!--   -->
-</a>
-<ul class="blockListLast">
-<li class="blockList">
-<h4>READ_WRITE</h4>
-<pre>public static final&nbsp;<a href="../simpledb/Permissions.html" title="class in simpledb">Permissions</a> READ_WRITE</pre>
-</li>
-</ul>
-</li>
-</ul>
-<!-- ========= CONSTRUCTOR DETAIL ======== -->
-<ul class="blockList">
-<li class="blockList"><a name="constructor.detail">
-<!--   -->
-</a>
-<h3>Constructor Detail</h3>
-<a name="Permissions-int-">
-<!--   -->
-</a>
-<ul class="blockListLast">
-<li class="blockList">
-<h4>Permissions</h4>
-<pre>private&nbsp;Permissions(int&nbsp;permLevel)</pre>
-</li>
-</ul>
-</li>
-</ul>
-<!-- ============ METHOD DETAIL ========== -->
-<ul class="blockList">
-<li class="blockList"><a name="method.detail">
-<!--   -->
-</a>
-<h3>Method Detail</h3>
-<a name="toString--">
-<!--   -->
-</a>
-<ul class="blockListLast">
-<li class="blockList">
-<h4>toString</h4>
-<pre>public&nbsp;java.lang.String&nbsp;toString()</pre>
-<dl>
-<dt><span class="overrideSpecifyLabel">Overrides:</span></dt>
-<dd><code>toString</code>&nbsp;in class&nbsp;<code>java.lang.Object</code></dd>
-</dl>
-</li>
-</ul>
-</li>
-</ul>
-</li>
-</ul>
-</div>
-</div>
-<!-- ========= END OF CLASS DATA ========= -->
-<!-- ======= START OF BOTTOM NAVBAR ====== -->
-<div class="bottomNav"><a name="navbar.bottom">
-<!--   -->
-</a>
-<div class="skipNav"><a href="#skip.navbar.bottom" title="Skip navigation links">Skip navigation links</a></div>
-<a name="navbar.bottom.firstrow">
-<!--   -->
-</a>
-<ul class="navList" title="Navigation">
-<li><a href="../simpledb/package-summary.html">Package</a></li>
-<li class="navBarCell1Rev">Class</li>
-<li><a href="package-tree.html">Tree</a></li>
-<li><a href="../deprecated-list.html">Deprecated</a></li>
-<li><a href="../index-all.html">Index</a></li>
-<li><a href="../help-doc.html">Help</a></li>
-</ul>
-</div>
-<div class="subNav">
-<ul class="navList">
-<li><a href="../simpledb/PageId.html" title="interface in simpledb"><span class="typeNameLink">Prev&nbsp;Class</span></a></li>
-<li><a href="../simpledb/Predicate.html" title="class in simpledb"><span class="typeNameLink">Next&nbsp;Class</span></a></li>
-</ul>
-<ul class="navList">
-<li><a href="../index.html?simpledb/Permissions.html" target="_top">Frames</a></li>
-<li><a href="Permissions.html" target="_top">No&nbsp;Frames</a></li>
-</ul>
-<ul class="navList" id="allclasses_navbar_bottom">
-<li><a href="../allclasses-noframe.html">All&nbsp;Classes</a></li>
-</ul>
-<div>
-<script type="text/javascript"><!--
-  allClassesLink = document.getElementById("allclasses_navbar_bottom");
-  if(window==top) {
-    allClassesLink.style.display = "block";
-  }
-  else {
-    allClassesLink.style.display = "none";
-  }
-  //-->
-</script>
-</div>
-<div>
-<ul class="subNavList">
-<li>Summary:&nbsp;</li>
-<li>Nested&nbsp;|&nbsp;</li>
-<li><a href="#field.summary">Field</a>&nbsp;|&nbsp;</li>
-<li><a href="#constructor.summary">Constr</a>&nbsp;|&nbsp;</li>
-<li><a href="#method.summary">Method</a></li>
-</ul>
-<ul class="subNavList">
-<li>Detail:&nbsp;</li>
-<li><a href="#field.detail">Field</a>&nbsp;|&nbsp;</li>
-<li><a href="#constructor.detail">Constr</a>&nbsp;|&nbsp;</li>
-<li><a href="#method.detail">Method</a></li>
-</ul>
-</div>
-<a name="skip.navbar.bottom">
-<!--   -->
-</a></div>
-<!-- ======== END OF BOTTOM NAVBAR ======= -->
-</body>
-</html>
diff -ruN lab1/javadoc/simpledb/Predicate.Op.html lab3/javadoc/simpledb/Predicate.Op.html
--- lab1/javadoc/simpledb/Predicate.Op.html	2016-11-02 22:06:58.000000000 -0500
+++ lab3/javadoc/simpledb/Predicate.Op.html	1969-12-31 18:00:00.000000000 -0600
@@ -1,442 +0,0 @@
-<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
-<!-- NewPage -->
-<html lang="en">
-<head>
-<!-- Generated by javadoc (1.8.0_25) on Thu Oct 27 13:16:24 CDT 2016 -->
-<title>Predicate.Op</title>
-<meta name="date" content="2016-10-27">
-<link rel="stylesheet" type="text/css" href="../stylesheet.css" title="Style">
-<script type="text/javascript" src="../script.js"></script>
-</head>
-<body>
-<script type="text/javascript"><!--
-    try {
-        if (location.href.indexOf('is-external=true') == -1) {
-            parent.document.title="Predicate.Op";
-        }
-    }
-    catch(err) {
-    }
-//-->
-var methods = {"i0":9,"i1":10,"i2":9,"i3":9};
-var tabs = {65535:["t0","All Methods"],1:["t1","Static Methods"],2:["t2","Instance Methods"],8:["t4","Concrete Methods"]};
-var altColor = "altColor";
-var rowColor = "rowColor";
-var tableTab = "tableTab";
-var activeTableTab = "activeTableTab";
-</script>
-<noscript>
-<div>JavaScript is disabled on your browser.</div>
-</noscript>
-<!-- ========= START OF TOP NAVBAR ======= -->
-<div class="topNav"><a name="navbar.top">
-<!--   -->
-</a>
-<div class="skipNav"><a href="#skip.navbar.top" title="Skip navigation links">Skip navigation links</a></div>
-<a name="navbar.top.firstrow">
-<!--   -->
-</a>
-<ul class="navList" title="Navigation">
-<li><a href="../simpledb/package-summary.html">Package</a></li>
-<li class="navBarCell1Rev">Class</li>
-<li><a href="package-tree.html">Tree</a></li>
-<li><a href="../deprecated-list.html">Deprecated</a></li>
-<li><a href="../index-all.html">Index</a></li>
-<li><a href="../help-doc.html">Help</a></li>
-</ul>
-</div>
-<div class="subNav">
-<ul class="navList">
-<li><a href="../simpledb/Predicate.html" title="class in simpledb"><span class="typeNameLink">Prev&nbsp;Class</span></a></li>
-<li><a href="../simpledb/RecordId.html" title="class in simpledb"><span class="typeNameLink">Next&nbsp;Class</span></a></li>
-</ul>
-<ul class="navList">
-<li><a href="../index.html?simpledb/Predicate.Op.html" target="_top">Frames</a></li>
-<li><a href="Predicate.Op.html" target="_top">No&nbsp;Frames</a></li>
-</ul>
-<ul class="navList" id="allclasses_navbar_top">
-<li><a href="../allclasses-noframe.html">All&nbsp;Classes</a></li>
-</ul>
-<div>
-<script type="text/javascript"><!--
-  allClassesLink = document.getElementById("allclasses_navbar_top");
-  if(window==top) {
-    allClassesLink.style.display = "block";
-  }
-  else {
-    allClassesLink.style.display = "none";
-  }
-  //-->
-</script>
-</div>
-<div>
-<ul class="subNavList">
-<li>Summary:&nbsp;</li>
-<li>Nested&nbsp;|&nbsp;</li>
-<li><a href="#enum.constant.summary">Enum Constants</a>&nbsp;|&nbsp;</li>
-<li>Field&nbsp;|&nbsp;</li>
-<li><a href="#method.summary">Method</a></li>
-</ul>
-<ul class="subNavList">
-<li>Detail:&nbsp;</li>
-<li><a href="#enum.constant.detail">Enum Constants</a>&nbsp;|&nbsp;</li>
-<li>Field&nbsp;|&nbsp;</li>
-<li><a href="#method.detail">Method</a></li>
-</ul>
-</div>
-<a name="skip.navbar.top">
-<!--   -->
-</a></div>
-<!-- ========= END OF TOP NAVBAR ========= -->
-<!-- ======== START OF CLASS DATA ======== -->
-<div class="header">
-<div class="subTitle">simpledb</div>
-<h2 title="Enum Predicate.Op" class="title">Enum Predicate.Op</h2>
-</div>
-<div class="contentContainer">
-<ul class="inheritance">
-<li>java.lang.Object</li>
-<li>
-<ul class="inheritance">
-<li>java.lang.Enum&lt;<a href="../simpledb/Predicate.Op.html" title="enum in simpledb">Predicate.Op</a>&gt;</li>
-<li>
-<ul class="inheritance">
-<li>simpledb.Predicate.Op</li>
-</ul>
-</li>
-</ul>
-</li>
-</ul>
-<div class="description">
-<ul class="blockList">
-<li class="blockList">
-<dl>
-<dt>All Implemented Interfaces:</dt>
-<dd>java.io.Serializable, java.lang.Comparable&lt;<a href="../simpledb/Predicate.Op.html" title="enum in simpledb">Predicate.Op</a>&gt;</dd>
-</dl>
-<dl>
-<dt>Enclosing class:</dt>
-<dd><a href="../simpledb/Predicate.html" title="class in simpledb">Predicate</a></dd>
-</dl>
-<hr>
-<br>
-<pre>public static enum <span class="typeNameLabel">Predicate.Op</span>
-extends java.lang.Enum&lt;<a href="../simpledb/Predicate.Op.html" title="enum in simpledb">Predicate.Op</a>&gt;
-implements java.io.Serializable</pre>
-<div class="block">Constants used for return codes in Field.compare</div>
-</li>
-</ul>
-</div>
-<div class="summary">
-<ul class="blockList">
-<li class="blockList">
-<!-- =========== ENUM CONSTANT SUMMARY =========== -->
-<ul class="blockList">
-<li class="blockList"><a name="enum.constant.summary">
-<!--   -->
-</a>
-<h3>Enum Constant Summary</h3>
-<table class="memberSummary" border="0" cellpadding="3" cellspacing="0" summary="Enum Constant Summary table, listing enum constants, and an explanation">
-<caption><span>Enum Constants</span><span class="tabEnd">&nbsp;</span></caption>
-<tr>
-<th class="colOne" scope="col">Enum Constant and Description</th>
-</tr>
-<tr class="altColor">
-<td class="colOne"><code><span class="memberNameLink"><a href="../simpledb/Predicate.Op.html#EQUALS">EQUALS</a></span></code>&nbsp;</td>
-</tr>
-<tr class="rowColor">
-<td class="colOne"><code><span class="memberNameLink"><a href="../simpledb/Predicate.Op.html#GREATER_THAN">GREATER_THAN</a></span></code>&nbsp;</td>
-</tr>
-<tr class="altColor">
-<td class="colOne"><code><span class="memberNameLink"><a href="../simpledb/Predicate.Op.html#GREATER_THAN_OR_EQ">GREATER_THAN_OR_EQ</a></span></code>&nbsp;</td>
-</tr>
-<tr class="rowColor">
-<td class="colOne"><code><span class="memberNameLink"><a href="../simpledb/Predicate.Op.html#LESS_THAN">LESS_THAN</a></span></code>&nbsp;</td>
-</tr>
-<tr class="altColor">
-<td class="colOne"><code><span class="memberNameLink"><a href="../simpledb/Predicate.Op.html#LESS_THAN_OR_EQ">LESS_THAN_OR_EQ</a></span></code>&nbsp;</td>
-</tr>
-<tr class="rowColor">
-<td class="colOne"><code><span class="memberNameLink"><a href="../simpledb/Predicate.Op.html#LIKE">LIKE</a></span></code>&nbsp;</td>
-</tr>
-<tr class="altColor">
-<td class="colOne"><code><span class="memberNameLink"><a href="../simpledb/Predicate.Op.html#NOT_EQUALS">NOT_EQUALS</a></span></code>&nbsp;</td>
-</tr>
-</table>
-</li>
-</ul>
-<!-- ========== METHOD SUMMARY =========== -->
-<ul class="blockList">
-<li class="blockList"><a name="method.summary">
-<!--   -->
-</a>
-<h3>Method Summary</h3>
-<table class="memberSummary" border="0" cellpadding="3" cellspacing="0" summary="Method Summary table, listing methods, and an explanation">
-<caption><span id="t0" class="activeTableTab"><span>All Methods</span><span class="tabEnd">&nbsp;</span></span><span id="t1" class="tableTab"><span><a href="javascript:show(1);">Static Methods</a></span><span class="tabEnd">&nbsp;</span></span><span id="t2" class="tableTab"><span><a href="javascript:show(2);">Instance Methods</a></span><span class="tabEnd">&nbsp;</span></span><span id="t4" class="tableTab"><span><a href="javascript:show(8);">Concrete Methods</a></span><span class="tabEnd">&nbsp;</span></span></caption>
-<tr>
-<th class="colFirst" scope="col">Modifier and Type</th>
-<th class="colLast" scope="col">Method and Description</th>
-</tr>
-<tr id="i0" class="altColor">
-<td class="colFirst"><code>static <a href="../simpledb/Predicate.Op.html" title="enum in simpledb">Predicate.Op</a></code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/Predicate.Op.html#getOp-int-">getOp</a></span>(int&nbsp;i)</code>
-<div class="block">Interface to access operations by integer value for command-line
- convenience.</div>
-</td>
-</tr>
-<tr id="i1" class="rowColor">
-<td class="colFirst"><code>java.lang.String</code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/Predicate.Op.html#toString--">toString</a></span>()</code>&nbsp;</td>
-</tr>
-<tr id="i2" class="altColor">
-<td class="colFirst"><code>static <a href="../simpledb/Predicate.Op.html" title="enum in simpledb">Predicate.Op</a></code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/Predicate.Op.html#valueOf-java.lang.String-">valueOf</a></span>(java.lang.String&nbsp;name)</code>
-<div class="block">Returns the enum constant of this type with the specified name.</div>
-</td>
-</tr>
-<tr id="i3" class="rowColor">
-<td class="colFirst"><code>static <a href="../simpledb/Predicate.Op.html" title="enum in simpledb">Predicate.Op</a>[]</code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/Predicate.Op.html#values--">values</a></span>()</code>
-<div class="block">Returns an array containing the constants of this enum type, in
-the order they are declared.</div>
-</td>
-</tr>
-</table>
-<ul class="blockList">
-<li class="blockList"><a name="methods.inherited.from.class.java.lang.Enum">
-<!--   -->
-</a>
-<h3>Methods inherited from class&nbsp;java.lang.Enum</h3>
-<code>clone, compareTo, equals, finalize, getDeclaringClass, hashCode, name, ordinal, valueOf</code></li>
-</ul>
-<ul class="blockList">
-<li class="blockList"><a name="methods.inherited.from.class.java.lang.Object">
-<!--   -->
-</a>
-<h3>Methods inherited from class&nbsp;java.lang.Object</h3>
-<code>getClass, notify, notifyAll, wait, wait, wait</code></li>
-</ul>
-</li>
-</ul>
-</li>
-</ul>
-</div>
-<div class="details">
-<ul class="blockList">
-<li class="blockList">
-<!-- ============ ENUM CONSTANT DETAIL =========== -->
-<ul class="blockList">
-<li class="blockList"><a name="enum.constant.detail">
-<!--   -->
-</a>
-<h3>Enum Constant Detail</h3>
-<a name="EQUALS">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>EQUALS</h4>
-<pre>public static final&nbsp;<a href="../simpledb/Predicate.Op.html" title="enum in simpledb">Predicate.Op</a> EQUALS</pre>
-</li>
-</ul>
-<a name="GREATER_THAN">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>GREATER_THAN</h4>
-<pre>public static final&nbsp;<a href="../simpledb/Predicate.Op.html" title="enum in simpledb">Predicate.Op</a> GREATER_THAN</pre>
-</li>
-</ul>
-<a name="LESS_THAN">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>LESS_THAN</h4>
-<pre>public static final&nbsp;<a href="../simpledb/Predicate.Op.html" title="enum in simpledb">Predicate.Op</a> LESS_THAN</pre>
-</li>
-</ul>
-<a name="LESS_THAN_OR_EQ">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>LESS_THAN_OR_EQ</h4>
-<pre>public static final&nbsp;<a href="../simpledb/Predicate.Op.html" title="enum in simpledb">Predicate.Op</a> LESS_THAN_OR_EQ</pre>
-</li>
-</ul>
-<a name="GREATER_THAN_OR_EQ">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>GREATER_THAN_OR_EQ</h4>
-<pre>public static final&nbsp;<a href="../simpledb/Predicate.Op.html" title="enum in simpledb">Predicate.Op</a> GREATER_THAN_OR_EQ</pre>
-</li>
-</ul>
-<a name="LIKE">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>LIKE</h4>
-<pre>public static final&nbsp;<a href="../simpledb/Predicate.Op.html" title="enum in simpledb">Predicate.Op</a> LIKE</pre>
-</li>
-</ul>
-<a name="NOT_EQUALS">
-<!--   -->
-</a>
-<ul class="blockListLast">
-<li class="blockList">
-<h4>NOT_EQUALS</h4>
-<pre>public static final&nbsp;<a href="../simpledb/Predicate.Op.html" title="enum in simpledb">Predicate.Op</a> NOT_EQUALS</pre>
-</li>
-</ul>
-</li>
-</ul>
-<!-- ============ METHOD DETAIL ========== -->
-<ul class="blockList">
-<li class="blockList"><a name="method.detail">
-<!--   -->
-</a>
-<h3>Method Detail</h3>
-<a name="values--">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>values</h4>
-<pre>public static&nbsp;<a href="../simpledb/Predicate.Op.html" title="enum in simpledb">Predicate.Op</a>[]&nbsp;values()</pre>
-<div class="block">Returns an array containing the constants of this enum type, in
-the order they are declared.  This method may be used to iterate
-over the constants as follows:
-<pre>
-for (Predicate.Op c : Predicate.Op.values())
-&nbsp;   System.out.println(c);
-</pre></div>
-<dl>
-<dt><span class="returnLabel">Returns:</span></dt>
-<dd>an array containing the constants of this enum type, in the order they are declared</dd>
-</dl>
-</li>
-</ul>
-<a name="valueOf-java.lang.String-">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>valueOf</h4>
-<pre>public static&nbsp;<a href="../simpledb/Predicate.Op.html" title="enum in simpledb">Predicate.Op</a>&nbsp;valueOf(java.lang.String&nbsp;name)</pre>
-<div class="block">Returns the enum constant of this type with the specified name.
-The string must match <i>exactly</i> an identifier used to declare an
-enum constant in this type.  (Extraneous whitespace characters are 
-not permitted.)</div>
-<dl>
-<dt><span class="paramLabel">Parameters:</span></dt>
-<dd><code>name</code> - the name of the enum constant to be returned.</dd>
-<dt><span class="returnLabel">Returns:</span></dt>
-<dd>the enum constant with the specified name</dd>
-<dt><span class="throwsLabel">Throws:</span></dt>
-<dd><code>java.lang.IllegalArgumentException</code> - if this enum type has no constant with the specified name</dd>
-<dd><code>java.lang.NullPointerException</code> - if the argument is null</dd>
-</dl>
-</li>
-</ul>
-<a name="getOp-int-">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>getOp</h4>
-<pre>public static&nbsp;<a href="../simpledb/Predicate.Op.html" title="enum in simpledb">Predicate.Op</a>&nbsp;getOp(int&nbsp;i)</pre>
-<div class="block">Interface to access operations by integer value for command-line
- convenience.</div>
-<dl>
-<dt><span class="paramLabel">Parameters:</span></dt>
-<dd><code>i</code> - a valid integer Op index</dd>
-</dl>
-</li>
-</ul>
-<a name="toString--">
-<!--   -->
-</a>
-<ul class="blockListLast">
-<li class="blockList">
-<h4>toString</h4>
-<pre>public&nbsp;java.lang.String&nbsp;toString()</pre>
-<dl>
-<dt><span class="overrideSpecifyLabel">Overrides:</span></dt>
-<dd><code>toString</code>&nbsp;in class&nbsp;<code>java.lang.Enum&lt;<a href="../simpledb/Predicate.Op.html" title="enum in simpledb">Predicate.Op</a>&gt;</code></dd>
-</dl>
-</li>
-</ul>
-</li>
-</ul>
-</li>
-</ul>
-</div>
-</div>
-<!-- ========= END OF CLASS DATA ========= -->
-<!-- ======= START OF BOTTOM NAVBAR ====== -->
-<div class="bottomNav"><a name="navbar.bottom">
-<!--   -->
-</a>
-<div class="skipNav"><a href="#skip.navbar.bottom" title="Skip navigation links">Skip navigation links</a></div>
-<a name="navbar.bottom.firstrow">
-<!--   -->
-</a>
-<ul class="navList" title="Navigation">
-<li><a href="../simpledb/package-summary.html">Package</a></li>
-<li class="navBarCell1Rev">Class</li>
-<li><a href="package-tree.html">Tree</a></li>
-<li><a href="../deprecated-list.html">Deprecated</a></li>
-<li><a href="../index-all.html">Index</a></li>
-<li><a href="../help-doc.html">Help</a></li>
-</ul>
-</div>
-<div class="subNav">
-<ul class="navList">
-<li><a href="../simpledb/Predicate.html" title="class in simpledb"><span class="typeNameLink">Prev&nbsp;Class</span></a></li>
-<li><a href="../simpledb/RecordId.html" title="class in simpledb"><span class="typeNameLink">Next&nbsp;Class</span></a></li>
-</ul>
-<ul class="navList">
-<li><a href="../index.html?simpledb/Predicate.Op.html" target="_top">Frames</a></li>
-<li><a href="Predicate.Op.html" target="_top">No&nbsp;Frames</a></li>
-</ul>
-<ul class="navList" id="allclasses_navbar_bottom">
-<li><a href="../allclasses-noframe.html">All&nbsp;Classes</a></li>
-</ul>
-<div>
-<script type="text/javascript"><!--
-  allClassesLink = document.getElementById("allclasses_navbar_bottom");
-  if(window==top) {
-    allClassesLink.style.display = "block";
-  }
-  else {
-    allClassesLink.style.display = "none";
-  }
-  //-->
-</script>
-</div>
-<div>
-<ul class="subNavList">
-<li>Summary:&nbsp;</li>
-<li>Nested&nbsp;|&nbsp;</li>
-<li><a href="#enum.constant.summary">Enum Constants</a>&nbsp;|&nbsp;</li>
-<li>Field&nbsp;|&nbsp;</li>
-<li><a href="#method.summary">Method</a></li>
-</ul>
-<ul class="subNavList">
-<li>Detail:&nbsp;</li>
-<li><a href="#enum.constant.detail">Enum Constants</a>&nbsp;|&nbsp;</li>
-<li>Field&nbsp;|&nbsp;</li>
-<li><a href="#method.detail">Method</a></li>
-</ul>
-</div>
-<a name="skip.navbar.bottom">
-<!--   -->
-</a></div>
-<!-- ======== END OF BOTTOM NAVBAR ======= -->
-</body>
-</html>
diff -ruN lab1/javadoc/simpledb/Predicate.html lab3/javadoc/simpledb/Predicate.html
--- lab1/javadoc/simpledb/Predicate.html	2016-11-02 22:06:58.000000000 -0500
+++ lab3/javadoc/simpledb/Predicate.html	1969-12-31 18:00:00.000000000 -0600
@@ -1,438 +0,0 @@
-<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
-<!-- NewPage -->
-<html lang="en">
-<head>
-<!-- Generated by javadoc (1.8.0_25) on Thu Oct 27 13:16:23 CDT 2016 -->
-<title>Predicate</title>
-<meta name="date" content="2016-10-27">
-<link rel="stylesheet" type="text/css" href="../stylesheet.css" title="Style">
-<script type="text/javascript" src="../script.js"></script>
-</head>
-<body>
-<script type="text/javascript"><!--
-    try {
-        if (location.href.indexOf('is-external=true') == -1) {
-            parent.document.title="Predicate";
-        }
-    }
-    catch(err) {
-    }
-//-->
-var methods = {"i0":10,"i1":10,"i2":10,"i3":10,"i4":10};
-var tabs = {65535:["t0","All Methods"],2:["t2","Instance Methods"],8:["t4","Concrete Methods"]};
-var altColor = "altColor";
-var rowColor = "rowColor";
-var tableTab = "tableTab";
-var activeTableTab = "activeTableTab";
-</script>
-<noscript>
-<div>JavaScript is disabled on your browser.</div>
-</noscript>
-<!-- ========= START OF TOP NAVBAR ======= -->
-<div class="topNav"><a name="navbar.top">
-<!--   -->
-</a>
-<div class="skipNav"><a href="#skip.navbar.top" title="Skip navigation links">Skip navigation links</a></div>
-<a name="navbar.top.firstrow">
-<!--   -->
-</a>
-<ul class="navList" title="Navigation">
-<li><a href="../simpledb/package-summary.html">Package</a></li>
-<li class="navBarCell1Rev">Class</li>
-<li><a href="package-tree.html">Tree</a></li>
-<li><a href="../deprecated-list.html">Deprecated</a></li>
-<li><a href="../index-all.html">Index</a></li>
-<li><a href="../help-doc.html">Help</a></li>
-</ul>
-</div>
-<div class="subNav">
-<ul class="navList">
-<li><a href="../simpledb/Permissions.html" title="class in simpledb"><span class="typeNameLink">Prev&nbsp;Class</span></a></li>
-<li><a href="../simpledb/Predicate.Op.html" title="enum in simpledb"><span class="typeNameLink">Next&nbsp;Class</span></a></li>
-</ul>
-<ul class="navList">
-<li><a href="../index.html?simpledb/Predicate.html" target="_top">Frames</a></li>
-<li><a href="Predicate.html" target="_top">No&nbsp;Frames</a></li>
-</ul>
-<ul class="navList" id="allclasses_navbar_top">
-<li><a href="../allclasses-noframe.html">All&nbsp;Classes</a></li>
-</ul>
-<div>
-<script type="text/javascript"><!--
-  allClassesLink = document.getElementById("allclasses_navbar_top");
-  if(window==top) {
-    allClassesLink.style.display = "block";
-  }
-  else {
-    allClassesLink.style.display = "none";
-  }
-  //-->
-</script>
-</div>
-<div>
-<ul class="subNavList">
-<li>Summary:&nbsp;</li>
-<li><a href="#nested.class.summary">Nested</a>&nbsp;|&nbsp;</li>
-<li><a href="#field.summary">Field</a>&nbsp;|&nbsp;</li>
-<li><a href="#constructor.summary">Constr</a>&nbsp;|&nbsp;</li>
-<li><a href="#method.summary">Method</a></li>
-</ul>
-<ul class="subNavList">
-<li>Detail:&nbsp;</li>
-<li><a href="#field.detail">Field</a>&nbsp;|&nbsp;</li>
-<li><a href="#constructor.detail">Constr</a>&nbsp;|&nbsp;</li>
-<li><a href="#method.detail">Method</a></li>
-</ul>
-</div>
-<a name="skip.navbar.top">
-<!--   -->
-</a></div>
-<!-- ========= END OF TOP NAVBAR ========= -->
-<!-- ======== START OF CLASS DATA ======== -->
-<div class="header">
-<div class="subTitle">simpledb</div>
-<h2 title="Class Predicate" class="title">Class Predicate</h2>
-</div>
-<div class="contentContainer">
-<ul class="inheritance">
-<li>java.lang.Object</li>
-<li>
-<ul class="inheritance">
-<li>simpledb.Predicate</li>
-</ul>
-</li>
-</ul>
-<div class="description">
-<ul class="blockList">
-<li class="blockList">
-<dl>
-<dt>All Implemented Interfaces:</dt>
-<dd>java.io.Serializable</dd>
-</dl>
-<hr>
-<br>
-<pre>public class <span class="typeNameLabel">Predicate</span>
-extends java.lang.Object
-implements java.io.Serializable</pre>
-<div class="block">Predicate compares tuples to a specified Field value.</div>
-<dl>
-<dt><span class="seeLabel">See Also:</span></dt>
-<dd><a href="../serialized-form.html#simpledb.Predicate">Serialized Form</a></dd>
-</dl>
-</li>
-</ul>
-</div>
-<div class="summary">
-<ul class="blockList">
-<li class="blockList">
-<!-- ======== NESTED CLASS SUMMARY ======== -->
-<ul class="blockList">
-<li class="blockList"><a name="nested.class.summary">
-<!--   -->
-</a>
-<h3>Nested Class Summary</h3>
-<table class="memberSummary" border="0" cellpadding="3" cellspacing="0" summary="Nested Class Summary table, listing nested classes, and an explanation">
-<caption><span>Nested Classes</span><span class="tabEnd">&nbsp;</span></caption>
-<tr>
-<th class="colFirst" scope="col">Modifier and Type</th>
-<th class="colLast" scope="col">Class and Description</th>
-</tr>
-<tr class="altColor">
-<td class="colFirst"><code>static class&nbsp;</code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/Predicate.Op.html" title="enum in simpledb">Predicate.Op</a></span></code>
-<div class="block">Constants used for return codes in Field.compare</div>
-</td>
-</tr>
-</table>
-</li>
-</ul>
-<!-- =========== FIELD SUMMARY =========== -->
-<ul class="blockList">
-<li class="blockList"><a name="field.summary">
-<!--   -->
-</a>
-<h3>Field Summary</h3>
-<table class="memberSummary" border="0" cellpadding="3" cellspacing="0" summary="Field Summary table, listing fields, and an explanation">
-<caption><span>Fields</span><span class="tabEnd">&nbsp;</span></caption>
-<tr>
-<th class="colFirst" scope="col">Modifier and Type</th>
-<th class="colLast" scope="col">Field and Description</th>
-</tr>
-<tr class="altColor">
-<td class="colFirst"><code>private static long</code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/Predicate.html#serialVersionUID">serialVersionUID</a></span></code>&nbsp;</td>
-</tr>
-</table>
-</li>
-</ul>
-<!-- ======== CONSTRUCTOR SUMMARY ======== -->
-<ul class="blockList">
-<li class="blockList"><a name="constructor.summary">
-<!--   -->
-</a>
-<h3>Constructor Summary</h3>
-<table class="memberSummary" border="0" cellpadding="3" cellspacing="0" summary="Constructor Summary table, listing constructors, and an explanation">
-<caption><span>Constructors</span><span class="tabEnd">&nbsp;</span></caption>
-<tr>
-<th class="colOne" scope="col">Constructor and Description</th>
-</tr>
-<tr class="altColor">
-<td class="colOne"><code><span class="memberNameLink"><a href="../simpledb/Predicate.html#Predicate-int-simpledb.Predicate.Op-simpledb.Field-">Predicate</a></span>(int&nbsp;field,
-         <a href="../simpledb/Predicate.Op.html" title="enum in simpledb">Predicate.Op</a>&nbsp;op,
-         <a href="../simpledb/Field.html" title="interface in simpledb">Field</a>&nbsp;operand)</code>
-<div class="block">Constructor.</div>
-</td>
-</tr>
-</table>
-</li>
-</ul>
-<!-- ========== METHOD SUMMARY =========== -->
-<ul class="blockList">
-<li class="blockList"><a name="method.summary">
-<!--   -->
-</a>
-<h3>Method Summary</h3>
-<table class="memberSummary" border="0" cellpadding="3" cellspacing="0" summary="Method Summary table, listing methods, and an explanation">
-<caption><span id="t0" class="activeTableTab"><span>All Methods</span><span class="tabEnd">&nbsp;</span></span><span id="t2" class="tableTab"><span><a href="javascript:show(2);">Instance Methods</a></span><span class="tabEnd">&nbsp;</span></span><span id="t4" class="tableTab"><span><a href="javascript:show(8);">Concrete Methods</a></span><span class="tabEnd">&nbsp;</span></span></caption>
-<tr>
-<th class="colFirst" scope="col">Modifier and Type</th>
-<th class="colLast" scope="col">Method and Description</th>
-</tr>
-<tr id="i0" class="altColor">
-<td class="colFirst"><code>boolean</code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/Predicate.html#filter-simpledb.Tuple-">filter</a></span>(<a href="../simpledb/Tuple.html" title="class in simpledb">Tuple</a>&nbsp;t)</code>
-<div class="block">Compares the field number of t specified in the constructor to the
- operand field specified in the constructor using the operator specific in
- the constructor.</div>
-</td>
-</tr>
-<tr id="i1" class="rowColor">
-<td class="colFirst"><code>int</code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/Predicate.html#getField--">getField</a></span>()</code>&nbsp;</td>
-</tr>
-<tr id="i2" class="altColor">
-<td class="colFirst"><code><a href="../simpledb/Predicate.Op.html" title="enum in simpledb">Predicate.Op</a></code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/Predicate.html#getOp--">getOp</a></span>()</code>&nbsp;</td>
-</tr>
-<tr id="i3" class="rowColor">
-<td class="colFirst"><code><a href="../simpledb/Field.html" title="interface in simpledb">Field</a></code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/Predicate.html#getOperand--">getOperand</a></span>()</code>&nbsp;</td>
-</tr>
-<tr id="i4" class="altColor">
-<td class="colFirst"><code>java.lang.String</code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/Predicate.html#toString--">toString</a></span>()</code>
-<div class="block">Returns something useful, like "f = field_id op = op_string operand =
- operand_string</div>
-</td>
-</tr>
-</table>
-<ul class="blockList">
-<li class="blockList"><a name="methods.inherited.from.class.java.lang.Object">
-<!--   -->
-</a>
-<h3>Methods inherited from class&nbsp;java.lang.Object</h3>
-<code>clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait</code></li>
-</ul>
-</li>
-</ul>
-</li>
-</ul>
-</div>
-<div class="details">
-<ul class="blockList">
-<li class="blockList">
-<!-- ============ FIELD DETAIL =========== -->
-<ul class="blockList">
-<li class="blockList"><a name="field.detail">
-<!--   -->
-</a>
-<h3>Field Detail</h3>
-<a name="serialVersionUID">
-<!--   -->
-</a>
-<ul class="blockListLast">
-<li class="blockList">
-<h4>serialVersionUID</h4>
-<pre>private static final&nbsp;long serialVersionUID</pre>
-<dl>
-<dt><span class="seeLabel">See Also:</span></dt>
-<dd><a href="../constant-values.html#simpledb.Predicate.serialVersionUID">Constant Field Values</a></dd>
-</dl>
-</li>
-</ul>
-</li>
-</ul>
-<!-- ========= CONSTRUCTOR DETAIL ======== -->
-<ul class="blockList">
-<li class="blockList"><a name="constructor.detail">
-<!--   -->
-</a>
-<h3>Constructor Detail</h3>
-<a name="Predicate-int-simpledb.Predicate.Op-simpledb.Field-">
-<!--   -->
-</a>
-<ul class="blockListLast">
-<li class="blockList">
-<h4>Predicate</h4>
-<pre>public&nbsp;Predicate(int&nbsp;field,
-                 <a href="../simpledb/Predicate.Op.html" title="enum in simpledb">Predicate.Op</a>&nbsp;op,
-                 <a href="../simpledb/Field.html" title="interface in simpledb">Field</a>&nbsp;operand)</pre>
-<div class="block">Constructor.</div>
-<dl>
-<dt><span class="paramLabel">Parameters:</span></dt>
-<dd><code>field</code> - field number of passed in tuples to compare against.</dd>
-<dd><code>op</code> - operation to use for comparison</dd>
-<dd><code>operand</code> - field value to compare passed in tuples to</dd>
-</dl>
-</li>
-</ul>
-</li>
-</ul>
-<!-- ============ METHOD DETAIL ========== -->
-<ul class="blockList">
-<li class="blockList"><a name="method.detail">
-<!--   -->
-</a>
-<h3>Method Detail</h3>
-<a name="getField--">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>getField</h4>
-<pre>public&nbsp;int&nbsp;getField()</pre>
-<dl>
-<dt><span class="returnLabel">Returns:</span></dt>
-<dd>the field number</dd>
-</dl>
-</li>
-</ul>
-<a name="getOp--">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>getOp</h4>
-<pre>public&nbsp;<a href="../simpledb/Predicate.Op.html" title="enum in simpledb">Predicate.Op</a>&nbsp;getOp()</pre>
-<dl>
-<dt><span class="returnLabel">Returns:</span></dt>
-<dd>the operator</dd>
-</dl>
-</li>
-</ul>
-<a name="getOperand--">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>getOperand</h4>
-<pre>public&nbsp;<a href="../simpledb/Field.html" title="interface in simpledb">Field</a>&nbsp;getOperand()</pre>
-<dl>
-<dt><span class="returnLabel">Returns:</span></dt>
-<dd>the operand</dd>
-</dl>
-</li>
-</ul>
-<a name="filter-simpledb.Tuple-">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>filter</h4>
-<pre>public&nbsp;boolean&nbsp;filter(<a href="../simpledb/Tuple.html" title="class in simpledb">Tuple</a>&nbsp;t)</pre>
-<div class="block">Compares the field number of t specified in the constructor to the
- operand field specified in the constructor using the operator specific in
- the constructor. The comparison can be made through Field's compare
- method.</div>
-<dl>
-<dt><span class="paramLabel">Parameters:</span></dt>
-<dd><code>t</code> - The tuple to compare against</dd>
-<dt><span class="returnLabel">Returns:</span></dt>
-<dd>true if the comparison is true, false otherwise.</dd>
-</dl>
-</li>
-</ul>
-<a name="toString--">
-<!--   -->
-</a>
-<ul class="blockListLast">
-<li class="blockList">
-<h4>toString</h4>
-<pre>public&nbsp;java.lang.String&nbsp;toString()</pre>
-<div class="block">Returns something useful, like "f = field_id op = op_string operand =
- operand_string</div>
-<dl>
-<dt><span class="overrideSpecifyLabel">Overrides:</span></dt>
-<dd><code>toString</code>&nbsp;in class&nbsp;<code>java.lang.Object</code></dd>
-</dl>
-</li>
-</ul>
-</li>
-</ul>
-</li>
-</ul>
-</div>
-</div>
-<!-- ========= END OF CLASS DATA ========= -->
-<!-- ======= START OF BOTTOM NAVBAR ====== -->
-<div class="bottomNav"><a name="navbar.bottom">
-<!--   -->
-</a>
-<div class="skipNav"><a href="#skip.navbar.bottom" title="Skip navigation links">Skip navigation links</a></div>
-<a name="navbar.bottom.firstrow">
-<!--   -->
-</a>
-<ul class="navList" title="Navigation">
-<li><a href="../simpledb/package-summary.html">Package</a></li>
-<li class="navBarCell1Rev">Class</li>
-<li><a href="package-tree.html">Tree</a></li>
-<li><a href="../deprecated-list.html">Deprecated</a></li>
-<li><a href="../index-all.html">Index</a></li>
-<li><a href="../help-doc.html">Help</a></li>
-</ul>
-</div>
-<div class="subNav">
-<ul class="navList">
-<li><a href="../simpledb/Permissions.html" title="class in simpledb"><span class="typeNameLink">Prev&nbsp;Class</span></a></li>
-<li><a href="../simpledb/Predicate.Op.html" title="enum in simpledb"><span class="typeNameLink">Next&nbsp;Class</span></a></li>
-</ul>
-<ul class="navList">
-<li><a href="../index.html?simpledb/Predicate.html" target="_top">Frames</a></li>
-<li><a href="Predicate.html" target="_top">No&nbsp;Frames</a></li>
-</ul>
-<ul class="navList" id="allclasses_navbar_bottom">
-<li><a href="../allclasses-noframe.html">All&nbsp;Classes</a></li>
-</ul>
-<div>
-<script type="text/javascript"><!--
-  allClassesLink = document.getElementById("allclasses_navbar_bottom");
-  if(window==top) {
-    allClassesLink.style.display = "block";
-  }
-  else {
-    allClassesLink.style.display = "none";
-  }
-  //-->
-</script>
-</div>
-<div>
-<ul class="subNavList">
-<li>Summary:&nbsp;</li>
-<li><a href="#nested.class.summary">Nested</a>&nbsp;|&nbsp;</li>
-<li><a href="#field.summary">Field</a>&nbsp;|&nbsp;</li>
-<li><a href="#constructor.summary">Constr</a>&nbsp;|&nbsp;</li>
-<li><a href="#method.summary">Method</a></li>
-</ul>
-<ul class="subNavList">
-<li>Detail:&nbsp;</li>
-<li><a href="#field.detail">Field</a>&nbsp;|&nbsp;</li>
-<li><a href="#constructor.detail">Constr</a>&nbsp;|&nbsp;</li>
-<li><a href="#method.detail">Method</a></li>
-</ul>
-</div>
-<a name="skip.navbar.bottom">
-<!--   -->
-</a></div>
-<!-- ======== END OF BOTTOM NAVBAR ======= -->
-</body>
-</html>
diff -ruN lab1/javadoc/simpledb/RecordId.html lab3/javadoc/simpledb/RecordId.html
--- lab1/javadoc/simpledb/RecordId.html	2016-11-02 22:06:58.000000000 -0500
+++ lab3/javadoc/simpledb/RecordId.html	1969-12-31 18:00:00.000000000 -0600
@@ -1,399 +0,0 @@
-<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
-<!-- NewPage -->
-<html lang="en">
-<head>
-<!-- Generated by javadoc (1.8.0_25) on Thu Oct 27 13:16:24 CDT 2016 -->
-<title>RecordId</title>
-<meta name="date" content="2016-10-27">
-<link rel="stylesheet" type="text/css" href="../stylesheet.css" title="Style">
-<script type="text/javascript" src="../script.js"></script>
-</head>
-<body>
-<script type="text/javascript"><!--
-    try {
-        if (location.href.indexOf('is-external=true') == -1) {
-            parent.document.title="RecordId";
-        }
-    }
-    catch(err) {
-    }
-//-->
-var methods = {"i0":10,"i1":10,"i2":10,"i3":10};
-var tabs = {65535:["t0","All Methods"],2:["t2","Instance Methods"],8:["t4","Concrete Methods"]};
-var altColor = "altColor";
-var rowColor = "rowColor";
-var tableTab = "tableTab";
-var activeTableTab = "activeTableTab";
-</script>
-<noscript>
-<div>JavaScript is disabled on your browser.</div>
-</noscript>
-<!-- ========= START OF TOP NAVBAR ======= -->
-<div class="topNav"><a name="navbar.top">
-<!--   -->
-</a>
-<div class="skipNav"><a href="#skip.navbar.top" title="Skip navigation links">Skip navigation links</a></div>
-<a name="navbar.top.firstrow">
-<!--   -->
-</a>
-<ul class="navList" title="Navigation">
-<li><a href="../simpledb/package-summary.html">Package</a></li>
-<li class="navBarCell1Rev">Class</li>
-<li><a href="package-tree.html">Tree</a></li>
-<li><a href="../deprecated-list.html">Deprecated</a></li>
-<li><a href="../index-all.html">Index</a></li>
-<li><a href="../help-doc.html">Help</a></li>
-</ul>
-</div>
-<div class="subNav">
-<ul class="navList">
-<li><a href="../simpledb/Predicate.Op.html" title="enum in simpledb"><span class="typeNameLink">Prev&nbsp;Class</span></a></li>
-<li><a href="../simpledb/SeqScan.html" title="class in simpledb"><span class="typeNameLink">Next&nbsp;Class</span></a></li>
-</ul>
-<ul class="navList">
-<li><a href="../index.html?simpledb/RecordId.html" target="_top">Frames</a></li>
-<li><a href="RecordId.html" target="_top">No&nbsp;Frames</a></li>
-</ul>
-<ul class="navList" id="allclasses_navbar_top">
-<li><a href="../allclasses-noframe.html">All&nbsp;Classes</a></li>
-</ul>
-<div>
-<script type="text/javascript"><!--
-  allClassesLink = document.getElementById("allclasses_navbar_top");
-  if(window==top) {
-    allClassesLink.style.display = "block";
-  }
-  else {
-    allClassesLink.style.display = "none";
-  }
-  //-->
-</script>
-</div>
-<div>
-<ul class="subNavList">
-<li>Summary:&nbsp;</li>
-<li>Nested&nbsp;|&nbsp;</li>
-<li><a href="#field.summary">Field</a>&nbsp;|&nbsp;</li>
-<li><a href="#constructor.summary">Constr</a>&nbsp;|&nbsp;</li>
-<li><a href="#method.summary">Method</a></li>
-</ul>
-<ul class="subNavList">
-<li>Detail:&nbsp;</li>
-<li><a href="#field.detail">Field</a>&nbsp;|&nbsp;</li>
-<li><a href="#constructor.detail">Constr</a>&nbsp;|&nbsp;</li>
-<li><a href="#method.detail">Method</a></li>
-</ul>
-</div>
-<a name="skip.navbar.top">
-<!--   -->
-</a></div>
-<!-- ========= END OF TOP NAVBAR ========= -->
-<!-- ======== START OF CLASS DATA ======== -->
-<div class="header">
-<div class="subTitle">simpledb</div>
-<h2 title="Class RecordId" class="title">Class RecordId</h2>
-</div>
-<div class="contentContainer">
-<ul class="inheritance">
-<li>java.lang.Object</li>
-<li>
-<ul class="inheritance">
-<li>simpledb.RecordId</li>
-</ul>
-</li>
-</ul>
-<div class="description">
-<ul class="blockList">
-<li class="blockList">
-<dl>
-<dt>All Implemented Interfaces:</dt>
-<dd>java.io.Serializable</dd>
-</dl>
-<hr>
-<br>
-<pre>public class <span class="typeNameLabel">RecordId</span>
-extends java.lang.Object
-implements java.io.Serializable</pre>
-<div class="block">A RecordId is a reference to a specific tuple on a specific page of a
- specific table.</div>
-<dl>
-<dt><span class="seeLabel">See Also:</span></dt>
-<dd><a href="../serialized-form.html#simpledb.RecordId">Serialized Form</a></dd>
-</dl>
-</li>
-</ul>
-</div>
-<div class="summary">
-<ul class="blockList">
-<li class="blockList">
-<!-- =========== FIELD SUMMARY =========== -->
-<ul class="blockList">
-<li class="blockList"><a name="field.summary">
-<!--   -->
-</a>
-<h3>Field Summary</h3>
-<table class="memberSummary" border="0" cellpadding="3" cellspacing="0" summary="Field Summary table, listing fields, and an explanation">
-<caption><span>Fields</span><span class="tabEnd">&nbsp;</span></caption>
-<tr>
-<th class="colFirst" scope="col">Modifier and Type</th>
-<th class="colLast" scope="col">Field and Description</th>
-</tr>
-<tr class="altColor">
-<td class="colFirst"><code>private static long</code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/RecordId.html#serialVersionUID">serialVersionUID</a></span></code>&nbsp;</td>
-</tr>
-</table>
-</li>
-</ul>
-<!-- ======== CONSTRUCTOR SUMMARY ======== -->
-<ul class="blockList">
-<li class="blockList"><a name="constructor.summary">
-<!--   -->
-</a>
-<h3>Constructor Summary</h3>
-<table class="memberSummary" border="0" cellpadding="3" cellspacing="0" summary="Constructor Summary table, listing constructors, and an explanation">
-<caption><span>Constructors</span><span class="tabEnd">&nbsp;</span></caption>
-<tr>
-<th class="colOne" scope="col">Constructor and Description</th>
-</tr>
-<tr class="altColor">
-<td class="colOne"><code><span class="memberNameLink"><a href="../simpledb/RecordId.html#RecordId-simpledb.PageId-int-">RecordId</a></span>(<a href="../simpledb/PageId.html" title="interface in simpledb">PageId</a>&nbsp;pid,
-        int&nbsp;tupleno)</code>
-<div class="block">Creates a new RecordId referring to the specified PageId and tuple
- number.</div>
-</td>
-</tr>
-</table>
-</li>
-</ul>
-<!-- ========== METHOD SUMMARY =========== -->
-<ul class="blockList">
-<li class="blockList"><a name="method.summary">
-<!--   -->
-</a>
-<h3>Method Summary</h3>
-<table class="memberSummary" border="0" cellpadding="3" cellspacing="0" summary="Method Summary table, listing methods, and an explanation">
-<caption><span id="t0" class="activeTableTab"><span>All Methods</span><span class="tabEnd">&nbsp;</span></span><span id="t2" class="tableTab"><span><a href="javascript:show(2);">Instance Methods</a></span><span class="tabEnd">&nbsp;</span></span><span id="t4" class="tableTab"><span><a href="javascript:show(8);">Concrete Methods</a></span><span class="tabEnd">&nbsp;</span></span></caption>
-<tr>
-<th class="colFirst" scope="col">Modifier and Type</th>
-<th class="colLast" scope="col">Method and Description</th>
-</tr>
-<tr id="i0" class="altColor">
-<td class="colFirst"><code>boolean</code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/RecordId.html#equals-java.lang.Object-">equals</a></span>(java.lang.Object&nbsp;o)</code>
-<div class="block">Two RecordId objects are considered equal if they represent the same
- tuple.</div>
-</td>
-</tr>
-<tr id="i1" class="rowColor">
-<td class="colFirst"><code><a href="../simpledb/PageId.html" title="interface in simpledb">PageId</a></code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/RecordId.html#getPageId--">getPageId</a></span>()</code>&nbsp;</td>
-</tr>
-<tr id="i2" class="altColor">
-<td class="colFirst"><code>int</code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/RecordId.html#hashCode--">hashCode</a></span>()</code>
-<div class="block">You should implement the hashCode() so that two equal RecordId instances
- (with respect to equals()) have the same hashCode().</div>
-</td>
-</tr>
-<tr id="i3" class="rowColor">
-<td class="colFirst"><code>int</code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/RecordId.html#tupleno--">tupleno</a></span>()</code>&nbsp;</td>
-</tr>
-</table>
-<ul class="blockList">
-<li class="blockList"><a name="methods.inherited.from.class.java.lang.Object">
-<!--   -->
-</a>
-<h3>Methods inherited from class&nbsp;java.lang.Object</h3>
-<code>clone, finalize, getClass, notify, notifyAll, toString, wait, wait, wait</code></li>
-</ul>
-</li>
-</ul>
-</li>
-</ul>
-</div>
-<div class="details">
-<ul class="blockList">
-<li class="blockList">
-<!-- ============ FIELD DETAIL =========== -->
-<ul class="blockList">
-<li class="blockList"><a name="field.detail">
-<!--   -->
-</a>
-<h3>Field Detail</h3>
-<a name="serialVersionUID">
-<!--   -->
-</a>
-<ul class="blockListLast">
-<li class="blockList">
-<h4>serialVersionUID</h4>
-<pre>private static final&nbsp;long serialVersionUID</pre>
-<dl>
-<dt><span class="seeLabel">See Also:</span></dt>
-<dd><a href="../constant-values.html#simpledb.RecordId.serialVersionUID">Constant Field Values</a></dd>
-</dl>
-</li>
-</ul>
-</li>
-</ul>
-<!-- ========= CONSTRUCTOR DETAIL ======== -->
-<ul class="blockList">
-<li class="blockList"><a name="constructor.detail">
-<!--   -->
-</a>
-<h3>Constructor Detail</h3>
-<a name="RecordId-simpledb.PageId-int-">
-<!--   -->
-</a>
-<ul class="blockListLast">
-<li class="blockList">
-<h4>RecordId</h4>
-<pre>public&nbsp;RecordId(<a href="../simpledb/PageId.html" title="interface in simpledb">PageId</a>&nbsp;pid,
-                int&nbsp;tupleno)</pre>
-<div class="block">Creates a new RecordId referring to the specified PageId and tuple
- number.</div>
-<dl>
-<dt><span class="paramLabel">Parameters:</span></dt>
-<dd><code>pid</code> - the pageid of the page on which the tuple resides</dd>
-<dd><code>tupleno</code> - the tuple number within the page.</dd>
-</dl>
-</li>
-</ul>
-</li>
-</ul>
-<!-- ============ METHOD DETAIL ========== -->
-<ul class="blockList">
-<li class="blockList"><a name="method.detail">
-<!--   -->
-</a>
-<h3>Method Detail</h3>
-<a name="tupleno--">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>tupleno</h4>
-<pre>public&nbsp;int&nbsp;tupleno()</pre>
-<dl>
-<dt><span class="returnLabel">Returns:</span></dt>
-<dd>the tuple number this RecordId references.</dd>
-</dl>
-</li>
-</ul>
-<a name="getPageId--">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>getPageId</h4>
-<pre>public&nbsp;<a href="../simpledb/PageId.html" title="interface in simpledb">PageId</a>&nbsp;getPageId()</pre>
-<dl>
-<dt><span class="returnLabel">Returns:</span></dt>
-<dd>the page id this RecordId references.</dd>
-</dl>
-</li>
-</ul>
-<a name="equals-java.lang.Object-">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>equals</h4>
-<pre>public&nbsp;boolean&nbsp;equals(java.lang.Object&nbsp;o)</pre>
-<div class="block">Two RecordId objects are considered equal if they represent the same
- tuple.</div>
-<dl>
-<dt><span class="overrideSpecifyLabel">Overrides:</span></dt>
-<dd><code>equals</code>&nbsp;in class&nbsp;<code>java.lang.Object</code></dd>
-<dt><span class="returnLabel">Returns:</span></dt>
-<dd>True if this and o represent the same tuple</dd>
-</dl>
-</li>
-</ul>
-<a name="hashCode--">
-<!--   -->
-</a>
-<ul class="blockListLast">
-<li class="blockList">
-<h4>hashCode</h4>
-<pre>public&nbsp;int&nbsp;hashCode()</pre>
-<div class="block">You should implement the hashCode() so that two equal RecordId instances
- (with respect to equals()) have the same hashCode().</div>
-<dl>
-<dt><span class="overrideSpecifyLabel">Overrides:</span></dt>
-<dd><code>hashCode</code>&nbsp;in class&nbsp;<code>java.lang.Object</code></dd>
-<dt><span class="returnLabel">Returns:</span></dt>
-<dd>An int that is the same for equal RecordId objects.</dd>
-</dl>
-</li>
-</ul>
-</li>
-</ul>
-</li>
-</ul>
-</div>
-</div>
-<!-- ========= END OF CLASS DATA ========= -->
-<!-- ======= START OF BOTTOM NAVBAR ====== -->
-<div class="bottomNav"><a name="navbar.bottom">
-<!--   -->
-</a>
-<div class="skipNav"><a href="#skip.navbar.bottom" title="Skip navigation links">Skip navigation links</a></div>
-<a name="navbar.bottom.firstrow">
-<!--   -->
-</a>
-<ul class="navList" title="Navigation">
-<li><a href="../simpledb/package-summary.html">Package</a></li>
-<li class="navBarCell1Rev">Class</li>
-<li><a href="package-tree.html">Tree</a></li>
-<li><a href="../deprecated-list.html">Deprecated</a></li>
-<li><a href="../index-all.html">Index</a></li>
-<li><a href="../help-doc.html">Help</a></li>
-</ul>
-</div>
-<div class="subNav">
-<ul class="navList">
-<li><a href="../simpledb/Predicate.Op.html" title="enum in simpledb"><span class="typeNameLink">Prev&nbsp;Class</span></a></li>
-<li><a href="../simpledb/SeqScan.html" title="class in simpledb"><span class="typeNameLink">Next&nbsp;Class</span></a></li>
-</ul>
-<ul class="navList">
-<li><a href="../index.html?simpledb/RecordId.html" target="_top">Frames</a></li>
-<li><a href="RecordId.html" target="_top">No&nbsp;Frames</a></li>
-</ul>
-<ul class="navList" id="allclasses_navbar_bottom">
-<li><a href="../allclasses-noframe.html">All&nbsp;Classes</a></li>
-</ul>
-<div>
-<script type="text/javascript"><!--
-  allClassesLink = document.getElementById("allclasses_navbar_bottom");
-  if(window==top) {
-    allClassesLink.style.display = "block";
-  }
-  else {
-    allClassesLink.style.display = "none";
-  }
-  //-->
-</script>
-</div>
-<div>
-<ul class="subNavList">
-<li>Summary:&nbsp;</li>
-<li>Nested&nbsp;|&nbsp;</li>
-<li><a href="#field.summary">Field</a>&nbsp;|&nbsp;</li>
-<li><a href="#constructor.summary">Constr</a>&nbsp;|&nbsp;</li>
-<li><a href="#method.summary">Method</a></li>
-</ul>
-<ul class="subNavList">
-<li>Detail:&nbsp;</li>
-<li><a href="#field.detail">Field</a>&nbsp;|&nbsp;</li>
-<li><a href="#constructor.detail">Constr</a>&nbsp;|&nbsp;</li>
-<li><a href="#method.detail">Method</a></li>
-</ul>
-</div>
-<a name="skip.navbar.bottom">
-<!--   -->
-</a></div>
-<!-- ======== END OF BOTTOM NAVBAR ======= -->
-</body>
-</html>
diff -ruN lab1/javadoc/simpledb/SeqScan.html lab3/javadoc/simpledb/SeqScan.html
--- lab1/javadoc/simpledb/SeqScan.html	2016-11-02 22:06:58.000000000 -0500
+++ lab3/javadoc/simpledb/SeqScan.html	1969-12-31 18:00:00.000000000 -0600
@@ -1,566 +0,0 @@
-<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
-<!-- NewPage -->
-<html lang="en">
-<head>
-<!-- Generated by javadoc (1.8.0_25) on Thu Oct 27 13:16:24 CDT 2016 -->
-<title>SeqScan</title>
-<meta name="date" content="2016-10-27">
-<link rel="stylesheet" type="text/css" href="../stylesheet.css" title="Style">
-<script type="text/javascript" src="../script.js"></script>
-</head>
-<body>
-<script type="text/javascript"><!--
-    try {
-        if (location.href.indexOf('is-external=true') == -1) {
-            parent.document.title="SeqScan";
-        }
-    }
-    catch(err) {
-    }
-//-->
-var methods = {"i0":10,"i1":10,"i2":10,"i3":10,"i4":10,"i5":10,"i6":10,"i7":10,"i8":10};
-var tabs = {65535:["t0","All Methods"],2:["t2","Instance Methods"],8:["t4","Concrete Methods"]};
-var altColor = "altColor";
-var rowColor = "rowColor";
-var tableTab = "tableTab";
-var activeTableTab = "activeTableTab";
-</script>
-<noscript>
-<div>JavaScript is disabled on your browser.</div>
-</noscript>
-<!-- ========= START OF TOP NAVBAR ======= -->
-<div class="topNav"><a name="navbar.top">
-<!--   -->
-</a>
-<div class="skipNav"><a href="#skip.navbar.top" title="Skip navigation links">Skip navigation links</a></div>
-<a name="navbar.top.firstrow">
-<!--   -->
-</a>
-<ul class="navList" title="Navigation">
-<li><a href="../simpledb/package-summary.html">Package</a></li>
-<li class="navBarCell1Rev">Class</li>
-<li><a href="package-tree.html">Tree</a></li>
-<li><a href="../deprecated-list.html">Deprecated</a></li>
-<li><a href="../index-all.html">Index</a></li>
-<li><a href="../help-doc.html">Help</a></li>
-</ul>
-</div>
-<div class="subNav">
-<ul class="navList">
-<li><a href="../simpledb/RecordId.html" title="class in simpledb"><span class="typeNameLink">Prev&nbsp;Class</span></a></li>
-<li><a href="../simpledb/SimpleDb.html" title="class in simpledb"><span class="typeNameLink">Next&nbsp;Class</span></a></li>
-</ul>
-<ul class="navList">
-<li><a href="../index.html?simpledb/SeqScan.html" target="_top">Frames</a></li>
-<li><a href="SeqScan.html" target="_top">No&nbsp;Frames</a></li>
-</ul>
-<ul class="navList" id="allclasses_navbar_top">
-<li><a href="../allclasses-noframe.html">All&nbsp;Classes</a></li>
-</ul>
-<div>
-<script type="text/javascript"><!--
-  allClassesLink = document.getElementById("allclasses_navbar_top");
-  if(window==top) {
-    allClassesLink.style.display = "block";
-  }
-  else {
-    allClassesLink.style.display = "none";
-  }
-  //-->
-</script>
-</div>
-<div>
-<ul class="subNavList">
-<li>Summary:&nbsp;</li>
-<li>Nested&nbsp;|&nbsp;</li>
-<li><a href="#field.summary">Field</a>&nbsp;|&nbsp;</li>
-<li><a href="#constructor.summary">Constr</a>&nbsp;|&nbsp;</li>
-<li><a href="#method.summary">Method</a></li>
-</ul>
-<ul class="subNavList">
-<li>Detail:&nbsp;</li>
-<li><a href="#field.detail">Field</a>&nbsp;|&nbsp;</li>
-<li><a href="#constructor.detail">Constr</a>&nbsp;|&nbsp;</li>
-<li><a href="#method.detail">Method</a></li>
-</ul>
-</div>
-<a name="skip.navbar.top">
-<!--   -->
-</a></div>
-<!-- ========= END OF TOP NAVBAR ========= -->
-<!-- ======== START OF CLASS DATA ======== -->
-<div class="header">
-<div class="subTitle">simpledb</div>
-<h2 title="Class SeqScan" class="title">Class SeqScan</h2>
-</div>
-<div class="contentContainer">
-<ul class="inheritance">
-<li>java.lang.Object</li>
-<li>
-<ul class="inheritance">
-<li>simpledb.SeqScan</li>
-</ul>
-</li>
-</ul>
-<div class="description">
-<ul class="blockList">
-<li class="blockList">
-<dl>
-<dt>All Implemented Interfaces:</dt>
-<dd>java.io.Serializable, <a href="../simpledb/DbIterator.html" title="interface in simpledb">DbIterator</a></dd>
-</dl>
-<hr>
-<br>
-<pre>public class <span class="typeNameLabel">SeqScan</span>
-extends java.lang.Object
-implements <a href="../simpledb/DbIterator.html" title="interface in simpledb">DbIterator</a></pre>
-<div class="block">SeqScan is an implementation of a sequential scan access method that reads
- each tuple of a table in no particular order (e.g., as they are laid out on
- disk).</div>
-<dl>
-<dt><span class="seeLabel">See Also:</span></dt>
-<dd><a href="../serialized-form.html#simpledb.SeqScan">Serialized Form</a></dd>
-</dl>
-</li>
-</ul>
-</div>
-<div class="summary">
-<ul class="blockList">
-<li class="blockList">
-<!-- =========== FIELD SUMMARY =========== -->
-<ul class="blockList">
-<li class="blockList"><a name="field.summary">
-<!--   -->
-</a>
-<h3>Field Summary</h3>
-<table class="memberSummary" border="0" cellpadding="3" cellspacing="0" summary="Field Summary table, listing fields, and an explanation">
-<caption><span>Fields</span><span class="tabEnd">&nbsp;</span></caption>
-<tr>
-<th class="colFirst" scope="col">Modifier and Type</th>
-<th class="colLast" scope="col">Field and Description</th>
-</tr>
-<tr class="altColor">
-<td class="colFirst"><code>private static long</code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/SeqScan.html#serialVersionUID">serialVersionUID</a></span></code>&nbsp;</td>
-</tr>
-</table>
-</li>
-</ul>
-<!-- ======== CONSTRUCTOR SUMMARY ======== -->
-<ul class="blockList">
-<li class="blockList"><a name="constructor.summary">
-<!--   -->
-</a>
-<h3>Constructor Summary</h3>
-<table class="memberSummary" border="0" cellpadding="3" cellspacing="0" summary="Constructor Summary table, listing constructors, and an explanation">
-<caption><span>Constructors</span><span class="tabEnd">&nbsp;</span></caption>
-<tr>
-<th class="colOne" scope="col">Constructor and Description</th>
-</tr>
-<tr class="altColor">
-<td class="colOne"><code><span class="memberNameLink"><a href="../simpledb/SeqScan.html#SeqScan-simpledb.TransactionId-int-">SeqScan</a></span>(<a href="../simpledb/TransactionId.html" title="class in simpledb">TransactionId</a>&nbsp;tid,
-       int&nbsp;tableid)</code>&nbsp;</td>
-</tr>
-<tr class="rowColor">
-<td class="colOne"><code><span class="memberNameLink"><a href="../simpledb/SeqScan.html#SeqScan-simpledb.TransactionId-int-java.lang.String-">SeqScan</a></span>(<a href="../simpledb/TransactionId.html" title="class in simpledb">TransactionId</a>&nbsp;tid,
-       int&nbsp;tableid,
-       java.lang.String&nbsp;tableAlias)</code>
-<div class="block">Creates a sequential scan over the specified table as a part of the
- specified transaction.</div>
-</td>
-</tr>
-</table>
-</li>
-</ul>
-<!-- ========== METHOD SUMMARY =========== -->
-<ul class="blockList">
-<li class="blockList"><a name="method.summary">
-<!--   -->
-</a>
-<h3>Method Summary</h3>
-<table class="memberSummary" border="0" cellpadding="3" cellspacing="0" summary="Method Summary table, listing methods, and an explanation">
-<caption><span id="t0" class="activeTableTab"><span>All Methods</span><span class="tabEnd">&nbsp;</span></span><span id="t2" class="tableTab"><span><a href="javascript:show(2);">Instance Methods</a></span><span class="tabEnd">&nbsp;</span></span><span id="t4" class="tableTab"><span><a href="javascript:show(8);">Concrete Methods</a></span><span class="tabEnd">&nbsp;</span></span></caption>
-<tr>
-<th class="colFirst" scope="col">Modifier and Type</th>
-<th class="colLast" scope="col">Method and Description</th>
-</tr>
-<tr id="i0" class="altColor">
-<td class="colFirst"><code>void</code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/SeqScan.html#close--">close</a></span>()</code>
-<div class="block">Closes the iterator.</div>
-</td>
-</tr>
-<tr id="i1" class="rowColor">
-<td class="colFirst"><code>java.lang.String</code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/SeqScan.html#getAlias--">getAlias</a></span>()</code>&nbsp;</td>
-</tr>
-<tr id="i2" class="altColor">
-<td class="colFirst"><code>java.lang.String</code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/SeqScan.html#getTableName--">getTableName</a></span>()</code>&nbsp;</td>
-</tr>
-<tr id="i3" class="rowColor">
-<td class="colFirst"><code><a href="../simpledb/TupleDesc.html" title="class in simpledb">TupleDesc</a></code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/SeqScan.html#getTupleDesc--">getTupleDesc</a></span>()</code>
-<div class="block">Returns the TupleDesc with field names from the underlying HeapFile,
- prefixed with the tableAlias string from the constructor.</div>
-</td>
-</tr>
-<tr id="i4" class="altColor">
-<td class="colFirst"><code>boolean</code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/SeqScan.html#hasNext--">hasNext</a></span>()</code>
-<div class="block">Returns true if the iterator has more tuples.</div>
-</td>
-</tr>
-<tr id="i5" class="rowColor">
-<td class="colFirst"><code><a href="../simpledb/Tuple.html" title="class in simpledb">Tuple</a></code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/SeqScan.html#next--">next</a></span>()</code>
-<div class="block">Returns the next tuple from the operator (typically implementing by reading
- from a child operator or an access method).</div>
-</td>
-</tr>
-<tr id="i6" class="altColor">
-<td class="colFirst"><code>void</code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/SeqScan.html#open--">open</a></span>()</code>
-<div class="block">Opens the iterator.</div>
-</td>
-</tr>
-<tr id="i7" class="rowColor">
-<td class="colFirst"><code>void</code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/SeqScan.html#reset-int-java.lang.String-">reset</a></span>(int&nbsp;tableid,
-     java.lang.String&nbsp;tableAlias)</code>
-<div class="block">Reset the tableid, and tableAlias of this operator.</div>
-</td>
-</tr>
-<tr id="i8" class="altColor">
-<td class="colFirst"><code>void</code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/SeqScan.html#rewind--">rewind</a></span>()</code>
-<div class="block">Resets the iterator to the start.</div>
-</td>
-</tr>
-</table>
-<ul class="blockList">
-<li class="blockList"><a name="methods.inherited.from.class.java.lang.Object">
-<!--   -->
-</a>
-<h3>Methods inherited from class&nbsp;java.lang.Object</h3>
-<code>clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait</code></li>
-</ul>
-</li>
-</ul>
-</li>
-</ul>
-</div>
-<div class="details">
-<ul class="blockList">
-<li class="blockList">
-<!-- ============ FIELD DETAIL =========== -->
-<ul class="blockList">
-<li class="blockList"><a name="field.detail">
-<!--   -->
-</a>
-<h3>Field Detail</h3>
-<a name="serialVersionUID">
-<!--   -->
-</a>
-<ul class="blockListLast">
-<li class="blockList">
-<h4>serialVersionUID</h4>
-<pre>private static final&nbsp;long serialVersionUID</pre>
-<dl>
-<dt><span class="seeLabel">See Also:</span></dt>
-<dd><a href="../constant-values.html#simpledb.SeqScan.serialVersionUID">Constant Field Values</a></dd>
-</dl>
-</li>
-</ul>
-</li>
-</ul>
-<!-- ========= CONSTRUCTOR DETAIL ======== -->
-<ul class="blockList">
-<li class="blockList"><a name="constructor.detail">
-<!--   -->
-</a>
-<h3>Constructor Detail</h3>
-<a name="SeqScan-simpledb.TransactionId-int-java.lang.String-">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>SeqScan</h4>
-<pre>public&nbsp;SeqScan(<a href="../simpledb/TransactionId.html" title="class in simpledb">TransactionId</a>&nbsp;tid,
-               int&nbsp;tableid,
-               java.lang.String&nbsp;tableAlias)</pre>
-<div class="block">Creates a sequential scan over the specified table as a part of the
- specified transaction.</div>
-<dl>
-<dt><span class="paramLabel">Parameters:</span></dt>
-<dd><code>tid</code> - The transaction this scan is running as a part of.</dd>
-<dd><code>tableid</code> - the table to scan.</dd>
-<dd><code>tableAlias</code> - the alias of this table (needed by the parser); the returned
-            tupleDesc should have fields with name tableAlias.fieldName
-            (note: this class is not responsible for handling a case where
-            tableAlias or fieldName are null. It shouldn't crash if they
-            are, but the resulting name can be null.fieldName,
-            tableAlias.null, or null.null).</dd>
-</dl>
-</li>
-</ul>
-<a name="SeqScan-simpledb.TransactionId-int-">
-<!--   -->
-</a>
-<ul class="blockListLast">
-<li class="blockList">
-<h4>SeqScan</h4>
-<pre>public&nbsp;SeqScan(<a href="../simpledb/TransactionId.html" title="class in simpledb">TransactionId</a>&nbsp;tid,
-               int&nbsp;tableid)</pre>
-</li>
-</ul>
-</li>
-</ul>
-<!-- ============ METHOD DETAIL ========== -->
-<ul class="blockList">
-<li class="blockList"><a name="method.detail">
-<!--   -->
-</a>
-<h3>Method Detail</h3>
-<a name="getTableName--">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>getTableName</h4>
-<pre>public&nbsp;java.lang.String&nbsp;getTableName()</pre>
-<dl>
-<dt><span class="returnLabel">Returns:</span></dt>
-<dd>return the table name of the table the operator scans. This should
-       be the actual name of the table in the catalog of the database</dd>
-</dl>
-</li>
-</ul>
-<a name="getAlias--">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>getAlias</h4>
-<pre>public&nbsp;java.lang.String&nbsp;getAlias()</pre>
-<dl>
-<dt><span class="returnLabel">Returns:</span></dt>
-<dd>Return the alias of the table this operator scans.</dd>
-</dl>
-</li>
-</ul>
-<a name="reset-int-java.lang.String-">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>reset</h4>
-<pre>public&nbsp;void&nbsp;reset(int&nbsp;tableid,
-                  java.lang.String&nbsp;tableAlias)</pre>
-<div class="block">Reset the tableid, and tableAlias of this operator.</div>
-<dl>
-<dt><span class="paramLabel">Parameters:</span></dt>
-<dd><code>tableid</code> - the table to scan.</dd>
-<dd><code>tableAlias</code> - the alias of this table (needed by the parser); the returned
-            tupleDesc should have fields with name tableAlias.fieldName
-            (note: this class is not responsible for handling a case where
-            tableAlias or fieldName are null. It shouldn't crash if they
-            are, but the resulting name can be null.fieldName,
-            tableAlias.null, or null.null).</dd>
-</dl>
-</li>
-</ul>
-<a name="open--">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>open</h4>
-<pre>public&nbsp;void&nbsp;open()
-          throws <a href="../simpledb/DbException.html" title="class in simpledb">DbException</a>,
-                 <a href="../simpledb/TransactionAbortedException.html" title="class in simpledb">TransactionAbortedException</a></pre>
-<div class="block"><span class="descfrmTypeLabel">Description copied from interface:&nbsp;<code><a href="../simpledb/DbIterator.html#open--">DbIterator</a></code></span></div>
-<div class="block">Opens the iterator. This must be called before any of the other methods.</div>
-<dl>
-<dt><span class="overrideSpecifyLabel">Specified by:</span></dt>
-<dd><code><a href="../simpledb/DbIterator.html#open--">open</a></code>&nbsp;in interface&nbsp;<code><a href="../simpledb/DbIterator.html" title="interface in simpledb">DbIterator</a></code></dd>
-<dt><span class="throwsLabel">Throws:</span></dt>
-<dd><code><a href="../simpledb/DbException.html" title="class in simpledb">DbException</a></code> - when there are problems opening/accessing the database.</dd>
-<dd><code><a href="../simpledb/TransactionAbortedException.html" title="class in simpledb">TransactionAbortedException</a></code></dd>
-</dl>
-</li>
-</ul>
-<a name="getTupleDesc--">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>getTupleDesc</h4>
-<pre>public&nbsp;<a href="../simpledb/TupleDesc.html" title="class in simpledb">TupleDesc</a>&nbsp;getTupleDesc()</pre>
-<div class="block">Returns the TupleDesc with field names from the underlying HeapFile,
- prefixed with the tableAlias string from the constructor. This prefix
- becomes useful when joining tables containing a field(s) with the same
- name.</div>
-<dl>
-<dt><span class="overrideSpecifyLabel">Specified by:</span></dt>
-<dd><code><a href="../simpledb/DbIterator.html#getTupleDesc--">getTupleDesc</a></code>&nbsp;in interface&nbsp;<code><a href="../simpledb/DbIterator.html" title="interface in simpledb">DbIterator</a></code></dd>
-<dt><span class="returnLabel">Returns:</span></dt>
-<dd>the TupleDesc with field names from the underlying HeapFile,
-         prefixed with the tableAlias string from the constructor.</dd>
-</dl>
-</li>
-</ul>
-<a name="hasNext--">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>hasNext</h4>
-<pre>public&nbsp;boolean&nbsp;hasNext()
-                throws <a href="../simpledb/TransactionAbortedException.html" title="class in simpledb">TransactionAbortedException</a>,
-                       <a href="../simpledb/DbException.html" title="class in simpledb">DbException</a></pre>
-<div class="block"><span class="descfrmTypeLabel">Description copied from interface:&nbsp;<code><a href="../simpledb/DbIterator.html#hasNext--">DbIterator</a></code></span></div>
-<div class="block">Returns true if the iterator has more tuples.</div>
-<dl>
-<dt><span class="overrideSpecifyLabel">Specified by:</span></dt>
-<dd><code><a href="../simpledb/DbIterator.html#hasNext--">hasNext</a></code>&nbsp;in interface&nbsp;<code><a href="../simpledb/DbIterator.html" title="interface in simpledb">DbIterator</a></code></dd>
-<dt><span class="returnLabel">Returns:</span></dt>
-<dd>true f the iterator has more tuples.</dd>
-<dt><span class="throwsLabel">Throws:</span></dt>
-<dd><code><a href="../simpledb/TransactionAbortedException.html" title="class in simpledb">TransactionAbortedException</a></code></dd>
-<dd><code><a href="../simpledb/DbException.html" title="class in simpledb">DbException</a></code></dd>
-</dl>
-</li>
-</ul>
-<a name="next--">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>next</h4>
-<pre>public&nbsp;<a href="../simpledb/Tuple.html" title="class in simpledb">Tuple</a>&nbsp;next()
-           throws java.util.NoSuchElementException,
-                  <a href="../simpledb/TransactionAbortedException.html" title="class in simpledb">TransactionAbortedException</a>,
-                  <a href="../simpledb/DbException.html" title="class in simpledb">DbException</a></pre>
-<div class="block"><span class="descfrmTypeLabel">Description copied from interface:&nbsp;<code><a href="../simpledb/DbIterator.html#next--">DbIterator</a></code></span></div>
-<div class="block">Returns the next tuple from the operator (typically implementing by reading
- from a child operator or an access method).</div>
-<dl>
-<dt><span class="overrideSpecifyLabel">Specified by:</span></dt>
-<dd><code><a href="../simpledb/DbIterator.html#next--">next</a></code>&nbsp;in interface&nbsp;<code><a href="../simpledb/DbIterator.html" title="interface in simpledb">DbIterator</a></code></dd>
-<dt><span class="returnLabel">Returns:</span></dt>
-<dd>the next tuple in the iteration.</dd>
-<dt><span class="throwsLabel">Throws:</span></dt>
-<dd><code>java.util.NoSuchElementException</code> - if there are no more tuples.</dd>
-<dd><code><a href="../simpledb/TransactionAbortedException.html" title="class in simpledb">TransactionAbortedException</a></code></dd>
-<dd><code><a href="../simpledb/DbException.html" title="class in simpledb">DbException</a></code></dd>
-</dl>
-</li>
-</ul>
-<a name="close--">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>close</h4>
-<pre>public&nbsp;void&nbsp;close()</pre>
-<div class="block"><span class="descfrmTypeLabel">Description copied from interface:&nbsp;<code><a href="../simpledb/DbIterator.html#close--">DbIterator</a></code></span></div>
-<div class="block">Closes the iterator. When the iterator is closed, calling next(),
- hasNext(), or rewind() should fail by throwing IllegalStateException.</div>
-<dl>
-<dt><span class="overrideSpecifyLabel">Specified by:</span></dt>
-<dd><code><a href="../simpledb/DbIterator.html#close--">close</a></code>&nbsp;in interface&nbsp;<code><a href="../simpledb/DbIterator.html" title="interface in simpledb">DbIterator</a></code></dd>
-</dl>
-</li>
-</ul>
-<a name="rewind--">
-<!--   -->
-</a>
-<ul class="blockListLast">
-<li class="blockList">
-<h4>rewind</h4>
-<pre>public&nbsp;void&nbsp;rewind()
-            throws <a href="../simpledb/DbException.html" title="class in simpledb">DbException</a>,
-                   java.util.NoSuchElementException,
-                   <a href="../simpledb/TransactionAbortedException.html" title="class in simpledb">TransactionAbortedException</a></pre>
-<div class="block"><span class="descfrmTypeLabel">Description copied from interface:&nbsp;<code><a href="../simpledb/DbIterator.html#rewind--">DbIterator</a></code></span></div>
-<div class="block">Resets the iterator to the start.</div>
-<dl>
-<dt><span class="overrideSpecifyLabel">Specified by:</span></dt>
-<dd><code><a href="../simpledb/DbIterator.html#rewind--">rewind</a></code>&nbsp;in interface&nbsp;<code><a href="../simpledb/DbIterator.html" title="interface in simpledb">DbIterator</a></code></dd>
-<dt><span class="throwsLabel">Throws:</span></dt>
-<dd><code><a href="../simpledb/DbException.html" title="class in simpledb">DbException</a></code> - when rewind is unsupported.</dd>
-<dd><code>java.util.NoSuchElementException</code></dd>
-<dd><code><a href="../simpledb/TransactionAbortedException.html" title="class in simpledb">TransactionAbortedException</a></code></dd>
-</dl>
-</li>
-</ul>
-</li>
-</ul>
-</li>
-</ul>
-</div>
-</div>
-<!-- ========= END OF CLASS DATA ========= -->
-<!-- ======= START OF BOTTOM NAVBAR ====== -->
-<div class="bottomNav"><a name="navbar.bottom">
-<!--   -->
-</a>
-<div class="skipNav"><a href="#skip.navbar.bottom" title="Skip navigation links">Skip navigation links</a></div>
-<a name="navbar.bottom.firstrow">
-<!--   -->
-</a>
-<ul class="navList" title="Navigation">
-<li><a href="../simpledb/package-summary.html">Package</a></li>
-<li class="navBarCell1Rev">Class</li>
-<li><a href="package-tree.html">Tree</a></li>
-<li><a href="../deprecated-list.html">Deprecated</a></li>
-<li><a href="../index-all.html">Index</a></li>
-<li><a href="../help-doc.html">Help</a></li>
-</ul>
-</div>
-<div class="subNav">
-<ul class="navList">
-<li><a href="../simpledb/RecordId.html" title="class in simpledb"><span class="typeNameLink">Prev&nbsp;Class</span></a></li>
-<li><a href="../simpledb/SimpleDb.html" title="class in simpledb"><span class="typeNameLink">Next&nbsp;Class</span></a></li>
-</ul>
-<ul class="navList">
-<li><a href="../index.html?simpledb/SeqScan.html" target="_top">Frames</a></li>
-<li><a href="SeqScan.html" target="_top">No&nbsp;Frames</a></li>
-</ul>
-<ul class="navList" id="allclasses_navbar_bottom">
-<li><a href="../allclasses-noframe.html">All&nbsp;Classes</a></li>
-</ul>
-<div>
-<script type="text/javascript"><!--
-  allClassesLink = document.getElementById("allclasses_navbar_bottom");
-  if(window==top) {
-    allClassesLink.style.display = "block";
-  }
-  else {
-    allClassesLink.style.display = "none";
-  }
-  //-->
-</script>
-</div>
-<div>
-<ul class="subNavList">
-<li>Summary:&nbsp;</li>
-<li>Nested&nbsp;|&nbsp;</li>
-<li><a href="#field.summary">Field</a>&nbsp;|&nbsp;</li>
-<li><a href="#constructor.summary">Constr</a>&nbsp;|&nbsp;</li>
-<li><a href="#method.summary">Method</a></li>
-</ul>
-<ul class="subNavList">
-<li>Detail:&nbsp;</li>
-<li><a href="#field.detail">Field</a>&nbsp;|&nbsp;</li>
-<li><a href="#constructor.detail">Constr</a>&nbsp;|&nbsp;</li>
-<li><a href="#method.detail">Method</a></li>
-</ul>
-</div>
-<a name="skip.navbar.bottom">
-<!--   -->
-</a></div>
-<!-- ======== END OF BOTTOM NAVBAR ======= -->
-</body>
-</html>
diff -ruN lab1/javadoc/simpledb/SimpleDb.html lab3/javadoc/simpledb/SimpleDb.html
--- lab1/javadoc/simpledb/SimpleDb.html	2016-11-02 22:06:58.000000000 -0500
+++ lab3/javadoc/simpledb/SimpleDb.html	1969-12-31 18:00:00.000000000 -0600
@@ -1,276 +0,0 @@
-<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
-<!-- NewPage -->
-<html lang="en">
-<head>
-<!-- Generated by javadoc (1.8.0_25) on Thu Oct 27 13:16:24 CDT 2016 -->
-<title>SimpleDb</title>
-<meta name="date" content="2016-10-27">
-<link rel="stylesheet" type="text/css" href="../stylesheet.css" title="Style">
-<script type="text/javascript" src="../script.js"></script>
-</head>
-<body>
-<script type="text/javascript"><!--
-    try {
-        if (location.href.indexOf('is-external=true') == -1) {
-            parent.document.title="SimpleDb";
-        }
-    }
-    catch(err) {
-    }
-//-->
-var methods = {"i0":9};
-var tabs = {65535:["t0","All Methods"],1:["t1","Static Methods"],8:["t4","Concrete Methods"]};
-var altColor = "altColor";
-var rowColor = "rowColor";
-var tableTab = "tableTab";
-var activeTableTab = "activeTableTab";
-</script>
-<noscript>
-<div>JavaScript is disabled on your browser.</div>
-</noscript>
-<!-- ========= START OF TOP NAVBAR ======= -->
-<div class="topNav"><a name="navbar.top">
-<!--   -->
-</a>
-<div class="skipNav"><a href="#skip.navbar.top" title="Skip navigation links">Skip navigation links</a></div>
-<a name="navbar.top.firstrow">
-<!--   -->
-</a>
-<ul class="navList" title="Navigation">
-<li><a href="../simpledb/package-summary.html">Package</a></li>
-<li class="navBarCell1Rev">Class</li>
-<li><a href="package-tree.html">Tree</a></li>
-<li><a href="../deprecated-list.html">Deprecated</a></li>
-<li><a href="../index-all.html">Index</a></li>
-<li><a href="../help-doc.html">Help</a></li>
-</ul>
-</div>
-<div class="subNav">
-<ul class="navList">
-<li><a href="../simpledb/SeqScan.html" title="class in simpledb"><span class="typeNameLink">Prev&nbsp;Class</span></a></li>
-<li><a href="../simpledb/StringField.html" title="class in simpledb"><span class="typeNameLink">Next&nbsp;Class</span></a></li>
-</ul>
-<ul class="navList">
-<li><a href="../index.html?simpledb/SimpleDb.html" target="_top">Frames</a></li>
-<li><a href="SimpleDb.html" target="_top">No&nbsp;Frames</a></li>
-</ul>
-<ul class="navList" id="allclasses_navbar_top">
-<li><a href="../allclasses-noframe.html">All&nbsp;Classes</a></li>
-</ul>
-<div>
-<script type="text/javascript"><!--
-  allClassesLink = document.getElementById("allclasses_navbar_top");
-  if(window==top) {
-    allClassesLink.style.display = "block";
-  }
-  else {
-    allClassesLink.style.display = "none";
-  }
-  //-->
-</script>
-</div>
-<div>
-<ul class="subNavList">
-<li>Summary:&nbsp;</li>
-<li>Nested&nbsp;|&nbsp;</li>
-<li>Field&nbsp;|&nbsp;</li>
-<li><a href="#constructor.summary">Constr</a>&nbsp;|&nbsp;</li>
-<li><a href="#method.summary">Method</a></li>
-</ul>
-<ul class="subNavList">
-<li>Detail:&nbsp;</li>
-<li>Field&nbsp;|&nbsp;</li>
-<li><a href="#constructor.detail">Constr</a>&nbsp;|&nbsp;</li>
-<li><a href="#method.detail">Method</a></li>
-</ul>
-</div>
-<a name="skip.navbar.top">
-<!--   -->
-</a></div>
-<!-- ========= END OF TOP NAVBAR ========= -->
-<!-- ======== START OF CLASS DATA ======== -->
-<div class="header">
-<div class="subTitle">simpledb</div>
-<h2 title="Class SimpleDb" class="title">Class SimpleDb</h2>
-</div>
-<div class="contentContainer">
-<ul class="inheritance">
-<li>java.lang.Object</li>
-<li>
-<ul class="inheritance">
-<li>simpledb.SimpleDb</li>
-</ul>
-</li>
-</ul>
-<div class="description">
-<ul class="blockList">
-<li class="blockList">
-<hr>
-<br>
-<pre>public class <span class="typeNameLabel">SimpleDb</span>
-extends java.lang.Object</pre>
-</li>
-</ul>
-</div>
-<div class="summary">
-<ul class="blockList">
-<li class="blockList">
-<!-- ======== CONSTRUCTOR SUMMARY ======== -->
-<ul class="blockList">
-<li class="blockList"><a name="constructor.summary">
-<!--   -->
-</a>
-<h3>Constructor Summary</h3>
-<table class="memberSummary" border="0" cellpadding="3" cellspacing="0" summary="Constructor Summary table, listing constructors, and an explanation">
-<caption><span>Constructors</span><span class="tabEnd">&nbsp;</span></caption>
-<tr>
-<th class="colOne" scope="col">Constructor and Description</th>
-</tr>
-<tr class="altColor">
-<td class="colOne"><code><span class="memberNameLink"><a href="../simpledb/SimpleDb.html#SimpleDb--">SimpleDb</a></span>()</code>&nbsp;</td>
-</tr>
-</table>
-</li>
-</ul>
-<!-- ========== METHOD SUMMARY =========== -->
-<ul class="blockList">
-<li class="blockList"><a name="method.summary">
-<!--   -->
-</a>
-<h3>Method Summary</h3>
-<table class="memberSummary" border="0" cellpadding="3" cellspacing="0" summary="Method Summary table, listing methods, and an explanation">
-<caption><span id="t0" class="activeTableTab"><span>All Methods</span><span class="tabEnd">&nbsp;</span></span><span id="t1" class="tableTab"><span><a href="javascript:show(1);">Static Methods</a></span><span class="tabEnd">&nbsp;</span></span><span id="t4" class="tableTab"><span><a href="javascript:show(8);">Concrete Methods</a></span><span class="tabEnd">&nbsp;</span></span></caption>
-<tr>
-<th class="colFirst" scope="col">Modifier and Type</th>
-<th class="colLast" scope="col">Method and Description</th>
-</tr>
-<tr id="i0" class="altColor">
-<td class="colFirst"><code>static void</code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/SimpleDb.html#main-java.lang.String:A-">main</a></span>(java.lang.String[]&nbsp;args)</code>&nbsp;</td>
-</tr>
-</table>
-<ul class="blockList">
-<li class="blockList"><a name="methods.inherited.from.class.java.lang.Object">
-<!--   -->
-</a>
-<h3>Methods inherited from class&nbsp;java.lang.Object</h3>
-<code>clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait</code></li>
-</ul>
-</li>
-</ul>
-</li>
-</ul>
-</div>
-<div class="details">
-<ul class="blockList">
-<li class="blockList">
-<!-- ========= CONSTRUCTOR DETAIL ======== -->
-<ul class="blockList">
-<li class="blockList"><a name="constructor.detail">
-<!--   -->
-</a>
-<h3>Constructor Detail</h3>
-<a name="SimpleDb--">
-<!--   -->
-</a>
-<ul class="blockListLast">
-<li class="blockList">
-<h4>SimpleDb</h4>
-<pre>public&nbsp;SimpleDb()</pre>
-</li>
-</ul>
-</li>
-</ul>
-<!-- ============ METHOD DETAIL ========== -->
-<ul class="blockList">
-<li class="blockList"><a name="method.detail">
-<!--   -->
-</a>
-<h3>Method Detail</h3>
-<a name="main-java.lang.String:A-">
-<!--   -->
-</a>
-<ul class="blockListLast">
-<li class="blockList">
-<h4>main</h4>
-<pre>public static&nbsp;void&nbsp;main(java.lang.String[]&nbsp;args)
-                 throws <a href="../simpledb/DbException.html" title="class in simpledb">DbException</a>,
-                        <a href="../simpledb/TransactionAbortedException.html" title="class in simpledb">TransactionAbortedException</a>,
-                        java.io.IOException</pre>
-<dl>
-<dt><span class="throwsLabel">Throws:</span></dt>
-<dd><code><a href="../simpledb/DbException.html" title="class in simpledb">DbException</a></code></dd>
-<dd><code><a href="../simpledb/TransactionAbortedException.html" title="class in simpledb">TransactionAbortedException</a></code></dd>
-<dd><code>java.io.IOException</code></dd>
-</dl>
-</li>
-</ul>
-</li>
-</ul>
-</li>
-</ul>
-</div>
-</div>
-<!-- ========= END OF CLASS DATA ========= -->
-<!-- ======= START OF BOTTOM NAVBAR ====== -->
-<div class="bottomNav"><a name="navbar.bottom">
-<!--   -->
-</a>
-<div class="skipNav"><a href="#skip.navbar.bottom" title="Skip navigation links">Skip navigation links</a></div>
-<a name="navbar.bottom.firstrow">
-<!--   -->
-</a>
-<ul class="navList" title="Navigation">
-<li><a href="../simpledb/package-summary.html">Package</a></li>
-<li class="navBarCell1Rev">Class</li>
-<li><a href="package-tree.html">Tree</a></li>
-<li><a href="../deprecated-list.html">Deprecated</a></li>
-<li><a href="../index-all.html">Index</a></li>
-<li><a href="../help-doc.html">Help</a></li>
-</ul>
-</div>
-<div class="subNav">
-<ul class="navList">
-<li><a href="../simpledb/SeqScan.html" title="class in simpledb"><span class="typeNameLink">Prev&nbsp;Class</span></a></li>
-<li><a href="../simpledb/StringField.html" title="class in simpledb"><span class="typeNameLink">Next&nbsp;Class</span></a></li>
-</ul>
-<ul class="navList">
-<li><a href="../index.html?simpledb/SimpleDb.html" target="_top">Frames</a></li>
-<li><a href="SimpleDb.html" target="_top">No&nbsp;Frames</a></li>
-</ul>
-<ul class="navList" id="allclasses_navbar_bottom">
-<li><a href="../allclasses-noframe.html">All&nbsp;Classes</a></li>
-</ul>
-<div>
-<script type="text/javascript"><!--
-  allClassesLink = document.getElementById("allclasses_navbar_bottom");
-  if(window==top) {
-    allClassesLink.style.display = "block";
-  }
-  else {
-    allClassesLink.style.display = "none";
-  }
-  //-->
-</script>
-</div>
-<div>
-<ul class="subNavList">
-<li>Summary:&nbsp;</li>
-<li>Nested&nbsp;|&nbsp;</li>
-<li>Field&nbsp;|&nbsp;</li>
-<li><a href="#constructor.summary">Constr</a>&nbsp;|&nbsp;</li>
-<li><a href="#method.summary">Method</a></li>
-</ul>
-<ul class="subNavList">
-<li>Detail:&nbsp;</li>
-<li>Field&nbsp;|&nbsp;</li>
-<li><a href="#constructor.detail">Constr</a>&nbsp;|&nbsp;</li>
-<li><a href="#method.detail">Method</a></li>
-</ul>
-</div>
-<a name="skip.navbar.bottom">
-<!--   -->
-</a></div>
-<!-- ======== END OF BOTTOM NAVBAR ======= -->
-</body>
-</html>
diff -ruN lab1/javadoc/simpledb/StringField.html lab3/javadoc/simpledb/StringField.html
--- lab1/javadoc/simpledb/StringField.html	2016-11-02 22:06:58.000000000 -0500
+++ lab3/javadoc/simpledb/StringField.html	1969-12-31 18:00:00.000000000 -0600
@@ -1,500 +0,0 @@
-<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
-<!-- NewPage -->
-<html lang="en">
-<head>
-<!-- Generated by javadoc (1.8.0_25) on Thu Oct 27 13:16:24 CDT 2016 -->
-<title>StringField</title>
-<meta name="date" content="2016-10-27">
-<link rel="stylesheet" type="text/css" href="../stylesheet.css" title="Style">
-<script type="text/javascript" src="../script.js"></script>
-</head>
-<body>
-<script type="text/javascript"><!--
-    try {
-        if (location.href.indexOf('is-external=true') == -1) {
-            parent.document.title="StringField";
-        }
-    }
-    catch(err) {
-    }
-//-->
-var methods = {"i0":10,"i1":10,"i2":10,"i3":10,"i4":10,"i5":10,"i6":10};
-var tabs = {65535:["t0","All Methods"],2:["t2","Instance Methods"],8:["t4","Concrete Methods"]};
-var altColor = "altColor";
-var rowColor = "rowColor";
-var tableTab = "tableTab";
-var activeTableTab = "activeTableTab";
-</script>
-<noscript>
-<div>JavaScript is disabled on your browser.</div>
-</noscript>
-<!-- ========= START OF TOP NAVBAR ======= -->
-<div class="topNav"><a name="navbar.top">
-<!--   -->
-</a>
-<div class="skipNav"><a href="#skip.navbar.top" title="Skip navigation links">Skip navigation links</a></div>
-<a name="navbar.top.firstrow">
-<!--   -->
-</a>
-<ul class="navList" title="Navigation">
-<li><a href="../simpledb/package-summary.html">Package</a></li>
-<li class="navBarCell1Rev">Class</li>
-<li><a href="package-tree.html">Tree</a></li>
-<li><a href="../deprecated-list.html">Deprecated</a></li>
-<li><a href="../index-all.html">Index</a></li>
-<li><a href="../help-doc.html">Help</a></li>
-</ul>
-</div>
-<div class="subNav">
-<ul class="navList">
-<li><a href="../simpledb/SimpleDb.html" title="class in simpledb"><span class="typeNameLink">Prev&nbsp;Class</span></a></li>
-<li><a href="../simpledb/TransactionAbortedException.html" title="class in simpledb"><span class="typeNameLink">Next&nbsp;Class</span></a></li>
-</ul>
-<ul class="navList">
-<li><a href="../index.html?simpledb/StringField.html" target="_top">Frames</a></li>
-<li><a href="StringField.html" target="_top">No&nbsp;Frames</a></li>
-</ul>
-<ul class="navList" id="allclasses_navbar_top">
-<li><a href="../allclasses-noframe.html">All&nbsp;Classes</a></li>
-</ul>
-<div>
-<script type="text/javascript"><!--
-  allClassesLink = document.getElementById("allclasses_navbar_top");
-  if(window==top) {
-    allClassesLink.style.display = "block";
-  }
-  else {
-    allClassesLink.style.display = "none";
-  }
-  //-->
-</script>
-</div>
-<div>
-<ul class="subNavList">
-<li>Summary:&nbsp;</li>
-<li>Nested&nbsp;|&nbsp;</li>
-<li><a href="#field.summary">Field</a>&nbsp;|&nbsp;</li>
-<li><a href="#constructor.summary">Constr</a>&nbsp;|&nbsp;</li>
-<li><a href="#method.summary">Method</a></li>
-</ul>
-<ul class="subNavList">
-<li>Detail:&nbsp;</li>
-<li><a href="#field.detail">Field</a>&nbsp;|&nbsp;</li>
-<li><a href="#constructor.detail">Constr</a>&nbsp;|&nbsp;</li>
-<li><a href="#method.detail">Method</a></li>
-</ul>
-</div>
-<a name="skip.navbar.top">
-<!--   -->
-</a></div>
-<!-- ========= END OF TOP NAVBAR ========= -->
-<!-- ======== START OF CLASS DATA ======== -->
-<div class="header">
-<div class="subTitle">simpledb</div>
-<h2 title="Class StringField" class="title">Class StringField</h2>
-</div>
-<div class="contentContainer">
-<ul class="inheritance">
-<li>java.lang.Object</li>
-<li>
-<ul class="inheritance">
-<li>simpledb.StringField</li>
-</ul>
-</li>
-</ul>
-<div class="description">
-<ul class="blockList">
-<li class="blockList">
-<dl>
-<dt>All Implemented Interfaces:</dt>
-<dd>java.io.Serializable, <a href="../simpledb/Field.html" title="interface in simpledb">Field</a></dd>
-</dl>
-<hr>
-<br>
-<pre>public class <span class="typeNameLabel">StringField</span>
-extends java.lang.Object
-implements <a href="../simpledb/Field.html" title="interface in simpledb">Field</a></pre>
-<div class="block">Instance of Field that stores a single String of a fixed length.</div>
-<dl>
-<dt><span class="seeLabel">See Also:</span></dt>
-<dd><a href="../serialized-form.html#simpledb.StringField">Serialized Form</a></dd>
-</dl>
-</li>
-</ul>
-</div>
-<div class="summary">
-<ul class="blockList">
-<li class="blockList">
-<!-- =========== FIELD SUMMARY =========== -->
-<ul class="blockList">
-<li class="blockList"><a name="field.summary">
-<!--   -->
-</a>
-<h3>Field Summary</h3>
-<table class="memberSummary" border="0" cellpadding="3" cellspacing="0" summary="Field Summary table, listing fields, and an explanation">
-<caption><span>Fields</span><span class="tabEnd">&nbsp;</span></caption>
-<tr>
-<th class="colFirst" scope="col">Modifier and Type</th>
-<th class="colLast" scope="col">Field and Description</th>
-</tr>
-<tr class="altColor">
-<td class="colFirst"><code>private int</code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/StringField.html#maxSize">maxSize</a></span></code>&nbsp;</td>
-</tr>
-<tr class="rowColor">
-<td class="colFirst"><code>private static long</code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/StringField.html#serialVersionUID">serialVersionUID</a></span></code>&nbsp;</td>
-</tr>
-<tr class="altColor">
-<td class="colFirst"><code>private java.lang.String</code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/StringField.html#value">value</a></span></code>&nbsp;</td>
-</tr>
-</table>
-</li>
-</ul>
-<!-- ======== CONSTRUCTOR SUMMARY ======== -->
-<ul class="blockList">
-<li class="blockList"><a name="constructor.summary">
-<!--   -->
-</a>
-<h3>Constructor Summary</h3>
-<table class="memberSummary" border="0" cellpadding="3" cellspacing="0" summary="Constructor Summary table, listing constructors, and an explanation">
-<caption><span>Constructors</span><span class="tabEnd">&nbsp;</span></caption>
-<tr>
-<th class="colOne" scope="col">Constructor and Description</th>
-</tr>
-<tr class="altColor">
-<td class="colOne"><code><span class="memberNameLink"><a href="../simpledb/StringField.html#StringField-java.lang.String-int-">StringField</a></span>(java.lang.String&nbsp;s,
-           int&nbsp;maxSize)</code>
-<div class="block">Constructor.</div>
-</td>
-</tr>
-</table>
-</li>
-</ul>
-<!-- ========== METHOD SUMMARY =========== -->
-<ul class="blockList">
-<li class="blockList"><a name="method.summary">
-<!--   -->
-</a>
-<h3>Method Summary</h3>
-<table class="memberSummary" border="0" cellpadding="3" cellspacing="0" summary="Method Summary table, listing methods, and an explanation">
-<caption><span id="t0" class="activeTableTab"><span>All Methods</span><span class="tabEnd">&nbsp;</span></span><span id="t2" class="tableTab"><span><a href="javascript:show(2);">Instance Methods</a></span><span class="tabEnd">&nbsp;</span></span><span id="t4" class="tableTab"><span><a href="javascript:show(8);">Concrete Methods</a></span><span class="tabEnd">&nbsp;</span></span></caption>
-<tr>
-<th class="colFirst" scope="col">Modifier and Type</th>
-<th class="colLast" scope="col">Method and Description</th>
-</tr>
-<tr id="i0" class="altColor">
-<td class="colFirst"><code>boolean</code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/StringField.html#compare-simpledb.Predicate.Op-simpledb.Field-">compare</a></span>(<a href="../simpledb/Predicate.Op.html" title="enum in simpledb">Predicate.Op</a>&nbsp;op,
-       <a href="../simpledb/Field.html" title="interface in simpledb">Field</a>&nbsp;val)</code>
-<div class="block">Compare the specified field to the value of this Field.</div>
-</td>
-</tr>
-<tr id="i1" class="rowColor">
-<td class="colFirst"><code>boolean</code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/StringField.html#equals-java.lang.Object-">equals</a></span>(java.lang.Object&nbsp;field)</code>&nbsp;</td>
-</tr>
-<tr id="i2" class="altColor">
-<td class="colFirst"><code><a href="../simpledb/Type.html" title="enum in simpledb">Type</a></code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/StringField.html#getType--">getType</a></span>()</code>
-<div class="block">Returns the type of this field (see <a href="../simpledb/Type.html#INT_TYPE"><code>Type.INT_TYPE</code></a> or <a href="../simpledb/Type.html#STRING_TYPE"><code>Type.STRING_TYPE</code></a></div>
-</td>
-</tr>
-<tr id="i3" class="rowColor">
-<td class="colFirst"><code>java.lang.String</code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/StringField.html#getValue--">getValue</a></span>()</code>&nbsp;</td>
-</tr>
-<tr id="i4" class="altColor">
-<td class="colFirst"><code>int</code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/StringField.html#hashCode--">hashCode</a></span>()</code>
-<div class="block">Hash code.</div>
-</td>
-</tr>
-<tr id="i5" class="rowColor">
-<td class="colFirst"><code>void</code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/StringField.html#serialize-java.io.DataOutputStream-">serialize</a></span>(java.io.DataOutputStream&nbsp;dos)</code>
-<div class="block">Write this string to dos.</div>
-</td>
-</tr>
-<tr id="i6" class="altColor">
-<td class="colFirst"><code>java.lang.String</code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/StringField.html#toString--">toString</a></span>()</code>&nbsp;</td>
-</tr>
-</table>
-<ul class="blockList">
-<li class="blockList"><a name="methods.inherited.from.class.java.lang.Object">
-<!--   -->
-</a>
-<h3>Methods inherited from class&nbsp;java.lang.Object</h3>
-<code>clone, finalize, getClass, notify, notifyAll, wait, wait, wait</code></li>
-</ul>
-</li>
-</ul>
-</li>
-</ul>
-</div>
-<div class="details">
-<ul class="blockList">
-<li class="blockList">
-<!-- ============ FIELD DETAIL =========== -->
-<ul class="blockList">
-<li class="blockList"><a name="field.detail">
-<!--   -->
-</a>
-<h3>Field Detail</h3>
-<a name="serialVersionUID">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>serialVersionUID</h4>
-<pre>private static final&nbsp;long serialVersionUID</pre>
-<dl>
-<dt><span class="seeLabel">See Also:</span></dt>
-<dd><a href="../constant-values.html#simpledb.StringField.serialVersionUID">Constant Field Values</a></dd>
-</dl>
-</li>
-</ul>
-<a name="value">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>value</h4>
-<pre>private final&nbsp;java.lang.String value</pre>
-</li>
-</ul>
-<a name="maxSize">
-<!--   -->
-</a>
-<ul class="blockListLast">
-<li class="blockList">
-<h4>maxSize</h4>
-<pre>private final&nbsp;int maxSize</pre>
-</li>
-</ul>
-</li>
-</ul>
-<!-- ========= CONSTRUCTOR DETAIL ======== -->
-<ul class="blockList">
-<li class="blockList"><a name="constructor.detail">
-<!--   -->
-</a>
-<h3>Constructor Detail</h3>
-<a name="StringField-java.lang.String-int-">
-<!--   -->
-</a>
-<ul class="blockListLast">
-<li class="blockList">
-<h4>StringField</h4>
-<pre>public&nbsp;StringField(java.lang.String&nbsp;s,
-                   int&nbsp;maxSize)</pre>
-<div class="block">Constructor.</div>
-<dl>
-<dt><span class="paramLabel">Parameters:</span></dt>
-<dd><code>s</code> - The value of this field.</dd>
-<dd><code>maxSize</code> - The maximum size of this string</dd>
-</dl>
-</li>
-</ul>
-</li>
-</ul>
-<!-- ============ METHOD DETAIL ========== -->
-<ul class="blockList">
-<li class="blockList"><a name="method.detail">
-<!--   -->
-</a>
-<h3>Method Detail</h3>
-<a name="getValue--">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>getValue</h4>
-<pre>public&nbsp;java.lang.String&nbsp;getValue()</pre>
-</li>
-</ul>
-<a name="toString--">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>toString</h4>
-<pre>public&nbsp;java.lang.String&nbsp;toString()</pre>
-<dl>
-<dt><span class="overrideSpecifyLabel">Specified by:</span></dt>
-<dd><code><a href="../simpledb/Field.html#toString--">toString</a></code>&nbsp;in interface&nbsp;<code><a href="../simpledb/Field.html" title="interface in simpledb">Field</a></code></dd>
-<dt><span class="overrideSpecifyLabel">Overrides:</span></dt>
-<dd><code>toString</code>&nbsp;in class&nbsp;<code>java.lang.Object</code></dd>
-</dl>
-</li>
-</ul>
-<a name="hashCode--">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>hashCode</h4>
-<pre>public&nbsp;int&nbsp;hashCode()</pre>
-<div class="block"><span class="descfrmTypeLabel">Description copied from interface:&nbsp;<code><a href="../simpledb/Field.html#hashCode--">Field</a></code></span></div>
-<div class="block">Hash code.
- Different Field objects representing the same value should probably
- return the same hashCode.</div>
-<dl>
-<dt><span class="overrideSpecifyLabel">Specified by:</span></dt>
-<dd><code><a href="../simpledb/Field.html#hashCode--">hashCode</a></code>&nbsp;in interface&nbsp;<code><a href="../simpledb/Field.html" title="interface in simpledb">Field</a></code></dd>
-<dt><span class="overrideSpecifyLabel">Overrides:</span></dt>
-<dd><code>hashCode</code>&nbsp;in class&nbsp;<code>java.lang.Object</code></dd>
-</dl>
-</li>
-</ul>
-<a name="equals-java.lang.Object-">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>equals</h4>
-<pre>public&nbsp;boolean&nbsp;equals(java.lang.Object&nbsp;field)</pre>
-<dl>
-<dt><span class="overrideSpecifyLabel">Specified by:</span></dt>
-<dd><code><a href="../simpledb/Field.html#equals-java.lang.Object-">equals</a></code>&nbsp;in interface&nbsp;<code><a href="../simpledb/Field.html" title="interface in simpledb">Field</a></code></dd>
-<dt><span class="overrideSpecifyLabel">Overrides:</span></dt>
-<dd><code>equals</code>&nbsp;in class&nbsp;<code>java.lang.Object</code></dd>
-</dl>
-</li>
-</ul>
-<a name="serialize-java.io.DataOutputStream-">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>serialize</h4>
-<pre>public&nbsp;void&nbsp;serialize(java.io.DataOutputStream&nbsp;dos)
-               throws java.io.IOException</pre>
-<div class="block">Write this string to dos. Always writes maxSize + 4 bytes to the passed
- in dos. First four bytes are string length, next bytes are string, with
- remainder padded with 0 to maxSize.</div>
-<dl>
-<dt><span class="overrideSpecifyLabel">Specified by:</span></dt>
-<dd><code><a href="../simpledb/Field.html#serialize-java.io.DataOutputStream-">serialize</a></code>&nbsp;in interface&nbsp;<code><a href="../simpledb/Field.html" title="interface in simpledb">Field</a></code></dd>
-<dt><span class="paramLabel">Parameters:</span></dt>
-<dd><code>dos</code> - Where the string is written</dd>
-<dt><span class="throwsLabel">Throws:</span></dt>
-<dd><code>java.io.IOException</code></dd>
-<dt><span class="seeLabel">See Also:</span></dt>
-<dd><code>DataOutputStream</code></dd>
-</dl>
-</li>
-</ul>
-<a name="compare-simpledb.Predicate.Op-simpledb.Field-">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>compare</h4>
-<pre>public&nbsp;boolean&nbsp;compare(<a href="../simpledb/Predicate.Op.html" title="enum in simpledb">Predicate.Op</a>&nbsp;op,
-                       <a href="../simpledb/Field.html" title="interface in simpledb">Field</a>&nbsp;val)</pre>
-<div class="block">Compare the specified field to the value of this Field. Return semantics
- are as specified by Field.compare</div>
-<dl>
-<dt><span class="overrideSpecifyLabel">Specified by:</span></dt>
-<dd><code><a href="../simpledb/Field.html#compare-simpledb.Predicate.Op-simpledb.Field-">compare</a></code>&nbsp;in interface&nbsp;<code><a href="../simpledb/Field.html" title="interface in simpledb">Field</a></code></dd>
-<dt><span class="paramLabel">Parameters:</span></dt>
-<dd><code>op</code> - The operator</dd>
-<dd><code>val</code> - The value to compare this Field to</dd>
-<dt><span class="returnLabel">Returns:</span></dt>
-<dd>Whether or not the comparison yields true.</dd>
-<dt><span class="throwsLabel">Throws:</span></dt>
-<dd><code>IllegalCastException</code> - if val is not a StringField</dd>
-<dt><span class="seeLabel">See Also:</span></dt>
-<dd><a href="../simpledb/Field.html#compare-simpledb.Predicate.Op-simpledb.Field-"><code>Field.compare(simpledb.Predicate.Op, simpledb.Field)</code></a></dd>
-</dl>
-</li>
-</ul>
-<a name="getType--">
-<!--   -->
-</a>
-<ul class="blockListLast">
-<li class="blockList">
-<h4>getType</h4>
-<pre>public&nbsp;<a href="../simpledb/Type.html" title="enum in simpledb">Type</a>&nbsp;getType()</pre>
-<div class="block"><span class="descfrmTypeLabel">Description copied from interface:&nbsp;<code><a href="../simpledb/Field.html#getType--">Field</a></code></span></div>
-<div class="block">Returns the type of this field (see <a href="../simpledb/Type.html#INT_TYPE"><code>Type.INT_TYPE</code></a> or <a href="../simpledb/Type.html#STRING_TYPE"><code>Type.STRING_TYPE</code></a></div>
-<dl>
-<dt><span class="overrideSpecifyLabel">Specified by:</span></dt>
-<dd><code><a href="../simpledb/Field.html#getType--">getType</a></code>&nbsp;in interface&nbsp;<code><a href="../simpledb/Field.html" title="interface in simpledb">Field</a></code></dd>
-<dt><span class="returnLabel">Returns:</span></dt>
-<dd>the Type for this Field</dd>
-</dl>
-</li>
-</ul>
-</li>
-</ul>
-</li>
-</ul>
-</div>
-</div>
-<!-- ========= END OF CLASS DATA ========= -->
-<!-- ======= START OF BOTTOM NAVBAR ====== -->
-<div class="bottomNav"><a name="navbar.bottom">
-<!--   -->
-</a>
-<div class="skipNav"><a href="#skip.navbar.bottom" title="Skip navigation links">Skip navigation links</a></div>
-<a name="navbar.bottom.firstrow">
-<!--   -->
-</a>
-<ul class="navList" title="Navigation">
-<li><a href="../simpledb/package-summary.html">Package</a></li>
-<li class="navBarCell1Rev">Class</li>
-<li><a href="package-tree.html">Tree</a></li>
-<li><a href="../deprecated-list.html">Deprecated</a></li>
-<li><a href="../index-all.html">Index</a></li>
-<li><a href="../help-doc.html">Help</a></li>
-</ul>
-</div>
-<div class="subNav">
-<ul class="navList">
-<li><a href="../simpledb/SimpleDb.html" title="class in simpledb"><span class="typeNameLink">Prev&nbsp;Class</span></a></li>
-<li><a href="../simpledb/TransactionAbortedException.html" title="class in simpledb"><span class="typeNameLink">Next&nbsp;Class</span></a></li>
-</ul>
-<ul class="navList">
-<li><a href="../index.html?simpledb/StringField.html" target="_top">Frames</a></li>
-<li><a href="StringField.html" target="_top">No&nbsp;Frames</a></li>
-</ul>
-<ul class="navList" id="allclasses_navbar_bottom">
-<li><a href="../allclasses-noframe.html">All&nbsp;Classes</a></li>
-</ul>
-<div>
-<script type="text/javascript"><!--
-  allClassesLink = document.getElementById("allclasses_navbar_bottom");
-  if(window==top) {
-    allClassesLink.style.display = "block";
-  }
-  else {
-    allClassesLink.style.display = "none";
-  }
-  //-->
-</script>
-</div>
-<div>
-<ul class="subNavList">
-<li>Summary:&nbsp;</li>
-<li>Nested&nbsp;|&nbsp;</li>
-<li><a href="#field.summary">Field</a>&nbsp;|&nbsp;</li>
-<li><a href="#constructor.summary">Constr</a>&nbsp;|&nbsp;</li>
-<li><a href="#method.summary">Method</a></li>
-</ul>
-<ul class="subNavList">
-<li>Detail:&nbsp;</li>
-<li><a href="#field.detail">Field</a>&nbsp;|&nbsp;</li>
-<li><a href="#constructor.detail">Constr</a>&nbsp;|&nbsp;</li>
-<li><a href="#method.detail">Method</a></li>
-</ul>
-</div>
-<a name="skip.navbar.bottom">
-<!--   -->
-</a></div>
-<!-- ======== END OF BOTTOM NAVBAR ======= -->
-</body>
-</html>
diff -ruN lab1/javadoc/simpledb/TransactionAbortedException.html lab3/javadoc/simpledb/TransactionAbortedException.html
--- lab1/javadoc/simpledb/TransactionAbortedException.html	2016-11-02 22:06:58.000000000 -0500
+++ lab3/javadoc/simpledb/TransactionAbortedException.html	1969-12-31 18:00:00.000000000 -0600
@@ -1,299 +0,0 @@
-<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
-<!-- NewPage -->
-<html lang="en">
-<head>
-<!-- Generated by javadoc (1.8.0_25) on Thu Oct 27 13:16:24 CDT 2016 -->
-<title>TransactionAbortedException</title>
-<meta name="date" content="2016-10-27">
-<link rel="stylesheet" type="text/css" href="../stylesheet.css" title="Style">
-<script type="text/javascript" src="../script.js"></script>
-</head>
-<body>
-<script type="text/javascript"><!--
-    try {
-        if (location.href.indexOf('is-external=true') == -1) {
-            parent.document.title="TransactionAbortedException";
-        }
-    }
-    catch(err) {
-    }
-//-->
-</script>
-<noscript>
-<div>JavaScript is disabled on your browser.</div>
-</noscript>
-<!-- ========= START OF TOP NAVBAR ======= -->
-<div class="topNav"><a name="navbar.top">
-<!--   -->
-</a>
-<div class="skipNav"><a href="#skip.navbar.top" title="Skip navigation links">Skip navigation links</a></div>
-<a name="navbar.top.firstrow">
-<!--   -->
-</a>
-<ul class="navList" title="Navigation">
-<li><a href="../simpledb/package-summary.html">Package</a></li>
-<li class="navBarCell1Rev">Class</li>
-<li><a href="package-tree.html">Tree</a></li>
-<li><a href="../deprecated-list.html">Deprecated</a></li>
-<li><a href="../index-all.html">Index</a></li>
-<li><a href="../help-doc.html">Help</a></li>
-</ul>
-</div>
-<div class="subNav">
-<ul class="navList">
-<li><a href="../simpledb/StringField.html" title="class in simpledb"><span class="typeNameLink">Prev&nbsp;Class</span></a></li>
-<li><a href="../simpledb/TransactionId.html" title="class in simpledb"><span class="typeNameLink">Next&nbsp;Class</span></a></li>
-</ul>
-<ul class="navList">
-<li><a href="../index.html?simpledb/TransactionAbortedException.html" target="_top">Frames</a></li>
-<li><a href="TransactionAbortedException.html" target="_top">No&nbsp;Frames</a></li>
-</ul>
-<ul class="navList" id="allclasses_navbar_top">
-<li><a href="../allclasses-noframe.html">All&nbsp;Classes</a></li>
-</ul>
-<div>
-<script type="text/javascript"><!--
-  allClassesLink = document.getElementById("allclasses_navbar_top");
-  if(window==top) {
-    allClassesLink.style.display = "block";
-  }
-  else {
-    allClassesLink.style.display = "none";
-  }
-  //-->
-</script>
-</div>
-<div>
-<ul class="subNavList">
-<li>Summary:&nbsp;</li>
-<li>Nested&nbsp;|&nbsp;</li>
-<li><a href="#field.summary">Field</a>&nbsp;|&nbsp;</li>
-<li><a href="#constructor.summary">Constr</a>&nbsp;|&nbsp;</li>
-<li><a href="#methods.inherited.from.class.java.lang.Throwable">Method</a></li>
-</ul>
-<ul class="subNavList">
-<li>Detail:&nbsp;</li>
-<li><a href="#field.detail">Field</a>&nbsp;|&nbsp;</li>
-<li><a href="#constructor.detail">Constr</a>&nbsp;|&nbsp;</li>
-<li>Method</li>
-</ul>
-</div>
-<a name="skip.navbar.top">
-<!--   -->
-</a></div>
-<!-- ========= END OF TOP NAVBAR ========= -->
-<!-- ======== START OF CLASS DATA ======== -->
-<div class="header">
-<div class="subTitle">simpledb</div>
-<h2 title="Class TransactionAbortedException" class="title">Class TransactionAbortedException</h2>
-</div>
-<div class="contentContainer">
-<ul class="inheritance">
-<li>java.lang.Object</li>
-<li>
-<ul class="inheritance">
-<li>java.lang.Throwable</li>
-<li>
-<ul class="inheritance">
-<li>java.lang.Exception</li>
-<li>
-<ul class="inheritance">
-<li>simpledb.TransactionAbortedException</li>
-</ul>
-</li>
-</ul>
-</li>
-</ul>
-</li>
-</ul>
-<div class="description">
-<ul class="blockList">
-<li class="blockList">
-<dl>
-<dt>All Implemented Interfaces:</dt>
-<dd>java.io.Serializable</dd>
-</dl>
-<hr>
-<br>
-<pre>public class <span class="typeNameLabel">TransactionAbortedException</span>
-extends java.lang.Exception</pre>
-<div class="block">Exception that is thrown when a transaction has aborted.</div>
-<dl>
-<dt><span class="seeLabel">See Also:</span></dt>
-<dd><a href="../serialized-form.html#simpledb.TransactionAbortedException">Serialized Form</a></dd>
-</dl>
-</li>
-</ul>
-</div>
-<div class="summary">
-<ul class="blockList">
-<li class="blockList">
-<!-- =========== FIELD SUMMARY =========== -->
-<ul class="blockList">
-<li class="blockList"><a name="field.summary">
-<!--   -->
-</a>
-<h3>Field Summary</h3>
-<table class="memberSummary" border="0" cellpadding="3" cellspacing="0" summary="Field Summary table, listing fields, and an explanation">
-<caption><span>Fields</span><span class="tabEnd">&nbsp;</span></caption>
-<tr>
-<th class="colFirst" scope="col">Modifier and Type</th>
-<th class="colLast" scope="col">Field and Description</th>
-</tr>
-<tr class="altColor">
-<td class="colFirst"><code>private static long</code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/TransactionAbortedException.html#serialVersionUID">serialVersionUID</a></span></code>&nbsp;</td>
-</tr>
-</table>
-</li>
-</ul>
-<!-- ======== CONSTRUCTOR SUMMARY ======== -->
-<ul class="blockList">
-<li class="blockList"><a name="constructor.summary">
-<!--   -->
-</a>
-<h3>Constructor Summary</h3>
-<table class="memberSummary" border="0" cellpadding="3" cellspacing="0" summary="Constructor Summary table, listing constructors, and an explanation">
-<caption><span>Constructors</span><span class="tabEnd">&nbsp;</span></caption>
-<tr>
-<th class="colOne" scope="col">Constructor and Description</th>
-</tr>
-<tr class="altColor">
-<td class="colOne"><code><span class="memberNameLink"><a href="../simpledb/TransactionAbortedException.html#TransactionAbortedException--">TransactionAbortedException</a></span>()</code>&nbsp;</td>
-</tr>
-</table>
-</li>
-</ul>
-<!-- ========== METHOD SUMMARY =========== -->
-<ul class="blockList">
-<li class="blockList"><a name="method.summary">
-<!--   -->
-</a>
-<h3>Method Summary</h3>
-<ul class="blockList">
-<li class="blockList"><a name="methods.inherited.from.class.java.lang.Throwable">
-<!--   -->
-</a>
-<h3>Methods inherited from class&nbsp;java.lang.Throwable</h3>
-<code>addSuppressed, fillInStackTrace, getCause, getLocalizedMessage, getMessage, getStackTrace, getSuppressed, initCause, printStackTrace, printStackTrace, printStackTrace, setStackTrace, toString</code></li>
-</ul>
-<ul class="blockList">
-<li class="blockList"><a name="methods.inherited.from.class.java.lang.Object">
-<!--   -->
-</a>
-<h3>Methods inherited from class&nbsp;java.lang.Object</h3>
-<code>clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait</code></li>
-</ul>
-</li>
-</ul>
-</li>
-</ul>
-</div>
-<div class="details">
-<ul class="blockList">
-<li class="blockList">
-<!-- ============ FIELD DETAIL =========== -->
-<ul class="blockList">
-<li class="blockList"><a name="field.detail">
-<!--   -->
-</a>
-<h3>Field Detail</h3>
-<a name="serialVersionUID">
-<!--   -->
-</a>
-<ul class="blockListLast">
-<li class="blockList">
-<h4>serialVersionUID</h4>
-<pre>private static final&nbsp;long serialVersionUID</pre>
-<dl>
-<dt><span class="seeLabel">See Also:</span></dt>
-<dd><a href="../constant-values.html#simpledb.TransactionAbortedException.serialVersionUID">Constant Field Values</a></dd>
-</dl>
-</li>
-</ul>
-</li>
-</ul>
-<!-- ========= CONSTRUCTOR DETAIL ======== -->
-<ul class="blockList">
-<li class="blockList"><a name="constructor.detail">
-<!--   -->
-</a>
-<h3>Constructor Detail</h3>
-<a name="TransactionAbortedException--">
-<!--   -->
-</a>
-<ul class="blockListLast">
-<li class="blockList">
-<h4>TransactionAbortedException</h4>
-<pre>public&nbsp;TransactionAbortedException()</pre>
-</li>
-</ul>
-</li>
-</ul>
-</li>
-</ul>
-</div>
-</div>
-<!-- ========= END OF CLASS DATA ========= -->
-<!-- ======= START OF BOTTOM NAVBAR ====== -->
-<div class="bottomNav"><a name="navbar.bottom">
-<!--   -->
-</a>
-<div class="skipNav"><a href="#skip.navbar.bottom" title="Skip navigation links">Skip navigation links</a></div>
-<a name="navbar.bottom.firstrow">
-<!--   -->
-</a>
-<ul class="navList" title="Navigation">
-<li><a href="../simpledb/package-summary.html">Package</a></li>
-<li class="navBarCell1Rev">Class</li>
-<li><a href="package-tree.html">Tree</a></li>
-<li><a href="../deprecated-list.html">Deprecated</a></li>
-<li><a href="../index-all.html">Index</a></li>
-<li><a href="../help-doc.html">Help</a></li>
-</ul>
-</div>
-<div class="subNav">
-<ul class="navList">
-<li><a href="../simpledb/StringField.html" title="class in simpledb"><span class="typeNameLink">Prev&nbsp;Class</span></a></li>
-<li><a href="../simpledb/TransactionId.html" title="class in simpledb"><span class="typeNameLink">Next&nbsp;Class</span></a></li>
-</ul>
-<ul class="navList">
-<li><a href="../index.html?simpledb/TransactionAbortedException.html" target="_top">Frames</a></li>
-<li><a href="TransactionAbortedException.html" target="_top">No&nbsp;Frames</a></li>
-</ul>
-<ul class="navList" id="allclasses_navbar_bottom">
-<li><a href="../allclasses-noframe.html">All&nbsp;Classes</a></li>
-</ul>
-<div>
-<script type="text/javascript"><!--
-  allClassesLink = document.getElementById("allclasses_navbar_bottom");
-  if(window==top) {
-    allClassesLink.style.display = "block";
-  }
-  else {
-    allClassesLink.style.display = "none";
-  }
-  //-->
-</script>
-</div>
-<div>
-<ul class="subNavList">
-<li>Summary:&nbsp;</li>
-<li>Nested&nbsp;|&nbsp;</li>
-<li><a href="#field.summary">Field</a>&nbsp;|&nbsp;</li>
-<li><a href="#constructor.summary">Constr</a>&nbsp;|&nbsp;</li>
-<li><a href="#methods.inherited.from.class.java.lang.Throwable">Method</a></li>
-</ul>
-<ul class="subNavList">
-<li>Detail:&nbsp;</li>
-<li><a href="#field.detail">Field</a>&nbsp;|&nbsp;</li>
-<li><a href="#constructor.detail">Constr</a>&nbsp;|&nbsp;</li>
-<li>Method</li>
-</ul>
-</div>
-<a name="skip.navbar.bottom">
-<!--   -->
-</a></div>
-<!-- ======== END OF BOTTOM NAVBAR ======= -->
-</body>
-</html>
diff -ruN lab1/javadoc/simpledb/TransactionId.html lab3/javadoc/simpledb/TransactionId.html
--- lab1/javadoc/simpledb/TransactionId.html	2016-11-02 22:06:58.000000000 -0500
+++ lab3/javadoc/simpledb/TransactionId.html	1969-12-31 18:00:00.000000000 -0600
@@ -1,377 +0,0 @@
-<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
-<!-- NewPage -->
-<html lang="en">
-<head>
-<!-- Generated by javadoc (1.8.0_25) on Thu Oct 27 13:16:24 CDT 2016 -->
-<title>TransactionId</title>
-<meta name="date" content="2016-10-27">
-<link rel="stylesheet" type="text/css" href="../stylesheet.css" title="Style">
-<script type="text/javascript" src="../script.js"></script>
-</head>
-<body>
-<script type="text/javascript"><!--
-    try {
-        if (location.href.indexOf('is-external=true') == -1) {
-            parent.document.title="TransactionId";
-        }
-    }
-    catch(err) {
-    }
-//-->
-var methods = {"i0":10,"i1":10,"i2":10};
-var tabs = {65535:["t0","All Methods"],2:["t2","Instance Methods"],8:["t4","Concrete Methods"]};
-var altColor = "altColor";
-var rowColor = "rowColor";
-var tableTab = "tableTab";
-var activeTableTab = "activeTableTab";
-</script>
-<noscript>
-<div>JavaScript is disabled on your browser.</div>
-</noscript>
-<!-- ========= START OF TOP NAVBAR ======= -->
-<div class="topNav"><a name="navbar.top">
-<!--   -->
-</a>
-<div class="skipNav"><a href="#skip.navbar.top" title="Skip navigation links">Skip navigation links</a></div>
-<a name="navbar.top.firstrow">
-<!--   -->
-</a>
-<ul class="navList" title="Navigation">
-<li><a href="../simpledb/package-summary.html">Package</a></li>
-<li class="navBarCell1Rev">Class</li>
-<li><a href="package-tree.html">Tree</a></li>
-<li><a href="../deprecated-list.html">Deprecated</a></li>
-<li><a href="../index-all.html">Index</a></li>
-<li><a href="../help-doc.html">Help</a></li>
-</ul>
-</div>
-<div class="subNav">
-<ul class="navList">
-<li><a href="../simpledb/TransactionAbortedException.html" title="class in simpledb"><span class="typeNameLink">Prev&nbsp;Class</span></a></li>
-<li><a href="../simpledb/Tuple.html" title="class in simpledb"><span class="typeNameLink">Next&nbsp;Class</span></a></li>
-</ul>
-<ul class="navList">
-<li><a href="../index.html?simpledb/TransactionId.html" target="_top">Frames</a></li>
-<li><a href="TransactionId.html" target="_top">No&nbsp;Frames</a></li>
-</ul>
-<ul class="navList" id="allclasses_navbar_top">
-<li><a href="../allclasses-noframe.html">All&nbsp;Classes</a></li>
-</ul>
-<div>
-<script type="text/javascript"><!--
-  allClassesLink = document.getElementById("allclasses_navbar_top");
-  if(window==top) {
-    allClassesLink.style.display = "block";
-  }
-  else {
-    allClassesLink.style.display = "none";
-  }
-  //-->
-</script>
-</div>
-<div>
-<ul class="subNavList">
-<li>Summary:&nbsp;</li>
-<li>Nested&nbsp;|&nbsp;</li>
-<li><a href="#field.summary">Field</a>&nbsp;|&nbsp;</li>
-<li><a href="#constructor.summary">Constr</a>&nbsp;|&nbsp;</li>
-<li><a href="#method.summary">Method</a></li>
-</ul>
-<ul class="subNavList">
-<li>Detail:&nbsp;</li>
-<li><a href="#field.detail">Field</a>&nbsp;|&nbsp;</li>
-<li><a href="#constructor.detail">Constr</a>&nbsp;|&nbsp;</li>
-<li><a href="#method.detail">Method</a></li>
-</ul>
-</div>
-<a name="skip.navbar.top">
-<!--   -->
-</a></div>
-<!-- ========= END OF TOP NAVBAR ========= -->
-<!-- ======== START OF CLASS DATA ======== -->
-<div class="header">
-<div class="subTitle">simpledb</div>
-<h2 title="Class TransactionId" class="title">Class TransactionId</h2>
-</div>
-<div class="contentContainer">
-<ul class="inheritance">
-<li>java.lang.Object</li>
-<li>
-<ul class="inheritance">
-<li>simpledb.TransactionId</li>
-</ul>
-</li>
-</ul>
-<div class="description">
-<ul class="blockList">
-<li class="blockList">
-<dl>
-<dt>All Implemented Interfaces:</dt>
-<dd>java.io.Serializable</dd>
-</dl>
-<hr>
-<br>
-<pre>public class <span class="typeNameLabel">TransactionId</span>
-extends java.lang.Object
-implements java.io.Serializable</pre>
-<div class="block">TransactionId is a class that contains the identifier of a transaction.</div>
-<dl>
-<dt><span class="seeLabel">See Also:</span></dt>
-<dd><a href="../serialized-form.html#simpledb.TransactionId">Serialized Form</a></dd>
-</dl>
-</li>
-</ul>
-</div>
-<div class="summary">
-<ul class="blockList">
-<li class="blockList">
-<!-- =========== FIELD SUMMARY =========== -->
-<ul class="blockList">
-<li class="blockList"><a name="field.summary">
-<!--   -->
-</a>
-<h3>Field Summary</h3>
-<table class="memberSummary" border="0" cellpadding="3" cellspacing="0" summary="Field Summary table, listing fields, and an explanation">
-<caption><span>Fields</span><span class="tabEnd">&nbsp;</span></caption>
-<tr>
-<th class="colFirst" scope="col">Modifier and Type</th>
-<th class="colLast" scope="col">Field and Description</th>
-</tr>
-<tr class="altColor">
-<td class="colFirst"><code>(package private) static java.util.concurrent.atomic.AtomicLong</code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/TransactionId.html#counter">counter</a></span></code>&nbsp;</td>
-</tr>
-<tr class="rowColor">
-<td class="colFirst"><code>(package private) long</code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/TransactionId.html#myid">myid</a></span></code>&nbsp;</td>
-</tr>
-<tr class="altColor">
-<td class="colFirst"><code>private static long</code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/TransactionId.html#serialVersionUID">serialVersionUID</a></span></code>&nbsp;</td>
-</tr>
-</table>
-</li>
-</ul>
-<!-- ======== CONSTRUCTOR SUMMARY ======== -->
-<ul class="blockList">
-<li class="blockList"><a name="constructor.summary">
-<!--   -->
-</a>
-<h3>Constructor Summary</h3>
-<table class="memberSummary" border="0" cellpadding="3" cellspacing="0" summary="Constructor Summary table, listing constructors, and an explanation">
-<caption><span>Constructors</span><span class="tabEnd">&nbsp;</span></caption>
-<tr>
-<th class="colOne" scope="col">Constructor and Description</th>
-</tr>
-<tr class="altColor">
-<td class="colOne"><code><span class="memberNameLink"><a href="../simpledb/TransactionId.html#TransactionId--">TransactionId</a></span>()</code>&nbsp;</td>
-</tr>
-</table>
-</li>
-</ul>
-<!-- ========== METHOD SUMMARY =========== -->
-<ul class="blockList">
-<li class="blockList"><a name="method.summary">
-<!--   -->
-</a>
-<h3>Method Summary</h3>
-<table class="memberSummary" border="0" cellpadding="3" cellspacing="0" summary="Method Summary table, listing methods, and an explanation">
-<caption><span id="t0" class="activeTableTab"><span>All Methods</span><span class="tabEnd">&nbsp;</span></span><span id="t2" class="tableTab"><span><a href="javascript:show(2);">Instance Methods</a></span><span class="tabEnd">&nbsp;</span></span><span id="t4" class="tableTab"><span><a href="javascript:show(8);">Concrete Methods</a></span><span class="tabEnd">&nbsp;</span></span></caption>
-<tr>
-<th class="colFirst" scope="col">Modifier and Type</th>
-<th class="colLast" scope="col">Method and Description</th>
-</tr>
-<tr id="i0" class="altColor">
-<td class="colFirst"><code>boolean</code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/TransactionId.html#equals-java.lang.Object-">equals</a></span>(java.lang.Object&nbsp;obj)</code>&nbsp;</td>
-</tr>
-<tr id="i1" class="rowColor">
-<td class="colFirst"><code>long</code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/TransactionId.html#getId--">getId</a></span>()</code>&nbsp;</td>
-</tr>
-<tr id="i2" class="altColor">
-<td class="colFirst"><code>int</code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/TransactionId.html#hashCode--">hashCode</a></span>()</code>&nbsp;</td>
-</tr>
-</table>
-<ul class="blockList">
-<li class="blockList"><a name="methods.inherited.from.class.java.lang.Object">
-<!--   -->
-</a>
-<h3>Methods inherited from class&nbsp;java.lang.Object</h3>
-<code>clone, finalize, getClass, notify, notifyAll, toString, wait, wait, wait</code></li>
-</ul>
-</li>
-</ul>
-</li>
-</ul>
-</div>
-<div class="details">
-<ul class="blockList">
-<li class="blockList">
-<!-- ============ FIELD DETAIL =========== -->
-<ul class="blockList">
-<li class="blockList"><a name="field.detail">
-<!--   -->
-</a>
-<h3>Field Detail</h3>
-<a name="serialVersionUID">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>serialVersionUID</h4>
-<pre>private static final&nbsp;long serialVersionUID</pre>
-<dl>
-<dt><span class="seeLabel">See Also:</span></dt>
-<dd><a href="../constant-values.html#simpledb.TransactionId.serialVersionUID">Constant Field Values</a></dd>
-</dl>
-</li>
-</ul>
-<a name="counter">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>counter</h4>
-<pre>static&nbsp;java.util.concurrent.atomic.AtomicLong counter</pre>
-</li>
-</ul>
-<a name="myid">
-<!--   -->
-</a>
-<ul class="blockListLast">
-<li class="blockList">
-<h4>myid</h4>
-<pre>final&nbsp;long myid</pre>
-</li>
-</ul>
-</li>
-</ul>
-<!-- ========= CONSTRUCTOR DETAIL ======== -->
-<ul class="blockList">
-<li class="blockList"><a name="constructor.detail">
-<!--   -->
-</a>
-<h3>Constructor Detail</h3>
-<a name="TransactionId--">
-<!--   -->
-</a>
-<ul class="blockListLast">
-<li class="blockList">
-<h4>TransactionId</h4>
-<pre>public&nbsp;TransactionId()</pre>
-</li>
-</ul>
-</li>
-</ul>
-<!-- ============ METHOD DETAIL ========== -->
-<ul class="blockList">
-<li class="blockList"><a name="method.detail">
-<!--   -->
-</a>
-<h3>Method Detail</h3>
-<a name="getId--">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>getId</h4>
-<pre>public&nbsp;long&nbsp;getId()</pre>
-</li>
-</ul>
-<a name="equals-java.lang.Object-">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>equals</h4>
-<pre>public&nbsp;boolean&nbsp;equals(java.lang.Object&nbsp;obj)</pre>
-<dl>
-<dt><span class="overrideSpecifyLabel">Overrides:</span></dt>
-<dd><code>equals</code>&nbsp;in class&nbsp;<code>java.lang.Object</code></dd>
-</dl>
-</li>
-</ul>
-<a name="hashCode--">
-<!--   -->
-</a>
-<ul class="blockListLast">
-<li class="blockList">
-<h4>hashCode</h4>
-<pre>public&nbsp;int&nbsp;hashCode()</pre>
-<dl>
-<dt><span class="overrideSpecifyLabel">Overrides:</span></dt>
-<dd><code>hashCode</code>&nbsp;in class&nbsp;<code>java.lang.Object</code></dd>
-</dl>
-</li>
-</ul>
-</li>
-</ul>
-</li>
-</ul>
-</div>
-</div>
-<!-- ========= END OF CLASS DATA ========= -->
-<!-- ======= START OF BOTTOM NAVBAR ====== -->
-<div class="bottomNav"><a name="navbar.bottom">
-<!--   -->
-</a>
-<div class="skipNav"><a href="#skip.navbar.bottom" title="Skip navigation links">Skip navigation links</a></div>
-<a name="navbar.bottom.firstrow">
-<!--   -->
-</a>
-<ul class="navList" title="Navigation">
-<li><a href="../simpledb/package-summary.html">Package</a></li>
-<li class="navBarCell1Rev">Class</li>
-<li><a href="package-tree.html">Tree</a></li>
-<li><a href="../deprecated-list.html">Deprecated</a></li>
-<li><a href="../index-all.html">Index</a></li>
-<li><a href="../help-doc.html">Help</a></li>
-</ul>
-</div>
-<div class="subNav">
-<ul class="navList">
-<li><a href="../simpledb/TransactionAbortedException.html" title="class in simpledb"><span class="typeNameLink">Prev&nbsp;Class</span></a></li>
-<li><a href="../simpledb/Tuple.html" title="class in simpledb"><span class="typeNameLink">Next&nbsp;Class</span></a></li>
-</ul>
-<ul class="navList">
-<li><a href="../index.html?simpledb/TransactionId.html" target="_top">Frames</a></li>
-<li><a href="TransactionId.html" target="_top">No&nbsp;Frames</a></li>
-</ul>
-<ul class="navList" id="allclasses_navbar_bottom">
-<li><a href="../allclasses-noframe.html">All&nbsp;Classes</a></li>
-</ul>
-<div>
-<script type="text/javascript"><!--
-  allClassesLink = document.getElementById("allclasses_navbar_bottom");
-  if(window==top) {
-    allClassesLink.style.display = "block";
-  }
-  else {
-    allClassesLink.style.display = "none";
-  }
-  //-->
-</script>
-</div>
-<div>
-<ul class="subNavList">
-<li>Summary:&nbsp;</li>
-<li>Nested&nbsp;|&nbsp;</li>
-<li><a href="#field.summary">Field</a>&nbsp;|&nbsp;</li>
-<li><a href="#constructor.summary">Constr</a>&nbsp;|&nbsp;</li>
-<li><a href="#method.summary">Method</a></li>
-</ul>
-<ul class="subNavList">
-<li>Detail:&nbsp;</li>
-<li><a href="#field.detail">Field</a>&nbsp;|&nbsp;</li>
-<li><a href="#constructor.detail">Constr</a>&nbsp;|&nbsp;</li>
-<li><a href="#method.detail">Method</a></li>
-</ul>
-</div>
-<a name="skip.navbar.bottom">
-<!--   -->
-</a></div>
-<!-- ======== END OF BOTTOM NAVBAR ======= -->
-</body>
-</html>
diff -ruN lab1/javadoc/simpledb/Tuple.html lab3/javadoc/simpledb/Tuple.html
--- lab1/javadoc/simpledb/Tuple.html	2016-11-02 22:06:58.000000000 -0500
+++ lab3/javadoc/simpledb/Tuple.html	1969-12-31 18:00:00.000000000 -0600
@@ -1,469 +0,0 @@
-<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
-<!-- NewPage -->
-<html lang="en">
-<head>
-<!-- Generated by javadoc (1.8.0_25) on Thu Oct 27 13:16:24 CDT 2016 -->
-<title>Tuple</title>
-<meta name="date" content="2016-10-27">
-<link rel="stylesheet" type="text/css" href="../stylesheet.css" title="Style">
-<script type="text/javascript" src="../script.js"></script>
-</head>
-<body>
-<script type="text/javascript"><!--
-    try {
-        if (location.href.indexOf('is-external=true') == -1) {
-            parent.document.title="Tuple";
-        }
-    }
-    catch(err) {
-    }
-//-->
-var methods = {"i0":10,"i1":10,"i2":10,"i3":10,"i4":10,"i5":10,"i6":10,"i7":10};
-var tabs = {65535:["t0","All Methods"],2:["t2","Instance Methods"],8:["t4","Concrete Methods"]};
-var altColor = "altColor";
-var rowColor = "rowColor";
-var tableTab = "tableTab";
-var activeTableTab = "activeTableTab";
-</script>
-<noscript>
-<div>JavaScript is disabled on your browser.</div>
-</noscript>
-<!-- ========= START OF TOP NAVBAR ======= -->
-<div class="topNav"><a name="navbar.top">
-<!--   -->
-</a>
-<div class="skipNav"><a href="#skip.navbar.top" title="Skip navigation links">Skip navigation links</a></div>
-<a name="navbar.top.firstrow">
-<!--   -->
-</a>
-<ul class="navList" title="Navigation">
-<li><a href="../simpledb/package-summary.html">Package</a></li>
-<li class="navBarCell1Rev">Class</li>
-<li><a href="package-tree.html">Tree</a></li>
-<li><a href="../deprecated-list.html">Deprecated</a></li>
-<li><a href="../index-all.html">Index</a></li>
-<li><a href="../help-doc.html">Help</a></li>
-</ul>
-</div>
-<div class="subNav">
-<ul class="navList">
-<li><a href="../simpledb/TransactionId.html" title="class in simpledb"><span class="typeNameLink">Prev&nbsp;Class</span></a></li>
-<li><a href="../simpledb/TupleDesc.html" title="class in simpledb"><span class="typeNameLink">Next&nbsp;Class</span></a></li>
-</ul>
-<ul class="navList">
-<li><a href="../index.html?simpledb/Tuple.html" target="_top">Frames</a></li>
-<li><a href="Tuple.html" target="_top">No&nbsp;Frames</a></li>
-</ul>
-<ul class="navList" id="allclasses_navbar_top">
-<li><a href="../allclasses-noframe.html">All&nbsp;Classes</a></li>
-</ul>
-<div>
-<script type="text/javascript"><!--
-  allClassesLink = document.getElementById("allclasses_navbar_top");
-  if(window==top) {
-    allClassesLink.style.display = "block";
-  }
-  else {
-    allClassesLink.style.display = "none";
-  }
-  //-->
-</script>
-</div>
-<div>
-<ul class="subNavList">
-<li>Summary:&nbsp;</li>
-<li>Nested&nbsp;|&nbsp;</li>
-<li><a href="#field.summary">Field</a>&nbsp;|&nbsp;</li>
-<li><a href="#constructor.summary">Constr</a>&nbsp;|&nbsp;</li>
-<li><a href="#method.summary">Method</a></li>
-</ul>
-<ul class="subNavList">
-<li>Detail:&nbsp;</li>
-<li><a href="#field.detail">Field</a>&nbsp;|&nbsp;</li>
-<li><a href="#constructor.detail">Constr</a>&nbsp;|&nbsp;</li>
-<li><a href="#method.detail">Method</a></li>
-</ul>
-</div>
-<a name="skip.navbar.top">
-<!--   -->
-</a></div>
-<!-- ========= END OF TOP NAVBAR ========= -->
-<!-- ======== START OF CLASS DATA ======== -->
-<div class="header">
-<div class="subTitle">simpledb</div>
-<h2 title="Class Tuple" class="title">Class Tuple</h2>
-</div>
-<div class="contentContainer">
-<ul class="inheritance">
-<li>java.lang.Object</li>
-<li>
-<ul class="inheritance">
-<li>simpledb.Tuple</li>
-</ul>
-</li>
-</ul>
-<div class="description">
-<ul class="blockList">
-<li class="blockList">
-<dl>
-<dt>All Implemented Interfaces:</dt>
-<dd>java.io.Serializable</dd>
-</dl>
-<hr>
-<br>
-<pre>public class <span class="typeNameLabel">Tuple</span>
-extends java.lang.Object
-implements java.io.Serializable</pre>
-<div class="block">Tuple maintains information about the contents of a tuple. Tuples have a
- specified schema specified by a TupleDesc object and contain Field objects
- with the data for each field.</div>
-<dl>
-<dt><span class="seeLabel">See Also:</span></dt>
-<dd><a href="../serialized-form.html#simpledb.Tuple">Serialized Form</a></dd>
-</dl>
-</li>
-</ul>
-</div>
-<div class="summary">
-<ul class="blockList">
-<li class="blockList">
-<!-- =========== FIELD SUMMARY =========== -->
-<ul class="blockList">
-<li class="blockList"><a name="field.summary">
-<!--   -->
-</a>
-<h3>Field Summary</h3>
-<table class="memberSummary" border="0" cellpadding="3" cellspacing="0" summary="Field Summary table, listing fields, and an explanation">
-<caption><span>Fields</span><span class="tabEnd">&nbsp;</span></caption>
-<tr>
-<th class="colFirst" scope="col">Modifier and Type</th>
-<th class="colLast" scope="col">Field and Description</th>
-</tr>
-<tr class="altColor">
-<td class="colFirst"><code>private static long</code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/Tuple.html#serialVersionUID">serialVersionUID</a></span></code>&nbsp;</td>
-</tr>
-</table>
-</li>
-</ul>
-<!-- ======== CONSTRUCTOR SUMMARY ======== -->
-<ul class="blockList">
-<li class="blockList"><a name="constructor.summary">
-<!--   -->
-</a>
-<h3>Constructor Summary</h3>
-<table class="memberSummary" border="0" cellpadding="3" cellspacing="0" summary="Constructor Summary table, listing constructors, and an explanation">
-<caption><span>Constructors</span><span class="tabEnd">&nbsp;</span></caption>
-<tr>
-<th class="colOne" scope="col">Constructor and Description</th>
-</tr>
-<tr class="altColor">
-<td class="colOne"><code><span class="memberNameLink"><a href="../simpledb/Tuple.html#Tuple-simpledb.TupleDesc-">Tuple</a></span>(<a href="../simpledb/TupleDesc.html" title="class in simpledb">TupleDesc</a>&nbsp;td)</code>
-<div class="block">Create a new tuple with the specified schema (type).</div>
-</td>
-</tr>
-</table>
-</li>
-</ul>
-<!-- ========== METHOD SUMMARY =========== -->
-<ul class="blockList">
-<li class="blockList"><a name="method.summary">
-<!--   -->
-</a>
-<h3>Method Summary</h3>
-<table class="memberSummary" border="0" cellpadding="3" cellspacing="0" summary="Method Summary table, listing methods, and an explanation">
-<caption><span id="t0" class="activeTableTab"><span>All Methods</span><span class="tabEnd">&nbsp;</span></span><span id="t2" class="tableTab"><span><a href="javascript:show(2);">Instance Methods</a></span><span class="tabEnd">&nbsp;</span></span><span id="t4" class="tableTab"><span><a href="javascript:show(8);">Concrete Methods</a></span><span class="tabEnd">&nbsp;</span></span></caption>
-<tr>
-<th class="colFirst" scope="col">Modifier and Type</th>
-<th class="colLast" scope="col">Method and Description</th>
-</tr>
-<tr id="i0" class="altColor">
-<td class="colFirst"><code>java.util.Iterator&lt;<a href="../simpledb/Field.html" title="interface in simpledb">Field</a>&gt;</code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/Tuple.html#fields--">fields</a></span>()</code>&nbsp;</td>
-</tr>
-<tr id="i1" class="rowColor">
-<td class="colFirst"><code><a href="../simpledb/Field.html" title="interface in simpledb">Field</a></code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/Tuple.html#getField-int-">getField</a></span>(int&nbsp;i)</code>&nbsp;</td>
-</tr>
-<tr id="i2" class="altColor">
-<td class="colFirst"><code><a href="../simpledb/RecordId.html" title="class in simpledb">RecordId</a></code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/Tuple.html#getRecordId--">getRecordId</a></span>()</code>&nbsp;</td>
-</tr>
-<tr id="i3" class="rowColor">
-<td class="colFirst"><code><a href="../simpledb/TupleDesc.html" title="class in simpledb">TupleDesc</a></code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/Tuple.html#getTupleDesc--">getTupleDesc</a></span>()</code>&nbsp;</td>
-</tr>
-<tr id="i4" class="altColor">
-<td class="colFirst"><code>void</code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/Tuple.html#resetTupleDesc-simpledb.TupleDesc-">resetTupleDesc</a></span>(<a href="../simpledb/TupleDesc.html" title="class in simpledb">TupleDesc</a>&nbsp;td)</code>
-<div class="block">reset the TupleDesc of thi tuple</div>
-</td>
-</tr>
-<tr id="i5" class="rowColor">
-<td class="colFirst"><code>void</code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/Tuple.html#setField-int-simpledb.Field-">setField</a></span>(int&nbsp;i,
-        <a href="../simpledb/Field.html" title="interface in simpledb">Field</a>&nbsp;f)</code>
-<div class="block">Change the value of the ith field of this tuple.</div>
-</td>
-</tr>
-<tr id="i6" class="altColor">
-<td class="colFirst"><code>void</code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/Tuple.html#setRecordId-simpledb.RecordId-">setRecordId</a></span>(<a href="../simpledb/RecordId.html" title="class in simpledb">RecordId</a>&nbsp;rid)</code>
-<div class="block">Set the RecordId information for this tuple.</div>
-</td>
-</tr>
-<tr id="i7" class="rowColor">
-<td class="colFirst"><code>java.lang.String</code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/Tuple.html#toString--">toString</a></span>()</code>
-<div class="block">Returns the contents of this Tuple as a string.</div>
-</td>
-</tr>
-</table>
-<ul class="blockList">
-<li class="blockList"><a name="methods.inherited.from.class.java.lang.Object">
-<!--   -->
-</a>
-<h3>Methods inherited from class&nbsp;java.lang.Object</h3>
-<code>clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait</code></li>
-</ul>
-</li>
-</ul>
-</li>
-</ul>
-</div>
-<div class="details">
-<ul class="blockList">
-<li class="blockList">
-<!-- ============ FIELD DETAIL =========== -->
-<ul class="blockList">
-<li class="blockList"><a name="field.detail">
-<!--   -->
-</a>
-<h3>Field Detail</h3>
-<a name="serialVersionUID">
-<!--   -->
-</a>
-<ul class="blockListLast">
-<li class="blockList">
-<h4>serialVersionUID</h4>
-<pre>private static final&nbsp;long serialVersionUID</pre>
-<dl>
-<dt><span class="seeLabel">See Also:</span></dt>
-<dd><a href="../constant-values.html#simpledb.Tuple.serialVersionUID">Constant Field Values</a></dd>
-</dl>
-</li>
-</ul>
-</li>
-</ul>
-<!-- ========= CONSTRUCTOR DETAIL ======== -->
-<ul class="blockList">
-<li class="blockList"><a name="constructor.detail">
-<!--   -->
-</a>
-<h3>Constructor Detail</h3>
-<a name="Tuple-simpledb.TupleDesc-">
-<!--   -->
-</a>
-<ul class="blockListLast">
-<li class="blockList">
-<h4>Tuple</h4>
-<pre>public&nbsp;Tuple(<a href="../simpledb/TupleDesc.html" title="class in simpledb">TupleDesc</a>&nbsp;td)</pre>
-<div class="block">Create a new tuple with the specified schema (type).</div>
-<dl>
-<dt><span class="paramLabel">Parameters:</span></dt>
-<dd><code>td</code> - the schema of this tuple. It must be a valid TupleDesc
-            instance with at least one field.</dd>
-</dl>
-</li>
-</ul>
-</li>
-</ul>
-<!-- ============ METHOD DETAIL ========== -->
-<ul class="blockList">
-<li class="blockList"><a name="method.detail">
-<!--   -->
-</a>
-<h3>Method Detail</h3>
-<a name="getTupleDesc--">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>getTupleDesc</h4>
-<pre>public&nbsp;<a href="../simpledb/TupleDesc.html" title="class in simpledb">TupleDesc</a>&nbsp;getTupleDesc()</pre>
-<dl>
-<dt><span class="returnLabel">Returns:</span></dt>
-<dd>The TupleDesc representing the schema of this tuple.</dd>
-</dl>
-</li>
-</ul>
-<a name="getRecordId--">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>getRecordId</h4>
-<pre>public&nbsp;<a href="../simpledb/RecordId.html" title="class in simpledb">RecordId</a>&nbsp;getRecordId()</pre>
-<dl>
-<dt><span class="returnLabel">Returns:</span></dt>
-<dd>The RecordId representing the location of this tuple on disk. May
-         be null.</dd>
-</dl>
-</li>
-</ul>
-<a name="setRecordId-simpledb.RecordId-">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>setRecordId</h4>
-<pre>public&nbsp;void&nbsp;setRecordId(<a href="../simpledb/RecordId.html" title="class in simpledb">RecordId</a>&nbsp;rid)</pre>
-<div class="block">Set the RecordId information for this tuple.</div>
-<dl>
-<dt><span class="paramLabel">Parameters:</span></dt>
-<dd><code>rid</code> - the new RecordId for this tuple.</dd>
-</dl>
-</li>
-</ul>
-<a name="setField-int-simpledb.Field-">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>setField</h4>
-<pre>public&nbsp;void&nbsp;setField(int&nbsp;i,
-                     <a href="../simpledb/Field.html" title="interface in simpledb">Field</a>&nbsp;f)</pre>
-<div class="block">Change the value of the ith field of this tuple.</div>
-<dl>
-<dt><span class="paramLabel">Parameters:</span></dt>
-<dd><code>i</code> - index of the field to change. It must be a valid index.</dd>
-<dd><code>f</code> - new value for the field.</dd>
-</dl>
-</li>
-</ul>
-<a name="getField-int-">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>getField</h4>
-<pre>public&nbsp;<a href="../simpledb/Field.html" title="interface in simpledb">Field</a>&nbsp;getField(int&nbsp;i)</pre>
-<dl>
-<dt><span class="paramLabel">Parameters:</span></dt>
-<dd><code>i</code> - field index to return. Must be a valid index.</dd>
-<dt><span class="returnLabel">Returns:</span></dt>
-<dd>the value of the ith field, or null if it has not been set.</dd>
-</dl>
-</li>
-</ul>
-<a name="toString--">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>toString</h4>
-<pre>public&nbsp;java.lang.String&nbsp;toString()</pre>
-<div class="block">Returns the contents of this Tuple as a string. Note that to pass the
- system tests, the format needs to be as follows:
- 
- column1\tcolumn2\tcolumn3\t...\tcolumnN\n
- 
- where \t is any whitespace, except newline, and \n is a newline</div>
-<dl>
-<dt><span class="overrideSpecifyLabel">Overrides:</span></dt>
-<dd><code>toString</code>&nbsp;in class&nbsp;<code>java.lang.Object</code></dd>
-</dl>
-</li>
-</ul>
-<a name="fields--">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>fields</h4>
-<pre>public&nbsp;java.util.Iterator&lt;<a href="../simpledb/Field.html" title="interface in simpledb">Field</a>&gt;&nbsp;fields()</pre>
-<dl>
-<dt><span class="returnLabel">Returns:</span></dt>
-<dd>An iterator which iterates over all the fields of this tuple</dd>
-</dl>
-</li>
-</ul>
-<a name="resetTupleDesc-simpledb.TupleDesc-">
-<!--   -->
-</a>
-<ul class="blockListLast">
-<li class="blockList">
-<h4>resetTupleDesc</h4>
-<pre>public&nbsp;void&nbsp;resetTupleDesc(<a href="../simpledb/TupleDesc.html" title="class in simpledb">TupleDesc</a>&nbsp;td)</pre>
-<div class="block">reset the TupleDesc of thi tuple</div>
-</li>
-</ul>
-</li>
-</ul>
-</li>
-</ul>
-</div>
-</div>
-<!-- ========= END OF CLASS DATA ========= -->
-<!-- ======= START OF BOTTOM NAVBAR ====== -->
-<div class="bottomNav"><a name="navbar.bottom">
-<!--   -->
-</a>
-<div class="skipNav"><a href="#skip.navbar.bottom" title="Skip navigation links">Skip navigation links</a></div>
-<a name="navbar.bottom.firstrow">
-<!--   -->
-</a>
-<ul class="navList" title="Navigation">
-<li><a href="../simpledb/package-summary.html">Package</a></li>
-<li class="navBarCell1Rev">Class</li>
-<li><a href="package-tree.html">Tree</a></li>
-<li><a href="../deprecated-list.html">Deprecated</a></li>
-<li><a href="../index-all.html">Index</a></li>
-<li><a href="../help-doc.html">Help</a></li>
-</ul>
-</div>
-<div class="subNav">
-<ul class="navList">
-<li><a href="../simpledb/TransactionId.html" title="class in simpledb"><span class="typeNameLink">Prev&nbsp;Class</span></a></li>
-<li><a href="../simpledb/TupleDesc.html" title="class in simpledb"><span class="typeNameLink">Next&nbsp;Class</span></a></li>
-</ul>
-<ul class="navList">
-<li><a href="../index.html?simpledb/Tuple.html" target="_top">Frames</a></li>
-<li><a href="Tuple.html" target="_top">No&nbsp;Frames</a></li>
-</ul>
-<ul class="navList" id="allclasses_navbar_bottom">
-<li><a href="../allclasses-noframe.html">All&nbsp;Classes</a></li>
-</ul>
-<div>
-<script type="text/javascript"><!--
-  allClassesLink = document.getElementById("allclasses_navbar_bottom");
-  if(window==top) {
-    allClassesLink.style.display = "block";
-  }
-  else {
-    allClassesLink.style.display = "none";
-  }
-  //-->
-</script>
-</div>
-<div>
-<ul class="subNavList">
-<li>Summary:&nbsp;</li>
-<li>Nested&nbsp;|&nbsp;</li>
-<li><a href="#field.summary">Field</a>&nbsp;|&nbsp;</li>
-<li><a href="#constructor.summary">Constr</a>&nbsp;|&nbsp;</li>
-<li><a href="#method.summary">Method</a></li>
-</ul>
-<ul class="subNavList">
-<li>Detail:&nbsp;</li>
-<li><a href="#field.detail">Field</a>&nbsp;|&nbsp;</li>
-<li><a href="#constructor.detail">Constr</a>&nbsp;|&nbsp;</li>
-<li><a href="#method.detail">Method</a></li>
-</ul>
-</div>
-<a name="skip.navbar.bottom">
-<!--   -->
-</a></div>
-<!-- ======== END OF BOTTOM NAVBAR ======= -->
-</body>
-</html>
diff -ruN lab1/javadoc/simpledb/TupleDesc.TDItem.html lab3/javadoc/simpledb/TupleDesc.TDItem.html
--- lab1/javadoc/simpledb/TupleDesc.TDItem.html	2016-11-02 22:06:58.000000000 -0500
+++ lab3/javadoc/simpledb/TupleDesc.TDItem.html	1969-12-31 18:00:00.000000000 -0600
@@ -1,359 +0,0 @@
-<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
-<!-- NewPage -->
-<html lang="en">
-<head>
-<!-- Generated by javadoc (1.8.0_25) on Thu Oct 27 13:16:24 CDT 2016 -->
-<title>TupleDesc.TDItem</title>
-<meta name="date" content="2016-10-27">
-<link rel="stylesheet" type="text/css" href="../stylesheet.css" title="Style">
-<script type="text/javascript" src="../script.js"></script>
-</head>
-<body>
-<script type="text/javascript"><!--
-    try {
-        if (location.href.indexOf('is-external=true') == -1) {
-            parent.document.title="TupleDesc.TDItem";
-        }
-    }
-    catch(err) {
-    }
-//-->
-var methods = {"i0":10};
-var tabs = {65535:["t0","All Methods"],2:["t2","Instance Methods"],8:["t4","Concrete Methods"]};
-var altColor = "altColor";
-var rowColor = "rowColor";
-var tableTab = "tableTab";
-var activeTableTab = "activeTableTab";
-</script>
-<noscript>
-<div>JavaScript is disabled on your browser.</div>
-</noscript>
-<!-- ========= START OF TOP NAVBAR ======= -->
-<div class="topNav"><a name="navbar.top">
-<!--   -->
-</a>
-<div class="skipNav"><a href="#skip.navbar.top" title="Skip navigation links">Skip navigation links</a></div>
-<a name="navbar.top.firstrow">
-<!--   -->
-</a>
-<ul class="navList" title="Navigation">
-<li><a href="../simpledb/package-summary.html">Package</a></li>
-<li class="navBarCell1Rev">Class</li>
-<li><a href="package-tree.html">Tree</a></li>
-<li><a href="../deprecated-list.html">Deprecated</a></li>
-<li><a href="../index-all.html">Index</a></li>
-<li><a href="../help-doc.html">Help</a></li>
-</ul>
-</div>
-<div class="subNav">
-<ul class="navList">
-<li><a href="../simpledb/TupleDesc.html" title="class in simpledb"><span class="typeNameLink">Prev&nbsp;Class</span></a></li>
-<li><a href="../simpledb/TupleIterator.html" title="class in simpledb"><span class="typeNameLink">Next&nbsp;Class</span></a></li>
-</ul>
-<ul class="navList">
-<li><a href="../index.html?simpledb/TupleDesc.TDItem.html" target="_top">Frames</a></li>
-<li><a href="TupleDesc.TDItem.html" target="_top">No&nbsp;Frames</a></li>
-</ul>
-<ul class="navList" id="allclasses_navbar_top">
-<li><a href="../allclasses-noframe.html">All&nbsp;Classes</a></li>
-</ul>
-<div>
-<script type="text/javascript"><!--
-  allClassesLink = document.getElementById("allclasses_navbar_top");
-  if(window==top) {
-    allClassesLink.style.display = "block";
-  }
-  else {
-    allClassesLink.style.display = "none";
-  }
-  //-->
-</script>
-</div>
-<div>
-<ul class="subNavList">
-<li>Summary:&nbsp;</li>
-<li>Nested&nbsp;|&nbsp;</li>
-<li><a href="#field.summary">Field</a>&nbsp;|&nbsp;</li>
-<li><a href="#constructor.summary">Constr</a>&nbsp;|&nbsp;</li>
-<li><a href="#method.summary">Method</a></li>
-</ul>
-<ul class="subNavList">
-<li>Detail:&nbsp;</li>
-<li><a href="#field.detail">Field</a>&nbsp;|&nbsp;</li>
-<li><a href="#constructor.detail">Constr</a>&nbsp;|&nbsp;</li>
-<li><a href="#method.detail">Method</a></li>
-</ul>
-</div>
-<a name="skip.navbar.top">
-<!--   -->
-</a></div>
-<!-- ========= END OF TOP NAVBAR ========= -->
-<!-- ======== START OF CLASS DATA ======== -->
-<div class="header">
-<div class="subTitle">simpledb</div>
-<h2 title="Class TupleDesc.TDItem" class="title">Class TupleDesc.TDItem</h2>
-</div>
-<div class="contentContainer">
-<ul class="inheritance">
-<li>java.lang.Object</li>
-<li>
-<ul class="inheritance">
-<li>simpledb.TupleDesc.TDItem</li>
-</ul>
-</li>
-</ul>
-<div class="description">
-<ul class="blockList">
-<li class="blockList">
-<dl>
-<dt>All Implemented Interfaces:</dt>
-<dd>java.io.Serializable</dd>
-</dl>
-<dl>
-<dt>Enclosing class:</dt>
-<dd><a href="../simpledb/TupleDesc.html" title="class in simpledb">TupleDesc</a></dd>
-</dl>
-<hr>
-<br>
-<pre>public static class <span class="typeNameLabel">TupleDesc.TDItem</span>
-extends java.lang.Object
-implements java.io.Serializable</pre>
-<div class="block">A help class to facilitate organizing the information of each field</div>
-<dl>
-<dt><span class="seeLabel">See Also:</span></dt>
-<dd><a href="../serialized-form.html#simpledb.TupleDesc.TDItem">Serialized Form</a></dd>
-</dl>
-</li>
-</ul>
-</div>
-<div class="summary">
-<ul class="blockList">
-<li class="blockList">
-<!-- =========== FIELD SUMMARY =========== -->
-<ul class="blockList">
-<li class="blockList"><a name="field.summary">
-<!--   -->
-</a>
-<h3>Field Summary</h3>
-<table class="memberSummary" border="0" cellpadding="3" cellspacing="0" summary="Field Summary table, listing fields, and an explanation">
-<caption><span>Fields</span><span class="tabEnd">&nbsp;</span></caption>
-<tr>
-<th class="colFirst" scope="col">Modifier and Type</th>
-<th class="colLast" scope="col">Field and Description</th>
-</tr>
-<tr class="altColor">
-<td class="colFirst"><code>java.lang.String</code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/TupleDesc.TDItem.html#fieldName">fieldName</a></span></code>
-<div class="block">The name of the field</div>
-</td>
-</tr>
-<tr class="rowColor">
-<td class="colFirst"><code><a href="../simpledb/Type.html" title="enum in simpledb">Type</a></code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/TupleDesc.TDItem.html#fieldType">fieldType</a></span></code>
-<div class="block">The type of the field</div>
-</td>
-</tr>
-<tr class="altColor">
-<td class="colFirst"><code>private static long</code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/TupleDesc.TDItem.html#serialVersionUID">serialVersionUID</a></span></code>&nbsp;</td>
-</tr>
-</table>
-</li>
-</ul>
-<!-- ======== CONSTRUCTOR SUMMARY ======== -->
-<ul class="blockList">
-<li class="blockList"><a name="constructor.summary">
-<!--   -->
-</a>
-<h3>Constructor Summary</h3>
-<table class="memberSummary" border="0" cellpadding="3" cellspacing="0" summary="Constructor Summary table, listing constructors, and an explanation">
-<caption><span>Constructors</span><span class="tabEnd">&nbsp;</span></caption>
-<tr>
-<th class="colOne" scope="col">Constructor and Description</th>
-</tr>
-<tr class="altColor">
-<td class="colOne"><code><span class="memberNameLink"><a href="../simpledb/TupleDesc.TDItem.html#TDItem-simpledb.Type-java.lang.String-">TDItem</a></span>(<a href="../simpledb/Type.html" title="enum in simpledb">Type</a>&nbsp;t,
-      java.lang.String&nbsp;n)</code>&nbsp;</td>
-</tr>
-</table>
-</li>
-</ul>
-<!-- ========== METHOD SUMMARY =========== -->
-<ul class="blockList">
-<li class="blockList"><a name="method.summary">
-<!--   -->
-</a>
-<h3>Method Summary</h3>
-<table class="memberSummary" border="0" cellpadding="3" cellspacing="0" summary="Method Summary table, listing methods, and an explanation">
-<caption><span id="t0" class="activeTableTab"><span>All Methods</span><span class="tabEnd">&nbsp;</span></span><span id="t2" class="tableTab"><span><a href="javascript:show(2);">Instance Methods</a></span><span class="tabEnd">&nbsp;</span></span><span id="t4" class="tableTab"><span><a href="javascript:show(8);">Concrete Methods</a></span><span class="tabEnd">&nbsp;</span></span></caption>
-<tr>
-<th class="colFirst" scope="col">Modifier and Type</th>
-<th class="colLast" scope="col">Method and Description</th>
-</tr>
-<tr id="i0" class="altColor">
-<td class="colFirst"><code>java.lang.String</code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/TupleDesc.TDItem.html#toString--">toString</a></span>()</code>&nbsp;</td>
-</tr>
-</table>
-<ul class="blockList">
-<li class="blockList"><a name="methods.inherited.from.class.java.lang.Object">
-<!--   -->
-</a>
-<h3>Methods inherited from class&nbsp;java.lang.Object</h3>
-<code>clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait</code></li>
-</ul>
-</li>
-</ul>
-</li>
-</ul>
-</div>
-<div class="details">
-<ul class="blockList">
-<li class="blockList">
-<!-- ============ FIELD DETAIL =========== -->
-<ul class="blockList">
-<li class="blockList"><a name="field.detail">
-<!--   -->
-</a>
-<h3>Field Detail</h3>
-<a name="serialVersionUID">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>serialVersionUID</h4>
-<pre>private static final&nbsp;long serialVersionUID</pre>
-<dl>
-<dt><span class="seeLabel">See Also:</span></dt>
-<dd><a href="../constant-values.html#simpledb.TupleDesc.TDItem.serialVersionUID">Constant Field Values</a></dd>
-</dl>
-</li>
-</ul>
-<a name="fieldType">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>fieldType</h4>
-<pre>public final&nbsp;<a href="../simpledb/Type.html" title="enum in simpledb">Type</a> fieldType</pre>
-<div class="block">The type of the field</div>
-</li>
-</ul>
-<a name="fieldName">
-<!--   -->
-</a>
-<ul class="blockListLast">
-<li class="blockList">
-<h4>fieldName</h4>
-<pre>public final&nbsp;java.lang.String fieldName</pre>
-<div class="block">The name of the field</div>
-</li>
-</ul>
-</li>
-</ul>
-<!-- ========= CONSTRUCTOR DETAIL ======== -->
-<ul class="blockList">
-<li class="blockList"><a name="constructor.detail">
-<!--   -->
-</a>
-<h3>Constructor Detail</h3>
-<a name="TDItem-simpledb.Type-java.lang.String-">
-<!--   -->
-</a>
-<ul class="blockListLast">
-<li class="blockList">
-<h4>TDItem</h4>
-<pre>public&nbsp;TDItem(<a href="../simpledb/Type.html" title="enum in simpledb">Type</a>&nbsp;t,
-              java.lang.String&nbsp;n)</pre>
-</li>
-</ul>
-</li>
-</ul>
-<!-- ============ METHOD DETAIL ========== -->
-<ul class="blockList">
-<li class="blockList"><a name="method.detail">
-<!--   -->
-</a>
-<h3>Method Detail</h3>
-<a name="toString--">
-<!--   -->
-</a>
-<ul class="blockListLast">
-<li class="blockList">
-<h4>toString</h4>
-<pre>public&nbsp;java.lang.String&nbsp;toString()</pre>
-<dl>
-<dt><span class="overrideSpecifyLabel">Overrides:</span></dt>
-<dd><code>toString</code>&nbsp;in class&nbsp;<code>java.lang.Object</code></dd>
-</dl>
-</li>
-</ul>
-</li>
-</ul>
-</li>
-</ul>
-</div>
-</div>
-<!-- ========= END OF CLASS DATA ========= -->
-<!-- ======= START OF BOTTOM NAVBAR ====== -->
-<div class="bottomNav"><a name="navbar.bottom">
-<!--   -->
-</a>
-<div class="skipNav"><a href="#skip.navbar.bottom" title="Skip navigation links">Skip navigation links</a></div>
-<a name="navbar.bottom.firstrow">
-<!--   -->
-</a>
-<ul class="navList" title="Navigation">
-<li><a href="../simpledb/package-summary.html">Package</a></li>
-<li class="navBarCell1Rev">Class</li>
-<li><a href="package-tree.html">Tree</a></li>
-<li><a href="../deprecated-list.html">Deprecated</a></li>
-<li><a href="../index-all.html">Index</a></li>
-<li><a href="../help-doc.html">Help</a></li>
-</ul>
-</div>
-<div class="subNav">
-<ul class="navList">
-<li><a href="../simpledb/TupleDesc.html" title="class in simpledb"><span class="typeNameLink">Prev&nbsp;Class</span></a></li>
-<li><a href="../simpledb/TupleIterator.html" title="class in simpledb"><span class="typeNameLink">Next&nbsp;Class</span></a></li>
-</ul>
-<ul class="navList">
-<li><a href="../index.html?simpledb/TupleDesc.TDItem.html" target="_top">Frames</a></li>
-<li><a href="TupleDesc.TDItem.html" target="_top">No&nbsp;Frames</a></li>
-</ul>
-<ul class="navList" id="allclasses_navbar_bottom">
-<li><a href="../allclasses-noframe.html">All&nbsp;Classes</a></li>
-</ul>
-<div>
-<script type="text/javascript"><!--
-  allClassesLink = document.getElementById("allclasses_navbar_bottom");
-  if(window==top) {
-    allClassesLink.style.display = "block";
-  }
-  else {
-    allClassesLink.style.display = "none";
-  }
-  //-->
-</script>
-</div>
-<div>
-<ul class="subNavList">
-<li>Summary:&nbsp;</li>
-<li>Nested&nbsp;|&nbsp;</li>
-<li><a href="#field.summary">Field</a>&nbsp;|&nbsp;</li>
-<li><a href="#constructor.summary">Constr</a>&nbsp;|&nbsp;</li>
-<li><a href="#method.summary">Method</a></li>
-</ul>
-<ul class="subNavList">
-<li>Detail:&nbsp;</li>
-<li><a href="#field.detail">Field</a>&nbsp;|&nbsp;</li>
-<li><a href="#constructor.detail">Constr</a>&nbsp;|&nbsp;</li>
-<li><a href="#method.detail">Method</a></li>
-</ul>
-</div>
-<a name="skip.navbar.bottom">
-<!--   -->
-</a></div>
-<!-- ======== END OF BOTTOM NAVBAR ======= -->
-</body>
-</html>
diff -ruN lab1/javadoc/simpledb/TupleDesc.html lab3/javadoc/simpledb/TupleDesc.html
--- lab1/javadoc/simpledb/TupleDesc.html	2016-11-02 22:06:58.000000000 -0500
+++ lab3/javadoc/simpledb/TupleDesc.html	1969-12-31 18:00:00.000000000 -0600
@@ -1,583 +0,0 @@
-<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
-<!-- NewPage -->
-<html lang="en">
-<head>
-<!-- Generated by javadoc (1.8.0_25) on Thu Oct 27 13:16:24 CDT 2016 -->
-<title>TupleDesc</title>
-<meta name="date" content="2016-10-27">
-<link rel="stylesheet" type="text/css" href="../stylesheet.css" title="Style">
-<script type="text/javascript" src="../script.js"></script>
-</head>
-<body>
-<script type="text/javascript"><!--
-    try {
-        if (location.href.indexOf('is-external=true') == -1) {
-            parent.document.title="TupleDesc";
-        }
-    }
-    catch(err) {
-    }
-//-->
-var methods = {"i0":10,"i1":10,"i2":10,"i3":10,"i4":10,"i5":10,"i6":10,"i7":9,"i8":10,"i9":10};
-var tabs = {65535:["t0","All Methods"],1:["t1","Static Methods"],2:["t2","Instance Methods"],8:["t4","Concrete Methods"]};
-var altColor = "altColor";
-var rowColor = "rowColor";
-var tableTab = "tableTab";
-var activeTableTab = "activeTableTab";
-</script>
-<noscript>
-<div>JavaScript is disabled on your browser.</div>
-</noscript>
-<!-- ========= START OF TOP NAVBAR ======= -->
-<div class="topNav"><a name="navbar.top">
-<!--   -->
-</a>
-<div class="skipNav"><a href="#skip.navbar.top" title="Skip navigation links">Skip navigation links</a></div>
-<a name="navbar.top.firstrow">
-<!--   -->
-</a>
-<ul class="navList" title="Navigation">
-<li><a href="../simpledb/package-summary.html">Package</a></li>
-<li class="navBarCell1Rev">Class</li>
-<li><a href="package-tree.html">Tree</a></li>
-<li><a href="../deprecated-list.html">Deprecated</a></li>
-<li><a href="../index-all.html">Index</a></li>
-<li><a href="../help-doc.html">Help</a></li>
-</ul>
-</div>
-<div class="subNav">
-<ul class="navList">
-<li><a href="../simpledb/Tuple.html" title="class in simpledb"><span class="typeNameLink">Prev&nbsp;Class</span></a></li>
-<li><a href="../simpledb/TupleDesc.TDItem.html" title="class in simpledb"><span class="typeNameLink">Next&nbsp;Class</span></a></li>
-</ul>
-<ul class="navList">
-<li><a href="../index.html?simpledb/TupleDesc.html" target="_top">Frames</a></li>
-<li><a href="TupleDesc.html" target="_top">No&nbsp;Frames</a></li>
-</ul>
-<ul class="navList" id="allclasses_navbar_top">
-<li><a href="../allclasses-noframe.html">All&nbsp;Classes</a></li>
-</ul>
-<div>
-<script type="text/javascript"><!--
-  allClassesLink = document.getElementById("allclasses_navbar_top");
-  if(window==top) {
-    allClassesLink.style.display = "block";
-  }
-  else {
-    allClassesLink.style.display = "none";
-  }
-  //-->
-</script>
-</div>
-<div>
-<ul class="subNavList">
-<li>Summary:&nbsp;</li>
-<li><a href="#nested.class.summary">Nested</a>&nbsp;|&nbsp;</li>
-<li><a href="#field.summary">Field</a>&nbsp;|&nbsp;</li>
-<li><a href="#constructor.summary">Constr</a>&nbsp;|&nbsp;</li>
-<li><a href="#method.summary">Method</a></li>
-</ul>
-<ul class="subNavList">
-<li>Detail:&nbsp;</li>
-<li><a href="#field.detail">Field</a>&nbsp;|&nbsp;</li>
-<li><a href="#constructor.detail">Constr</a>&nbsp;|&nbsp;</li>
-<li><a href="#method.detail">Method</a></li>
-</ul>
-</div>
-<a name="skip.navbar.top">
-<!--   -->
-</a></div>
-<!-- ========= END OF TOP NAVBAR ========= -->
-<!-- ======== START OF CLASS DATA ======== -->
-<div class="header">
-<div class="subTitle">simpledb</div>
-<h2 title="Class TupleDesc" class="title">Class TupleDesc</h2>
-</div>
-<div class="contentContainer">
-<ul class="inheritance">
-<li>java.lang.Object</li>
-<li>
-<ul class="inheritance">
-<li>simpledb.TupleDesc</li>
-</ul>
-</li>
-</ul>
-<div class="description">
-<ul class="blockList">
-<li class="blockList">
-<dl>
-<dt>All Implemented Interfaces:</dt>
-<dd>java.io.Serializable</dd>
-</dl>
-<hr>
-<br>
-<pre>public class <span class="typeNameLabel">TupleDesc</span>
-extends java.lang.Object
-implements java.io.Serializable</pre>
-<div class="block">TupleDesc describes the schema of a tuple.</div>
-<dl>
-<dt><span class="seeLabel">See Also:</span></dt>
-<dd><a href="../serialized-form.html#simpledb.TupleDesc">Serialized Form</a></dd>
-</dl>
-</li>
-</ul>
-</div>
-<div class="summary">
-<ul class="blockList">
-<li class="blockList">
-<!-- ======== NESTED CLASS SUMMARY ======== -->
-<ul class="blockList">
-<li class="blockList"><a name="nested.class.summary">
-<!--   -->
-</a>
-<h3>Nested Class Summary</h3>
-<table class="memberSummary" border="0" cellpadding="3" cellspacing="0" summary="Nested Class Summary table, listing nested classes, and an explanation">
-<caption><span>Nested Classes</span><span class="tabEnd">&nbsp;</span></caption>
-<tr>
-<th class="colFirst" scope="col">Modifier and Type</th>
-<th class="colLast" scope="col">Class and Description</th>
-</tr>
-<tr class="altColor">
-<td class="colFirst"><code>static class&nbsp;</code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/TupleDesc.TDItem.html" title="class in simpledb">TupleDesc.TDItem</a></span></code>
-<div class="block">A help class to facilitate organizing the information of each field</div>
-</td>
-</tr>
-</table>
-</li>
-</ul>
-<!-- =========== FIELD SUMMARY =========== -->
-<ul class="blockList">
-<li class="blockList"><a name="field.summary">
-<!--   -->
-</a>
-<h3>Field Summary</h3>
-<table class="memberSummary" border="0" cellpadding="3" cellspacing="0" summary="Field Summary table, listing fields, and an explanation">
-<caption><span>Fields</span><span class="tabEnd">&nbsp;</span></caption>
-<tr>
-<th class="colFirst" scope="col">Modifier and Type</th>
-<th class="colLast" scope="col">Field and Description</th>
-</tr>
-<tr class="altColor">
-<td class="colFirst"><code>private static long</code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/TupleDesc.html#serialVersionUID">serialVersionUID</a></span></code>&nbsp;</td>
-</tr>
-</table>
-</li>
-</ul>
-<!-- ======== CONSTRUCTOR SUMMARY ======== -->
-<ul class="blockList">
-<li class="blockList"><a name="constructor.summary">
-<!--   -->
-</a>
-<h3>Constructor Summary</h3>
-<table class="memberSummary" border="0" cellpadding="3" cellspacing="0" summary="Constructor Summary table, listing constructors, and an explanation">
-<caption><span>Constructors</span><span class="tabEnd">&nbsp;</span></caption>
-<tr>
-<th class="colOne" scope="col">Constructor and Description</th>
-</tr>
-<tr class="altColor">
-<td class="colOne"><code><span class="memberNameLink"><a href="../simpledb/TupleDesc.html#TupleDesc-simpledb.Type:A-">TupleDesc</a></span>(<a href="../simpledb/Type.html" title="enum in simpledb">Type</a>[]&nbsp;typeAr)</code>
-<div class="block">Constructor.</div>
-</td>
-</tr>
-<tr class="rowColor">
-<td class="colOne"><code><span class="memberNameLink"><a href="../simpledb/TupleDesc.html#TupleDesc-simpledb.Type:A-java.lang.String:A-">TupleDesc</a></span>(<a href="../simpledb/Type.html" title="enum in simpledb">Type</a>[]&nbsp;typeAr,
-         java.lang.String[]&nbsp;fieldAr)</code>
-<div class="block">Create a new TupleDesc with typeAr.length fields with fields of the
- specified types, with associated named fields.</div>
-</td>
-</tr>
-</table>
-</li>
-</ul>
-<!-- ========== METHOD SUMMARY =========== -->
-<ul class="blockList">
-<li class="blockList"><a name="method.summary">
-<!--   -->
-</a>
-<h3>Method Summary</h3>
-<table class="memberSummary" border="0" cellpadding="3" cellspacing="0" summary="Method Summary table, listing methods, and an explanation">
-<caption><span id="t0" class="activeTableTab"><span>All Methods</span><span class="tabEnd">&nbsp;</span></span><span id="t1" class="tableTab"><span><a href="javascript:show(1);">Static Methods</a></span><span class="tabEnd">&nbsp;</span></span><span id="t2" class="tableTab"><span><a href="javascript:show(2);">Instance Methods</a></span><span class="tabEnd">&nbsp;</span></span><span id="t4" class="tableTab"><span><a href="javascript:show(8);">Concrete Methods</a></span><span class="tabEnd">&nbsp;</span></span></caption>
-<tr>
-<th class="colFirst" scope="col">Modifier and Type</th>
-<th class="colLast" scope="col">Method and Description</th>
-</tr>
-<tr id="i0" class="altColor">
-<td class="colFirst"><code>boolean</code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/TupleDesc.html#equals-java.lang.Object-">equals</a></span>(java.lang.Object&nbsp;o)</code>
-<div class="block">Compares the specified object with this TupleDesc for equality.</div>
-</td>
-</tr>
-<tr id="i1" class="rowColor">
-<td class="colFirst"><code>int</code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/TupleDesc.html#fieldNameToIndex-java.lang.String-">fieldNameToIndex</a></span>(java.lang.String&nbsp;name)</code>
-<div class="block">Find the index of the field with a given name.</div>
-</td>
-</tr>
-<tr id="i2" class="altColor">
-<td class="colFirst"><code>java.lang.String</code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/TupleDesc.html#getFieldName-int-">getFieldName</a></span>(int&nbsp;i)</code>
-<div class="block">Gets the (possibly null) field name of the ith field of this TupleDesc.</div>
-</td>
-</tr>
-<tr id="i3" class="rowColor">
-<td class="colFirst"><code><a href="../simpledb/Type.html" title="enum in simpledb">Type</a></code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/TupleDesc.html#getFieldType-int-">getFieldType</a></span>(int&nbsp;i)</code>
-<div class="block">Gets the type of the ith field of this TupleDesc.</div>
-</td>
-</tr>
-<tr id="i4" class="altColor">
-<td class="colFirst"><code>int</code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/TupleDesc.html#getSize--">getSize</a></span>()</code>&nbsp;</td>
-</tr>
-<tr id="i5" class="rowColor">
-<td class="colFirst"><code>int</code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/TupleDesc.html#hashCode--">hashCode</a></span>()</code>&nbsp;</td>
-</tr>
-<tr id="i6" class="altColor">
-<td class="colFirst"><code>java.util.Iterator&lt;<a href="../simpledb/TupleDesc.TDItem.html" title="class in simpledb">TupleDesc.TDItem</a>&gt;</code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/TupleDesc.html#iterator--">iterator</a></span>()</code>&nbsp;</td>
-</tr>
-<tr id="i7" class="rowColor">
-<td class="colFirst"><code>static <a href="../simpledb/TupleDesc.html" title="class in simpledb">TupleDesc</a></code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/TupleDesc.html#merge-simpledb.TupleDesc-simpledb.TupleDesc-">merge</a></span>(<a href="../simpledb/TupleDesc.html" title="class in simpledb">TupleDesc</a>&nbsp;td1,
-     <a href="../simpledb/TupleDesc.html" title="class in simpledb">TupleDesc</a>&nbsp;td2)</code>
-<div class="block">Merge two TupleDescs into one, with td1.numFields + td2.numFields fields,
- with the first td1.numFields coming from td1 and the remaining from td2.</div>
-</td>
-</tr>
-<tr id="i8" class="altColor">
-<td class="colFirst"><code>int</code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/TupleDesc.html#numFields--">numFields</a></span>()</code>&nbsp;</td>
-</tr>
-<tr id="i9" class="rowColor">
-<td class="colFirst"><code>java.lang.String</code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/TupleDesc.html#toString--">toString</a></span>()</code>
-<div class="block">Returns a String describing this descriptor.</div>
-</td>
-</tr>
-</table>
-<ul class="blockList">
-<li class="blockList"><a name="methods.inherited.from.class.java.lang.Object">
-<!--   -->
-</a>
-<h3>Methods inherited from class&nbsp;java.lang.Object</h3>
-<code>clone, finalize, getClass, notify, notifyAll, wait, wait, wait</code></li>
-</ul>
-</li>
-</ul>
-</li>
-</ul>
-</div>
-<div class="details">
-<ul class="blockList">
-<li class="blockList">
-<!-- ============ FIELD DETAIL =========== -->
-<ul class="blockList">
-<li class="blockList"><a name="field.detail">
-<!--   -->
-</a>
-<h3>Field Detail</h3>
-<a name="serialVersionUID">
-<!--   -->
-</a>
-<ul class="blockListLast">
-<li class="blockList">
-<h4>serialVersionUID</h4>
-<pre>private static final&nbsp;long serialVersionUID</pre>
-<dl>
-<dt><span class="seeLabel">See Also:</span></dt>
-<dd><a href="../constant-values.html#simpledb.TupleDesc.serialVersionUID">Constant Field Values</a></dd>
-</dl>
-</li>
-</ul>
-</li>
-</ul>
-<!-- ========= CONSTRUCTOR DETAIL ======== -->
-<ul class="blockList">
-<li class="blockList"><a name="constructor.detail">
-<!--   -->
-</a>
-<h3>Constructor Detail</h3>
-<a name="TupleDesc-simpledb.Type:A-java.lang.String:A-">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>TupleDesc</h4>
-<pre>public&nbsp;TupleDesc(<a href="../simpledb/Type.html" title="enum in simpledb">Type</a>[]&nbsp;typeAr,
-                 java.lang.String[]&nbsp;fieldAr)</pre>
-<div class="block">Create a new TupleDesc with typeAr.length fields with fields of the
- specified types, with associated named fields.</div>
-<dl>
-<dt><span class="paramLabel">Parameters:</span></dt>
-<dd><code>typeAr</code> - array specifying the number of and types of fields in this
-            TupleDesc. It must contain at least one entry.</dd>
-<dd><code>fieldAr</code> - array specifying the names of the fields. Note that names may
-            be null.</dd>
-</dl>
-</li>
-</ul>
-<a name="TupleDesc-simpledb.Type:A-">
-<!--   -->
-</a>
-<ul class="blockListLast">
-<li class="blockList">
-<h4>TupleDesc</h4>
-<pre>public&nbsp;TupleDesc(<a href="../simpledb/Type.html" title="enum in simpledb">Type</a>[]&nbsp;typeAr)</pre>
-<div class="block">Constructor. Create a new tuple desc with typeAr.length fields with
- fields of the specified types, with anonymous (unnamed) fields.</div>
-<dl>
-<dt><span class="paramLabel">Parameters:</span></dt>
-<dd><code>typeAr</code> - array specifying the number of and types of fields in this
-            TupleDesc. It must contain at least one entry.</dd>
-</dl>
-</li>
-</ul>
-</li>
-</ul>
-<!-- ============ METHOD DETAIL ========== -->
-<ul class="blockList">
-<li class="blockList"><a name="method.detail">
-<!--   -->
-</a>
-<h3>Method Detail</h3>
-<a name="iterator--">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>iterator</h4>
-<pre>public&nbsp;java.util.Iterator&lt;<a href="../simpledb/TupleDesc.TDItem.html" title="class in simpledb">TupleDesc.TDItem</a>&gt;&nbsp;iterator()</pre>
-<dl>
-<dt><span class="returnLabel">Returns:</span></dt>
-<dd>An iterator which iterates over all the field TDItems
-        that are included in this TupleDesc</dd>
-</dl>
-</li>
-</ul>
-<a name="numFields--">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>numFields</h4>
-<pre>public&nbsp;int&nbsp;numFields()</pre>
-<dl>
-<dt><span class="returnLabel">Returns:</span></dt>
-<dd>the number of fields in this TupleDesc</dd>
-</dl>
-</li>
-</ul>
-<a name="getFieldName-int-">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>getFieldName</h4>
-<pre>public&nbsp;java.lang.String&nbsp;getFieldName(int&nbsp;i)
-                              throws java.util.NoSuchElementException</pre>
-<div class="block">Gets the (possibly null) field name of the ith field of this TupleDesc.</div>
-<dl>
-<dt><span class="paramLabel">Parameters:</span></dt>
-<dd><code>i</code> - index of the field name to return. It must be a valid index.</dd>
-<dt><span class="returnLabel">Returns:</span></dt>
-<dd>the name of the ith field</dd>
-<dt><span class="throwsLabel">Throws:</span></dt>
-<dd><code>java.util.NoSuchElementException</code> - if i is not a valid field reference.</dd>
-</dl>
-</li>
-</ul>
-<a name="getFieldType-int-">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>getFieldType</h4>
-<pre>public&nbsp;<a href="../simpledb/Type.html" title="enum in simpledb">Type</a>&nbsp;getFieldType(int&nbsp;i)
-                  throws java.util.NoSuchElementException</pre>
-<div class="block">Gets the type of the ith field of this TupleDesc.</div>
-<dl>
-<dt><span class="paramLabel">Parameters:</span></dt>
-<dd><code>i</code> - The index of the field to get the type of. It must be a valid
-            index.</dd>
-<dt><span class="returnLabel">Returns:</span></dt>
-<dd>the type of the ith field</dd>
-<dt><span class="throwsLabel">Throws:</span></dt>
-<dd><code>java.util.NoSuchElementException</code> - if i is not a valid field reference.</dd>
-</dl>
-</li>
-</ul>
-<a name="fieldNameToIndex-java.lang.String-">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>fieldNameToIndex</h4>
-<pre>public&nbsp;int&nbsp;fieldNameToIndex(java.lang.String&nbsp;name)
-                     throws java.util.NoSuchElementException</pre>
-<div class="block">Find the index of the field with a given name.</div>
-<dl>
-<dt><span class="paramLabel">Parameters:</span></dt>
-<dd><code>name</code> - name of the field.</dd>
-<dt><span class="returnLabel">Returns:</span></dt>
-<dd>the index of the field that is first to have the given name.</dd>
-<dt><span class="throwsLabel">Throws:</span></dt>
-<dd><code>java.util.NoSuchElementException</code> - if no field with a matching name is found.</dd>
-</dl>
-</li>
-</ul>
-<a name="getSize--">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>getSize</h4>
-<pre>public&nbsp;int&nbsp;getSize()</pre>
-<dl>
-<dt><span class="returnLabel">Returns:</span></dt>
-<dd>The size (in bytes) of tuples corresponding to this TupleDesc.
-         Note that tuples from a given TupleDesc are of a fixed size.</dd>
-</dl>
-</li>
-</ul>
-<a name="merge-simpledb.TupleDesc-simpledb.TupleDesc-">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>merge</h4>
-<pre>public static&nbsp;<a href="../simpledb/TupleDesc.html" title="class in simpledb">TupleDesc</a>&nbsp;merge(<a href="../simpledb/TupleDesc.html" title="class in simpledb">TupleDesc</a>&nbsp;td1,
-                              <a href="../simpledb/TupleDesc.html" title="class in simpledb">TupleDesc</a>&nbsp;td2)</pre>
-<div class="block">Merge two TupleDescs into one, with td1.numFields + td2.numFields fields,
- with the first td1.numFields coming from td1 and the remaining from td2.</div>
-<dl>
-<dt><span class="paramLabel">Parameters:</span></dt>
-<dd><code>td1</code> - The TupleDesc with the first fields of the new TupleDesc</dd>
-<dd><code>td2</code> - The TupleDesc with the last fields of the TupleDesc</dd>
-<dt><span class="returnLabel">Returns:</span></dt>
-<dd>the new TupleDesc</dd>
-</dl>
-</li>
-</ul>
-<a name="equals-java.lang.Object-">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>equals</h4>
-<pre>public&nbsp;boolean&nbsp;equals(java.lang.Object&nbsp;o)</pre>
-<div class="block">Compares the specified object with this TupleDesc for equality. Two
- TupleDescs are considered equal if they are the same size and if the n-th
- type in this TupleDesc is equal to the n-th type in td.</div>
-<dl>
-<dt><span class="overrideSpecifyLabel">Overrides:</span></dt>
-<dd><code>equals</code>&nbsp;in class&nbsp;<code>java.lang.Object</code></dd>
-<dt><span class="paramLabel">Parameters:</span></dt>
-<dd><code>o</code> - the Object to be compared for equality with this TupleDesc.</dd>
-<dt><span class="returnLabel">Returns:</span></dt>
-<dd>true if the object is equal to this TupleDesc.</dd>
-</dl>
-</li>
-</ul>
-<a name="hashCode--">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>hashCode</h4>
-<pre>public&nbsp;int&nbsp;hashCode()</pre>
-<dl>
-<dt><span class="overrideSpecifyLabel">Overrides:</span></dt>
-<dd><code>hashCode</code>&nbsp;in class&nbsp;<code>java.lang.Object</code></dd>
-</dl>
-</li>
-</ul>
-<a name="toString--">
-<!--   -->
-</a>
-<ul class="blockListLast">
-<li class="blockList">
-<h4>toString</h4>
-<pre>public&nbsp;java.lang.String&nbsp;toString()</pre>
-<div class="block">Returns a String describing this descriptor. It should be of the form
- "fieldType[0](fieldName[0]), ..., fieldType[M](fieldName[M])", although
- the exact format does not matter.</div>
-<dl>
-<dt><span class="overrideSpecifyLabel">Overrides:</span></dt>
-<dd><code>toString</code>&nbsp;in class&nbsp;<code>java.lang.Object</code></dd>
-<dt><span class="returnLabel">Returns:</span></dt>
-<dd>String describing this descriptor.</dd>
-</dl>
-</li>
-</ul>
-</li>
-</ul>
-</li>
-</ul>
-</div>
-</div>
-<!-- ========= END OF CLASS DATA ========= -->
-<!-- ======= START OF BOTTOM NAVBAR ====== -->
-<div class="bottomNav"><a name="navbar.bottom">
-<!--   -->
-</a>
-<div class="skipNav"><a href="#skip.navbar.bottom" title="Skip navigation links">Skip navigation links</a></div>
-<a name="navbar.bottom.firstrow">
-<!--   -->
-</a>
-<ul class="navList" title="Navigation">
-<li><a href="../simpledb/package-summary.html">Package</a></li>
-<li class="navBarCell1Rev">Class</li>
-<li><a href="package-tree.html">Tree</a></li>
-<li><a href="../deprecated-list.html">Deprecated</a></li>
-<li><a href="../index-all.html">Index</a></li>
-<li><a href="../help-doc.html">Help</a></li>
-</ul>
-</div>
-<div class="subNav">
-<ul class="navList">
-<li><a href="../simpledb/Tuple.html" title="class in simpledb"><span class="typeNameLink">Prev&nbsp;Class</span></a></li>
-<li><a href="../simpledb/TupleDesc.TDItem.html" title="class in simpledb"><span class="typeNameLink">Next&nbsp;Class</span></a></li>
-</ul>
-<ul class="navList">
-<li><a href="../index.html?simpledb/TupleDesc.html" target="_top">Frames</a></li>
-<li><a href="TupleDesc.html" target="_top">No&nbsp;Frames</a></li>
-</ul>
-<ul class="navList" id="allclasses_navbar_bottom">
-<li><a href="../allclasses-noframe.html">All&nbsp;Classes</a></li>
-</ul>
-<div>
-<script type="text/javascript"><!--
-  allClassesLink = document.getElementById("allclasses_navbar_bottom");
-  if(window==top) {
-    allClassesLink.style.display = "block";
-  }
-  else {
-    allClassesLink.style.display = "none";
-  }
-  //-->
-</script>
-</div>
-<div>
-<ul class="subNavList">
-<li>Summary:&nbsp;</li>
-<li><a href="#nested.class.summary">Nested</a>&nbsp;|&nbsp;</li>
-<li><a href="#field.summary">Field</a>&nbsp;|&nbsp;</li>
-<li><a href="#constructor.summary">Constr</a>&nbsp;|&nbsp;</li>
-<li><a href="#method.summary">Method</a></li>
-</ul>
-<ul class="subNavList">
-<li>Detail:&nbsp;</li>
-<li><a href="#field.detail">Field</a>&nbsp;|&nbsp;</li>
-<li><a href="#constructor.detail">Constr</a>&nbsp;|&nbsp;</li>
-<li><a href="#method.detail">Method</a></li>
-</ul>
-</div>
-<a name="skip.navbar.bottom">
-<!--   -->
-</a></div>
-<!-- ======== END OF BOTTOM NAVBAR ======= -->
-</body>
-</html>
diff -ruN lab1/javadoc/simpledb/TupleIterator.html lab3/javadoc/simpledb/TupleIterator.html
--- lab1/javadoc/simpledb/TupleIterator.html	2016-11-02 22:06:58.000000000 -0500
+++ lab3/javadoc/simpledb/TupleIterator.html	1969-12-31 18:00:00.000000000 -0600
@@ -1,489 +0,0 @@
-<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
-<!-- NewPage -->
-<html lang="en">
-<head>
-<!-- Generated by javadoc (1.8.0_25) on Thu Oct 27 13:16:24 CDT 2016 -->
-<title>TupleIterator</title>
-<meta name="date" content="2016-10-27">
-<link rel="stylesheet" type="text/css" href="../stylesheet.css" title="Style">
-<script type="text/javascript" src="../script.js"></script>
-</head>
-<body>
-<script type="text/javascript"><!--
-    try {
-        if (location.href.indexOf('is-external=true') == -1) {
-            parent.document.title="TupleIterator";
-        }
-    }
-    catch(err) {
-    }
-//-->
-var methods = {"i0":10,"i1":10,"i2":10,"i3":10,"i4":10,"i5":10};
-var tabs = {65535:["t0","All Methods"],2:["t2","Instance Methods"],8:["t4","Concrete Methods"]};
-var altColor = "altColor";
-var rowColor = "rowColor";
-var tableTab = "tableTab";
-var activeTableTab = "activeTableTab";
-</script>
-<noscript>
-<div>JavaScript is disabled on your browser.</div>
-</noscript>
-<!-- ========= START OF TOP NAVBAR ======= -->
-<div class="topNav"><a name="navbar.top">
-<!--   -->
-</a>
-<div class="skipNav"><a href="#skip.navbar.top" title="Skip navigation links">Skip navigation links</a></div>
-<a name="navbar.top.firstrow">
-<!--   -->
-</a>
-<ul class="navList" title="Navigation">
-<li><a href="../simpledb/package-summary.html">Package</a></li>
-<li class="navBarCell1Rev">Class</li>
-<li><a href="package-tree.html">Tree</a></li>
-<li><a href="../deprecated-list.html">Deprecated</a></li>
-<li><a href="../index-all.html">Index</a></li>
-<li><a href="../help-doc.html">Help</a></li>
-</ul>
-</div>
-<div class="subNav">
-<ul class="navList">
-<li><a href="../simpledb/TupleDesc.TDItem.html" title="class in simpledb"><span class="typeNameLink">Prev&nbsp;Class</span></a></li>
-<li><a href="../simpledb/Type.html" title="enum in simpledb"><span class="typeNameLink">Next&nbsp;Class</span></a></li>
-</ul>
-<ul class="navList">
-<li><a href="../index.html?simpledb/TupleIterator.html" target="_top">Frames</a></li>
-<li><a href="TupleIterator.html" target="_top">No&nbsp;Frames</a></li>
-</ul>
-<ul class="navList" id="allclasses_navbar_top">
-<li><a href="../allclasses-noframe.html">All&nbsp;Classes</a></li>
-</ul>
-<div>
-<script type="text/javascript"><!--
-  allClassesLink = document.getElementById("allclasses_navbar_top");
-  if(window==top) {
-    allClassesLink.style.display = "block";
-  }
-  else {
-    allClassesLink.style.display = "none";
-  }
-  //-->
-</script>
-</div>
-<div>
-<ul class="subNavList">
-<li>Summary:&nbsp;</li>
-<li>Nested&nbsp;|&nbsp;</li>
-<li><a href="#field.summary">Field</a>&nbsp;|&nbsp;</li>
-<li><a href="#constructor.summary">Constr</a>&nbsp;|&nbsp;</li>
-<li><a href="#method.summary">Method</a></li>
-</ul>
-<ul class="subNavList">
-<li>Detail:&nbsp;</li>
-<li><a href="#field.detail">Field</a>&nbsp;|&nbsp;</li>
-<li><a href="#constructor.detail">Constr</a>&nbsp;|&nbsp;</li>
-<li><a href="#method.detail">Method</a></li>
-</ul>
-</div>
-<a name="skip.navbar.top">
-<!--   -->
-</a></div>
-<!-- ========= END OF TOP NAVBAR ========= -->
-<!-- ======== START OF CLASS DATA ======== -->
-<div class="header">
-<div class="subTitle">simpledb</div>
-<h2 title="Class TupleIterator" class="title">Class TupleIterator</h2>
-</div>
-<div class="contentContainer">
-<ul class="inheritance">
-<li>java.lang.Object</li>
-<li>
-<ul class="inheritance">
-<li>simpledb.TupleIterator</li>
-</ul>
-</li>
-</ul>
-<div class="description">
-<ul class="blockList">
-<li class="blockList">
-<dl>
-<dt>All Implemented Interfaces:</dt>
-<dd>java.io.Serializable, <a href="../simpledb/DbIterator.html" title="interface in simpledb">DbIterator</a></dd>
-</dl>
-<hr>
-<br>
-<pre>public class <span class="typeNameLabel">TupleIterator</span>
-extends java.lang.Object
-implements <a href="../simpledb/DbIterator.html" title="interface in simpledb">DbIterator</a></pre>
-<div class="block">Implements a DbIterator by wrapping an Iterable<Tuple>.</div>
-<dl>
-<dt><span class="seeLabel">See Also:</span></dt>
-<dd><a href="../serialized-form.html#simpledb.TupleIterator">Serialized Form</a></dd>
-</dl>
-</li>
-</ul>
-</div>
-<div class="summary">
-<ul class="blockList">
-<li class="blockList">
-<!-- =========== FIELD SUMMARY =========== -->
-<ul class="blockList">
-<li class="blockList"><a name="field.summary">
-<!--   -->
-</a>
-<h3>Field Summary</h3>
-<table class="memberSummary" border="0" cellpadding="3" cellspacing="0" summary="Field Summary table, listing fields, and an explanation">
-<caption><span>Fields</span><span class="tabEnd">&nbsp;</span></caption>
-<tr>
-<th class="colFirst" scope="col">Modifier and Type</th>
-<th class="colLast" scope="col">Field and Description</th>
-</tr>
-<tr class="altColor">
-<td class="colFirst"><code>(package private) java.util.Iterator&lt;<a href="../simpledb/Tuple.html" title="class in simpledb">Tuple</a>&gt;</code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/TupleIterator.html#i">i</a></span></code>&nbsp;</td>
-</tr>
-<tr class="rowColor">
-<td class="colFirst"><code>private static long</code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/TupleIterator.html#serialVersionUID">serialVersionUID</a></span></code>&nbsp;</td>
-</tr>
-<tr class="altColor">
-<td class="colFirst"><code>(package private) <a href="../simpledb/TupleDesc.html" title="class in simpledb">TupleDesc</a></code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/TupleIterator.html#td">td</a></span></code>&nbsp;</td>
-</tr>
-<tr class="rowColor">
-<td class="colFirst"><code>(package private) java.lang.Iterable&lt;<a href="../simpledb/Tuple.html" title="class in simpledb">Tuple</a>&gt;</code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/TupleIterator.html#tuples">tuples</a></span></code>&nbsp;</td>
-</tr>
-</table>
-</li>
-</ul>
-<!-- ======== CONSTRUCTOR SUMMARY ======== -->
-<ul class="blockList">
-<li class="blockList"><a name="constructor.summary">
-<!--   -->
-</a>
-<h3>Constructor Summary</h3>
-<table class="memberSummary" border="0" cellpadding="3" cellspacing="0" summary="Constructor Summary table, listing constructors, and an explanation">
-<caption><span>Constructors</span><span class="tabEnd">&nbsp;</span></caption>
-<tr>
-<th class="colOne" scope="col">Constructor and Description</th>
-</tr>
-<tr class="altColor">
-<td class="colOne"><code><span class="memberNameLink"><a href="../simpledb/TupleIterator.html#TupleIterator-simpledb.TupleDesc-java.lang.Iterable-">TupleIterator</a></span>(<a href="../simpledb/TupleDesc.html" title="class in simpledb">TupleDesc</a>&nbsp;td,
-             java.lang.Iterable&lt;<a href="../simpledb/Tuple.html" title="class in simpledb">Tuple</a>&gt;&nbsp;tuples)</code>
-<div class="block">Constructs an iterator from the specified Iterable, and the specified
- descriptor.</div>
-</td>
-</tr>
-</table>
-</li>
-</ul>
-<!-- ========== METHOD SUMMARY =========== -->
-<ul class="blockList">
-<li class="blockList"><a name="method.summary">
-<!--   -->
-</a>
-<h3>Method Summary</h3>
-<table class="memberSummary" border="0" cellpadding="3" cellspacing="0" summary="Method Summary table, listing methods, and an explanation">
-<caption><span id="t0" class="activeTableTab"><span>All Methods</span><span class="tabEnd">&nbsp;</span></span><span id="t2" class="tableTab"><span><a href="javascript:show(2);">Instance Methods</a></span><span class="tabEnd">&nbsp;</span></span><span id="t4" class="tableTab"><span><a href="javascript:show(8);">Concrete Methods</a></span><span class="tabEnd">&nbsp;</span></span></caption>
-<tr>
-<th class="colFirst" scope="col">Modifier and Type</th>
-<th class="colLast" scope="col">Method and Description</th>
-</tr>
-<tr id="i0" class="altColor">
-<td class="colFirst"><code>void</code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/TupleIterator.html#close--">close</a></span>()</code>
-<div class="block">Closes the iterator.</div>
-</td>
-</tr>
-<tr id="i1" class="rowColor">
-<td class="colFirst"><code><a href="../simpledb/TupleDesc.html" title="class in simpledb">TupleDesc</a></code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/TupleIterator.html#getTupleDesc--">getTupleDesc</a></span>()</code>
-<div class="block">Returns the TupleDesc associated with this DbIterator.</div>
-</td>
-</tr>
-<tr id="i2" class="altColor">
-<td class="colFirst"><code>boolean</code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/TupleIterator.html#hasNext--">hasNext</a></span>()</code>
-<div class="block">Returns true if the iterator has more tuples.</div>
-</td>
-</tr>
-<tr id="i3" class="rowColor">
-<td class="colFirst"><code><a href="../simpledb/Tuple.html" title="class in simpledb">Tuple</a></code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/TupleIterator.html#next--">next</a></span>()</code>
-<div class="block">Returns the next tuple from the operator (typically implementing by reading
- from a child operator or an access method).</div>
-</td>
-</tr>
-<tr id="i4" class="altColor">
-<td class="colFirst"><code>void</code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/TupleIterator.html#open--">open</a></span>()</code>
-<div class="block">Opens the iterator.</div>
-</td>
-</tr>
-<tr id="i5" class="rowColor">
-<td class="colFirst"><code>void</code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/TupleIterator.html#rewind--">rewind</a></span>()</code>
-<div class="block">Resets the iterator to the start.</div>
-</td>
-</tr>
-</table>
-<ul class="blockList">
-<li class="blockList"><a name="methods.inherited.from.class.java.lang.Object">
-<!--   -->
-</a>
-<h3>Methods inherited from class&nbsp;java.lang.Object</h3>
-<code>clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait</code></li>
-</ul>
-</li>
-</ul>
-</li>
-</ul>
-</div>
-<div class="details">
-<ul class="blockList">
-<li class="blockList">
-<!-- ============ FIELD DETAIL =========== -->
-<ul class="blockList">
-<li class="blockList"><a name="field.detail">
-<!--   -->
-</a>
-<h3>Field Detail</h3>
-<a name="serialVersionUID">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>serialVersionUID</h4>
-<pre>private static final&nbsp;long serialVersionUID</pre>
-<dl>
-<dt><span class="seeLabel">See Also:</span></dt>
-<dd><a href="../constant-values.html#simpledb.TupleIterator.serialVersionUID">Constant Field Values</a></dd>
-</dl>
-</li>
-</ul>
-<a name="i">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>i</h4>
-<pre>java.util.Iterator&lt;<a href="../simpledb/Tuple.html" title="class in simpledb">Tuple</a>&gt; i</pre>
-</li>
-</ul>
-<a name="td">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>td</h4>
-<pre><a href="../simpledb/TupleDesc.html" title="class in simpledb">TupleDesc</a> td</pre>
-</li>
-</ul>
-<a name="tuples">
-<!--   -->
-</a>
-<ul class="blockListLast">
-<li class="blockList">
-<h4>tuples</h4>
-<pre>java.lang.Iterable&lt;<a href="../simpledb/Tuple.html" title="class in simpledb">Tuple</a>&gt; tuples</pre>
-</li>
-</ul>
-</li>
-</ul>
-<!-- ========= CONSTRUCTOR DETAIL ======== -->
-<ul class="blockList">
-<li class="blockList"><a name="constructor.detail">
-<!--   -->
-</a>
-<h3>Constructor Detail</h3>
-<a name="TupleIterator-simpledb.TupleDesc-java.lang.Iterable-">
-<!--   -->
-</a>
-<ul class="blockListLast">
-<li class="blockList">
-<h4>TupleIterator</h4>
-<pre>public&nbsp;TupleIterator(<a href="../simpledb/TupleDesc.html" title="class in simpledb">TupleDesc</a>&nbsp;td,
-                     java.lang.Iterable&lt;<a href="../simpledb/Tuple.html" title="class in simpledb">Tuple</a>&gt;&nbsp;tuples)</pre>
-<div class="block">Constructs an iterator from the specified Iterable, and the specified
- descriptor.</div>
-<dl>
-<dt><span class="paramLabel">Parameters:</span></dt>
-<dd><code>tuples</code> - The set of tuples to iterate over</dd>
-</dl>
-</li>
-</ul>
-</li>
-</ul>
-<!-- ============ METHOD DETAIL ========== -->
-<ul class="blockList">
-<li class="blockList"><a name="method.detail">
-<!--   -->
-</a>
-<h3>Method Detail</h3>
-<a name="open--">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>open</h4>
-<pre>public&nbsp;void&nbsp;open()</pre>
-<div class="block"><span class="descfrmTypeLabel">Description copied from interface:&nbsp;<code><a href="../simpledb/DbIterator.html#open--">DbIterator</a></code></span></div>
-<div class="block">Opens the iterator. This must be called before any of the other methods.</div>
-<dl>
-<dt><span class="overrideSpecifyLabel">Specified by:</span></dt>
-<dd><code><a href="../simpledb/DbIterator.html#open--">open</a></code>&nbsp;in interface&nbsp;<code><a href="../simpledb/DbIterator.html" title="interface in simpledb">DbIterator</a></code></dd>
-</dl>
-</li>
-</ul>
-<a name="hasNext--">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>hasNext</h4>
-<pre>public&nbsp;boolean&nbsp;hasNext()</pre>
-<div class="block"><span class="descfrmTypeLabel">Description copied from interface:&nbsp;<code><a href="../simpledb/DbIterator.html#hasNext--">DbIterator</a></code></span></div>
-<div class="block">Returns true if the iterator has more tuples.</div>
-<dl>
-<dt><span class="overrideSpecifyLabel">Specified by:</span></dt>
-<dd><code><a href="../simpledb/DbIterator.html#hasNext--">hasNext</a></code>&nbsp;in interface&nbsp;<code><a href="../simpledb/DbIterator.html" title="interface in simpledb">DbIterator</a></code></dd>
-<dt><span class="returnLabel">Returns:</span></dt>
-<dd>true f the iterator has more tuples.</dd>
-</dl>
-</li>
-</ul>
-<a name="next--">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>next</h4>
-<pre>public&nbsp;<a href="../simpledb/Tuple.html" title="class in simpledb">Tuple</a>&nbsp;next()</pre>
-<div class="block"><span class="descfrmTypeLabel">Description copied from interface:&nbsp;<code><a href="../simpledb/DbIterator.html#next--">DbIterator</a></code></span></div>
-<div class="block">Returns the next tuple from the operator (typically implementing by reading
- from a child operator or an access method).</div>
-<dl>
-<dt><span class="overrideSpecifyLabel">Specified by:</span></dt>
-<dd><code><a href="../simpledb/DbIterator.html#next--">next</a></code>&nbsp;in interface&nbsp;<code><a href="../simpledb/DbIterator.html" title="interface in simpledb">DbIterator</a></code></dd>
-<dt><span class="returnLabel">Returns:</span></dt>
-<dd>the next tuple in the iteration.</dd>
-</dl>
-</li>
-</ul>
-<a name="rewind--">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>rewind</h4>
-<pre>public&nbsp;void&nbsp;rewind()</pre>
-<div class="block"><span class="descfrmTypeLabel">Description copied from interface:&nbsp;<code><a href="../simpledb/DbIterator.html#rewind--">DbIterator</a></code></span></div>
-<div class="block">Resets the iterator to the start.</div>
-<dl>
-<dt><span class="overrideSpecifyLabel">Specified by:</span></dt>
-<dd><code><a href="../simpledb/DbIterator.html#rewind--">rewind</a></code>&nbsp;in interface&nbsp;<code><a href="../simpledb/DbIterator.html" title="interface in simpledb">DbIterator</a></code></dd>
-</dl>
-</li>
-</ul>
-<a name="getTupleDesc--">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>getTupleDesc</h4>
-<pre>public&nbsp;<a href="../simpledb/TupleDesc.html" title="class in simpledb">TupleDesc</a>&nbsp;getTupleDesc()</pre>
-<div class="block"><span class="descfrmTypeLabel">Description copied from interface:&nbsp;<code><a href="../simpledb/DbIterator.html#getTupleDesc--">DbIterator</a></code></span></div>
-<div class="block">Returns the TupleDesc associated with this DbIterator.</div>
-<dl>
-<dt><span class="overrideSpecifyLabel">Specified by:</span></dt>
-<dd><code><a href="../simpledb/DbIterator.html#getTupleDesc--">getTupleDesc</a></code>&nbsp;in interface&nbsp;<code><a href="../simpledb/DbIterator.html" title="interface in simpledb">DbIterator</a></code></dd>
-<dt><span class="returnLabel">Returns:</span></dt>
-<dd>the TupleDesc associated with this DbIterator.</dd>
-</dl>
-</li>
-</ul>
-<a name="close--">
-<!--   -->
-</a>
-<ul class="blockListLast">
-<li class="blockList">
-<h4>close</h4>
-<pre>public&nbsp;void&nbsp;close()</pre>
-<div class="block"><span class="descfrmTypeLabel">Description copied from interface:&nbsp;<code><a href="../simpledb/DbIterator.html#close--">DbIterator</a></code></span></div>
-<div class="block">Closes the iterator. When the iterator is closed, calling next(),
- hasNext(), or rewind() should fail by throwing IllegalStateException.</div>
-<dl>
-<dt><span class="overrideSpecifyLabel">Specified by:</span></dt>
-<dd><code><a href="../simpledb/DbIterator.html#close--">close</a></code>&nbsp;in interface&nbsp;<code><a href="../simpledb/DbIterator.html" title="interface in simpledb">DbIterator</a></code></dd>
-</dl>
-</li>
-</ul>
-</li>
-</ul>
-</li>
-</ul>
-</div>
-</div>
-<!-- ========= END OF CLASS DATA ========= -->
-<!-- ======= START OF BOTTOM NAVBAR ====== -->
-<div class="bottomNav"><a name="navbar.bottom">
-<!--   -->
-</a>
-<div class="skipNav"><a href="#skip.navbar.bottom" title="Skip navigation links">Skip navigation links</a></div>
-<a name="navbar.bottom.firstrow">
-<!--   -->
-</a>
-<ul class="navList" title="Navigation">
-<li><a href="../simpledb/package-summary.html">Package</a></li>
-<li class="navBarCell1Rev">Class</li>
-<li><a href="package-tree.html">Tree</a></li>
-<li><a href="../deprecated-list.html">Deprecated</a></li>
-<li><a href="../index-all.html">Index</a></li>
-<li><a href="../help-doc.html">Help</a></li>
-</ul>
-</div>
-<div class="subNav">
-<ul class="navList">
-<li><a href="../simpledb/TupleDesc.TDItem.html" title="class in simpledb"><span class="typeNameLink">Prev&nbsp;Class</span></a></li>
-<li><a href="../simpledb/Type.html" title="enum in simpledb"><span class="typeNameLink">Next&nbsp;Class</span></a></li>
-</ul>
-<ul class="navList">
-<li><a href="../index.html?simpledb/TupleIterator.html" target="_top">Frames</a></li>
-<li><a href="TupleIterator.html" target="_top">No&nbsp;Frames</a></li>
-</ul>
-<ul class="navList" id="allclasses_navbar_bottom">
-<li><a href="../allclasses-noframe.html">All&nbsp;Classes</a></li>
-</ul>
-<div>
-<script type="text/javascript"><!--
-  allClassesLink = document.getElementById("allclasses_navbar_bottom");
-  if(window==top) {
-    allClassesLink.style.display = "block";
-  }
-  else {
-    allClassesLink.style.display = "none";
-  }
-  //-->
-</script>
-</div>
-<div>
-<ul class="subNavList">
-<li>Summary:&nbsp;</li>
-<li>Nested&nbsp;|&nbsp;</li>
-<li><a href="#field.summary">Field</a>&nbsp;|&nbsp;</li>
-<li><a href="#constructor.summary">Constr</a>&nbsp;|&nbsp;</li>
-<li><a href="#method.summary">Method</a></li>
-</ul>
-<ul class="subNavList">
-<li>Detail:&nbsp;</li>
-<li><a href="#field.detail">Field</a>&nbsp;|&nbsp;</li>
-<li><a href="#constructor.detail">Constr</a>&nbsp;|&nbsp;</li>
-<li><a href="#method.detail">Method</a></li>
-</ul>
-</div>
-<a name="skip.navbar.bottom">
-<!--   -->
-</a></div>
-<!-- ======== END OF BOTTOM NAVBAR ======= -->
-</body>
-</html>
diff -ruN lab1/javadoc/simpledb/Type.html lab3/javadoc/simpledb/Type.html
--- lab1/javadoc/simpledb/Type.html	2016-11-02 22:06:58.000000000 -0500
+++ lab3/javadoc/simpledb/Type.html	1969-12-31 18:00:00.000000000 -0600
@@ -1,422 +0,0 @@
-<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
-<!-- NewPage -->
-<html lang="en">
-<head>
-<!-- Generated by javadoc (1.8.0_25) on Thu Oct 27 13:16:24 CDT 2016 -->
-<title>Type</title>
-<meta name="date" content="2016-10-27">
-<link rel="stylesheet" type="text/css" href="../stylesheet.css" title="Style">
-<script type="text/javascript" src="../script.js"></script>
-</head>
-<body>
-<script type="text/javascript"><!--
-    try {
-        if (location.href.indexOf('is-external=true') == -1) {
-            parent.document.title="Type";
-        }
-    }
-    catch(err) {
-    }
-//-->
-var methods = {"i0":6,"i1":6,"i2":9,"i3":9};
-var tabs = {65535:["t0","All Methods"],1:["t1","Static Methods"],2:["t2","Instance Methods"],4:["t3","Abstract Methods"],8:["t4","Concrete Methods"]};
-var altColor = "altColor";
-var rowColor = "rowColor";
-var tableTab = "tableTab";
-var activeTableTab = "activeTableTab";
-</script>
-<noscript>
-<div>JavaScript is disabled on your browser.</div>
-</noscript>
-<!-- ========= START OF TOP NAVBAR ======= -->
-<div class="topNav"><a name="navbar.top">
-<!--   -->
-</a>
-<div class="skipNav"><a href="#skip.navbar.top" title="Skip navigation links">Skip navigation links</a></div>
-<a name="navbar.top.firstrow">
-<!--   -->
-</a>
-<ul class="navList" title="Navigation">
-<li><a href="../simpledb/package-summary.html">Package</a></li>
-<li class="navBarCell1Rev">Class</li>
-<li><a href="package-tree.html">Tree</a></li>
-<li><a href="../deprecated-list.html">Deprecated</a></li>
-<li><a href="../index-all.html">Index</a></li>
-<li><a href="../help-doc.html">Help</a></li>
-</ul>
-</div>
-<div class="subNav">
-<ul class="navList">
-<li><a href="../simpledb/TupleIterator.html" title="class in simpledb"><span class="typeNameLink">Prev&nbsp;Class</span></a></li>
-<li><a href="../simpledb/Utility.html" title="class in simpledb"><span class="typeNameLink">Next&nbsp;Class</span></a></li>
-</ul>
-<ul class="navList">
-<li><a href="../index.html?simpledb/Type.html" target="_top">Frames</a></li>
-<li><a href="Type.html" target="_top">No&nbsp;Frames</a></li>
-</ul>
-<ul class="navList" id="allclasses_navbar_top">
-<li><a href="../allclasses-noframe.html">All&nbsp;Classes</a></li>
-</ul>
-<div>
-<script type="text/javascript"><!--
-  allClassesLink = document.getElementById("allclasses_navbar_top");
-  if(window==top) {
-    allClassesLink.style.display = "block";
-  }
-  else {
-    allClassesLink.style.display = "none";
-  }
-  //-->
-</script>
-</div>
-<div>
-<ul class="subNavList">
-<li>Summary:&nbsp;</li>
-<li>Nested&nbsp;|&nbsp;</li>
-<li><a href="#enum.constant.summary">Enum Constants</a>&nbsp;|&nbsp;</li>
-<li><a href="#field.summary">Field</a>&nbsp;|&nbsp;</li>
-<li><a href="#method.summary">Method</a></li>
-</ul>
-<ul class="subNavList">
-<li>Detail:&nbsp;</li>
-<li><a href="#enum.constant.detail">Enum Constants</a>&nbsp;|&nbsp;</li>
-<li><a href="#field.detail">Field</a>&nbsp;|&nbsp;</li>
-<li><a href="#method.detail">Method</a></li>
-</ul>
-</div>
-<a name="skip.navbar.top">
-<!--   -->
-</a></div>
-<!-- ========= END OF TOP NAVBAR ========= -->
-<!-- ======== START OF CLASS DATA ======== -->
-<div class="header">
-<div class="subTitle">simpledb</div>
-<h2 title="Enum Type" class="title">Enum Type</h2>
-</div>
-<div class="contentContainer">
-<ul class="inheritance">
-<li>java.lang.Object</li>
-<li>
-<ul class="inheritance">
-<li>java.lang.Enum&lt;<a href="../simpledb/Type.html" title="enum in simpledb">Type</a>&gt;</li>
-<li>
-<ul class="inheritance">
-<li>simpledb.Type</li>
-</ul>
-</li>
-</ul>
-</li>
-</ul>
-<div class="description">
-<ul class="blockList">
-<li class="blockList">
-<dl>
-<dt>All Implemented Interfaces:</dt>
-<dd>java.io.Serializable, java.lang.Comparable&lt;<a href="../simpledb/Type.html" title="enum in simpledb">Type</a>&gt;</dd>
-</dl>
-<hr>
-<br>
-<pre>public enum <span class="typeNameLabel">Type</span>
-extends java.lang.Enum&lt;<a href="../simpledb/Type.html" title="enum in simpledb">Type</a>&gt;
-implements java.io.Serializable</pre>
-<div class="block">Class representing a type in SimpleDB.
- Types are static objects defined by this class; hence, the Type
- constructor is private.</div>
-</li>
-</ul>
-</div>
-<div class="summary">
-<ul class="blockList">
-<li class="blockList">
-<!-- =========== ENUM CONSTANT SUMMARY =========== -->
-<ul class="blockList">
-<li class="blockList"><a name="enum.constant.summary">
-<!--   -->
-</a>
-<h3>Enum Constant Summary</h3>
-<table class="memberSummary" border="0" cellpadding="3" cellspacing="0" summary="Enum Constant Summary table, listing enum constants, and an explanation">
-<caption><span>Enum Constants</span><span class="tabEnd">&nbsp;</span></caption>
-<tr>
-<th class="colOne" scope="col">Enum Constant and Description</th>
-</tr>
-<tr class="altColor">
-<td class="colOne"><code><span class="memberNameLink"><a href="../simpledb/Type.html#INT_TYPE">INT_TYPE</a></span></code>&nbsp;</td>
-</tr>
-<tr class="rowColor">
-<td class="colOne"><code><span class="memberNameLink"><a href="../simpledb/Type.html#STRING_TYPE">STRING_TYPE</a></span></code>&nbsp;</td>
-</tr>
-</table>
-</li>
-</ul>
-<!-- =========== FIELD SUMMARY =========== -->
-<ul class="blockList">
-<li class="blockList"><a name="field.summary">
-<!--   -->
-</a>
-<h3>Field Summary</h3>
-<table class="memberSummary" border="0" cellpadding="3" cellspacing="0" summary="Field Summary table, listing fields, and an explanation">
-<caption><span>Fields</span><span class="tabEnd">&nbsp;</span></caption>
-<tr>
-<th class="colFirst" scope="col">Modifier and Type</th>
-<th class="colLast" scope="col">Field and Description</th>
-</tr>
-<tr class="altColor">
-<td class="colFirst"><code>static int</code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/Type.html#STRING_LEN">STRING_LEN</a></span></code>&nbsp;</td>
-</tr>
-</table>
-</li>
-</ul>
-<!-- ========== METHOD SUMMARY =========== -->
-<ul class="blockList">
-<li class="blockList"><a name="method.summary">
-<!--   -->
-</a>
-<h3>Method Summary</h3>
-<table class="memberSummary" border="0" cellpadding="3" cellspacing="0" summary="Method Summary table, listing methods, and an explanation">
-<caption><span id="t0" class="activeTableTab"><span>All Methods</span><span class="tabEnd">&nbsp;</span></span><span id="t1" class="tableTab"><span><a href="javascript:show(1);">Static Methods</a></span><span class="tabEnd">&nbsp;</span></span><span id="t2" class="tableTab"><span><a href="javascript:show(2);">Instance Methods</a></span><span class="tabEnd">&nbsp;</span></span><span id="t3" class="tableTab"><span><a href="javascript:show(4);">Abstract Methods</a></span><span class="tabEnd">&nbsp;</span></span><span id="t4" class="tableTab"><span><a href="javascript:show(8);">Concrete Methods</a></span><span class="tabEnd">&nbsp;</span></span></caption>
-<tr>
-<th class="colFirst" scope="col">Modifier and Type</th>
-<th class="colLast" scope="col">Method and Description</th>
-</tr>
-<tr id="i0" class="altColor">
-<td class="colFirst"><code>abstract int</code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/Type.html#getLen--">getLen</a></span>()</code>&nbsp;</td>
-</tr>
-<tr id="i1" class="rowColor">
-<td class="colFirst"><code>abstract <a href="../simpledb/Field.html" title="interface in simpledb">Field</a></code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/Type.html#parse-java.io.DataInputStream-">parse</a></span>(java.io.DataInputStream&nbsp;dis)</code>&nbsp;</td>
-</tr>
-<tr id="i2" class="altColor">
-<td class="colFirst"><code>static <a href="../simpledb/Type.html" title="enum in simpledb">Type</a></code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/Type.html#valueOf-java.lang.String-">valueOf</a></span>(java.lang.String&nbsp;name)</code>
-<div class="block">Returns the enum constant of this type with the specified name.</div>
-</td>
-</tr>
-<tr id="i3" class="rowColor">
-<td class="colFirst"><code>static <a href="../simpledb/Type.html" title="enum in simpledb">Type</a>[]</code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/Type.html#values--">values</a></span>()</code>
-<div class="block">Returns an array containing the constants of this enum type, in
-the order they are declared.</div>
-</td>
-</tr>
-</table>
-<ul class="blockList">
-<li class="blockList"><a name="methods.inherited.from.class.java.lang.Enum">
-<!--   -->
-</a>
-<h3>Methods inherited from class&nbsp;java.lang.Enum</h3>
-<code>clone, compareTo, equals, finalize, getDeclaringClass, hashCode, name, ordinal, toString, valueOf</code></li>
-</ul>
-<ul class="blockList">
-<li class="blockList"><a name="methods.inherited.from.class.java.lang.Object">
-<!--   -->
-</a>
-<h3>Methods inherited from class&nbsp;java.lang.Object</h3>
-<code>getClass, notify, notifyAll, wait, wait, wait</code></li>
-</ul>
-</li>
-</ul>
-</li>
-</ul>
-</div>
-<div class="details">
-<ul class="blockList">
-<li class="blockList">
-<!-- ============ ENUM CONSTANT DETAIL =========== -->
-<ul class="blockList">
-<li class="blockList"><a name="enum.constant.detail">
-<!--   -->
-</a>
-<h3>Enum Constant Detail</h3>
-<a name="INT_TYPE">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>INT_TYPE</h4>
-<pre>public static final&nbsp;<a href="../simpledb/Type.html" title="enum in simpledb">Type</a> INT_TYPE</pre>
-</li>
-</ul>
-<a name="STRING_TYPE">
-<!--   -->
-</a>
-<ul class="blockListLast">
-<li class="blockList">
-<h4>STRING_TYPE</h4>
-<pre>public static final&nbsp;<a href="../simpledb/Type.html" title="enum in simpledb">Type</a> STRING_TYPE</pre>
-</li>
-</ul>
-</li>
-</ul>
-<!-- ============ FIELD DETAIL =========== -->
-<ul class="blockList">
-<li class="blockList"><a name="field.detail">
-<!--   -->
-</a>
-<h3>Field Detail</h3>
-<a name="STRING_LEN">
-<!--   -->
-</a>
-<ul class="blockListLast">
-<li class="blockList">
-<h4>STRING_LEN</h4>
-<pre>public static final&nbsp;int STRING_LEN</pre>
-<dl>
-<dt><span class="seeLabel">See Also:</span></dt>
-<dd><a href="../constant-values.html#simpledb.Type.STRING_LEN">Constant Field Values</a></dd>
-</dl>
-</li>
-</ul>
-</li>
-</ul>
-<!-- ============ METHOD DETAIL ========== -->
-<ul class="blockList">
-<li class="blockList"><a name="method.detail">
-<!--   -->
-</a>
-<h3>Method Detail</h3>
-<a name="values--">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>values</h4>
-<pre>public static&nbsp;<a href="../simpledb/Type.html" title="enum in simpledb">Type</a>[]&nbsp;values()</pre>
-<div class="block">Returns an array containing the constants of this enum type, in
-the order they are declared.  This method may be used to iterate
-over the constants as follows:
-<pre>
-for (Type c : Type.values())
-&nbsp;   System.out.println(c);
-</pre></div>
-<dl>
-<dt><span class="returnLabel">Returns:</span></dt>
-<dd>an array containing the constants of this enum type, in the order they are declared</dd>
-</dl>
-</li>
-</ul>
-<a name="valueOf-java.lang.String-">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>valueOf</h4>
-<pre>public static&nbsp;<a href="../simpledb/Type.html" title="enum in simpledb">Type</a>&nbsp;valueOf(java.lang.String&nbsp;name)</pre>
-<div class="block">Returns the enum constant of this type with the specified name.
-The string must match <i>exactly</i> an identifier used to declare an
-enum constant in this type.  (Extraneous whitespace characters are 
-not permitted.)</div>
-<dl>
-<dt><span class="paramLabel">Parameters:</span></dt>
-<dd><code>name</code> - the name of the enum constant to be returned.</dd>
-<dt><span class="returnLabel">Returns:</span></dt>
-<dd>the enum constant with the specified name</dd>
-<dt><span class="throwsLabel">Throws:</span></dt>
-<dd><code>java.lang.IllegalArgumentException</code> - if this enum type has no constant with the specified name</dd>
-<dd><code>java.lang.NullPointerException</code> - if the argument is null</dd>
-</dl>
-</li>
-</ul>
-<a name="getLen--">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>getLen</h4>
-<pre>public abstract&nbsp;int&nbsp;getLen()</pre>
-<dl>
-<dt><span class="returnLabel">Returns:</span></dt>
-<dd>the number of bytes required to store a field of this type.</dd>
-</dl>
-</li>
-</ul>
-<a name="parse-java.io.DataInputStream-">
-<!--   -->
-</a>
-<ul class="blockListLast">
-<li class="blockList">
-<h4>parse</h4>
-<pre>public abstract&nbsp;<a href="../simpledb/Field.html" title="interface in simpledb">Field</a>&nbsp;parse(java.io.DataInputStream&nbsp;dis)
-                     throws java.text.ParseException</pre>
-<dl>
-<dt><span class="paramLabel">Parameters:</span></dt>
-<dd><code>dis</code> - The input stream to read from</dd>
-<dt><span class="returnLabel">Returns:</span></dt>
-<dd>a Field object of the same type as this object that has contents
-   read from the specified DataInputStream.</dd>
-<dt><span class="throwsLabel">Throws:</span></dt>
-<dd><code>java.text.ParseException</code> - if the data read from the input stream is not
-   of the appropriate type.</dd>
-</dl>
-</li>
-</ul>
-</li>
-</ul>
-</li>
-</ul>
-</div>
-</div>
-<!-- ========= END OF CLASS DATA ========= -->
-<!-- ======= START OF BOTTOM NAVBAR ====== -->
-<div class="bottomNav"><a name="navbar.bottom">
-<!--   -->
-</a>
-<div class="skipNav"><a href="#skip.navbar.bottom" title="Skip navigation links">Skip navigation links</a></div>
-<a name="navbar.bottom.firstrow">
-<!--   -->
-</a>
-<ul class="navList" title="Navigation">
-<li><a href="../simpledb/package-summary.html">Package</a></li>
-<li class="navBarCell1Rev">Class</li>
-<li><a href="package-tree.html">Tree</a></li>
-<li><a href="../deprecated-list.html">Deprecated</a></li>
-<li><a href="../index-all.html">Index</a></li>
-<li><a href="../help-doc.html">Help</a></li>
-</ul>
-</div>
-<div class="subNav">
-<ul class="navList">
-<li><a href="../simpledb/TupleIterator.html" title="class in simpledb"><span class="typeNameLink">Prev&nbsp;Class</span></a></li>
-<li><a href="../simpledb/Utility.html" title="class in simpledb"><span class="typeNameLink">Next&nbsp;Class</span></a></li>
-</ul>
-<ul class="navList">
-<li><a href="../index.html?simpledb/Type.html" target="_top">Frames</a></li>
-<li><a href="Type.html" target="_top">No&nbsp;Frames</a></li>
-</ul>
-<ul class="navList" id="allclasses_navbar_bottom">
-<li><a href="../allclasses-noframe.html">All&nbsp;Classes</a></li>
-</ul>
-<div>
-<script type="text/javascript"><!--
-  allClassesLink = document.getElementById("allclasses_navbar_bottom");
-  if(window==top) {
-    allClassesLink.style.display = "block";
-  }
-  else {
-    allClassesLink.style.display = "none";
-  }
-  //-->
-</script>
-</div>
-<div>
-<ul class="subNavList">
-<li>Summary:&nbsp;</li>
-<li>Nested&nbsp;|&nbsp;</li>
-<li><a href="#enum.constant.summary">Enum Constants</a>&nbsp;|&nbsp;</li>
-<li><a href="#field.summary">Field</a>&nbsp;|&nbsp;</li>
-<li><a href="#method.summary">Method</a></li>
-</ul>
-<ul class="subNavList">
-<li>Detail:&nbsp;</li>
-<li><a href="#enum.constant.detail">Enum Constants</a>&nbsp;|&nbsp;</li>
-<li><a href="#field.detail">Field</a>&nbsp;|&nbsp;</li>
-<li><a href="#method.detail">Method</a></li>
-</ul>
-</div>
-<a name="skip.navbar.bottom">
-<!--   -->
-</a></div>
-<!-- ======== END OF BOTTOM NAVBAR ======= -->
-</body>
-</html>
diff -ruN lab1/javadoc/simpledb/Utility.html lab3/javadoc/simpledb/Utility.html
--- lab1/javadoc/simpledb/Utility.html	2016-11-02 22:06:58.000000000 -0500
+++ lab3/javadoc/simpledb/Utility.html	1969-12-31 18:00:00.000000000 -0600
@@ -1,489 +0,0 @@
-<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
-<!-- NewPage -->
-<html lang="en">
-<head>
-<!-- Generated by javadoc (1.8.0_25) on Thu Oct 27 13:16:24 CDT 2016 -->
-<title>Utility</title>
-<meta name="date" content="2016-10-27">
-<link rel="stylesheet" type="text/css" href="../stylesheet.css" title="Style">
-<script type="text/javascript" src="../script.js"></script>
-</head>
-<body>
-<script type="text/javascript"><!--
-    try {
-        if (location.href.indexOf('is-external=true') == -1) {
-            parent.document.title="Utility";
-        }
-    }
-    catch(err) {
-    }
-//-->
-var methods = {"i0":9,"i1":9,"i2":9,"i3":9,"i4":9,"i5":9,"i6":9,"i7":9,"i8":9,"i9":9,"i10":9,"i11":9};
-var tabs = {65535:["t0","All Methods"],1:["t1","Static Methods"],8:["t4","Concrete Methods"]};
-var altColor = "altColor";
-var rowColor = "rowColor";
-var tableTab = "tableTab";
-var activeTableTab = "activeTableTab";
-</script>
-<noscript>
-<div>JavaScript is disabled on your browser.</div>
-</noscript>
-<!-- ========= START OF TOP NAVBAR ======= -->
-<div class="topNav"><a name="navbar.top">
-<!--   -->
-</a>
-<div class="skipNav"><a href="#skip.navbar.top" title="Skip navigation links">Skip navigation links</a></div>
-<a name="navbar.top.firstrow">
-<!--   -->
-</a>
-<ul class="navList" title="Navigation">
-<li><a href="../simpledb/package-summary.html">Package</a></li>
-<li class="navBarCell1Rev">Class</li>
-<li><a href="package-tree.html">Tree</a></li>
-<li><a href="../deprecated-list.html">Deprecated</a></li>
-<li><a href="../index-all.html">Index</a></li>
-<li><a href="../help-doc.html">Help</a></li>
-</ul>
-</div>
-<div class="subNav">
-<ul class="navList">
-<li><a href="../simpledb/Type.html" title="enum in simpledb"><span class="typeNameLink">Prev&nbsp;Class</span></a></li>
-<li>Next&nbsp;Class</li>
-</ul>
-<ul class="navList">
-<li><a href="../index.html?simpledb/Utility.html" target="_top">Frames</a></li>
-<li><a href="Utility.html" target="_top">No&nbsp;Frames</a></li>
-</ul>
-<ul class="navList" id="allclasses_navbar_top">
-<li><a href="../allclasses-noframe.html">All&nbsp;Classes</a></li>
-</ul>
-<div>
-<script type="text/javascript"><!--
-  allClassesLink = document.getElementById("allclasses_navbar_top");
-  if(window==top) {
-    allClassesLink.style.display = "block";
-  }
-  else {
-    allClassesLink.style.display = "none";
-  }
-  //-->
-</script>
-</div>
-<div>
-<ul class="subNavList">
-<li>Summary:&nbsp;</li>
-<li>Nested&nbsp;|&nbsp;</li>
-<li>Field&nbsp;|&nbsp;</li>
-<li><a href="#constructor.summary">Constr</a>&nbsp;|&nbsp;</li>
-<li><a href="#method.summary">Method</a></li>
-</ul>
-<ul class="subNavList">
-<li>Detail:&nbsp;</li>
-<li>Field&nbsp;|&nbsp;</li>
-<li><a href="#constructor.detail">Constr</a>&nbsp;|&nbsp;</li>
-<li><a href="#method.detail">Method</a></li>
-</ul>
-</div>
-<a name="skip.navbar.top">
-<!--   -->
-</a></div>
-<!-- ========= END OF TOP NAVBAR ========= -->
-<!-- ======== START OF CLASS DATA ======== -->
-<div class="header">
-<div class="subTitle">simpledb</div>
-<h2 title="Class Utility" class="title">Class Utility</h2>
-</div>
-<div class="contentContainer">
-<ul class="inheritance">
-<li>java.lang.Object</li>
-<li>
-<ul class="inheritance">
-<li>simpledb.Utility</li>
-</ul>
-</li>
-</ul>
-<div class="description">
-<ul class="blockList">
-<li class="blockList">
-<hr>
-<br>
-<pre>public class <span class="typeNameLabel">Utility</span>
-extends java.lang.Object</pre>
-<div class="block">Helper methods used for testing and implementing random features.</div>
-</li>
-</ul>
-</div>
-<div class="summary">
-<ul class="blockList">
-<li class="blockList">
-<!-- ======== CONSTRUCTOR SUMMARY ======== -->
-<ul class="blockList">
-<li class="blockList"><a name="constructor.summary">
-<!--   -->
-</a>
-<h3>Constructor Summary</h3>
-<table class="memberSummary" border="0" cellpadding="3" cellspacing="0" summary="Constructor Summary table, listing constructors, and an explanation">
-<caption><span>Constructors</span><span class="tabEnd">&nbsp;</span></caption>
-<tr>
-<th class="colOne" scope="col">Constructor and Description</th>
-</tr>
-<tr class="altColor">
-<td class="colOne"><code><span class="memberNameLink"><a href="../simpledb/Utility.html#Utility--">Utility</a></span>()</code>&nbsp;</td>
-</tr>
-</table>
-</li>
-</ul>
-<!-- ========== METHOD SUMMARY =========== -->
-<ul class="blockList">
-<li class="blockList"><a name="method.summary">
-<!--   -->
-</a>
-<h3>Method Summary</h3>
-<table class="memberSummary" border="0" cellpadding="3" cellspacing="0" summary="Method Summary table, listing methods, and an explanation">
-<caption><span id="t0" class="activeTableTab"><span>All Methods</span><span class="tabEnd">&nbsp;</span></span><span id="t1" class="tableTab"><span><a href="javascript:show(1);">Static Methods</a></span><span class="tabEnd">&nbsp;</span></span><span id="t4" class="tableTab"><span><a href="javascript:show(8);">Concrete Methods</a></span><span class="tabEnd">&nbsp;</span></span></caption>
-<tr>
-<th class="colFirst" scope="col">Modifier and Type</th>
-<th class="colLast" scope="col">Method and Description</th>
-</tr>
-<tr id="i0" class="altColor">
-<td class="colFirst"><code>static <a href="../simpledb/HeapFile.html" title="class in simpledb">HeapFile</a></code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/Utility.html#createEmptyHeapFile-java.lang.String-int-">createEmptyHeapFile</a></span>(java.lang.String&nbsp;path,
-                   int&nbsp;cols)</code>
-<div class="block">A utility method to create a new HeapFile with a single empty page,
- assuming the path does not already exist.</div>
-</td>
-</tr>
-<tr id="i1" class="rowColor">
-<td class="colFirst"><code>static <a href="../simpledb/Tuple.html" title="class in simpledb">Tuple</a></code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/Utility.html#getHeapTuple-int-">getHeapTuple</a></span>(int&nbsp;n)</code>&nbsp;</td>
-</tr>
-<tr id="i2" class="altColor">
-<td class="colFirst"><code>static <a href="../simpledb/Tuple.html" title="class in simpledb">Tuple</a></code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/Utility.html#getHeapTuple-int:A-">getHeapTuple</a></span>(int[]&nbsp;tupdata)</code>&nbsp;</td>
-</tr>
-<tr id="i3" class="rowColor">
-<td class="colFirst"><code>static <a href="../simpledb/Tuple.html" title="class in simpledb">Tuple</a></code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/Utility.html#getHeapTuple-int-int-">getHeapTuple</a></span>(int&nbsp;n,
-            int&nbsp;width)</code>&nbsp;</td>
-</tr>
-<tr id="i4" class="altColor">
-<td class="colFirst"><code>static java.lang.String[]</code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/Utility.html#getStrings-int-java.lang.String-">getStrings</a></span>(int&nbsp;len,
-          java.lang.String&nbsp;val)</code>&nbsp;</td>
-</tr>
-<tr id="i5" class="rowColor">
-<td class="colFirst"><code>static <a href="../simpledb/Tuple.html" title="class in simpledb">Tuple</a></code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/Utility.html#getTuple-int:A-int-">getTuple</a></span>(int[]&nbsp;tupledata,
-        int&nbsp;width)</code>&nbsp;</td>
-</tr>
-<tr id="i6" class="altColor">
-<td class="colFirst"><code>static <a href="../simpledb/TupleDesc.html" title="class in simpledb">TupleDesc</a></code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/Utility.html#getTupleDesc-int-">getTupleDesc</a></span>(int&nbsp;n)</code>&nbsp;</td>
-</tr>
-<tr id="i7" class="rowColor">
-<td class="colFirst"><code>static <a href="../simpledb/TupleDesc.html" title="class in simpledb">TupleDesc</a></code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/Utility.html#getTupleDesc-int-java.lang.String-">getTupleDesc</a></span>(int&nbsp;n,
-            java.lang.String&nbsp;name)</code>&nbsp;</td>
-</tr>
-<tr id="i8" class="altColor">
-<td class="colFirst"><code>static <a href="../simpledb/Type.html" title="enum in simpledb">Type</a>[]</code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/Utility.html#getTypes-int-">getTypes</a></span>(int&nbsp;len)</code>&nbsp;</td>
-</tr>
-<tr id="i9" class="rowColor">
-<td class="colFirst"><code>static java.lang.String</code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/Utility.html#listToString-java.util.ArrayList-">listToString</a></span>(java.util.ArrayList&lt;java.lang.Integer&gt;&nbsp;list)</code>&nbsp;</td>
-</tr>
-<tr id="i10" class="altColor">
-<td class="colFirst"><code>static <a href="../simpledb/HeapFile.html" title="class in simpledb">HeapFile</a></code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/Utility.html#openHeapFile-int-java.io.File-">openHeapFile</a></span>(int&nbsp;cols,
-            java.io.File&nbsp;f)</code>
-<div class="block">Opens a HeapFile and adds it to the catalog.</div>
-</td>
-</tr>
-<tr id="i11" class="rowColor">
-<td class="colFirst"><code>static <a href="../simpledb/HeapFile.html" title="class in simpledb">HeapFile</a></code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/Utility.html#openHeapFile-int-java.lang.String-java.io.File-">openHeapFile</a></span>(int&nbsp;cols,
-            java.lang.String&nbsp;colPrefix,
-            java.io.File&nbsp;f)</code>&nbsp;</td>
-</tr>
-</table>
-<ul class="blockList">
-<li class="blockList"><a name="methods.inherited.from.class.java.lang.Object">
-<!--   -->
-</a>
-<h3>Methods inherited from class&nbsp;java.lang.Object</h3>
-<code>clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait</code></li>
-</ul>
-</li>
-</ul>
-</li>
-</ul>
-</div>
-<div class="details">
-<ul class="blockList">
-<li class="blockList">
-<!-- ========= CONSTRUCTOR DETAIL ======== -->
-<ul class="blockList">
-<li class="blockList"><a name="constructor.detail">
-<!--   -->
-</a>
-<h3>Constructor Detail</h3>
-<a name="Utility--">
-<!--   -->
-</a>
-<ul class="blockListLast">
-<li class="blockList">
-<h4>Utility</h4>
-<pre>public&nbsp;Utility()</pre>
-</li>
-</ul>
-</li>
-</ul>
-<!-- ============ METHOD DETAIL ========== -->
-<ul class="blockList">
-<li class="blockList"><a name="method.detail">
-<!--   -->
-</a>
-<h3>Method Detail</h3>
-<a name="getTypes-int-">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>getTypes</h4>
-<pre>public static&nbsp;<a href="../simpledb/Type.html" title="enum in simpledb">Type</a>[]&nbsp;getTypes(int&nbsp;len)</pre>
-<dl>
-<dt><span class="returnLabel">Returns:</span></dt>
-<dd>a Type array of length len populated with Type.INT_TYPE</dd>
-</dl>
-</li>
-</ul>
-<a name="getStrings-int-java.lang.String-">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>getStrings</h4>
-<pre>public static&nbsp;java.lang.String[]&nbsp;getStrings(int&nbsp;len,
-                                            java.lang.String&nbsp;val)</pre>
-<dl>
-<dt><span class="returnLabel">Returns:</span></dt>
-<dd>a String array of length len populated with the (possibly null) strings in val,
- and an appended increasing integer at the end (val1, val2, etc.).</dd>
-</dl>
-</li>
-</ul>
-<a name="getTupleDesc-int-java.lang.String-">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>getTupleDesc</h4>
-<pre>public static&nbsp;<a href="../simpledb/TupleDesc.html" title="class in simpledb">TupleDesc</a>&nbsp;getTupleDesc(int&nbsp;n,
-                                     java.lang.String&nbsp;name)</pre>
-<dl>
-<dt><span class="returnLabel">Returns:</span></dt>
-<dd>a TupleDesc with n fields of type Type.INT_TYPE, each named
- name + n (name1, name2, etc.).</dd>
-</dl>
-</li>
-</ul>
-<a name="getTupleDesc-int-">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>getTupleDesc</h4>
-<pre>public static&nbsp;<a href="../simpledb/TupleDesc.html" title="class in simpledb">TupleDesc</a>&nbsp;getTupleDesc(int&nbsp;n)</pre>
-<dl>
-<dt><span class="returnLabel">Returns:</span></dt>
-<dd>a TupleDesc with n fields of type Type.INT_TYPE</dd>
-</dl>
-</li>
-</ul>
-<a name="getHeapTuple-int-">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>getHeapTuple</h4>
-<pre>public static&nbsp;<a href="../simpledb/Tuple.html" title="class in simpledb">Tuple</a>&nbsp;getHeapTuple(int&nbsp;n)</pre>
-<dl>
-<dt><span class="returnLabel">Returns:</span></dt>
-<dd>a Tuple with a single IntField with value n and with
-   RecordId(HeapPageId(1,2), 3)</dd>
-</dl>
-</li>
-</ul>
-<a name="getHeapTuple-int:A-">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>getHeapTuple</h4>
-<pre>public static&nbsp;<a href="../simpledb/Tuple.html" title="class in simpledb">Tuple</a>&nbsp;getHeapTuple(int[]&nbsp;tupdata)</pre>
-<dl>
-<dt><span class="returnLabel">Returns:</span></dt>
-<dd>a Tuple with an IntField for every element of tupdata
-   and RecordId(HeapPageId(1, 2), 3)</dd>
-</dl>
-</li>
-</ul>
-<a name="getHeapTuple-int-int-">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>getHeapTuple</h4>
-<pre>public static&nbsp;<a href="../simpledb/Tuple.html" title="class in simpledb">Tuple</a>&nbsp;getHeapTuple(int&nbsp;n,
-                                 int&nbsp;width)</pre>
-<dl>
-<dt><span class="returnLabel">Returns:</span></dt>
-<dd>a Tuple with a 'width' IntFields each with value n and
-   with RecordId(HeapPageId(1, 2), 3)</dd>
-</dl>
-</li>
-</ul>
-<a name="getTuple-int:A-int-">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>getTuple</h4>
-<pre>public static&nbsp;<a href="../simpledb/Tuple.html" title="class in simpledb">Tuple</a>&nbsp;getTuple(int[]&nbsp;tupledata,
-                             int&nbsp;width)</pre>
-<dl>
-<dt><span class="returnLabel">Returns:</span></dt>
-<dd>a Tuple with a 'width' IntFields with the value tupledata[i]
-         in each field.
-         do not set it's RecordId, hence do not distinguish which
-         sort of file it belongs to.</dd>
-</dl>
-</li>
-</ul>
-<a name="createEmptyHeapFile-java.lang.String-int-">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>createEmptyHeapFile</h4>
-<pre>public static&nbsp;<a href="../simpledb/HeapFile.html" title="class in simpledb">HeapFile</a>&nbsp;createEmptyHeapFile(java.lang.String&nbsp;path,
-                                           int&nbsp;cols)
-                                    throws java.io.IOException</pre>
-<div class="block">A utility method to create a new HeapFile with a single empty page,
- assuming the path does not already exist. If the path exists, the file
- will be overwritten. The new table will be added to the Catalog with
- the specified number of columns as IntFields.</div>
-<dl>
-<dt><span class="throwsLabel">Throws:</span></dt>
-<dd><code>java.io.IOException</code></dd>
-</dl>
-</li>
-</ul>
-<a name="openHeapFile-int-java.io.File-">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>openHeapFile</h4>
-<pre>public static&nbsp;<a href="../simpledb/HeapFile.html" title="class in simpledb">HeapFile</a>&nbsp;openHeapFile(int&nbsp;cols,
-                                    java.io.File&nbsp;f)</pre>
-<div class="block">Opens a HeapFile and adds it to the catalog.</div>
-<dl>
-<dt><span class="paramLabel">Parameters:</span></dt>
-<dd><code>cols</code> - number of columns in the table.</dd>
-<dd><code>f</code> - location of the file storing the table.</dd>
-<dt><span class="returnLabel">Returns:</span></dt>
-<dd>the opened table.</dd>
-</dl>
-</li>
-</ul>
-<a name="openHeapFile-int-java.lang.String-java.io.File-">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>openHeapFile</h4>
-<pre>public static&nbsp;<a href="../simpledb/HeapFile.html" title="class in simpledb">HeapFile</a>&nbsp;openHeapFile(int&nbsp;cols,
-                                    java.lang.String&nbsp;colPrefix,
-                                    java.io.File&nbsp;f)</pre>
-</li>
-</ul>
-<a name="listToString-java.util.ArrayList-">
-<!--   -->
-</a>
-<ul class="blockListLast">
-<li class="blockList">
-<h4>listToString</h4>
-<pre>public static&nbsp;java.lang.String&nbsp;listToString(java.util.ArrayList&lt;java.lang.Integer&gt;&nbsp;list)</pre>
-</li>
-</ul>
-</li>
-</ul>
-</li>
-</ul>
-</div>
-</div>
-<!-- ========= END OF CLASS DATA ========= -->
-<!-- ======= START OF BOTTOM NAVBAR ====== -->
-<div class="bottomNav"><a name="navbar.bottom">
-<!--   -->
-</a>
-<div class="skipNav"><a href="#skip.navbar.bottom" title="Skip navigation links">Skip navigation links</a></div>
-<a name="navbar.bottom.firstrow">
-<!--   -->
-</a>
-<ul class="navList" title="Navigation">
-<li><a href="../simpledb/package-summary.html">Package</a></li>
-<li class="navBarCell1Rev">Class</li>
-<li><a href="package-tree.html">Tree</a></li>
-<li><a href="../deprecated-list.html">Deprecated</a></li>
-<li><a href="../index-all.html">Index</a></li>
-<li><a href="../help-doc.html">Help</a></li>
-</ul>
-</div>
-<div class="subNav">
-<ul class="navList">
-<li><a href="../simpledb/Type.html" title="enum in simpledb"><span class="typeNameLink">Prev&nbsp;Class</span></a></li>
-<li>Next&nbsp;Class</li>
-</ul>
-<ul class="navList">
-<li><a href="../index.html?simpledb/Utility.html" target="_top">Frames</a></li>
-<li><a href="Utility.html" target="_top">No&nbsp;Frames</a></li>
-</ul>
-<ul class="navList" id="allclasses_navbar_bottom">
-<li><a href="../allclasses-noframe.html">All&nbsp;Classes</a></li>
-</ul>
-<div>
-<script type="text/javascript"><!--
-  allClassesLink = document.getElementById("allclasses_navbar_bottom");
-  if(window==top) {
-    allClassesLink.style.display = "block";
-  }
-  else {
-    allClassesLink.style.display = "none";
-  }
-  //-->
-</script>
-</div>
-<div>
-<ul class="subNavList">
-<li>Summary:&nbsp;</li>
-<li>Nested&nbsp;|&nbsp;</li>
-<li>Field&nbsp;|&nbsp;</li>
-<li><a href="#constructor.summary">Constr</a>&nbsp;|&nbsp;</li>
-<li><a href="#method.summary">Method</a></li>
-</ul>
-<ul class="subNavList">
-<li>Detail:&nbsp;</li>
-<li>Field&nbsp;|&nbsp;</li>
-<li><a href="#constructor.detail">Constr</a>&nbsp;|&nbsp;</li>
-<li><a href="#method.detail">Method</a></li>
-</ul>
-</div>
-<a name="skip.navbar.bottom">
-<!--   -->
-</a></div>
-<!-- ======== END OF BOTTOM NAVBAR ======= -->
-</body>
-</html>
diff -ruN lab1/javadoc/simpledb/package-frame.html lab3/javadoc/simpledb/package-frame.html
--- lab1/javadoc/simpledb/package-frame.html	2016-11-02 22:06:58.000000000 -0500
+++ lab3/javadoc/simpledb/package-frame.html	1969-12-31 18:00:00.000000000 -0600
@@ -1,60 +0,0 @@
-<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
-<!-- NewPage -->
-<html lang="en">
-<head>
-<!-- Generated by javadoc (1.8.0_25) on Thu Oct 27 13:16:24 CDT 2016 -->
-<title>simpledb</title>
-<meta name="date" content="2016-10-27">
-<link rel="stylesheet" type="text/css" href="../stylesheet.css" title="Style">
-<script type="text/javascript" src="../script.js"></script>
-</head>
-<body>
-<h1 class="bar"><a href="../simpledb/package-summary.html" target="classFrame">simpledb</a></h1>
-<div class="indexContainer">
-<h2 title="Interfaces">Interfaces</h2>
-<ul title="Interfaces">
-<li><a href="DbFile.html" title="interface in simpledb" target="classFrame"><span class="interfaceName">DbFile</span></a></li>
-<li><a href="DbFileIterator.html" title="interface in simpledb" target="classFrame"><span class="interfaceName">DbFileIterator</span></a></li>
-<li><a href="DbIterator.html" title="interface in simpledb" target="classFrame"><span class="interfaceName">DbIterator</span></a></li>
-<li><a href="Field.html" title="interface in simpledb" target="classFrame"><span class="interfaceName">Field</span></a></li>
-<li><a href="Page.html" title="interface in simpledb" target="classFrame"><span class="interfaceName">Page</span></a></li>
-<li><a href="PageId.html" title="interface in simpledb" target="classFrame"><span class="interfaceName">PageId</span></a></li>
-</ul>
-<h2 title="Classes">Classes</h2>
-<ul title="Classes">
-<li><a href="BufferPool.html" title="class in simpledb" target="classFrame">BufferPool</a></li>
-<li><a href="Catalog.html" title="class in simpledb" target="classFrame">Catalog</a></li>
-<li><a href="Database.html" title="class in simpledb" target="classFrame">Database</a></li>
-<li><a href="Debug.html" title="class in simpledb" target="classFrame">Debug</a></li>
-<li><a href="HeapFile.html" title="class in simpledb" target="classFrame">HeapFile</a></li>
-<li><a href="HeapFileEncoder.html" title="class in simpledb" target="classFrame">HeapFileEncoder</a></li>
-<li><a href="HeapPage.html" title="class in simpledb" target="classFrame">HeapPage</a></li>
-<li><a href="HeapPageId.html" title="class in simpledb" target="classFrame">HeapPageId</a></li>
-<li><a href="IntField.html" title="class in simpledb" target="classFrame">IntField</a></li>
-<li><a href="LogFile.html" title="class in simpledb" target="classFrame">LogFile</a></li>
-<li><a href="Permissions.html" title="class in simpledb" target="classFrame">Permissions</a></li>
-<li><a href="Predicate.html" title="class in simpledb" target="classFrame">Predicate</a></li>
-<li><a href="RecordId.html" title="class in simpledb" target="classFrame">RecordId</a></li>
-<li><a href="SeqScan.html" title="class in simpledb" target="classFrame">SeqScan</a></li>
-<li><a href="SimpleDb.html" title="class in simpledb" target="classFrame">SimpleDb</a></li>
-<li><a href="StringField.html" title="class in simpledb" target="classFrame">StringField</a></li>
-<li><a href="TransactionId.html" title="class in simpledb" target="classFrame">TransactionId</a></li>
-<li><a href="Tuple.html" title="class in simpledb" target="classFrame">Tuple</a></li>
-<li><a href="TupleDesc.html" title="class in simpledb" target="classFrame">TupleDesc</a></li>
-<li><a href="TupleDesc.TDItem.html" title="class in simpledb" target="classFrame">TupleDesc.TDItem</a></li>
-<li><a href="TupleIterator.html" title="class in simpledb" target="classFrame">TupleIterator</a></li>
-<li><a href="Utility.html" title="class in simpledb" target="classFrame">Utility</a></li>
-</ul>
-<h2 title="Enums">Enums</h2>
-<ul title="Enums">
-<li><a href="Predicate.Op.html" title="enum in simpledb" target="classFrame">Predicate.Op</a></li>
-<li><a href="Type.html" title="enum in simpledb" target="classFrame">Type</a></li>
-</ul>
-<h2 title="Exceptions">Exceptions</h2>
-<ul title="Exceptions">
-<li><a href="DbException.html" title="class in simpledb" target="classFrame">DbException</a></li>
-<li><a href="TransactionAbortedException.html" title="class in simpledb" target="classFrame">TransactionAbortedException</a></li>
-</ul>
-</div>
-</body>
-</html>
diff -ruN lab1/javadoc/simpledb/package-summary.html lab3/javadoc/simpledb/package-summary.html
--- lab1/javadoc/simpledb/package-summary.html	2016-11-02 22:06:58.000000000 -0500
+++ lab3/javadoc/simpledb/package-summary.html	1969-12-31 18:00:00.000000000 -0600
@@ -1,381 +0,0 @@
-<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
-<!-- NewPage -->
-<html lang="en">
-<head>
-<!-- Generated by javadoc (1.8.0_25) on Thu Oct 27 13:16:24 CDT 2016 -->
-<title>simpledb</title>
-<meta name="date" content="2016-10-27">
-<link rel="stylesheet" type="text/css" href="../stylesheet.css" title="Style">
-<script type="text/javascript" src="../script.js"></script>
-</head>
-<body>
-<script type="text/javascript"><!--
-    try {
-        if (location.href.indexOf('is-external=true') == -1) {
-            parent.document.title="simpledb";
-        }
-    }
-    catch(err) {
-    }
-//-->
-</script>
-<noscript>
-<div>JavaScript is disabled on your browser.</div>
-</noscript>
-<!-- ========= START OF TOP NAVBAR ======= -->
-<div class="topNav"><a name="navbar.top">
-<!--   -->
-</a>
-<div class="skipNav"><a href="#skip.navbar.top" title="Skip navigation links">Skip navigation links</a></div>
-<a name="navbar.top.firstrow">
-<!--   -->
-</a>
-<ul class="navList" title="Navigation">
-<li><a href="../simpledb/package-summary.html">Package</a></li>
-<li>Class</li>
-<li><a href="package-tree.html">Tree</a></li>
-<li><a href="../deprecated-list.html">Deprecated</a></li>
-<li><a href="../index-all.html">Index</a></li>
-<li><a href="../help-doc.html">Help</a></li>
-</ul>
-</div>
-<div class="subNav">
-<ul class="navList">
-<li>Prev&nbsp;Package</li>
-<li>Next&nbsp;Package</li>
-</ul>
-<ul class="navList">
-<li><a href="../index.html?simpledb/package-summary.html" target="_top">Frames</a></li>
-<li><a href="package-summary.html" target="_top">No&nbsp;Frames</a></li>
-</ul>
-<ul class="navList" id="allclasses_navbar_top">
-<li><a href="../allclasses-noframe.html">All&nbsp;Classes</a></li>
-</ul>
-<div>
-<script type="text/javascript"><!--
-  allClassesLink = document.getElementById("allclasses_navbar_top");
-  if(window==top) {
-    allClassesLink.style.display = "block";
-  }
-  else {
-    allClassesLink.style.display = "none";
-  }
-  //-->
-</script>
-</div>
-<a name="skip.navbar.top">
-<!--   -->
-</a></div>
-<!-- ========= END OF TOP NAVBAR ========= -->
-<div class="header">
-<h1 title="Package" class="title">Package&nbsp;simpledb</h1>
-</div>
-<div class="contentContainer">
-<ul class="blockList">
-<li class="blockList">
-<table class="typeSummary" border="0" cellpadding="3" cellspacing="0" summary="Interface Summary table, listing interfaces, and an explanation">
-<caption><span>Interface Summary</span><span class="tabEnd">&nbsp;</span></caption>
-<tr>
-<th class="colFirst" scope="col">Interface</th>
-<th class="colLast" scope="col">Description</th>
-</tr>
-<tbody>
-<tr class="altColor">
-<td class="colFirst"><a href="../simpledb/DbFile.html" title="interface in simpledb">DbFile</a></td>
-<td class="colLast">
-<div class="block">The interface for database files on disk.</div>
-</td>
-</tr>
-<tr class="rowColor">
-<td class="colFirst"><a href="../simpledb/DbFileIterator.html" title="interface in simpledb">DbFileIterator</a></td>
-<td class="colLast">
-<div class="block">DbFileIterator is the iterator interface that all SimpleDB Dbfile should
- implement.</div>
-</td>
-</tr>
-<tr class="altColor">
-<td class="colFirst"><a href="../simpledb/DbIterator.html" title="interface in simpledb">DbIterator</a></td>
-<td class="colLast">
-<div class="block">DbIterator is the iterator interface that all SimpleDB operators should
- implement.</div>
-</td>
-</tr>
-<tr class="rowColor">
-<td class="colFirst"><a href="../simpledb/Field.html" title="interface in simpledb">Field</a></td>
-<td class="colLast">
-<div class="block">Interface for values of fields in tuples in SimpleDB.</div>
-</td>
-</tr>
-<tr class="altColor">
-<td class="colFirst"><a href="../simpledb/Page.html" title="interface in simpledb">Page</a></td>
-<td class="colLast">
-<div class="block">Page is the interface used to represent pages that are resident in the
- BufferPool.</div>
-</td>
-</tr>
-<tr class="rowColor">
-<td class="colFirst"><a href="../simpledb/PageId.html" title="interface in simpledb">PageId</a></td>
-<td class="colLast">
-<div class="block">PageId is an interface to a specific page of a specific table.</div>
-</td>
-</tr>
-</tbody>
-</table>
-</li>
-<li class="blockList">
-<table class="typeSummary" border="0" cellpadding="3" cellspacing="0" summary="Class Summary table, listing classes, and an explanation">
-<caption><span>Class Summary</span><span class="tabEnd">&nbsp;</span></caption>
-<tr>
-<th class="colFirst" scope="col">Class</th>
-<th class="colLast" scope="col">Description</th>
-</tr>
-<tbody>
-<tr class="altColor">
-<td class="colFirst"><a href="../simpledb/BufferPool.html" title="class in simpledb">BufferPool</a></td>
-<td class="colLast">
-<div class="block">BufferPool manages the reading and writing of pages into memory from
- disk.</div>
-</td>
-</tr>
-<tr class="rowColor">
-<td class="colFirst"><a href="../simpledb/Catalog.html" title="class in simpledb">Catalog</a></td>
-<td class="colLast">
-<div class="block">The Catalog keeps track of all available tables in the database and their
- associated schemas.</div>
-</td>
-</tr>
-<tr class="altColor">
-<td class="colFirst"><a href="../simpledb/Database.html" title="class in simpledb">Database</a></td>
-<td class="colLast">
-<div class="block">Database is a class that initializes several static variables used by the
- database system (the catalog, the buffer pool, and the log files, in
- particular.)</div>
-</td>
-</tr>
-<tr class="rowColor">
-<td class="colFirst"><a href="../simpledb/Debug.html" title="class in simpledb">Debug</a></td>
-<td class="colLast">
-<div class="block">Debug is a utility class that wraps println statements and allows
- more or less command line output to be turned on.</div>
-</td>
-</tr>
-<tr class="altColor">
-<td class="colFirst"><a href="../simpledb/HeapFile.html" title="class in simpledb">HeapFile</a></td>
-<td class="colLast">
-<div class="block">HeapFile is an implementation of a DbFile that stores a collection of tuples
- in no particular order.</div>
-</td>
-</tr>
-<tr class="rowColor">
-<td class="colFirst"><a href="../simpledb/HeapFileEncoder.html" title="class in simpledb">HeapFileEncoder</a></td>
-<td class="colLast">
-<div class="block">HeapFileEncoder reads a comma delimited text file or accepts
- an array of tuples and converts it to
- pages of binary data in the appropriate format for simpledb heap pages
- Pages are padded out to a specified length, and written consecutive in a
- data file.</div>
-</td>
-</tr>
-<tr class="altColor">
-<td class="colFirst"><a href="../simpledb/HeapPage.html" title="class in simpledb">HeapPage</a></td>
-<td class="colLast">
-<div class="block">Each instance of HeapPage stores data for one page of HeapFiles and 
- implements the Page interface that is used by BufferPool.</div>
-</td>
-</tr>
-<tr class="rowColor">
-<td class="colFirst"><a href="../simpledb/HeapPageId.html" title="class in simpledb">HeapPageId</a></td>
-<td class="colLast">
-<div class="block">Unique identifier for HeapPage objects.</div>
-</td>
-</tr>
-<tr class="altColor">
-<td class="colFirst"><a href="../simpledb/IntField.html" title="class in simpledb">IntField</a></td>
-<td class="colLast">
-<div class="block">Instance of Field that stores a single integer.</div>
-</td>
-</tr>
-<tr class="rowColor">
-<td class="colFirst"><a href="../simpledb/LogFile.html" title="class in simpledb">LogFile</a></td>
-<td class="colLast">
-<div class="block"> The format of the log file is as follows:
-
-
-
- The first long integer of the file represents the offset of the
-last written checkpoint, or -1 if there are no checkpoints
-
- All additional data in the log consists of log records.</div>
-</td>
-</tr>
-<tr class="altColor">
-<td class="colFirst"><a href="../simpledb/Permissions.html" title="class in simpledb">Permissions</a></td>
-<td class="colLast">
-<div class="block">Class representing requested permissions to a relation/file.</div>
-</td>
-</tr>
-<tr class="rowColor">
-<td class="colFirst"><a href="../simpledb/Predicate.html" title="class in simpledb">Predicate</a></td>
-<td class="colLast">
-<div class="block">Predicate compares tuples to a specified Field value.</div>
-</td>
-</tr>
-<tr class="altColor">
-<td class="colFirst"><a href="../simpledb/RecordId.html" title="class in simpledb">RecordId</a></td>
-<td class="colLast">
-<div class="block">A RecordId is a reference to a specific tuple on a specific page of a
- specific table.</div>
-</td>
-</tr>
-<tr class="rowColor">
-<td class="colFirst"><a href="../simpledb/SeqScan.html" title="class in simpledb">SeqScan</a></td>
-<td class="colLast">
-<div class="block">SeqScan is an implementation of a sequential scan access method that reads
- each tuple of a table in no particular order (e.g., as they are laid out on
- disk).</div>
-</td>
-</tr>
-<tr class="altColor">
-<td class="colFirst"><a href="../simpledb/SimpleDb.html" title="class in simpledb">SimpleDb</a></td>
-<td class="colLast">&nbsp;</td>
-</tr>
-<tr class="rowColor">
-<td class="colFirst"><a href="../simpledb/StringField.html" title="class in simpledb">StringField</a></td>
-<td class="colLast">
-<div class="block">Instance of Field that stores a single String of a fixed length.</div>
-</td>
-</tr>
-<tr class="altColor">
-<td class="colFirst"><a href="../simpledb/TransactionId.html" title="class in simpledb">TransactionId</a></td>
-<td class="colLast">
-<div class="block">TransactionId is a class that contains the identifier of a transaction.</div>
-</td>
-</tr>
-<tr class="rowColor">
-<td class="colFirst"><a href="../simpledb/Tuple.html" title="class in simpledb">Tuple</a></td>
-<td class="colLast">
-<div class="block">Tuple maintains information about the contents of a tuple.</div>
-</td>
-</tr>
-<tr class="altColor">
-<td class="colFirst"><a href="../simpledb/TupleDesc.html" title="class in simpledb">TupleDesc</a></td>
-<td class="colLast">
-<div class="block">TupleDesc describes the schema of a tuple.</div>
-</td>
-</tr>
-<tr class="rowColor">
-<td class="colFirst"><a href="../simpledb/TupleDesc.TDItem.html" title="class in simpledb">TupleDesc.TDItem</a></td>
-<td class="colLast">
-<div class="block">A help class to facilitate organizing the information of each field</div>
-</td>
-</tr>
-<tr class="altColor">
-<td class="colFirst"><a href="../simpledb/TupleIterator.html" title="class in simpledb">TupleIterator</a></td>
-<td class="colLast">
-<div class="block">Implements a DbIterator by wrapping an Iterable<Tuple>.</div>
-</td>
-</tr>
-<tr class="rowColor">
-<td class="colFirst"><a href="../simpledb/Utility.html" title="class in simpledb">Utility</a></td>
-<td class="colLast">
-<div class="block">Helper methods used for testing and implementing random features.</div>
-</td>
-</tr>
-</tbody>
-</table>
-</li>
-<li class="blockList">
-<table class="typeSummary" border="0" cellpadding="3" cellspacing="0" summary="Enum Summary table, listing enums, and an explanation">
-<caption><span>Enum Summary</span><span class="tabEnd">&nbsp;</span></caption>
-<tr>
-<th class="colFirst" scope="col">Enum</th>
-<th class="colLast" scope="col">Description</th>
-</tr>
-<tbody>
-<tr class="altColor">
-<td class="colFirst"><a href="../simpledb/Predicate.Op.html" title="enum in simpledb">Predicate.Op</a></td>
-<td class="colLast">
-<div class="block">Constants used for return codes in Field.compare</div>
-</td>
-</tr>
-<tr class="rowColor">
-<td class="colFirst"><a href="../simpledb/Type.html" title="enum in simpledb">Type</a></td>
-<td class="colLast">
-<div class="block">Class representing a type in SimpleDB.</div>
-</td>
-</tr>
-</tbody>
-</table>
-</li>
-<li class="blockList">
-<table class="typeSummary" border="0" cellpadding="3" cellspacing="0" summary="Exception Summary table, listing exceptions, and an explanation">
-<caption><span>Exception Summary</span><span class="tabEnd">&nbsp;</span></caption>
-<tr>
-<th class="colFirst" scope="col">Exception</th>
-<th class="colLast" scope="col">Description</th>
-</tr>
-<tbody>
-<tr class="altColor">
-<td class="colFirst"><a href="../simpledb/DbException.html" title="class in simpledb">DbException</a></td>
-<td class="colLast">
-<div class="block">Generic database exception class</div>
-</td>
-</tr>
-<tr class="rowColor">
-<td class="colFirst"><a href="../simpledb/TransactionAbortedException.html" title="class in simpledb">TransactionAbortedException</a></td>
-<td class="colLast">
-<div class="block">Exception that is thrown when a transaction has aborted.</div>
-</td>
-</tr>
-</tbody>
-</table>
-</li>
-</ul>
-</div>
-<!-- ======= START OF BOTTOM NAVBAR ====== -->
-<div class="bottomNav"><a name="navbar.bottom">
-<!--   -->
-</a>
-<div class="skipNav"><a href="#skip.navbar.bottom" title="Skip navigation links">Skip navigation links</a></div>
-<a name="navbar.bottom.firstrow">
-<!--   -->
-</a>
-<ul class="navList" title="Navigation">
-<li><a href="../simpledb/package-summary.html">Package</a></li>
-<li>Class</li>
-<li><a href="package-tree.html">Tree</a></li>
-<li><a href="../deprecated-list.html">Deprecated</a></li>
-<li><a href="../index-all.html">Index</a></li>
-<li><a href="../help-doc.html">Help</a></li>
-</ul>
-</div>
-<div class="subNav">
-<ul class="navList">
-<li>Prev&nbsp;Package</li>
-<li>Next&nbsp;Package</li>
-</ul>
-<ul class="navList">
-<li><a href="../index.html?simpledb/package-summary.html" target="_top">Frames</a></li>
-<li><a href="package-summary.html" target="_top">No&nbsp;Frames</a></li>
-</ul>
-<ul class="navList" id="allclasses_navbar_bottom">
-<li><a href="../allclasses-noframe.html">All&nbsp;Classes</a></li>
-</ul>
-<div>
-<script type="text/javascript"><!--
-  allClassesLink = document.getElementById("allclasses_navbar_bottom");
-  if(window==top) {
-    allClassesLink.style.display = "block";
-  }
-  else {
-    allClassesLink.style.display = "none";
-  }
-  //-->
-</script>
-</div>
-<a name="skip.navbar.bottom">
-<!--   -->
-</a></div>
-<!-- ======== END OF BOTTOM NAVBAR ======= -->
-</body>
-</html>
diff -ruN lab1/javadoc/simpledb/package-tree.html lab3/javadoc/simpledb/package-tree.html
--- lab1/javadoc/simpledb/package-tree.html	2016-11-02 22:06:58.000000000 -0500
+++ lab3/javadoc/simpledb/package-tree.html	1969-12-31 18:00:00.000000000 -0600
@@ -1,186 +0,0 @@
-<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
-<!-- NewPage -->
-<html lang="en">
-<head>
-<!-- Generated by javadoc (1.8.0_25) on Thu Oct 27 13:16:24 CDT 2016 -->
-<title>simpledb Class Hierarchy</title>
-<meta name="date" content="2016-10-27">
-<link rel="stylesheet" type="text/css" href="../stylesheet.css" title="Style">
-<script type="text/javascript" src="../script.js"></script>
-</head>
-<body>
-<script type="text/javascript"><!--
-    try {
-        if (location.href.indexOf('is-external=true') == -1) {
-            parent.document.title="simpledb Class Hierarchy";
-        }
-    }
-    catch(err) {
-    }
-//-->
-</script>
-<noscript>
-<div>JavaScript is disabled on your browser.</div>
-</noscript>
-<!-- ========= START OF TOP NAVBAR ======= -->
-<div class="topNav"><a name="navbar.top">
-<!--   -->
-</a>
-<div class="skipNav"><a href="#skip.navbar.top" title="Skip navigation links">Skip navigation links</a></div>
-<a name="navbar.top.firstrow">
-<!--   -->
-</a>
-<ul class="navList" title="Navigation">
-<li><a href="../simpledb/package-summary.html">Package</a></li>
-<li>Class</li>
-<li class="navBarCell1Rev">Tree</li>
-<li><a href="../deprecated-list.html">Deprecated</a></li>
-<li><a href="../index-all.html">Index</a></li>
-<li><a href="../help-doc.html">Help</a></li>
-</ul>
-</div>
-<div class="subNav">
-<ul class="navList">
-<li>Prev</li>
-<li>Next</li>
-</ul>
-<ul class="navList">
-<li><a href="../index.html?simpledb/package-tree.html" target="_top">Frames</a></li>
-<li><a href="package-tree.html" target="_top">No&nbsp;Frames</a></li>
-</ul>
-<ul class="navList" id="allclasses_navbar_top">
-<li><a href="../allclasses-noframe.html">All&nbsp;Classes</a></li>
-</ul>
-<div>
-<script type="text/javascript"><!--
-  allClassesLink = document.getElementById("allclasses_navbar_top");
-  if(window==top) {
-    allClassesLink.style.display = "block";
-  }
-  else {
-    allClassesLink.style.display = "none";
-  }
-  //-->
-</script>
-</div>
-<a name="skip.navbar.top">
-<!--   -->
-</a></div>
-<!-- ========= END OF TOP NAVBAR ========= -->
-<div class="header">
-<h1 class="title">Hierarchy For Package simpledb</h1>
-</div>
-<div class="contentContainer">
-<h2 title="Class Hierarchy">Class Hierarchy</h2>
-<ul>
-<li type="circle">java.lang.Object
-<ul>
-<li type="circle">simpledb.<a href="../simpledb/BufferPool.html" title="class in simpledb"><span class="typeNameLink">BufferPool</span></a></li>
-<li type="circle">simpledb.<a href="../simpledb/Catalog.html" title="class in simpledb"><span class="typeNameLink">Catalog</span></a></li>
-<li type="circle">simpledb.<a href="../simpledb/Database.html" title="class in simpledb"><span class="typeNameLink">Database</span></a></li>
-<li type="circle">simpledb.<a href="../simpledb/Debug.html" title="class in simpledb"><span class="typeNameLink">Debug</span></a></li>
-<li type="circle">simpledb.<a href="../simpledb/HeapFile.html" title="class in simpledb"><span class="typeNameLink">HeapFile</span></a> (implements simpledb.<a href="../simpledb/DbFile.html" title="interface in simpledb">DbFile</a>)</li>
-<li type="circle">simpledb.<a href="../simpledb/HeapFileEncoder.html" title="class in simpledb"><span class="typeNameLink">HeapFileEncoder</span></a></li>
-<li type="circle">simpledb.<a href="../simpledb/HeapPage.html" title="class in simpledb"><span class="typeNameLink">HeapPage</span></a> (implements simpledb.<a href="../simpledb/Page.html" title="interface in simpledb">Page</a>)</li>
-<li type="circle">simpledb.<a href="../simpledb/HeapPageId.html" title="class in simpledb"><span class="typeNameLink">HeapPageId</span></a> (implements simpledb.<a href="../simpledb/PageId.html" title="interface in simpledb">PageId</a>)</li>
-<li type="circle">simpledb.<a href="../simpledb/IntField.html" title="class in simpledb"><span class="typeNameLink">IntField</span></a> (implements simpledb.<a href="../simpledb/Field.html" title="interface in simpledb">Field</a>)</li>
-<li type="circle">simpledb.<a href="../simpledb/LogFile.html" title="class in simpledb"><span class="typeNameLink">LogFile</span></a></li>
-<li type="circle">simpledb.<a href="../simpledb/Permissions.html" title="class in simpledb"><span class="typeNameLink">Permissions</span></a></li>
-<li type="circle">simpledb.<a href="../simpledb/Predicate.html" title="class in simpledb"><span class="typeNameLink">Predicate</span></a> (implements java.io.Serializable)</li>
-<li type="circle">simpledb.<a href="../simpledb/RecordId.html" title="class in simpledb"><span class="typeNameLink">RecordId</span></a> (implements java.io.Serializable)</li>
-<li type="circle">simpledb.<a href="../simpledb/SeqScan.html" title="class in simpledb"><span class="typeNameLink">SeqScan</span></a> (implements simpledb.<a href="../simpledb/DbIterator.html" title="interface in simpledb">DbIterator</a>)</li>
-<li type="circle">simpledb.<a href="../simpledb/SimpleDb.html" title="class in simpledb"><span class="typeNameLink">SimpleDb</span></a></li>
-<li type="circle">simpledb.<a href="../simpledb/StringField.html" title="class in simpledb"><span class="typeNameLink">StringField</span></a> (implements simpledb.<a href="../simpledb/Field.html" title="interface in simpledb">Field</a>)</li>
-<li type="circle">java.lang.Throwable (implements java.io.Serializable)
-<ul>
-<li type="circle">java.lang.Exception
-<ul>
-<li type="circle">simpledb.<a href="../simpledb/DbException.html" title="class in simpledb"><span class="typeNameLink">DbException</span></a></li>
-<li type="circle">simpledb.<a href="../simpledb/TransactionAbortedException.html" title="class in simpledb"><span class="typeNameLink">TransactionAbortedException</span></a></li>
-</ul>
-</li>
-</ul>
-</li>
-<li type="circle">simpledb.<a href="../simpledb/TransactionId.html" title="class in simpledb"><span class="typeNameLink">TransactionId</span></a> (implements java.io.Serializable)</li>
-<li type="circle">simpledb.<a href="../simpledb/Tuple.html" title="class in simpledb"><span class="typeNameLink">Tuple</span></a> (implements java.io.Serializable)</li>
-<li type="circle">simpledb.<a href="../simpledb/TupleDesc.html" title="class in simpledb"><span class="typeNameLink">TupleDesc</span></a> (implements java.io.Serializable)</li>
-<li type="circle">simpledb.<a href="../simpledb/TupleDesc.TDItem.html" title="class in simpledb"><span class="typeNameLink">TupleDesc.TDItem</span></a> (implements java.io.Serializable)</li>
-<li type="circle">simpledb.<a href="../simpledb/TupleIterator.html" title="class in simpledb"><span class="typeNameLink">TupleIterator</span></a> (implements simpledb.<a href="../simpledb/DbIterator.html" title="interface in simpledb">DbIterator</a>)</li>
-<li type="circle">simpledb.<a href="../simpledb/Utility.html" title="class in simpledb"><span class="typeNameLink">Utility</span></a></li>
-</ul>
-</li>
-</ul>
-<h2 title="Interface Hierarchy">Interface Hierarchy</h2>
-<ul>
-<li type="circle">simpledb.<a href="../simpledb/DbFile.html" title="interface in simpledb"><span class="typeNameLink">DbFile</span></a></li>
-<li type="circle">simpledb.<a href="../simpledb/DbFileIterator.html" title="interface in simpledb"><span class="typeNameLink">DbFileIterator</span></a></li>
-<li type="circle">simpledb.<a href="../simpledb/Page.html" title="interface in simpledb"><span class="typeNameLink">Page</span></a></li>
-<li type="circle">simpledb.<a href="../simpledb/PageId.html" title="interface in simpledb"><span class="typeNameLink">PageId</span></a></li>
-<li type="circle">java.io.Serializable
-<ul>
-<li type="circle">simpledb.<a href="../simpledb/DbIterator.html" title="interface in simpledb"><span class="typeNameLink">DbIterator</span></a></li>
-<li type="circle">simpledb.<a href="../simpledb/Field.html" title="interface in simpledb"><span class="typeNameLink">Field</span></a></li>
-</ul>
-</li>
-</ul>
-<h2 title="Enum Hierarchy">Enum Hierarchy</h2>
-<ul>
-<li type="circle">java.lang.Object
-<ul>
-<li type="circle">java.lang.Enum&lt;E&gt; (implements java.lang.Comparable&lt;T&gt;, java.io.Serializable)
-<ul>
-<li type="circle">simpledb.<a href="../simpledb/Type.html" title="enum in simpledb"><span class="typeNameLink">Type</span></a> (implements java.io.Serializable)</li>
-<li type="circle">simpledb.<a href="../simpledb/Predicate.Op.html" title="enum in simpledb"><span class="typeNameLink">Predicate.Op</span></a> (implements java.io.Serializable)</li>
-</ul>
-</li>
-</ul>
-</li>
-</ul>
-</div>
-<!-- ======= START OF BOTTOM NAVBAR ====== -->
-<div class="bottomNav"><a name="navbar.bottom">
-<!--   -->
-</a>
-<div class="skipNav"><a href="#skip.navbar.bottom" title="Skip navigation links">Skip navigation links</a></div>
-<a name="navbar.bottom.firstrow">
-<!--   -->
-</a>
-<ul class="navList" title="Navigation">
-<li><a href="../simpledb/package-summary.html">Package</a></li>
-<li>Class</li>
-<li class="navBarCell1Rev">Tree</li>
-<li><a href="../deprecated-list.html">Deprecated</a></li>
-<li><a href="../index-all.html">Index</a></li>
-<li><a href="../help-doc.html">Help</a></li>
-</ul>
-</div>
-<div class="subNav">
-<ul class="navList">
-<li>Prev</li>
-<li>Next</li>
-</ul>
-<ul class="navList">
-<li><a href="../index.html?simpledb/package-tree.html" target="_top">Frames</a></li>
-<li><a href="package-tree.html" target="_top">No&nbsp;Frames</a></li>
-</ul>
-<ul class="navList" id="allclasses_navbar_bottom">
-<li><a href="../allclasses-noframe.html">All&nbsp;Classes</a></li>
-</ul>
-<div>
-<script type="text/javascript"><!--
-  allClassesLink = document.getElementById("allclasses_navbar_bottom");
-  if(window==top) {
-    allClassesLink.style.display = "block";
-  }
-  else {
-    allClassesLink.style.display = "none";
-  }
-  //-->
-</script>
-</div>
-<a name="skip.navbar.bottom">
-<!--   -->
-</a></div>
-<!-- ======== END OF BOTTOM NAVBAR ======= -->
-</body>
-</html>
diff -ruN lab1/javadoc/stylesheet.css lab3/javadoc/stylesheet.css
--- lab1/javadoc/stylesheet.css	2016-11-02 22:06:58.000000000 -0500
+++ lab3/javadoc/stylesheet.css	1969-12-31 18:00:00.000000000 -0600
@@ -1,574 +0,0 @@
-/* Javadoc style sheet */
-/*
-Overall document style
-*/
-
-@import url('resources/fonts/dejavu.css');
-
-body {
-    background-color:#ffffff;
-    color:#353833;
-    font-family:'DejaVu Sans', Arial, Helvetica, sans-serif;
-    font-size:14px;
-    margin:0;
-}
-a:link, a:visited {
-    text-decoration:none;
-    color:#4A6782;
-}
-a:hover, a:focus {
-    text-decoration:none;
-    color:#bb7a2a;
-}
-a:active {
-    text-decoration:none;
-    color:#4A6782;
-}
-a[name] {
-    color:#353833;
-}
-a[name]:hover {
-    text-decoration:none;
-    color:#353833;
-}
-pre {
-    font-family:'DejaVu Sans Mono', monospace;
-    font-size:14px;
-}
-h1 {
-    font-size:20px;
-}
-h2 {
-    font-size:18px;
-}
-h3 {
-    font-size:16px;
-    font-style:italic;
-}
-h4 {
-    font-size:13px;
-}
-h5 {
-    font-size:12px;
-}
-h6 {
-    font-size:11px;
-}
-ul {
-    list-style-type:disc;
-}
-code, tt {
-    font-family:'DejaVu Sans Mono', monospace;
-    font-size:14px;
-    padding-top:4px;
-    margin-top:8px;
-    line-height:1.4em;
-}
-dt code {
-    font-family:'DejaVu Sans Mono', monospace;
-    font-size:14px;
-    padding-top:4px;
-}
-table tr td dt code {
-    font-family:'DejaVu Sans Mono', monospace;
-    font-size:14px;
-    vertical-align:top;
-    padding-top:4px;
-}
-sup {
-    font-size:8px;
-}
-/*
-Document title and Copyright styles
-*/
-.clear {
-    clear:both;
-    height:0px;
-    overflow:hidden;
-}
-.aboutLanguage {
-    float:right;
-    padding:0px 21px;
-    font-size:11px;
-    z-index:200;
-    margin-top:-9px;
-}
-.legalCopy {
-    margin-left:.5em;
-}
-.bar a, .bar a:link, .bar a:visited, .bar a:active {
-    color:#FFFFFF;
-    text-decoration:none;
-}
-.bar a:hover, .bar a:focus {
-    color:#bb7a2a;
-}
-.tab {
-    background-color:#0066FF;
-    color:#ffffff;
-    padding:8px;
-    width:5em;
-    font-weight:bold;
-}
-/*
-Navigation bar styles
-*/
-.bar {
-    background-color:#4D7A97;
-    color:#FFFFFF;
-    padding:.8em .5em .4em .8em;
-    height:auto;/*height:1.8em;*/
-    font-size:11px;
-    margin:0;
-}
-.topNav {
-    background-color:#4D7A97;
-    color:#FFFFFF;
-    float:left;
-    padding:0;
-    width:100%;
-    clear:right;
-    height:2.8em;
-    padding-top:10px;
-    overflow:hidden;
-    font-size:12px; 
-}
-.bottomNav {
-    margin-top:10px;
-    background-color:#4D7A97;
-    color:#FFFFFF;
-    float:left;
-    padding:0;
-    width:100%;
-    clear:right;
-    height:2.8em;
-    padding-top:10px;
-    overflow:hidden;
-    font-size:12px;
-}
-.subNav {
-    background-color:#dee3e9;
-    float:left;
-    width:100%;
-    overflow:hidden;
-    font-size:12px;
-}
-.subNav div {
-    clear:left;
-    float:left;
-    padding:0 0 5px 6px;
-    text-transform:uppercase;
-}
-ul.navList, ul.subNavList {
-    float:left;
-    margin:0 25px 0 0;
-    padding:0;
-}
-ul.navList li{
-    list-style:none;
-    float:left;
-    padding: 5px 6px;
-    text-transform:uppercase;
-}
-ul.subNavList li{
-    list-style:none;
-    float:left;
-}
-.topNav a:link, .topNav a:active, .topNav a:visited, .bottomNav a:link, .bottomNav a:active, .bottomNav a:visited {
-    color:#FFFFFF;
-    text-decoration:none;
-    text-transform:uppercase;
-}
-.topNav a:hover, .bottomNav a:hover {
-    text-decoration:none;
-    color:#bb7a2a;
-    text-transform:uppercase;
-}
-.navBarCell1Rev {
-    background-color:#F8981D;
-    color:#253441;
-    margin: auto 5px;
-}
-.skipNav {
-    position:absolute;
-    top:auto;
-    left:-9999px;
-    overflow:hidden;
-}
-/*
-Page header and footer styles
-*/
-.header, .footer {
-    clear:both;
-    margin:0 20px;
-    padding:5px 0 0 0;
-}
-.indexHeader {
-    margin:10px;
-    position:relative;
-}
-.indexHeader span{
-    margin-right:15px;
-}
-.indexHeader h1 {
-    font-size:13px;
-}
-.title {
-    color:#2c4557;
-    margin:10px 0;
-}
-.subTitle {
-    margin:5px 0 0 0;
-}
-.header ul {
-    margin:0 0 15px 0;
-    padding:0;
-}
-.footer ul {
-    margin:20px 0 5px 0;
-}
-.header ul li, .footer ul li {
-    list-style:none;
-    font-size:13px;
-}
-/*
-Heading styles
-*/
-div.details ul.blockList ul.blockList ul.blockList li.blockList h4, div.details ul.blockList ul.blockList ul.blockListLast li.blockList h4 {
-    background-color:#dee3e9;
-    border:1px solid #d0d9e0;
-    margin:0 0 6px -8px;
-    padding:7px 5px;
-}
-ul.blockList ul.blockList ul.blockList li.blockList h3 {
-    background-color:#dee3e9;
-    border:1px solid #d0d9e0;
-    margin:0 0 6px -8px;
-    padding:7px 5px;
-}
-ul.blockList ul.blockList li.blockList h3 {
-    padding:0;
-    margin:15px 0;
-}
-ul.blockList li.blockList h2 {
-    padding:0px 0 20px 0;
-}
-/*
-Page layout container styles
-*/
-.contentContainer, .sourceContainer, .classUseContainer, .serializedFormContainer, .constantValuesContainer {
-    clear:both;
-    padding:10px 20px;
-    position:relative;
-}
-.indexContainer {
-    margin:10px;
-    position:relative;
-    font-size:12px;
-}
-.indexContainer h2 {
-    font-size:13px;
-    padding:0 0 3px 0;
-}
-.indexContainer ul {
-    margin:0;
-    padding:0;
-}
-.indexContainer ul li {
-    list-style:none;
-    padding-top:2px;
-}
-.contentContainer .description dl dt, .contentContainer .details dl dt, .serializedFormContainer dl dt {
-    font-size:12px;
-    font-weight:bold;
-    margin:10px 0 0 0;
-    color:#4E4E4E;
-}
-.contentContainer .description dl dd, .contentContainer .details dl dd, .serializedFormContainer dl dd {
-    margin:5px 0 10px 0px;
-    font-size:14px;
-    font-family:'DejaVu Sans Mono',monospace;
-}
-.serializedFormContainer dl.nameValue dt {
-    margin-left:1px;
-    font-size:1.1em;
-    display:inline;
-    font-weight:bold;
-}
-.serializedFormContainer dl.nameValue dd {
-    margin:0 0 0 1px;
-    font-size:1.1em;
-    display:inline;
-}
-/*
-List styles
-*/
-ul.horizontal li {
-    display:inline;
-    font-size:0.9em;
-}
-ul.inheritance {
-    margin:0;
-    padding:0;
-}
-ul.inheritance li {
-    display:inline;
-    list-style:none;
-}
-ul.inheritance li ul.inheritance {
-    margin-left:15px;
-    padding-left:15px;
-    padding-top:1px;
-}
-ul.blockList, ul.blockListLast {
-    margin:10px 0 10px 0;
-    padding:0;
-}
-ul.blockList li.blockList, ul.blockListLast li.blockList {
-    list-style:none;
-    margin-bottom:15px;
-    line-height:1.4;
-}
-ul.blockList ul.blockList li.blockList, ul.blockList ul.blockListLast li.blockList {
-    padding:0px 20px 5px 10px;
-    border:1px solid #ededed; 
-    background-color:#f8f8f8;
-}
-ul.blockList ul.blockList ul.blockList li.blockList, ul.blockList ul.blockList ul.blockListLast li.blockList {
-    padding:0 0 5px 8px;
-    background-color:#ffffff;
-    border:none;
-}
-ul.blockList ul.blockList ul.blockList ul.blockList li.blockList {
-    margin-left:0;
-    padding-left:0;
-    padding-bottom:15px;
-    border:none;
-}
-ul.blockList ul.blockList ul.blockList ul.blockList li.blockListLast {
-    list-style:none;
-    border-bottom:none;
-    padding-bottom:0;
-}
-table tr td dl, table tr td dl dt, table tr td dl dd {
-    margin-top:0;
-    margin-bottom:1px;
-}
-/*
-Table styles
-*/
-.overviewSummary, .memberSummary, .typeSummary, .useSummary, .constantsSummary, .deprecatedSummary {
-    width:100%;
-    border-left:1px solid #EEE; 
-    border-right:1px solid #EEE; 
-    border-bottom:1px solid #EEE; 
-}
-.overviewSummary, .memberSummary  {
-    padding:0px;
-}
-.overviewSummary caption, .memberSummary caption, .typeSummary caption,
-.useSummary caption, .constantsSummary caption, .deprecatedSummary caption {
-    position:relative;
-    text-align:left;
-    background-repeat:no-repeat;
-    color:#253441;
-    font-weight:bold;
-    clear:none;
-    overflow:hidden;
-    padding:0px;
-    padding-top:10px;
-    padding-left:1px;
-    margin:0px;
-    white-space:pre;
-}
-.overviewSummary caption a:link, .memberSummary caption a:link, .typeSummary caption a:link,
-.useSummary caption a:link, .constantsSummary caption a:link, .deprecatedSummary caption a:link,
-.overviewSummary caption a:hover, .memberSummary caption a:hover, .typeSummary caption a:hover,
-.useSummary caption a:hover, .constantsSummary caption a:hover, .deprecatedSummary caption a:hover,
-.overviewSummary caption a:active, .memberSummary caption a:active, .typeSummary caption a:active,
-.useSummary caption a:active, .constantsSummary caption a:active, .deprecatedSummary caption a:active,
-.overviewSummary caption a:visited, .memberSummary caption a:visited, .typeSummary caption a:visited,
-.useSummary caption a:visited, .constantsSummary caption a:visited, .deprecatedSummary caption a:visited {
-    color:#FFFFFF;
-}
-.overviewSummary caption span, .memberSummary caption span, .typeSummary caption span,
-.useSummary caption span, .constantsSummary caption span, .deprecatedSummary caption span {
-    white-space:nowrap;
-    padding-top:5px;
-    padding-left:12px;
-    padding-right:12px;
-    padding-bottom:7px;
-    display:inline-block;
-    float:left;
-    background-color:#F8981D;
-    border: none;
-    height:16px;
-}
-.memberSummary caption span.activeTableTab span {
-    white-space:nowrap;
-    padding-top:5px;
-    padding-left:12px;
-    padding-right:12px;
-    margin-right:3px;
-    display:inline-block;
-    float:left;
-    background-color:#F8981D;
-    height:16px;
-}
-.memberSummary caption span.tableTab span {
-    white-space:nowrap;
-    padding-top:5px;
-    padding-left:12px;
-    padding-right:12px;
-    margin-right:3px;
-    display:inline-block;
-    float:left;
-    background-color:#4D7A97;
-    height:16px;
-}
-.memberSummary caption span.tableTab, .memberSummary caption span.activeTableTab {
-    padding-top:0px;
-    padding-left:0px;
-    padding-right:0px;
-    background-image:none;
-    float:none;
-    display:inline;
-}
-.overviewSummary .tabEnd, .memberSummary .tabEnd, .typeSummary .tabEnd,
-.useSummary .tabEnd, .constantsSummary .tabEnd, .deprecatedSummary .tabEnd {
-    display:none;
-    width:5px;
-    position:relative;
-    float:left;
-    background-color:#F8981D;
-}
-.memberSummary .activeTableTab .tabEnd {
-    display:none;
-    width:5px;
-    margin-right:3px;
-    position:relative; 
-    float:left;
-    background-color:#F8981D;
-}
-.memberSummary .tableTab .tabEnd {
-    display:none;
-    width:5px;
-    margin-right:3px;
-    position:relative;
-    background-color:#4D7A97;
-    float:left;
-
-}
-.overviewSummary td, .memberSummary td, .typeSummary td,
-.useSummary td, .constantsSummary td, .deprecatedSummary td {
-    text-align:left;
-    padding:0px 0px 12px 10px;
-    width:100%;
-}
-th.colOne, th.colFirst, th.colLast, .useSummary th, .constantsSummary th,
-td.colOne, td.colFirst, td.colLast, .useSummary td, .constantsSummary td{
-    vertical-align:top;
-    padding-right:0px;
-    padding-top:8px;
-    padding-bottom:3px;
-}
-th.colFirst, th.colLast, th.colOne, .constantsSummary th {
-    background:#dee3e9;
-    text-align:left;
-    padding:8px 3px 3px 7px;
-}
-td.colFirst, th.colFirst {
-    white-space:nowrap;
-    font-size:13px;
-}
-td.colLast, th.colLast {
-    font-size:13px;
-}
-td.colOne, th.colOne {
-    font-size:13px;
-}
-.overviewSummary td.colFirst, .overviewSummary th.colFirst,
-.overviewSummary td.colOne, .overviewSummary th.colOne,
-.memberSummary td.colFirst, .memberSummary th.colFirst,
-.memberSummary td.colOne, .memberSummary th.colOne,
-.typeSummary td.colFirst{
-    width:25%;
-    vertical-align:top;
-}
-td.colOne a:link, td.colOne a:active, td.colOne a:visited, td.colOne a:hover, td.colFirst a:link, td.colFirst a:active, td.colFirst a:visited, td.colFirst a:hover, td.colLast a:link, td.colLast a:active, td.colLast a:visited, td.colLast a:hover, .constantValuesContainer td a:link, .constantValuesContainer td a:active, .constantValuesContainer td a:visited, .constantValuesContainer td a:hover {
-    font-weight:bold;
-}
-.tableSubHeadingColor {
-    background-color:#EEEEFF;
-}
-.altColor {
-    background-color:#FFFFFF;
-}
-.rowColor {
-    background-color:#EEEEEF;
-}
-/*
-Content styles
-*/
-.description pre {
-    margin-top:0;
-}
-.deprecatedContent {
-    margin:0;
-    padding:10px 0;
-}
-.docSummary {
-    padding:0;
-}
-
-ul.blockList ul.blockList ul.blockList li.blockList h3 {
-    font-style:normal;
-}
-
-div.block {
-    font-size:14px;
-    font-family:'DejaVu Serif', Georgia, "Times New Roman", Times, serif;
-}
-
-td.colLast div {
-    padding-top:0px;
-}
-
-
-td.colLast a {
-    padding-bottom:3px;
-}
-/*
-Formatting effect styles
-*/
-.sourceLineNo {
-    color:green;
-    padding:0 30px 0 0;
-}
-h1.hidden {
-    visibility:hidden;
-    overflow:hidden;
-    font-size:10px;
-}
-.block {
-    display:block;
-    margin:3px 10px 2px 0px;
-    color:#474747;
-}
-.deprecatedLabel, .descfrmTypeLabel, .memberNameLabel, .memberNameLink,
-.overrideSpecifyLabel, .packageHierarchyLabel, .paramLabel, .returnLabel,
-.seeLabel, .simpleTagLabel, .throwsLabel, .typeNameLabel, .typeNameLink {
-    font-weight:bold;
-}
-.deprecationComment, .emphasizedPhrase, .interfaceName {
-    font-style:italic;
-}
-
-div.block div.block span.deprecationComment, div.block div.block span.emphasizedPhrase,
-div.block div.block span.interfaceName {
-    font-style:normal;
-}
-
-div.contentContainer ul.blockList li.blockList h2{
-    padding-bottom:0px;
-}
Binary files lab1/lib/jline-0.9.94.jar and lab3/lib/jline-0.9.94.jar differ
Binary files lab1/lib/zql.jar and lab3/lib/zql.jar differ
diff -ruN lab1/src/java/simpledb/#Predicate.java# lab3/src/java/simpledb/#Predicate.java#
--- lab1/src/java/simpledb/#Predicate.java#	2016-11-02 22:06:58.000000000 -0500
+++ lab3/src/java/simpledb/#Predicate.java#	1969-12-31 18:00:00.000000000 -0600
@@ -1,111 +0,0 @@
-package simpledb;
-
-import java.io.Serializable;
-
-/**
- * Predicate compares tuples to a specified Field value.
- */
-public class Predicate implements Serializable {
-
-    private static final long serialVersionUID = 1L;
-
-    /** Constants used for return codes in Field.compare */
-    public enum Op implements Serializable {
-        EQUALS, GREATER_THAN, LESS_THAN, LESS_THAN_OR_EQ, GREATER_THAN_OR_EQ, LIKE, NOT_EQUALS;
-
-        /**
-         * Interface to access operations by integer value for command-line
-         * convenience.
-         * 
-         * @param i
-         *            a valid integer Op index
-         */
-        public static Op getOp(int i) {
-            return values()[i];
-        }
-
-        public String toString() {
-            if (this == EQUALS)
-                return "=";
-            if (this == GREATER_THAN)
-                return ">";
-            if (this == LESS_THAN)
-                return "<";
-            if (this == LESS_THAN_OR_EQ)
-                return "<=";
-            if (this == GREATER_THAN_OR_EQ)
-                return ">=";
-            if (this == LIKE)
-                return "LIKE";
-            if (this == NOT_EQUALS)
-                return "<>";
-            throw new IllegalStateException("impossible to reach here");
-        }
-
-    }
-    
-    /**
-     * Constructor.
-     * 
-     * @param field
-     *            field number of passed in tuples to compare against.
-     * @param op
-     *            operation to use for comparison
-     * @param operand
-     *            field value to compare passed in tuples to
-     */
-    public Predicate(int field, Op op, Field operand) {
-        // some code goes here
-    }
-
-    /**
-     * @return the field number
-     */
-    public int getField()
-    {
-        // some code goes here
-        return -1;
-    }
-
-    /**
-     * @return the operator
-     */
-    public Op getOp()
-    {
-        // some code goes here
-        return null;
-    }
-    
-    /**
-     * @return the operand
-     */
-    public Field getOperand()
-    {
-        // some code goes here
-        return null;
-    }
-    
-    /**
-     * Compares the field number of t specified in the constructor to the
-     * operand field specified in the constructor using the operator specific in
-     * the constructor. The comparison can be made through Field's compare
-     * method.
-     * 
-     * @param t
-     *            The tuple to compare against
-     * @return true if the comparison is true, false otherwise.
-     */
-    public boolean filter(Tuple t) {
-        // some code goes here
-        return false;
-    }
-
-    /**
-     * Returns something useful, like "f = field_id op = op_string operand =
-     * operand_string
-     */
-    public String toString() {
-        // some code goes here
-        return "";
-    }
-}
diff -ruN lab1/src/java/simpledb/AbstractDbFileIterator.java lab3/src/java/simpledb/AbstractDbFileIterator.java
--- lab1/src/java/simpledb/AbstractDbFileIterator.java	1969-12-31 18:00:00.000000000 -0600
+++ lab3/src/java/simpledb/AbstractDbFileIterator.java	2016-11-02 22:06:55.000000000 -0500
@@ -0,0 +1,36 @@
+package simpledb;
+
+import java.util.NoSuchElementException;
+
+/** Helper for implementing DbFileIterators. Handles hasNext()/next() logic. */
+public abstract class AbstractDbFileIterator implements DbFileIterator {
+
+	public boolean hasNext() throws DbException, TransactionAbortedException {
+        if (next == null) next = readNext();
+        return next != null;
+    }
+
+    public Tuple next() throws DbException, TransactionAbortedException,
+            NoSuchElementException {
+        if (next == null) {
+            next = readNext();
+            if (next == null) throw new NoSuchElementException();
+        }
+
+        Tuple result = next;
+        next = null;
+        return result;
+    }
+
+    /** If subclasses override this, they should call super.close(). */
+    public void close() {
+        // Ensures that a future call to next() will fail
+        next = null;
+    }
+
+    /** Reads the next tuple from the underlying source.
+    @return the next Tuple in the iterator, null if the iteration is finished. */
+    protected abstract Tuple readNext() throws DbException, TransactionAbortedException;
+
+    private Tuple next = null;
+}
diff -ruN lab1/src/java/simpledb/Aggregate.java lab3/src/java/simpledb/Aggregate.java
--- lab1/src/java/simpledb/Aggregate.java	1969-12-31 18:00:00.000000000 -0600
+++ lab3/src/java/simpledb/Aggregate.java	2016-11-02 22:06:55.000000000 -0500
@@ -0,0 +1,236 @@
+package simpledb;
+
+import java.util.*;
+
+import simpledb.Aggregator.Op;
+
+/**
+ * The Aggregation operator that computes an aggregate (e.g., sum, avg, max,
+ * min). Note that we only support aggregates over a single column, grouped by a
+ * single column.
+ */
+public class Aggregate extends Operator {
+
+    private static final long serialVersionUID = 1L;
+    private TupleDesc td = null;
+    private DbIterator child = null;
+    private DbIterator it = null;
+    private Aggregator agg = null;
+    private Aggregator.Op aop = null;
+    private String gFieldName = null;
+    private String aFieldName = null;
+    private int afield, gfield;
+
+    /**
+     * Constructor.
+     * 
+     * Implementation hint: depending on the type of afield, you will want to
+     * construct an {@link IntAggregator} or {@link StringAggregator} to help
+     * you with your implementation of readNext().
+     * 
+     * 
+     * @param child
+     *            The DbIterator that is feeding us tuples.
+     * @param afield
+     *            The column over which we are computing an aggregate.
+     * @param gfield
+     *            The column over which we are grouping the result, or -1 if
+     *            there is no grouping
+     * @param aop
+     *            The aggregation operator to use
+     */
+    public Aggregate(DbIterator child, int afield, int gfield, Aggregator.Op aop) {
+	this.child = child;
+	this.afield = afield;
+	this.gfield = gfield;
+	this.aop = aop;
+	if (this.aop == Op.SC_AVG)
+	    if (this.gfield == Aggregator.NO_GROUPING)
+		this.afield = 0;
+	    else {
+		this.afield = 1;
+		this.gfield = 0;
+	    }
+	TupleDesc child_td = child.getTupleDesc();
+
+	if (child_td.getFieldType(afield) == Type.INT_TYPE) {
+	    this.agg = new IntegerAggregator(gfield,
+		    gfield == Aggregator.NO_GROUPING ? null
+		            : child_td.getFieldType(gfield), afield, aop);
+	} else {
+	    this.agg = new StringAggregator(gfield,
+		    gfield == Aggregator.NO_GROUPING ? null
+		            : child_td.getFieldType(gfield), afield, aop);
+	}
+
+	if (gfield == Aggregator.NO_GROUPING) {
+	    int nFields = 1;
+	    if (aop == Op.SUM_COUNT)
+		nFields = 2;
+	    Type typeAr[] = new Type[nFields];
+	    String fields[] = new String[nFields];
+
+	    typeAr[0] = Type.INT_TYPE;//child_td.getFieldType(afield);
+
+	    if (aop == Op.SUM_COUNT) {
+		typeAr[1] = Type.INT_TYPE;
+		fields[1] = "";
+	    }
+
+//	    if (aop == Op.SC_AVG) {
+//		fields[0] = nameOfAggregatorOp(Op.SC_AVG) + "("
+//		        + child_td.getFieldName(afield) + ")";
+//
+//	    } else
+		fields[0] = nameOfAggregatorOp(aop) + "("
+		        + child_td.getFieldName(afield) + ")";
+	aFieldName = fields[0];
+
+	    td = new TupleDesc(typeAr, fields);
+	} else {
+	    int nFields = 2;
+	    if (aop == Op.SUM_COUNT)
+		nFields = 3;
+
+	    Type typeAr[] = new Type[nFields];
+	    String fields[] = new String[nFields];
+
+	    typeAr[0] = child_td.getFieldType(gfield);
+	    typeAr[1] = Type.INT_TYPE;//child_td.getFieldType(afield);
+	    fields[0] = child_td.getFieldName(gfield);
+	    gFieldName = fields[0];
+
+//	    if (aop == Op.SC_AVG) {
+//		fields[1] = nameOfAggregatorOp(Op.SC_AVG) + "("
+//		        + child_td.getFieldName(afield) + ")";
+//
+//	    } else
+		fields[1] = nameOfAggregatorOp(aop) + "("
+		        + child_td.getFieldName(afield) + ")";
+	    
+	    if (aop == Op.SUM_COUNT) {
+		typeAr[2] = Type.INT_TYPE;
+		fields[2] = "";
+	    }
+	    
+	    aFieldName = fields[1];
+
+	    td = new TupleDesc(typeAr, fields);
+	}
+    }
+
+    /**
+     * @return If this aggregate is accompanied by a groupby, return the groupby
+     *         field index in the <b>INPUT</b> tuples. If not, return
+     *         {@link simpledb.Aggregator#NO_GROUPING}
+     * */
+    public int groupField() {
+	return this.gfield;
+    }
+
+    /**
+     * @return If this aggregate is accompanied by a group by, return the name
+     *         of the groupby field in the <b>OUTPUT</b> tuples If not, return
+     *         null;
+     * */
+    public String groupFieldName() {
+	return this.gFieldName;
+    }
+
+    /**
+     * @return the aggregate field
+     * */
+    public int aggregateField() {
+	return this.afield;
+    }
+
+    /**
+     * @return return the name of the aggregate field in the <b>OUTPUT</b>
+     *         tuples
+     * */
+    public String aggregateFieldName() {
+	return this.aFieldName;
+    }
+
+    /**
+     * @return return the aggregate operator
+     * */
+    public Aggregator.Op aggregateOp() {
+	return this.aop;
+    }
+
+    public static String nameOfAggregatorOp(Aggregator.Op aop) {
+	return aop.toString();
+    }
+
+    public void open() throws NoSuchElementException, DbException,
+	    TransactionAbortedException {
+	child.open();
+	if (it != null)
+	    it.open();
+        super.open();
+    }
+
+    /**
+     * Returns the next tuple. If there is a group by field, then the first
+     * field is the field by which we are grouping, and the second field is the
+     * result of computing the aggregate, If there is no group by field, then
+     * the result tuple should contain one field representing the result of the
+     * aggregate. Should return null if there are no more tuples.
+     */
+    protected Tuple fetchNext() throws TransactionAbortedException, DbException {
+	// Actually perform the aggregation
+	if (it == null) {
+	    while (child.hasNext()) {
+		Tuple t = child.next();
+		agg.mergeTupleIntoGroup(t);
+	    }
+
+	    it = agg.iterator();
+	    it.open();
+	}
+
+	if (it.hasNext())
+	    return it.next();
+	return null;
+    }
+
+    public void rewind() throws DbException, TransactionAbortedException {
+	close();
+	open();
+    }
+
+    /**
+     * Returns the TupleDesc of this Aggregate. If there is no group by field,
+     * this will have one field - the aggregate column. If there is a group by
+     * field, the first field will be the group by field, and the second will be
+     * the aggregate value column.
+     * 
+     * The name of an aggregate column should be informative. For example:
+     * "aggName(aop) (child_td.getFieldName(afield))" where aop and afield are
+     * given in the constructor, and child_td is the TupleDesc of the child
+     * iterator.
+     */
+    public TupleDesc getTupleDesc() {
+	return td;
+    }
+
+    public void close() {
+        super.close();
+	child.close();
+	if (it != null) {
+	    it.close();
+	}
+    }
+
+    @Override
+    public DbIterator[] getChildren() {
+	return new DbIterator[] { this.child };
+    }
+
+    @Override
+    public void setChildren(DbIterator[] children) {
+	this.child = children[0];
+    }
+    
+}
diff -ruN lab1/src/java/simpledb/Aggregator.java lab3/src/java/simpledb/Aggregator.java
--- lab1/src/java/simpledb/Aggregator.java	1969-12-31 18:00:00.000000000 -0600
+++ lab3/src/java/simpledb/Aggregator.java	2016-11-02 22:06:55.000000000 -0500
@@ -0,0 +1,85 @@
+package simpledb;
+
+import java.io.Serializable;
+
+/**
+ * The common interface for any class that can compute an aggregate over a
+ * list of Tuples.
+ */
+public interface Aggregator extends Serializable {
+    static final int NO_GROUPING = -1;
+
+    /**
+     * SUM_COUNT and SC_AVG will
+     * only be used in lab7, you are not required
+     * to implement them until then.
+     * */
+    public enum Op implements Serializable {
+        MIN, MAX, SUM, AVG, COUNT,
+        /**
+         * SUM_COUNT: compute sum and count simultaneously, will be
+         * needed to compute distributed avg in lab7.
+         * */
+        SUM_COUNT,
+        /**
+         * SC_AVG: compute the avg of a set of SUM_COUNT tuples,
+         * will be used to compute distributed avg in lab7.
+         * */
+        SC_AVG;
+
+        /**
+         * Interface to access operations by a string containing an integer
+         * index for command-line convenience.
+         *
+         * @param s a string containing a valid integer Op index
+         */
+        public static Op getOp(String s) {
+            return getOp(Integer.parseInt(s));
+        }
+
+        /**
+         * Interface to access operations by integer value for command-line
+         * convenience.
+         *
+         * @param i a valid integer Op index
+         */
+        public static Op getOp(int i) {
+            return values()[i];
+        }
+        
+        public String toString()
+        {
+        	if (this==MIN)
+        		return "min";
+        	if (this==MAX)
+        		return "max";
+        	if (this==SUM)
+        		return "sum";
+        	if (this==SUM_COUNT)
+    			return "sum_count";
+        	if (this==AVG)
+        		return "avg";
+        	if (this==COUNT)
+        		return "count";
+        	if (this==SC_AVG)
+    			return "sc_avg";
+        	throw new IllegalStateException("impossible to reach here");
+        }
+    }
+
+    /**
+     * Merge a new tuple into the aggregate for a distinct group value;
+     * creates a new group aggregate result if the group value has not yet
+     * been encountered.
+     *
+     * @param tup the Tuple containing an aggregate field and a group-by field
+     */
+    public void mergeTupleIntoGroup(Tuple tup);
+
+    /**
+     * Create a DbIterator over group aggregate results.
+     * @see simpledb.TupleIterator for a possible helper
+     */
+    public DbIterator iterator();
+    
+}
diff -ruN lab1/src/java/simpledb/BTreeChecker.java lab3/src/java/simpledb/BTreeChecker.java
--- lab1/src/java/simpledb/BTreeChecker.java	1969-12-31 18:00:00.000000000 -0600
+++ lab3/src/java/simpledb/BTreeChecker.java	2016-11-02 22:06:55.000000000 -0500
@@ -0,0 +1,124 @@
+package simpledb;
+
+import java.io.IOException;
+import java.util.HashMap;
+import java.util.Iterator;
+
+/**
+ * Created by orm on 10/7/15.
+ */
+public class BTreeChecker {
+
+    /**
+     * This class is only used for error-checking code.
+     */
+    static class SubtreeSummary {
+        public int depth;
+        public BTreePageId ptrLeft;
+        public BTreePageId leftmostId;
+        public BTreePageId ptrRight;
+        public BTreePageId rightmostId;
+
+        SubtreeSummary() {}
+
+        SubtreeSummary(BTreeLeafPage base, int depth) {
+            this.depth = depth;
+
+            this.leftmostId = base.getId();
+            this.rightmostId = base.getId();
+
+            this.ptrLeft = base.getLeftSiblingId();
+            this.ptrRight = base.getRightSiblingId();
+        }
+
+        static SubtreeSummary checkAndMerge(SubtreeSummary accleft, SubtreeSummary right) {
+            assert(accleft.depth == right.depth);
+            assert(accleft.ptrRight.equals(right.leftmostId));
+            assert(accleft.rightmostId.equals(right.ptrLeft));
+
+            SubtreeSummary ans = new SubtreeSummary();
+            ans.depth = accleft.depth;
+
+            ans.ptrLeft = accleft.ptrLeft;
+            ans.leftmostId = accleft.leftmostId;
+
+            ans.ptrRight = right.ptrRight;
+            ans.rightmostId = right.rightmostId;
+            return ans;
+        }
+    }
+
+    /**
+     * checks the integrity of the tree:
+     * 1) parent pointers.
+     * 2) sibling pointers.
+     * 3) range invariants.
+     * 4) record to page pointers.
+     * 5) occupancy invariants. (if enabled)
+     */
+    public static void checkRep(BTreeFile bt, TransactionId tid, HashMap<PageId, Page> dirtypages,
+                                boolean checkOccupancy) throws
+            DbException, IOException, TransactionAbortedException {
+        BTreeRootPtrPage rtptr = bt.getRootPtrPage(tid, dirtypages);
+
+        if (rtptr.getRootId() == null) { // non existent root is a legal state.
+            return;
+        } else {
+            SubtreeSummary res = checkSubTree(bt, tid, dirtypages,
+                    rtptr.getRootId(), null, null, rtptr.getId(), checkOccupancy, 0);
+            assert (res.ptrLeft == null);
+            assert (res.ptrRight == null);
+        }
+    }
+
+    static SubtreeSummary checkSubTree(BTreeFile bt, TransactionId tid, HashMap<PageId, Page> dirtypages,
+                                       BTreePageId pageId, Field lowerBound, Field upperBound,
+                                       BTreePageId parentId, boolean checkOccupancy, int depth) throws
+            TransactionAbortedException, DbException {
+        BTreePage page = (BTreePage )bt.getPage(tid, dirtypages, pageId, Permissions.READ_ONLY);
+        assert(page.getParentId().equals(parentId));
+
+        if (page.getId().pgcateg() == BTreePageId.LEAF) {
+            BTreeLeafPage bpage = (BTreeLeafPage) page;
+            bpage.checkRep(bt.keyField(), lowerBound, upperBound, checkOccupancy, depth);
+            return new SubtreeSummary(bpage, depth);
+        } else if (page.getId().pgcateg() == BTreePageId.INTERNAL) {
+
+            BTreeInternalPage ipage = (BTreeInternalPage) page;
+            ipage.checkRep(lowerBound, upperBound, checkOccupancy, depth);
+
+            SubtreeSummary acc = null;
+            BTreeEntry prev = null;
+            Iterator<BTreeEntry> it = ipage.iterator();
+
+            prev = it.next();
+            { // init acc and prev.
+                acc = checkSubTree(bt, tid, dirtypages, prev.getLeftChild(), lowerBound, prev.getKey(), ipage.getId(),
+                        checkOccupancy, depth + 1);
+                lowerBound = prev.getKey();
+            }
+
+            assert(acc != null);
+            BTreeEntry curr = prev; // for one entry case.
+            while (it.hasNext()) {
+                curr = it.next();
+                SubtreeSummary currentSubTreeResult =
+                        checkSubTree(bt, tid, dirtypages, curr.getLeftChild(), lowerBound, curr.getKey(), ipage.getId(),
+                                checkOccupancy, depth + 1);
+                acc = SubtreeSummary.checkAndMerge(acc, currentSubTreeResult);
+
+                // need to move stuff for next iter:
+                lowerBound = curr.getKey();
+            }
+
+            SubtreeSummary lastRight = checkSubTree(bt, tid, dirtypages, curr.getRightChild(), lowerBound, upperBound,
+                    ipage.getId(), checkOccupancy, depth + 1);
+            acc = SubtreeSummary.checkAndMerge(acc, lastRight);
+
+            return acc;
+        } else {
+            assert(false); // no other page types allowed inside the tree.
+            return null;
+        }
+    }
+}
\ No newline at end of file
diff -ruN lab1/src/java/simpledb/BTreeEntry.java lab3/src/java/simpledb/BTreeEntry.java
--- lab1/src/java/simpledb/BTreeEntry.java	1969-12-31 18:00:00.000000000 -0600
+++ lab3/src/java/simpledb/BTreeEntry.java	2016-11-02 22:06:55.000000000 -0500
@@ -0,0 +1,137 @@
+package simpledb;
+
+import java.io.Serializable;
+
+/**
+ * Each instance of BTreeEntry stores one key and two child page ids. It is used
+ * by BTreeInternalPage as an abstraction to iterate through the entries stored inside. 
+ * All of the entries or tuples in the left child page should be less than or equal to 
+ * the key, and all of the entries or tuples in the right child page should be greater 
+ * than or equal to the key.
+ * 
+ * Note that updating a BTreeEntry does not actually change the data stored on the page 
+ * identified by its recordId. After updating a BTreeEntry object, you must call 
+ * BTreeInternalPage.updateEntry() in order for the changes to take effect.
+ *
+ * @see BTreeInternalPage
+ * @see BTreeInternalPage#updateEntry(BTreeEntry)
+ *
+ */
+public class BTreeEntry implements Serializable {
+
+	private static final long serialVersionUID = 1L;
+	
+	/**
+	 * The key of this entry
+	 * */
+	private Field key;
+
+	/**
+	 * The left child page id
+	 * */
+	private BTreePageId leftChild;
+
+	/**
+	 * The right child page id
+	 * */
+	private BTreePageId rightChild;
+
+	/**
+	 * The record id of this entry
+	 * */
+	private RecordId rid; // null if not stored on any page
+
+	/**
+	 * Constructor to create a new BTreeEntry
+	 * @param key - the key
+	 * @param leftChild - page id of the left child
+	 * @param rightChild - page id of the right child
+	 */
+	public BTreeEntry(Field key, BTreePageId leftChild, BTreePageId rightChild) {
+		this.key = key;
+		this.leftChild = leftChild;
+		this.rightChild = rightChild;
+	}
+	
+	/**
+	 * @return the key
+	 */
+	public Field getKey() {
+		return key;
+	}
+	
+	/**
+	 * @return the left child page id
+	 */
+	public BTreePageId getLeftChild() {
+		return leftChild;
+	}
+	
+	/**
+	 * @return the right child page id
+	 */
+	public BTreePageId getRightChild() {
+		return rightChild;
+	}
+	
+	/**
+	 * @return the record id of this entry, representing the location of this entry
+	 * in a BTreeFile. May be null if this entry is not stored on any page in the file
+	 */
+	public RecordId getRecordId() {
+		return rid;
+	}
+	
+	/**
+	 * Set the key for this entry. Note that updating a BTreeEntry does not 
+	 * actually change the data stored on the page identified by its recordId.  After
+	 * calling this method, you must call BTreeInternalPage.updateEntry() in order for
+	 * it to take effect.
+	 * @param key - the new key
+	 * @see BTreeInternalPage#updateEntry(BTreeEntry)
+	 */
+	public void setKey(Field key) {
+		this.key = key;
+	}
+	
+	/**
+	 * Set the left child id for this entry.  Note that updating a BTreeEntry does not 
+	 * actually change the data stored on the page identified by its recordId.  After
+	 * calling this method, you must call BTreeInternalPage.updateEntry() in order for
+	 * it to take effect.
+	 * @param leftChild - the new left child
+	 * @see BTreeInternalPage#updateEntry(BTreeEntry)
+	 */
+	public void setLeftChild(BTreePageId leftChild) {
+		this.leftChild = leftChild;
+	}
+	
+	/**
+	 * Set the right child id for this entry.  Note that updating a BTreeEntry does not 
+	 * actually change the data stored on the page identified by its recordId.  After
+	 * calling this method, you must call BTreeInternalPage.updateEntry() in order for
+	 * it to take effect.
+	 * @param rightChild - the new right child
+	 * @see BTreeInternalPage#updateEntry(BTreeEntry)
+	 */
+	public void setRightChild(BTreePageId rightChild) {
+		this.rightChild = rightChild;
+	}
+	
+	/**
+	 * set the record id for this entry
+	 * @param rid - the new record id
+	 */
+	public void setRecordId(RecordId rid) {
+		this.rid = rid;
+	}
+	
+	/**
+	 * Prints a representation of this BTreeEntry
+	 */
+	public String toString() {
+		return "[" + leftChild.pageNumber() + "|" + key + "|" + rightChild.pageNumber() + "]";
+	}
+	
+}
+
diff -ruN lab1/src/java/simpledb/BTreeFile.java lab3/src/java/simpledb/BTreeFile.java
--- lab1/src/java/simpledb/BTreeFile.java	1969-12-31 18:00:00.000000000 -0600
+++ lab3/src/java/simpledb/BTreeFile.java	2016-11-02 22:06:55.000000000 -0500
@@ -0,0 +1,1257 @@
+package simpledb;
+
+import java.io.*;
+import java.util.*;
+import java.nio.channels.FileChannel;
+
+import simpledb.Predicate.Op;
+
+/**
+ * BTreeFile is an implementation of a DbFile that stores a B+ tree.
+ * Specifically, it stores a pointer to a root page,
+ * a set of internal pages, and a set of leaf pages, which contain a collection of tuples
+ * in sorted order. BTreeFile works closely with BTreeLeafPage, BTreeInternalPage,
+ * and BTreeRootPtrPage. The format of these pages is described in their constructors.
+ * 
+ * @see simpledb.BTreeLeafPage#BTreeLeafPage
+ * @see simpledb.BTreeInternalPage#BTreeInternalPage
+ * @see simpledb.BTreeHeaderPage#BTreeHeaderPage
+ * @see simpledb.BTreeRootPtrPage#BTreeRootPtrPage
+ * @author Becca Taft
+ */
+public class BTreeFile implements DbFile {
+
+	private final File f;
+	private final TupleDesc td;
+	private final int tableid ;
+	private int keyField;
+
+	/**
+	 * Constructs a B+ tree file backed by the specified file.
+	 * 
+	 * @param f - the file that stores the on-disk backing store for this B+ tree
+	 *            file.
+	 * @param key - the field which index is keyed on
+	 * @param td - the tuple descriptor of tuples in the file
+	 */
+	public BTreeFile(File f, int key, TupleDesc td) {
+		this.f = f;
+		this.tableid = f.getAbsoluteFile().hashCode();
+		this.keyField = key;
+		this.td = td;
+	}
+
+	/**
+	 * Returns the File backing this BTreeFile on disk.
+	 */
+	public File getFile() {
+		return f;
+	}
+
+	/**
+	 * Returns an ID uniquely identifying this BTreeFile. Implementation note:
+	 * you will need to generate this tableid somewhere and ensure that each
+	 * BTreeFile has a "unique id," and that you always return the same value for
+	 * a particular BTreeFile. We suggest hashing the absolute file name of the
+	 * file underlying the BTreeFile, i.e. f.getAbsoluteFile().hashCode().
+	 * 
+	 * @return an ID uniquely identifying this BTreeFile.
+	 */
+	public int getId() {
+		return tableid;
+	}
+
+	/**
+	 * Returns the TupleDesc of the table stored in this DbFile.
+	 * 
+	 * @return TupleDesc of this DbFile.
+	 */
+	public TupleDesc getTupleDesc() {
+		return td;
+	}
+
+	/**
+	 * Read a page from the file on disk. This should not be called directly
+	 * but should be called from the BufferPool via getPage()
+	 * 
+	 * @param pid - the id of the page to read from disk
+	 * @return the page constructed from the contents on disk
+	 */
+	public Page readPage(PageId pid) {
+		BTreePageId id = (BTreePageId) pid;
+		BufferedInputStream bis = null;
+
+		try {
+			bis = new BufferedInputStream(new FileInputStream(f));
+			if(id.pgcateg() == BTreePageId.ROOT_PTR) {
+				byte pageBuf[] = new byte[BTreeRootPtrPage.getPageSize()];
+				int retval = bis.read(pageBuf, 0, BTreeRootPtrPage.getPageSize());
+				if (retval == -1) {
+					throw new IllegalArgumentException("Read past end of table");
+				}
+				if (retval < BTreeRootPtrPage.getPageSize()) {
+					throw new IllegalArgumentException("Unable to read "
+							+ BTreeRootPtrPage.getPageSize() + " bytes from BTreeFile");
+				}
+				Debug.log(1, "BTreeFile.readPage: read page %d", id.pageNumber());
+				BTreeRootPtrPage p = new BTreeRootPtrPage(id, pageBuf);
+				return p;
+			}
+			else {
+				byte pageBuf[] = new byte[BufferPool.getPageSize()];
+				if (bis.skip(BTreeRootPtrPage.getPageSize() + (id.pageNumber()-1) * BufferPool.getPageSize()) != 
+						BTreeRootPtrPage.getPageSize() + (id.pageNumber()-1) * BufferPool.getPageSize()) {
+					throw new IllegalArgumentException(
+							"Unable to seek to correct place in BTreeFile");
+				}
+				int retval = bis.read(pageBuf, 0, BufferPool.getPageSize());
+				if (retval == -1) {
+					throw new IllegalArgumentException("Read past end of table");
+				}
+				if (retval < BufferPool.getPageSize()) {
+					throw new IllegalArgumentException("Unable to read "
+							+ BufferPool.getPageSize() + " bytes from BTreeFile");
+				}
+				Debug.log(1, "BTreeFile.readPage: read page %d", id.pageNumber());
+				if(id.pgcateg() == BTreePageId.INTERNAL) {
+					BTreeInternalPage p = new BTreeInternalPage(id, pageBuf, keyField);
+					return p;
+				}
+				else if(id.pgcateg() == BTreePageId.LEAF) {
+					BTreeLeafPage p = new BTreeLeafPage(id, pageBuf, keyField);
+					return p;
+				}
+				else { // id.pgcateg() == BTreePageId.HEADER
+					BTreeHeaderPage p = new BTreeHeaderPage(id, pageBuf);
+					return p;
+				}
+			}
+		} catch (IOException e) {
+			throw new RuntimeException(e);
+		} finally {
+			// Close the file on success or error
+			try {
+				if (bis != null)
+					bis.close();
+			} catch (IOException ioe) {
+				// Ignore failures closing the file
+			}
+		}
+	}
+
+	/**
+	 * Write a page to disk.  This should not be called directly but should 
+	 * be called from the BufferPool when pages are flushed to disk
+	 * 
+	 * @param page - the page to write to disk
+	 */
+	public void writePage(Page page) throws IOException {
+		BTreePageId id = (BTreePageId) page.getId();
+		
+		byte[] data = page.getPageData();
+		RandomAccessFile rf = new RandomAccessFile(f, "rw");
+		if(id.pgcateg() == BTreePageId.ROOT_PTR) {
+			rf.write(data);
+			rf.close();
+		}
+		else {
+			rf.seek(BTreeRootPtrPage.getPageSize() + (page.getId().pageNumber()-1) * BufferPool.getPageSize());
+			rf.write(data);
+			rf.close();
+		}
+	}
+	
+	/**
+	 * Returns the number of pages in this BTreeFile.
+	 */
+	public int numPages() {
+		// we only ever write full pages
+		return (int) ((f.length() - BTreeRootPtrPage.getPageSize())/ BufferPool.getPageSize());
+	}
+
+	/**
+	 * Returns the index of the field that this B+ tree is keyed on
+	 */
+	public int keyField() {
+		return keyField;
+	}
+
+	/**
+	 * Recursive function which finds and locks the leaf page in the B+ tree corresponding to
+	 * the left-most page possibly containing the key field f. It locks all internal
+	 * nodes along the path to the leaf node with READ_ONLY permission, and locks the 
+	 * leaf node with permission perm.
+	 * 
+	 * If f is null, it finds the left-most leaf page -- used for the iterator
+	 * 
+	 * @param tid - the transaction id
+	 * @param dirtypages - the list of dirty pages which should be updated with all new dirty pages
+	 * @param pid - the current page being searched
+	 * @param perm - the permissions with which to lock the leaf page
+	 * @param f - the field to search for
+	 * @return the left-most leaf page possibly containing the key field f
+	 * 
+	 */
+	private BTreeLeafPage findLeafPage(TransactionId tid, HashMap<PageId, Page> dirtypages, BTreePageId pid, Permissions perm,
+			Field f) 
+					throws DbException, TransactionAbortedException {
+		// some code goes here
+        return null;
+	}
+	
+	/**
+	 * Convenience method to find a leaf page when there is no dirtypages HashMap.
+	 * Used by the BTreeFile iterator.
+	 * @see #findLeafPage(TransactionId, HashMap, BTreePageId, Permissions, Field)
+	 * 
+	 * @param tid - the transaction id
+	 * @param pid - the current page being searched
+	 * @param perm - the permissions with which to lock the leaf page
+	 * @param f - the field to search for
+	 * @return the left-most leaf page possibly containing the key field f
+	 * 
+	 */
+	BTreeLeafPage findLeafPage(TransactionId tid, BTreePageId pid, Permissions perm,
+			Field f) 
+					throws DbException, TransactionAbortedException {
+		return findLeafPage(tid, new HashMap<PageId, Page>(), pid, perm, f);
+	}
+
+	/**
+	 * Split a leaf page to make room for new tuples and recursively split the parent node
+	 * as needed to accommodate a new entry. The new entry should have a key matching the key field
+	 * of the first tuple in the right-hand page (the key is "copied up"), and child pointers 
+	 * pointing to the two leaf pages resulting from the split.  Update sibling pointers and parent 
+	 * pointers as needed.  
+	 * 
+	 * Return the leaf page into which a new tuple with key field "field" should be inserted.
+	 * 
+	 * @param tid - the transaction id
+	 * @param dirtypages - the list of dirty pages which should be updated with all new dirty pages
+	 * @param page - the leaf page to split
+	 * @param field - the key field of the tuple to be inserted after the split is complete. Necessary to know
+	 * which of the two pages to return.
+	 * @see #getParentWithEmptySlots(TransactionId, HashMap, BTreePageId, Field)
+	 * 
+	 * @return the leaf page into which the new tuple should be inserted
+	 * @throws DbException
+	 * @throws IOException
+	 * @throws TransactionAbortedException
+	 */
+	protected BTreeLeafPage splitLeafPage(TransactionId tid, HashMap<PageId, Page> dirtypages, BTreeLeafPage page, Field field) 
+			throws DbException, IOException, TransactionAbortedException {
+		// some code goes here
+        //
+        // Split the leaf page by adding a new page on the right of the existing
+		// page and moving half of the tuples to the new page.  Copy the middle key up
+		// into the parent page, and recursively split the parent as needed to accommodate
+		// the new entry.  getParentWithEmtpySlots() will be useful here.  Don't forget to update
+		// the sibling pointers of all the affected leaf pages.  Return the page into which a 
+		// tuple with the given key field should be inserted.
+        return null;
+		
+	}
+	
+	/**
+	 * Split an internal page to make room for new entries and recursively split its parent page
+	 * as needed to accommodate a new entry. The new entry for the parent should have a key matching 
+	 * the middle key in the original internal page being split (this key is "pushed up" to the parent). 
+	 * The child pointers of the new parent entry should point to the two internal pages resulting 
+	 * from the split. Update parent pointers as needed.
+	 * 
+	 * Return the internal page into which an entry with key field "field" should be inserted
+	 * 
+	 * @param tid - the transaction id
+	 * @param dirtypages - the list of dirty pages which should be updated with all new dirty pages
+	 * @param page - the internal page to split
+	 * @param field - the key field of the entry to be inserted after the split is complete. Necessary to know
+	 * which of the two pages to return.
+	 * @see #getParentWithEmptySlots(TransactionId, HashMap, BTreePageId, Field)
+	 * @see #updateParentPointers(TransactionId, HashMap, BTreeInternalPage)
+	 * 
+	 * @return the internal page into which the new entry should be inserted
+	 * @throws DbException
+	 * @throws IOException
+	 * @throws TransactionAbortedException
+	 */
+	protected BTreeInternalPage splitInternalPage(TransactionId tid, HashMap<PageId, Page> dirtypages, 
+			BTreeInternalPage page, Field field) 
+					throws DbException, IOException, TransactionAbortedException {
+		// some code goes here
+        //
+        // Split the internal page by adding a new page on the right of the existing
+		// page and moving half of the entries to the new page.  Push the middle key up
+		// into the parent page, and recursively split the parent as needed to accommodate
+		// the new entry.  getParentWithEmtpySlots() will be useful here.  Don't forget to update
+		// the parent pointers of all the children moving to the new page.  updateParentPointers()
+		// will be useful here.  Return the page into which an entry with the given key field
+		// should be inserted.
+		return null;
+	}
+	
+	/**
+	 * Method to encapsulate the process of getting a parent page ready to accept new entries.
+	 * This may mean creating a page to become the new root of the tree, splitting the existing 
+	 * parent page if there are no empty slots, or simply locking and returning the existing parent page.
+	 *
+	 * @param tid - the transaction id
+	 * @param dirtypages - the list of dirty pages which should be updated with all new dirty pages
+	 * @param parentId - the id of the parent. May be an internal page or the RootPtr page
+	 * @param field - the key of the entry which will be inserted. Needed in case the parent must be split
+	 * to accommodate the new entry
+	 * @return the parent page, guaranteed to have at least one empty slot
+	 * @see #splitInternalPage(TransactionId, HashMap, BTreeInternalPage, Field)
+	 * 
+	 * @throws DbException
+	 * @throws IOException
+	 * @throws TransactionAbortedException
+	 */
+	private BTreeInternalPage getParentWithEmptySlots(TransactionId tid, HashMap<PageId, Page> dirtypages, 
+			BTreePageId parentId, Field field) throws DbException, IOException, TransactionAbortedException {
+		
+		BTreeInternalPage parent = null;
+		
+		// create a parent node if necessary
+		// this will be the new root of the tree
+		if(parentId.pgcateg() == BTreePageId.ROOT_PTR) {
+			parent = (BTreeInternalPage) getEmptyPage(tid, dirtypages, BTreePageId.INTERNAL);
+
+			// update the root pointer
+			BTreeRootPtrPage rootPtr = (BTreeRootPtrPage) getPage(tid, dirtypages,
+					BTreeRootPtrPage.getId(tableid), Permissions.READ_WRITE);
+			BTreePageId prevRootId = rootPtr.getRootId(); //save prev id before overwriting.
+			rootPtr.setRootId(parent.getId());
+
+			// update the previous root to now point to this new root.
+			BTreePage prevRootPage = (BTreePage)getPage(tid, dirtypages, prevRootId, Permissions.READ_WRITE);
+			prevRootPage.setParentId(parent.getId());
+		}
+		else { 
+			// lock the parent page
+			parent = (BTreeInternalPage) getPage(tid, dirtypages, parentId, 
+					Permissions.READ_WRITE);
+		}
+
+		// split the parent if needed
+		if(parent.getNumEmptySlots() == 0) {
+			parent = splitInternalPage(tid, dirtypages, parent, field);
+		}
+
+		return parent;
+
+	}
+
+	/**
+	 * Helper function to update the parent pointer of a node.
+	 * 
+	 * @param tid - the transaction id
+	 * @param dirtypages - the list of dirty pages which should be updated with all new dirty pages
+	 * @param pid - id of the parent node
+	 * @param child - id of the child node to be updated with the parent pointer
+	 * @throws DbException
+	 * @throws IOException
+	 * @throws TransactionAbortedException
+	 */
+	private void updateParentPointer(TransactionId tid, HashMap<PageId, Page> dirtypages, BTreePageId pid, BTreePageId child) 
+			throws DbException, IOException, TransactionAbortedException {
+
+		BTreePage p = (BTreePage) getPage(tid, dirtypages, child, Permissions.READ_ONLY);
+
+		if(!p.getParentId().equals(pid)) {
+			p = (BTreePage) getPage(tid, dirtypages, child, Permissions.READ_WRITE);
+			p.setParentId(pid);
+		}
+
+	}
+	
+	/**
+	 * Update the parent pointer of every child of the given page so that it correctly points to
+	 * the parent
+	 * 
+	 * @param tid - the transaction id
+	 * @param dirtypages - the list of dirty pages which should be updated with all new dirty pages
+	 * @param page - the parent page
+	 * @see #updateParentPointer(TransactionId, HashMap, BTreePageId, BTreePageId)
+	 * 
+	 * @throws DbException
+	 * @throws IOException
+	 * @throws TransactionAbortedException
+	 */
+	private void updateParentPointers(TransactionId tid, HashMap<PageId, Page> dirtypages, BTreeInternalPage page) 
+			throws DbException, IOException, TransactionAbortedException{
+		Iterator<BTreeEntry> it = page.iterator();
+		BTreePageId pid = page.getId();
+		BTreeEntry e = null;
+		while(it.hasNext()) {
+			e = it.next();
+			updateParentPointer(tid, dirtypages, pid, e.getLeftChild());
+		}
+		if(e != null) {
+			updateParentPointer(tid, dirtypages, pid, e.getRightChild());
+		}
+	}
+	
+	/**
+	 * Method to encapsulate the process of locking/fetching a page.  First the method checks the local 
+	 * cache ("dirtypages"), and if it can't find the requested page there, it fetches it from the buffer pool.  
+	 * It also adds pages to the dirtypages cache if they are fetched with read-write permission, since 
+	 * presumably they will soon be dirtied by this transaction.
+	 * 
+	 * This method is needed to ensure that page updates are not lost if the same pages are
+	 * accessed multiple times.
+	 * 
+	 * @param tid - the transaction id
+	 * @param dirtypages - the list of dirty pages which should be updated with all new dirty pages
+	 * @param pid - the id of the requested page
+	 * @param perm - the requested permissions on the page
+	 * @return the requested page
+	 * 
+	 * @throws DbException
+	 * @throws IOException
+	 * @throws TransactionAbortedException
+	 */
+	Page getPage(TransactionId tid, HashMap<PageId, Page> dirtypages, BTreePageId pid, Permissions perm)
+			throws DbException, TransactionAbortedException {
+		if(dirtypages.containsKey(pid)) {
+			return dirtypages.get(pid);
+		}
+		else {
+			Page p = Database.getBufferPool().getPage(tid, pid, perm);
+			if(perm == Permissions.READ_WRITE) {
+				dirtypages.put(pid, p);
+			}
+			return p;
+		}
+	}
+
+	/**
+	 * Insert a tuple into this BTreeFile, keeping the tuples in sorted order. 
+	 * May cause pages to split if the page where tuple t belongs is full.
+	 * 
+	 * @param tid - the transaction id
+	 * @param t - the tuple to insert
+	 * @return a list of all pages that were dirtied by this operation. Could include
+	 * many pages since parent pointers will need to be updated when an internal node splits.
+	 * @see #splitLeafPage(TransactionId, HashMap, BTreeLeafPage, Field)
+	 */
+	public ArrayList<Page> insertTuple(TransactionId tid, Tuple t)
+			throws DbException, IOException, TransactionAbortedException {
+		HashMap<PageId, Page> dirtypages = new HashMap<PageId, Page>();
+
+		// get a read lock on the root pointer page and use it to locate the root page
+		BTreeRootPtrPage rootPtr = getRootPtrPage(tid, dirtypages);
+		BTreePageId rootId = rootPtr.getRootId();
+
+		if(rootId == null) { // the root has just been created, so set the root pointer to point to it		
+			rootId = new BTreePageId(tableid, numPages(), BTreePageId.LEAF);
+			rootPtr = (BTreeRootPtrPage) getPage(tid, dirtypages, BTreeRootPtrPage.getId(tableid), Permissions.READ_WRITE);
+			rootPtr.setRootId(rootId);
+		}
+
+		// find and lock the left-most leaf page corresponding to the key field,
+		// and split the leaf page if there are no more slots available
+		BTreeLeafPage leafPage = findLeafPage(tid, dirtypages, rootId, Permissions.READ_WRITE, t.getField(keyField));
+		if(leafPage.getNumEmptySlots() == 0) {
+			leafPage = splitLeafPage(tid, dirtypages, leafPage, t.getField(keyField));	
+		}
+
+		// insert the tuple into the leaf page
+		leafPage.insertTuple(t);
+
+		ArrayList<Page> dirtyPagesArr = new ArrayList<Page>();
+		dirtyPagesArr.addAll(dirtypages.values());
+		return dirtyPagesArr;
+	}
+	
+	/**
+	 * Handle the case when a B+ tree page becomes less than half full due to deletions.
+	 * If one of its siblings has extra tuples/entries, redistribute those tuples/entries.
+	 * Otherwise merge with one of the siblings. Update pointers as needed.
+	 * 
+	 * @param tid - the transaction id
+	 * @param dirtypages - the list of dirty pages which should be updated with all new dirty pages
+	 * @param page - the page which is less than half full
+	 * @see #handleMinOccupancyLeafPage(TransactionId, HashMap, BTreeLeafPage, BTreeInternalPage, BTreeEntry, BTreeEntry)
+	 * @see #handleMinOccupancyInternalPage(TransactionId, HashMap, BTreeInternalPage, BTreeInternalPage, BTreeEntry, BTreeEntry)
+	 * 
+	 * @throws DbException
+	 * @throws IOException
+	 * @throws TransactionAbortedException
+	 */
+	private void handleMinOccupancyPage(TransactionId tid, HashMap<PageId, Page> dirtypages, BTreePage page) 
+			throws DbException, IOException, TransactionAbortedException {
+		BTreePageId parentId = page.getParentId();
+		BTreeEntry leftEntry = null;
+		BTreeEntry rightEntry = null;
+		BTreeInternalPage parent = null;
+
+		// find the left and right siblings through the parent so we make sure they have
+		// the same parent as the page. Find the entries in the parent corresponding to 
+		// the page and siblings
+		if(parentId.pgcateg() != BTreePageId.ROOT_PTR) {
+			parent = (BTreeInternalPage) getPage(tid, dirtypages, parentId, Permissions.READ_WRITE);
+			Iterator<BTreeEntry> ite = parent.iterator();
+			while(ite.hasNext()) {
+				BTreeEntry e = ite.next();
+				if(e.getLeftChild().equals(page.getId())) {
+					rightEntry = e;
+					break;
+				}
+				else if(e.getRightChild().equals(page.getId())) {
+					leftEntry = e;
+				}
+			}
+		}
+		
+		if(page.getId().pgcateg() == BTreePageId.LEAF) {
+			handleMinOccupancyLeafPage(tid, dirtypages, (BTreeLeafPage) page, parent, leftEntry, rightEntry);
+		}
+		else { // BTreePageId.INTERNAL
+			handleMinOccupancyInternalPage(tid, dirtypages, (BTreeInternalPage) page, parent, leftEntry, rightEntry);
+		}
+	}
+	
+	/**
+	 * Handle the case when a leaf page becomes less than half full due to deletions.
+	 * If one of its siblings has extra tuples, redistribute those tuples.
+	 * Otherwise merge with one of the siblings. Update pointers as needed.
+	 * 
+	 * @param tid - the transaction id
+	 * @param dirtypages - the list of dirty pages which should be updated with all new dirty pages
+	 * @param page - the leaf page which is less than half full
+	 * @param parent - the parent of the leaf page
+	 * @param leftEntry - the entry in the parent pointing to the given page and its left-sibling
+	 * @param rightEntry - the entry in the parent pointing to the given page and its right-sibling
+	 * @see #mergeLeafPages(TransactionId, HashMap, BTreeLeafPage, BTreeLeafPage, BTreeInternalPage, BTreeEntry)
+	 * @see #stealFromLeafPage(BTreeLeafPage, BTreeLeafPage, BTreeInternalPage,  BTreeEntry, boolean)
+	 * 
+	 * @throws DbException
+	 * @throws IOException
+	 * @throws TransactionAbortedException
+	 */
+	private void handleMinOccupancyLeafPage(TransactionId tid, HashMap<PageId, Page> dirtypages, BTreeLeafPage page, 
+			BTreeInternalPage parent, BTreeEntry leftEntry, BTreeEntry rightEntry) 
+			throws DbException, IOException, TransactionAbortedException {
+		BTreePageId leftSiblingId = null;
+		BTreePageId rightSiblingId = null;
+		if(leftEntry != null) leftSiblingId = leftEntry.getLeftChild();
+		if(rightEntry != null) rightSiblingId = rightEntry.getRightChild();
+		
+		int maxEmptySlots = page.getMaxTuples() - page.getMaxTuples()/2; // ceiling
+		if(leftSiblingId != null) {
+			BTreeLeafPage leftSibling = (BTreeLeafPage) getPage(tid, dirtypages, leftSiblingId, Permissions.READ_WRITE);
+			// if the left sibling is at minimum occupancy, merge with it. Otherwise
+			// steal some tuples from it
+			if(leftSibling.getNumEmptySlots() >= maxEmptySlots) {
+				mergeLeafPages(tid, dirtypages, leftSibling, page, parent, leftEntry);
+			}
+			else {
+				stealFromLeafPage(page, leftSibling, parent, leftEntry, false);				
+			}
+		}
+		else if(rightSiblingId != null) {	
+			BTreeLeafPage rightSibling = (BTreeLeafPage) getPage(tid, dirtypages, rightSiblingId, Permissions.READ_WRITE);
+			// if the right sibling is at minimum occupancy, merge with it. Otherwise
+			// steal some tuples from it
+			if(rightSibling.getNumEmptySlots() >= maxEmptySlots) {
+				mergeLeafPages(tid, dirtypages, page, rightSibling, parent, rightEntry);
+			}
+			else {
+				stealFromLeafPage(page, rightSibling, parent, rightEntry, true);				
+			}
+		}
+	}
+	
+	/**
+	 * Steal tuples from a sibling and copy them to the given page so that both pages are at least
+	 * half full.  Update the parent's entry so that the key matches the key field of the first
+	 * tuple in the right-hand page.
+	 * 
+	 * @param page - the leaf page which is less than half full
+	 * @param sibling - the sibling which has tuples to spare
+	 * @param parent - the parent of the two leaf pages
+	 * @param entry - the entry in the parent pointing to the two leaf pages
+	 * @param isRightSibling - whether the sibling is a right-sibling
+	 * 
+	 * @throws DbException
+	 */
+	protected void stealFromLeafPage(BTreeLeafPage page, BTreeLeafPage sibling,
+			BTreeInternalPage parent, BTreeEntry entry, boolean isRightSibling) throws DbException {
+		// some code goes here
+        //
+        // Move some of the tuples from the sibling to the page so
+		// that the tuples are evenly distributed. Be sure to update
+		// the corresponding parent entry.
+	}
+
+	/**
+	 * Handle the case when an internal page becomes less than half full due to deletions.
+	 * If one of its siblings has extra entries, redistribute those entries.
+	 * Otherwise merge with one of the siblings. Update pointers as needed.
+	 * 
+	 * @param tid - the transaction id
+	 * @param dirtypages - the list of dirty pages which should be updated with all new dirty pages
+	 * @param page - the internal page which is less than half full
+	 * @param parent - the parent of the internal page
+	 * @param leftEntry - the entry in the parent pointing to the given page and its left-sibling
+	 * @param rightEntry - the entry in the parent pointing to the given page and its right-sibling
+	 * @see #mergeInternalPages(TransactionId, HashMap, BTreeInternalPage, BTreeInternalPage, BTreeInternalPage, BTreeEntry)
+	 * @see #stealFromLeftInternalPage(TransactionId, HashMap, BTreeInternalPage, BTreeInternalPage, BTreeInternalPage, BTreeEntry)
+	 * @see #stealFromRightInternalPage(TransactionId, HashMap, BTreeInternalPage, BTreeInternalPage, BTreeInternalPage, BTreeEntry)
+	 * 
+	 * @throws DbException
+	 * @throws IOException
+	 * @throws TransactionAbortedException
+	 */
+	private void handleMinOccupancyInternalPage(TransactionId tid, HashMap<PageId, Page> dirtypages, 
+			BTreeInternalPage page, BTreeInternalPage parent, BTreeEntry leftEntry, BTreeEntry rightEntry) 
+					throws DbException, IOException, TransactionAbortedException {
+		BTreePageId leftSiblingId = null;
+		BTreePageId rightSiblingId = null;
+		if(leftEntry != null) leftSiblingId = leftEntry.getLeftChild();
+		if(rightEntry != null) rightSiblingId = rightEntry.getRightChild();
+		
+		int maxEmptySlots = page.getMaxEntries() - page.getMaxEntries()/2; // ceiling
+		if(leftSiblingId != null) {
+			BTreeInternalPage leftSibling = (BTreeInternalPage) getPage(tid, dirtypages, leftSiblingId, Permissions.READ_WRITE);
+			// if the left sibling is at minimum occupancy, merge with it. Otherwise
+			// steal some entries from it
+			if(leftSibling.getNumEmptySlots() >= maxEmptySlots) {
+				mergeInternalPages(tid, dirtypages, leftSibling, page, parent, leftEntry);
+			}
+			else {
+				stealFromLeftInternalPage(tid, dirtypages, page, leftSibling, parent, leftEntry);
+			}
+		}
+		else if(rightSiblingId != null) {
+			BTreeInternalPage rightSibling = (BTreeInternalPage) getPage(tid, dirtypages, rightSiblingId, Permissions.READ_WRITE);
+			// if the right sibling is at minimum occupancy, merge with it. Otherwise
+			// steal some entries from it
+			if(rightSibling.getNumEmptySlots() >= maxEmptySlots) {
+				mergeInternalPages(tid, dirtypages, page, rightSibling, parent, rightEntry);
+			}
+			else {
+				stealFromRightInternalPage(tid, dirtypages, page, rightSibling, parent, rightEntry);
+			}
+		}
+	}
+	
+	/**
+	 * Steal entries from the left sibling and copy them to the given page so that both pages are at least
+	 * half full. Keys can be thought of as rotating through the parent entry, so the original key in the 
+	 * parent is "pulled down" to the right-hand page, and the last key in the left-hand page is "pushed up"
+	 * to the parent.  Update parent pointers as needed.
+	 * 
+	 * @param tid - the transaction id
+	 * @param dirtypages - the list of dirty pages which should be updated with all new dirty pages
+	 * @param page - the internal page which is less than half full
+	 * @param leftSibling - the left sibling which has entries to spare
+	 * @param parent - the parent of the two internal pages
+	 * @param parentEntry - the entry in the parent pointing to the two internal pages
+	 * @see #updateParentPointers(TransactionId, HashMap, BTreeInternalPage)
+	 * 
+	 * @throws DbException
+	 * @throws IOException
+	 * @throws TransactionAbortedException
+	 */
+	protected void stealFromLeftInternalPage(TransactionId tid, HashMap<PageId, Page> dirtypages, 
+			BTreeInternalPage page, BTreeInternalPage leftSibling, BTreeInternalPage parent,
+			BTreeEntry parentEntry) throws DbException, IOException, TransactionAbortedException {
+		// some code goes here
+        // Move some of the entries from the left sibling to the page so
+		// that the entries are evenly distributed. Be sure to update
+		// the corresponding parent entry. Be sure to update the parent
+		// pointers of all children in the entries that were moved.
+	}
+	
+	/**
+	 * Steal entries from the right sibling and copy them to the given page so that both pages are at least
+	 * half full. Keys can be thought of as rotating through the parent entry, so the original key in the 
+	 * parent is "pulled down" to the left-hand page, and the last key in the right-hand page is "pushed up"
+	 * to the parent.  Update parent pointers as needed.
+	 * 
+	 * @param tid - the transaction id
+	 * @param dirtypages - the list of dirty pages which should be updated with all new dirty pages
+	 * @param page - the internal page which is less than half full
+	 * @param rightSibling - the right sibling which has entries to spare
+	 * @param parent - the parent of the two internal pages
+	 * @param parentEntry - the entry in the parent pointing to the two internal pages
+	 * @see #updateParentPointers(TransactionId, HashMap, BTreeInternalPage)
+	 * 
+	 * @throws DbException
+	 * @throws IOException
+	 * @throws TransactionAbortedException
+	 */
+	protected void stealFromRightInternalPage(TransactionId tid, HashMap<PageId, Page> dirtypages, 
+			BTreeInternalPage page, BTreeInternalPage rightSibling, BTreeInternalPage parent,
+			BTreeEntry parentEntry) throws DbException, IOException, TransactionAbortedException {
+		// some code goes here
+        // Move some of the entries from the right sibling to the page so
+		// that the entries are evenly distributed. Be sure to update
+		// the corresponding parent entry. Be sure to update the parent
+		// pointers of all children in the entries that were moved.
+	}
+	
+	/**
+	 * Merge two leaf pages by moving all tuples from the right page to the left page. 
+	 * Delete the corresponding key and right child pointer from the parent, and recursively 
+	 * handle the case when the parent gets below minimum occupancy.
+	 * Update sibling pointers as needed, and make the right page available for reuse.
+	 * 
+	 * @param tid - the transaction id
+	 * @param dirtypages - the list of dirty pages which should be updated with all new dirty pages
+	 * @param leftPage - the left leaf page
+	 * @param rightPage - the right leaf page
+	 * @param parent - the parent of the two pages
+	 * @param parentEntry - the entry in the parent corresponding to the leftPage and rightPage
+	 * @see #deleteParentEntry(TransactionId, HashMap, BTreePage, BTreeInternalPage, BTreeEntry)
+	 * 
+	 * @throws DbException
+	 * @throws IOException
+	 * @throws TransactionAbortedException
+	 */
+	protected void mergeLeafPages(TransactionId tid, HashMap<PageId, Page> dirtypages, 
+			BTreeLeafPage leftPage, BTreeLeafPage rightPage, BTreeInternalPage parent, BTreeEntry parentEntry) 
+					throws DbException, IOException, TransactionAbortedException {
+
+		// some code goes here
+        //
+		// Move all the tuples from the right page to the left page, update
+		// the sibling pointers, and make the right page available for reuse.
+		// Delete the entry in the parent corresponding to the two pages that are merging -
+		// deleteParentEntry() will be useful here
+	}
+
+	/**
+	 * Merge two internal pages by moving all entries from the right page to the left page 
+	 * and "pulling down" the corresponding key from the parent entry. 
+	 * Delete the corresponding key and right child pointer from the parent, and recursively 
+	 * handle the case when the parent gets below minimum occupancy.
+	 * Update parent pointers as needed, and make the right page available for reuse.
+	 * 
+	 * @param tid - the transaction id
+	 * @param dirtypages - the list of dirty pages which should be updated with all new dirty pages
+	 * @param leftPage - the left internal page
+	 * @param rightPage - the right internal page
+	 * @param parent - the parent of the two pages
+	 * @param parentEntry - the entry in the parent corresponding to the leftPage and rightPage
+	 * @see #deleteParentEntry(TransactionId, HashMap, BTreePage, BTreeInternalPage, BTreeEntry)
+	 * @see #updateParentPointers(TransactionId, HashMap, BTreeInternalPage)
+	 * 
+	 * @throws DbException
+	 * @throws IOException
+	 * @throws TransactionAbortedException
+	 */
+	protected void mergeInternalPages(TransactionId tid, HashMap<PageId, Page> dirtypages, 
+			BTreeInternalPage leftPage, BTreeInternalPage rightPage, BTreeInternalPage parent, BTreeEntry parentEntry) 
+					throws DbException, IOException, TransactionAbortedException {
+		
+		// some code goes here
+        //
+        // Move all the entries from the right page to the left page, update
+		// the parent pointers of the children in the entries that were moved, 
+		// and make the right page available for reuse
+		// Delete the entry in the parent corresponding to the two pages that are merging -
+		// deleteParentEntry() will be useful here
+	}
+	
+	/**
+	 * Method to encapsulate the process of deleting an entry (specifically the key and right child) 
+	 * from a parent node.  If the parent becomes empty (no keys remaining), that indicates that it 
+	 * was the root node and should be replaced by its one remaining child.  Otherwise, if it gets 
+	 * below minimum occupancy for non-root internal nodes, it should steal from one of its siblings or 
+	 * merge with a sibling.
+	 * 
+	 * @param tid - the transaction id
+	 * @param dirtypages - the list of dirty pages which should be updated with all new dirty pages
+	 * @param leftPage - the child remaining after the key and right child are deleted
+	 * @param parent - the parent containing the entry to be deleted
+	 * @param parentEntry - the entry to be deleted
+	 * @see #handleMinOccupancyPage(TransactionId, HashMap, BTreePage)
+	 * 
+	 * @throws DbException
+	 * @throws IOException
+	 * @throws TransactionAbortedException
+	 */
+	private void deleteParentEntry(TransactionId tid, HashMap<PageId, Page> dirtypages, 
+			BTreePage leftPage, BTreeInternalPage parent, BTreeEntry parentEntry) 
+					throws DbException, IOException, TransactionAbortedException {		
+		
+		// delete the entry in the parent.  If
+		// the parent is below minimum occupancy, get some tuples from its siblings
+		// or merge with one of the siblings
+		parent.deleteKeyAndRightChild(parentEntry);
+		int maxEmptySlots = parent.getMaxEntries() - parent.getMaxEntries()/2; // ceiling
+		if(parent.getNumEmptySlots() == parent.getMaxEntries()) {
+			// This was the last entry in the parent.
+			// In this case, the parent (root node) should be deleted, and the merged 
+			// page will become the new root
+			BTreePageId rootPtrId = parent.getParentId();
+			if(rootPtrId.pgcateg() != BTreePageId.ROOT_PTR) {
+				throw new DbException("attempting to delete a non-root node");
+			}
+			BTreeRootPtrPage rootPtr = (BTreeRootPtrPage) getPage(tid, dirtypages, rootPtrId, Permissions.READ_WRITE);
+			leftPage.setParentId(rootPtrId);
+			rootPtr.setRootId(leftPage.getId());
+
+			// release the parent page for reuse
+			setEmptyPage(tid, dirtypages, parent.getId().pageNumber());
+		}
+		else if(parent.getNumEmptySlots() > maxEmptySlots) { 
+			handleMinOccupancyPage(tid, dirtypages, parent);
+		}
+	}
+
+	/**
+	 * Delete a tuple from this BTreeFile. 
+	 * May cause pages to merge or redistribute entries/tuples if the pages 
+	 * become less than half full.
+	 * 
+	 * @param tid - the transaction id
+	 * @param t - the tuple to delete
+	 * @return a list of all pages that were dirtied by this operation. Could include
+	 * many pages since parent pointers will need to be updated when an internal node merges.
+	 * @see #handleMinOccupancyPage(TransactionId, HashMap, BTreePage)
+	 */
+	public ArrayList<Page> deleteTuple(TransactionId tid, Tuple t) 
+			throws DbException, IOException, TransactionAbortedException {
+		HashMap<PageId, Page> dirtypages = new HashMap<PageId, Page>();
+
+		BTreePageId pageId = new BTreePageId(tableid, t.getRecordId().getPageId().pageNumber(), 
+				BTreePageId.LEAF);
+		BTreeLeafPage page = (BTreeLeafPage) getPage(tid, dirtypages, pageId, Permissions.READ_WRITE);
+		page.deleteTuple(t);
+
+		// if the page is below minimum occupancy, get some tuples from its siblings
+		// or merge with one of the siblings
+		int maxEmptySlots = page.getMaxTuples() - page.getMaxTuples()/2; // ceiling
+		if(page.getNumEmptySlots() > maxEmptySlots) { 
+			handleMinOccupancyPage(tid, dirtypages, page);
+		}
+
+		ArrayList<Page> dirtyPagesArr = new ArrayList<Page>();
+		dirtyPagesArr.addAll(dirtypages.values());
+		return dirtyPagesArr;
+	}
+
+	/**
+	 * Get a read lock on the root pointer page. Create the root pointer page and root page
+	 * if necessary.
+	 * 
+	 * @param tid - the transaction id
+	 * @param dirtypages - the list of dirty pages which should be updated with all new dirty pages 
+	 * @return the root pointer page
+	 * @throws DbException
+	 * @throws IOException
+	 * @throws TransactionAbortedException
+	 */
+	BTreeRootPtrPage getRootPtrPage(TransactionId tid, HashMap<PageId, Page> dirtypages) throws DbException, IOException, TransactionAbortedException {
+		synchronized(this) {
+			if(f.length() == 0) {
+				// create the root pointer page and the root page
+				BufferedOutputStream bw = new BufferedOutputStream(
+						new FileOutputStream(f, true));
+				byte[] emptyRootPtrData = BTreeRootPtrPage.createEmptyPageData();
+				byte[] emptyLeafData = BTreeLeafPage.createEmptyPageData();
+				bw.write(emptyRootPtrData);
+				bw.write(emptyLeafData);
+				bw.close();
+			}
+		}
+
+		// get a read lock on the root pointer page
+		return (BTreeRootPtrPage) getPage(tid, dirtypages, BTreeRootPtrPage.getId(tableid), Permissions.READ_ONLY);
+	}
+
+	/**
+	 * Get the page number of the first empty page in this BTreeFile.
+	 * Creates a new page if none of the existing pages are empty.
+	 * 
+	 * @param tid - the transaction id
+	 * @param dirtypages - the list of dirty pages which should be updated with all new dirty pages
+	 * @return the page number of the first empty page
+	 * 
+	 * @throws DbException
+	 * @throws IOException
+	 * @throws TransactionAbortedException
+	 */
+	protected int getEmptyPageNo(TransactionId tid, HashMap<PageId, Page> dirtypages) 
+			throws DbException, IOException, TransactionAbortedException {
+		// get a read lock on the root pointer page and use it to locate the first header page
+		BTreeRootPtrPage rootPtr = getRootPtrPage(tid, dirtypages);
+		BTreePageId headerId = rootPtr.getHeaderId();
+		int emptyPageNo = 0;
+
+		if(headerId != null) {
+			BTreeHeaderPage headerPage = (BTreeHeaderPage) getPage(tid, dirtypages, headerId, Permissions.READ_ONLY);
+			int headerPageCount = 0;
+			// try to find a header page with an empty slot
+			while(headerPage != null && headerPage.getEmptySlot() == -1) {
+				headerId = headerPage.getNextPageId();
+				if(headerId != null) {
+					headerPage = (BTreeHeaderPage) getPage(tid, dirtypages, headerId, Permissions.READ_ONLY);
+					headerPageCount++;
+				}
+				else {
+					headerPage = null;
+				}
+			}
+
+			// if headerPage is not null, it must have an empty slot
+			if(headerPage != null) {
+				headerPage = (BTreeHeaderPage) getPage(tid, dirtypages, headerId, Permissions.READ_WRITE);
+				int emptySlot = headerPage.getEmptySlot();
+				headerPage.markSlotUsed(emptySlot, true);
+				emptyPageNo = headerPageCount * BTreeHeaderPage.getNumSlots() + emptySlot;
+			}
+		}
+
+		// at this point if headerId is null, either there are no header pages 
+		// or there are no free slots
+		if(headerId == null) {		
+			synchronized(this) {
+				// create the new page
+				BufferedOutputStream bw = new BufferedOutputStream(
+						new FileOutputStream(f, true));
+				byte[] emptyData = BTreeInternalPage.createEmptyPageData();
+				bw.write(emptyData);
+				bw.close();
+				emptyPageNo = numPages();
+			}
+		}
+
+		return emptyPageNo; 
+	}
+	
+	/**
+	 * Method to encapsulate the process of creating a new page.  It reuses old pages if possible,
+	 * and creates a new page if none are available.  It wipes the page on disk and in the cache and 
+	 * returns a clean copy locked with read-write permission
+	 * 
+	 * @param tid - the transaction id
+	 * @param dirtypages - the list of dirty pages which should be updated with all new dirty pages
+	 * @param pgcateg - the BTreePageId category of the new page.  Either LEAF, INTERNAL, or HEADER
+	 * @return the new empty page
+	 * @see #getEmptyPageNo(TransactionId, HashMap)
+	 * @see #setEmptyPage(TransactionId, HashMap, int)
+	 * 
+	 * @throws DbException
+	 * @throws IOException
+	 * @throws TransactionAbortedException
+	 */
+	private Page getEmptyPage(TransactionId tid, HashMap<PageId, Page> dirtypages, int pgcateg)
+			throws DbException, IOException, TransactionAbortedException {
+		// create the new page
+		int emptyPageNo = getEmptyPageNo(tid, dirtypages);
+		BTreePageId newPageId = new BTreePageId(tableid, emptyPageNo, pgcateg);
+		
+		// write empty page to disk
+		RandomAccessFile rf = new RandomAccessFile(f, "rw");
+		rf.seek(BTreeRootPtrPage.getPageSize() + (emptyPageNo-1) * BufferPool.getPageSize());
+		rf.write(BTreePage.createEmptyPageData());
+		rf.close();
+		
+		// make sure the page is not in the buffer pool	or in the local cache		
+		Database.getBufferPool().discardPage(newPageId);
+		dirtypages.remove(newPageId);
+		
+		return getPage(tid, dirtypages, newPageId, Permissions.READ_WRITE);
+	}
+
+	/**
+	 * Mark a page in this BTreeFile as empty. Find the corresponding header page 
+	 * (create it if needed), and mark the corresponding slot in the header page as empty.
+	 * 
+	 * @param tid - the transaction id
+	 * @param dirtypages - the list of dirty pages which should be updated with all new dirty pages
+	 * @param emptyPageNo - the page number of the empty page
+	 * @see #getEmptyPage(TransactionId, HashMap, int)
+	 * 
+	 * @throws DbException
+	 * @throws IOException
+	 * @throws TransactionAbortedException
+	 */
+	protected void setEmptyPage(TransactionId tid, HashMap<PageId, Page> dirtypages, int emptyPageNo) 
+			throws DbException, IOException, TransactionAbortedException {
+
+		// if this is the last page in the file (and not the only page), just 
+		// truncate the file
+		// @TODO: Commented out because we should probably do this somewhere else in case the transaction aborts....
+//		synchronized(this) {
+//			if(emptyPageNo == numPages()) {
+//				if(emptyPageNo <= 1) {
+//					// if this is the only page in the file, just return.
+//					// It just means we have an empty root page
+//					return;
+//				}
+//				long newSize = f.length() - BufferPool.getPageSize();
+//				FileOutputStream fos = new FileOutputStream(f, true);
+//				FileChannel fc = fos.getChannel();
+//				fc.truncate(newSize);
+//				fc.close();
+//				fos.close();
+//				return;
+//			}
+//		}
+
+		// otherwise, get a read lock on the root pointer page and use it to locate 
+		// the first header page
+		BTreeRootPtrPage rootPtr = getRootPtrPage(tid, dirtypages);
+		BTreePageId headerId = rootPtr.getHeaderId();
+		BTreePageId prevId = null;
+		int headerPageCount = 0;
+
+		// if there are no header pages, create the first header page and update
+		// the header pointer in the BTreeRootPtrPage
+		if(headerId == null) {
+			rootPtr = (BTreeRootPtrPage) getPage(tid, dirtypages, BTreeRootPtrPage.getId(tableid), Permissions.READ_WRITE);
+			
+			BTreeHeaderPage headerPage = (BTreeHeaderPage) getEmptyPage(tid, dirtypages, BTreePageId.HEADER);
+			headerId = headerPage.getId();
+			headerPage.init();
+			rootPtr.setHeaderId(headerId);
+		}
+
+		// iterate through all the existing header pages to find the one containing the slot
+		// corresponding to emptyPageNo
+		while(headerId != null && (headerPageCount + 1) * BTreeHeaderPage.getNumSlots() < emptyPageNo) {
+			BTreeHeaderPage headerPage = (BTreeHeaderPage) getPage(tid, dirtypages, headerId, Permissions.READ_ONLY);
+			prevId = headerId;
+			headerId = headerPage.getNextPageId();
+			headerPageCount++;
+		}
+
+		// at this point headerId should either be null or set with 
+		// the headerPage containing the slot corresponding to emptyPageNo.
+		// Add header pages until we have one with a slot corresponding to emptyPageNo
+		while((headerPageCount + 1) * BTreeHeaderPage.getNumSlots() < emptyPageNo) {
+			BTreeHeaderPage prevPage = (BTreeHeaderPage) getPage(tid, dirtypages, prevId, Permissions.READ_WRITE);
+			
+			BTreeHeaderPage headerPage = (BTreeHeaderPage) getEmptyPage(tid, dirtypages, BTreePageId.HEADER);
+			headerId = headerPage.getId();
+			headerPage.init();
+			headerPage.setPrevPageId(prevId);
+			prevPage.setNextPageId(headerId);
+			
+			headerPageCount++;
+			prevId = headerId;
+		}
+
+		// now headerId should be set with the headerPage containing the slot corresponding to 
+		// emptyPageNo
+		BTreeHeaderPage headerPage = (BTreeHeaderPage) getPage(tid, dirtypages, headerId, Permissions.READ_WRITE);
+		int emptySlot = emptyPageNo - headerPageCount * BTreeHeaderPage.getNumSlots();
+		headerPage.markSlotUsed(emptySlot, false);
+	}
+
+	/**
+	 * get the specified tuples from the file based on its IndexPredicate value on
+	 * behalf of the specified transaction. This method will acquire a read lock on
+	 * the affected pages of the file, and may block until the lock can be
+	 * acquired.
+	 * 
+	 * @param tid - the transaction id
+	 * @param ipred - the index predicate value to filter on
+	 * @return an iterator for the filtered tuples
+	 */
+	public DbFileIterator indexIterator(TransactionId tid, IndexPredicate ipred) {
+		return new BTreeSearchIterator(this, tid, ipred);
+	}
+
+	/**
+	 * Get an iterator for all tuples in this B+ tree file in sorted order. This method 
+	 * will acquire a read lock on the affected pages of the file, and may block until 
+	 * the lock can be acquired.
+	 * 
+	 * @param tid - the transaction id
+	 * @return an iterator for all the tuples in this file
+	 */
+	public DbFileIterator iterator(TransactionId tid) {
+		return new BTreeFileIterator(this, tid);
+	}
+
+}
+
+/**
+ * Helper class that implements the Java Iterator for tuples on a BTreeFile
+ */
+class BTreeFileIterator extends AbstractDbFileIterator {
+
+	Iterator<Tuple> it = null;
+	BTreeLeafPage curp = null;
+
+	TransactionId tid;
+	BTreeFile f;
+
+	/**
+	 * Constructor for this iterator
+	 * @param f - the BTreeFile containing the tuples
+	 * @param tid - the transaction id
+	 */
+	public BTreeFileIterator(BTreeFile f, TransactionId tid) {
+		this.f = f;
+		this.tid = tid;
+	}
+
+	/**
+	 * Open this iterator by getting an iterator on the first leaf page
+	 */
+	public void open() throws DbException, TransactionAbortedException {
+		BTreeRootPtrPage rootPtr = (BTreeRootPtrPage) Database.getBufferPool().getPage(
+				tid, BTreeRootPtrPage.getId(f.getId()), Permissions.READ_ONLY);
+		BTreePageId root = rootPtr.getRootId();
+		curp = f.findLeafPage(tid, root, Permissions.READ_ONLY, null);
+		it = curp.iterator();
+	}
+
+	/**
+	 * Read the next tuple either from the current page if it has more tuples or
+	 * from the next page by following the right sibling pointer.
+	 * 
+	 * @return the next tuple, or null if none exists
+	 */
+	@Override
+	protected Tuple readNext() throws TransactionAbortedException, DbException {
+		if (it != null && !it.hasNext())
+			it = null;
+
+		while (it == null && curp != null) {
+			BTreePageId nextp = curp.getRightSiblingId();
+			if(nextp == null) {
+				curp = null;
+			}
+			else {
+				curp = (BTreeLeafPage) Database.getBufferPool().getPage(tid,
+						nextp, Permissions.READ_ONLY);
+				it = curp.iterator();
+				if (!it.hasNext())
+					it = null;
+			}
+		}
+
+		if (it == null)
+			return null;
+		return it.next();
+	}
+
+	/**
+	 * rewind this iterator back to the beginning of the tuples
+	 */
+	public void rewind() throws DbException, TransactionAbortedException {
+		close();
+		open();
+	}
+
+	/**
+	 * close the iterator
+	 */
+	public void close() {
+		super.close();
+		it = null;
+		curp = null;
+	}
+}
+
+/**
+ * Helper class that implements the DbFileIterator for search tuples on a
+ * B+ Tree File
+ */
+class BTreeSearchIterator extends AbstractDbFileIterator {
+
+	Iterator<Tuple> it = null;
+	BTreeLeafPage curp = null;
+
+	TransactionId tid;
+	BTreeFile f;
+	IndexPredicate ipred;
+
+	/**
+	 * Constructor for this iterator
+	 * @param f - the BTreeFile containing the tuples
+	 * @param tid - the transaction id
+	 * @param ipred - the predicate to filter on
+	 */
+	public BTreeSearchIterator(BTreeFile f, TransactionId tid, IndexPredicate ipred) {
+		this.f = f;
+		this.tid = tid;
+		this.ipred = ipred;
+	}
+
+	/**
+	 * Open this iterator by getting an iterator on the first leaf page applicable
+	 * for the given predicate operation
+	 */
+	public void open() throws DbException, TransactionAbortedException {
+		BTreeRootPtrPage rootPtr = (BTreeRootPtrPage) Database.getBufferPool().getPage(
+				tid, BTreeRootPtrPage.getId(f.getId()), Permissions.READ_ONLY);
+		BTreePageId root = rootPtr.getRootId();
+		if(ipred.getOp() == Op.EQUALS || ipred.getOp() == Op.GREATER_THAN 
+				|| ipred.getOp() == Op.GREATER_THAN_OR_EQ) {
+			curp = f.findLeafPage(tid, root, Permissions.READ_ONLY, ipred.getField());
+		}
+		else {
+			curp = f.findLeafPage(tid, root, Permissions.READ_ONLY, null);
+		}
+		it = curp.iterator();
+	}
+
+	/**
+	 * Read the next tuple either from the current page if it has more tuples matching
+	 * the predicate or from the next page by following the right sibling pointer.
+	 * 
+	 * @return the next tuple matching the predicate, or null if none exists
+	 */
+	@Override
+	protected Tuple readNext() throws TransactionAbortedException, DbException,
+	NoSuchElementException {
+		while (it != null) {
+
+			while (it.hasNext()) {
+				Tuple t = it.next();
+				if (t.getField(f.keyField()).compare(ipred.getOp(), ipred.getField())) {
+					return t;
+				}
+				else if(ipred.getOp() == Op.LESS_THAN || ipred.getOp() == Op.LESS_THAN_OR_EQ) {
+					// if the predicate was not satisfied and the operation is less than, we have
+					// hit the end
+					return null;
+				}
+				else if(ipred.getOp() == Op.EQUALS && 
+						t.getField(f.keyField()).compare(Op.GREATER_THAN, ipred.getField())) {
+					// if the tuple is now greater than the field passed in and the operation
+					// is equals, we have reached the end
+					return null;
+				}
+			}
+
+			BTreePageId nextp = curp.getRightSiblingId();
+			// if there are no more pages to the right, end the iteration
+			if(nextp == null) {
+				return null;
+			}
+			else {
+				curp = (BTreeLeafPage) Database.getBufferPool().getPage(tid,
+						nextp, Permissions.READ_ONLY);
+				it = curp.iterator();
+			}
+		}
+
+		return null;
+	}
+
+	/**
+	 * rewind this iterator back to the beginning of the tuples
+	 */
+	public void rewind() throws DbException, TransactionAbortedException {
+		close();
+		open();
+	}
+
+	/**
+	 * close the iterator
+	 */
+	public void close() {
+		super.close();
+		it = null;
+	}
+}
diff -ruN lab1/src/java/simpledb/BTreeFileEncoder.java lab3/src/java/simpledb/BTreeFileEncoder.java
--- lab1/src/java/simpledb/BTreeFileEncoder.java	1969-12-31 18:00:00.000000000 -0600
+++ lab3/src/java/simpledb/BTreeFileEncoder.java	2016-11-02 22:06:55.000000000 -0500
@@ -0,0 +1,723 @@
+package simpledb;
+
+import java.io.*;
+import java.util.*;
+
+import simpledb.Predicate.Op;
+
+/**
+ * BTreeFileEncoder reads a comma delimited text file and converts it to
+ * pages of binary data in the appropriate format for simpledb B+ tree
+ * pages.
+ */
+
+public class BTreeFileEncoder {
+
+	/**
+	 * Encode the file using the BTreeFile's Insert method.
+	 * 
+	 * @param tuples - list of tuples to add to the file
+	 * @param hFile - the file to temporarily store the data as a heap file on disk
+	 * @param bFile - the file on disk to back the resulting BTreeFile
+	 * @param keyField - the index of the key field for this B+ tree
+	 * @param numFields - the number of fields in each tuple
+	 * @return the BTreeFile
+	 */
+	public static BTreeFile convert(ArrayList<ArrayList<Integer>> tuples, File hFile, 
+			File bFile, int keyField, int numFields) throws IOException {
+		File tempInput = File.createTempFile("tempTable", ".txt");
+		tempInput.deleteOnExit();
+		BufferedWriter bw = new BufferedWriter(new FileWriter(tempInput));
+		for (ArrayList<Integer> tuple : tuples) {
+			int writtenFields = 0;
+			for (Integer field : tuple) {
+				writtenFields++;
+				if (writtenFields > numFields) {
+					bw.close();
+					throw new RuntimeException("Tuple has more than " + numFields + " fields: (" +
+							Utility.listToString(tuple) + ")");
+				}
+				bw.write(String.valueOf(field));
+				if (writtenFields < numFields) {
+					bw.write(',');
+				}
+			}
+			bw.write('\n');
+		}
+		bw.close();
+		return convert(tempInput, hFile, bFile, keyField, numFields);
+	}
+
+	/**
+	 * Encode the file using the BTreeFile's Insert method.
+	 * 
+	 * @param inFile - the raw text file containing the tuples
+	 * @param hFile - the file to temporarily store the data as a heap file on disk
+	 * @param bFile - the file on disk to back the resulting BTreeFile
+	 * @param keyField - the index of the key field for this B+ tree
+	 * @param numFields - the number of fields in each tuple
+	 * @return the BTreeFile
+	 */
+	public static BTreeFile convert(File inFile, File hFile, File bFile,
+			int keyField, int numFields)
+					throws IOException {
+		// convert the inFile to HeapFile first.
+		HeapFileEncoder.convert(inFile, hFile, BufferPool.getPageSize(), numFields);
+		HeapFile heapf = Utility.openHeapFile(numFields, hFile);
+
+		// add the heap file to B+ tree file
+		BTreeFile bf = BTreeUtility.openBTreeFile(numFields, bFile, keyField);
+
+		try {
+			TransactionId tid = new TransactionId();
+			DbFileIterator it = Database.getCatalog().getDatabaseFile(heapf.getId()).iterator(tid);
+			it.open();
+			int count = 0;
+			Transaction t = new Transaction();
+			while (it.hasNext()) {
+				Tuple tup = it.next();
+				Database.getBufferPool().insertTuple(t.getId(), bf.getId(), tup);
+				count++;
+				if(count >= 40) {
+					Database.getBufferPool().flushAllPages();
+					count = 0;
+				}
+				t.commit();
+				t = new Transaction();
+			}
+			it.close();
+		} catch(TransactionAbortedException te){
+			te.printStackTrace();
+			return bf;
+		} catch(DbException e) {
+			e.printStackTrace();
+			return bf;
+		} catch(IOException e) {
+			e.printStackTrace();
+			return bf;
+		}
+
+		try {
+			Database.getBufferPool().flushAllPages();
+		} catch(Exception e) {
+			e.printStackTrace();
+		}
+
+		return bf;
+
+	}
+
+	/** 
+	 * comparator to sort Tuples by key field
+	 */
+	public static class TupleComparator implements Comparator<Tuple> {
+		private int keyField;
+
+		/** 
+		 * Construct a TupleComparator
+		 * 
+		 * @param keyField - the index of the field the tuples are keyed on
+		 */
+		public TupleComparator(int keyField) {
+			this.keyField = keyField;
+		}
+
+		/**
+		 * Compare two tuples based on their key field
+		 * 
+		 * @return -1 if t1 < t2, 1 if t1 > t2, 0 if t1 == t2
+		 */
+		public int compare(Tuple t1, Tuple t2) {
+			int cmp = 0;
+			if(t1.getField(keyField).compare(Op.LESS_THAN, t2.getField(keyField))) {
+				cmp = -1;
+			}
+			else if(t1.getField(keyField).compare(Op.GREATER_THAN, t2.getField(keyField))) {
+				cmp = 1;
+			}
+			return cmp;
+		}
+	}
+
+	/**
+	 * Faster method to encode the B+ tree file
+	 * 
+	 * @param tuples - list of tuples to add to the file
+	 * @param hFile - the file to temporarily store the data as a heap file on disk
+	 * @param bFile - the file on disk to back the resulting BTreeFile
+	 * @param npagebytes - number of bytes per page
+	 * @param numFields - number of fields per tuple
+	 * @param typeAr - array containing the types of the tuples
+	 * @param fieldSeparator - character separating fields in the raw data file
+	 * @param keyField - the field of the tuples the B+ tree will be keyed on
+	 * @return the BTreeFile
+	 */
+	public static BTreeFile convert(ArrayList<ArrayList<Integer>> tuples, File hFile, 
+			File bFile, int npagebytes,
+			int numFields, Type[] typeAr, char fieldSeparator, int keyField) 
+					throws IOException, DbException, TransactionAbortedException {
+		File tempInput = File.createTempFile("tempTable", ".txt");
+		tempInput.deleteOnExit();
+		BufferedWriter bw = new BufferedWriter(new FileWriter(tempInput));
+		for (ArrayList<Integer> tuple : tuples) {
+			int writtenFields = 0;
+			for (Integer field : tuple) {
+				writtenFields++;
+				if (writtenFields > numFields) {
+					bw.close();
+					throw new RuntimeException("Tuple has more than " + numFields + " fields: (" +
+							Utility.listToString(tuple) + ")");
+				}
+				bw.write(String.valueOf(field));
+				if (writtenFields < numFields) {
+					bw.write(',');
+				}
+			}
+			bw.write('\n');
+		}
+		bw.close();
+		return convert(tempInput, hFile, bFile, npagebytes,
+				numFields, typeAr, fieldSeparator, keyField);
+	}
+
+	/** 
+	 * Faster method to encode the B+ tree file
+	 * 
+	 * @param inFile - the file containing the raw data
+	 * @param hFile - the data file for the HeapFile to be used as an intermediate conversion step
+	 * @param bFile - the data file for the BTreeFile
+	 * @param npagebytes - number of bytes per page
+	 * @param numFields - number of fields per tuple
+	 * @param typeAr - array containing the types of the tuples
+	 * @param fieldSeparator - character separating fields in the raw data file
+	 * @param keyField - the field of the tuples the B+ tree will be keyed on
+	 * @return the B+ tree file
+	 * @throws IOException
+	 * @throws DbException
+	 * @throws TransactionAbortedException
+	 */
+	public static BTreeFile convert(File inFile, File hFile, File bFile, int npagebytes,
+			int numFields, Type[] typeAr, char fieldSeparator, int keyField) 
+					throws IOException, DbException, TransactionAbortedException {
+		// convert the inFile to HeapFile first.
+		HeapFileEncoder.convert(inFile, hFile, BufferPool.getPageSize(), numFields);
+		HeapFile heapf = Utility.openHeapFile(numFields, hFile);
+
+		// read all the tuples from the heap file and sort them on the keyField
+		ArrayList<Tuple> tuples = new ArrayList<Tuple>();
+		TransactionId tid = new TransactionId();
+		DbFileIterator it = Database.getCatalog().getDatabaseFile(heapf.getId()).iterator(tid);
+		it.open();
+		while (it.hasNext()) {
+			Tuple tup = it.next();
+			tuples.add(tup);
+		}
+		it.close();
+		Collections.sort(tuples, new TupleComparator(keyField));
+
+		// add the tuples to B+ tree file
+		BTreeFile bf = BTreeUtility.openBTreeFile(numFields, bFile, keyField);
+		Type keyType = typeAr[keyField];
+		int tableid = bf.getId();
+
+		int nrecbytes = 0;
+		for (int i = 0; i < numFields ; i++) {
+			nrecbytes += typeAr[i].getLen();
+		}
+		// pointerbytes: left sibling pointer, right sibling pointer, parent pointer
+		int leafpointerbytes = 3 * BTreeLeafPage.INDEX_SIZE; 
+		int nrecords = (npagebytes * 8 - leafpointerbytes * 8) /  (nrecbytes * 8 + 1);  //floor comes for free
+
+		int nentrybytes = keyType.getLen() + BTreeInternalPage.INDEX_SIZE;
+		// pointerbytes: one extra child pointer, parent pointer, child page category
+		int internalpointerbytes = 2 * BTreeLeafPage.INDEX_SIZE + 1; 
+		int nentries = (npagebytes * 8 - internalpointerbytes * 8 - 1) /  (nentrybytes * 8 + 1);  //floor comes for free
+
+		ArrayList<ArrayList<BTreeEntry>> entries = new ArrayList<ArrayList<BTreeEntry>>();
+
+		// first add some bytes for the root pointer page
+		bf.writePage(new BTreeRootPtrPage(BTreeRootPtrPage.getId(tableid), 
+				BTreeRootPtrPage.createEmptyPageData()));
+
+		// next iterate through all the tuples and write out leaf pages
+		// and internal pages as they fill up.
+		// We wait until we have two full pages of tuples before writing out the first page
+		// so that we will not end up with any pages containing less than nrecords/2 tuples
+		// (unless it's the only page)
+		ArrayList<Tuple> page1 = new ArrayList<Tuple>();
+		ArrayList<Tuple> page2 = new ArrayList<Tuple>();
+		BTreePageId leftSiblingId = null;
+		for(Tuple tup : tuples) {
+			if(page1.size() < nrecords) {
+				page1.add(tup);
+			}
+			else if(page2.size() < nrecords) {
+				page2.add(tup);
+			}
+			else {
+				// write out a page of records
+				byte[] leafPageBytes = convertToLeafPage(page1, npagebytes, numFields, typeAr, keyField);
+				BTreePageId leafPid = new BTreePageId(tableid, bf.numPages() + 1, BTreePageId.LEAF);
+				BTreeLeafPage leafPage = new BTreeLeafPage(leafPid, leafPageBytes, keyField);
+				leafPage.setLeftSiblingId(leftSiblingId);
+				bf.writePage(leafPage);
+				leftSiblingId = leafPid;
+
+				// update the parent by "copying up" the next key
+				BTreeEntry copyUpEntry = new BTreeEntry(page2.get(0).getField(keyField), leafPid, null);
+				updateEntries(entries, bf, copyUpEntry, 0, nentries, npagebytes, 
+						keyType, tableid, keyField);
+
+				page1 = page2;
+				page2 = new ArrayList<Tuple>();
+				page2.add(tup);
+			}
+		}
+
+		// now we need to deal with the end cases. There are two options:
+		// 1. We have less than or equal to a full page of records. Because of the way the code
+		//    was written above, we know this must be the only page
+		// 2. We have somewhere between one and two pages of records remaining.
+		// For case (1), we write out the page 
+		// For case (2), we divide the remaining records equally between the last two pages,
+		// write them out, and update the parent's child pointers.
+		BTreePageId lastPid = null;
+		if(page2.size() == 0) {
+			// write out a page of records - this is the root page
+			byte[] lastPageBytes = convertToLeafPage(page1, npagebytes, numFields, typeAr, keyField);
+			lastPid = new BTreePageId(tableid, bf.numPages() + 1, BTreePageId.LEAF);
+			BTreeLeafPage lastPage = new BTreeLeafPage(lastPid, lastPageBytes, keyField);
+			lastPage.setLeftSiblingId(leftSiblingId);
+			bf.writePage(lastPage);
+		}
+		else {
+			// split the remaining tuples in half
+			int remainingTuples = page1.size() + page2.size();
+			ArrayList<Tuple> secondToLastPg = new ArrayList<Tuple>();
+			ArrayList<Tuple> lastPg = new ArrayList<Tuple>();
+			secondToLastPg.addAll(page1.subList(0, remainingTuples/2));
+			lastPg.addAll(page1.subList(remainingTuples/2, page1.size()));
+			lastPg.addAll(page2);
+
+			// write out the last two pages of records
+			byte[] secondToLastPageBytes = convertToLeafPage(secondToLastPg, npagebytes, numFields, typeAr, keyField);
+			BTreePageId secondToLastPid = new BTreePageId(tableid, bf.numPages() + 1, BTreePageId.LEAF);
+			BTreeLeafPage secondToLastPage = new BTreeLeafPage(secondToLastPid, secondToLastPageBytes, keyField);
+			secondToLastPage.setLeftSiblingId(leftSiblingId);
+			bf.writePage(secondToLastPage);
+
+			byte[] lastPageBytes = convertToLeafPage(lastPg, npagebytes, numFields, typeAr, keyField);
+			lastPid = new BTreePageId(tableid, bf.numPages() + 1, BTreePageId.LEAF);
+			BTreeLeafPage lastPage = new BTreeLeafPage(lastPid, lastPageBytes, keyField);
+			lastPage.setLeftSiblingId(secondToLastPid);
+			bf.writePage(lastPage);
+
+			// update the parent by "copying up" the next key
+			BTreeEntry copyUpEntry = new BTreeEntry(lastPg.get(0).getField(keyField), secondToLastPid, lastPid);
+			updateEntries(entries, bf, copyUpEntry, 0, nentries, npagebytes, 
+					keyType, tableid, keyField);
+		}
+
+		// Write out the remaining internal pages
+		cleanUpEntries(entries, bf, nentries, npagebytes, keyType, tableid, keyField);
+
+		// update the root pointer to point to the last page of the file
+		int root = bf.numPages();
+		int rootCategory = (root > 1 ? BTreePageId.INTERNAL : BTreePageId.LEAF);
+		byte[] rootPtrBytes = convertToRootPtrPage(root, rootCategory, 0);
+		bf.writePage(new BTreeRootPtrPage(BTreeRootPtrPage.getId(tableid), rootPtrBytes));
+
+		// set all the parent and sibling pointers
+		setParents(bf, new BTreePageId(tableid, root, rootCategory), BTreeRootPtrPage.getId(tableid));
+		setRightSiblingPtrs(bf, lastPid, null);
+
+		Database.resetBufferPool(BufferPool.DEFAULT_PAGES);
+		return bf;
+	}
+
+	/**
+	 * Set all the right sibling pointers by following the left sibling pointers
+	 * 
+	 * @param bf - the BTreeFile
+	 * @param pid - the id of the page to update with the right sibling pointer
+	 * @param rightSiblingId - the id of the page's right sibling
+	 * @throws IOException
+	 * @throws DbException
+	 */
+	private static void setRightSiblingPtrs(BTreeFile bf, BTreePageId pid, BTreePageId rightSiblingId) 
+			throws IOException, DbException {
+		BTreeLeafPage page = (BTreeLeafPage) bf.readPage(pid);
+		page.setRightSiblingId(rightSiblingId);
+		BTreePageId leftSiblingId = page.getLeftSiblingId();
+		bf.writePage(page);
+		if(leftSiblingId != null) {
+			setRightSiblingPtrs(bf, leftSiblingId, page.getId());
+		}
+	}
+
+	/**
+	 * Recursive function to set all the parent pointers
+	 * 
+	 * @param bf - the BTreeFile
+	 * @param pid - id of the page to update with the parent pointer
+	 * @param parent - the id of the page's parent
+	 * @throws IOException
+	 * @throws DbException
+	 */
+	private static void setParents(BTreeFile bf, BTreePageId pid, BTreePageId parent) 
+			throws IOException, DbException {
+		if(pid.pgcateg() == BTreePageId.INTERNAL) {
+			BTreeInternalPage page = (BTreeInternalPage) bf.readPage(pid);
+			page.setParentId(parent);
+
+			Iterator<BTreeEntry> it = page.iterator();
+			BTreeEntry e = null;
+			while(it.hasNext()) {
+				e = it.next();
+				setParents(bf, e.getLeftChild(), pid);
+			}
+			if(e != null) {
+				setParents(bf, e.getRightChild(), pid);
+			}
+			bf.writePage(page);
+		}
+		else { // pid.pgcateg() == BTreePageId.LEAF
+			BTreeLeafPage page = (BTreeLeafPage) bf.readPage(pid);
+			page.setParentId(parent);
+			bf.writePage(page);
+		}
+	}
+
+	/**
+	 * Write out any remaining entries and update the parent pointers.
+	 * 
+	 * @param entries - the list of remaining entries
+	 * @param bf - the BTreeFile
+	 * @param nentries - number of entries per page
+	 * @param npagebytes - number of bytes per page
+	 * @param keyType - the type of the key field
+	 * @param tableid - the table id of this BTreeFile
+	 * @param keyField - the index of the key field
+	 * @throws IOException
+	 */
+	private static void cleanUpEntries(ArrayList<ArrayList<BTreeEntry>> entries,
+			BTreeFile bf, int nentries, int npagebytes, Type keyType, int tableid, 
+			int keyField) throws IOException {
+		// As with the leaf pages, there are two options:
+		// 1. We have less than or equal to a full page of entries. Because of the way the code
+		//    was written, we know this must be the root page
+		// 2. We have somewhere between one and two pages of entries remaining.
+		// For case (1), we write out the page 
+		// For case (2), we divide the remaining entries equally between the last two pages,
+		// write them out, and update the parent's child pointers.
+		for(int i = 0; i < entries.size(); i++) {
+			int childPageCategory = (i == 0 ? BTreePageId.LEAF : BTreePageId.INTERNAL);
+			int size = entries.get(i).size();
+			if(size <= nentries) {
+				// write out a page of entries
+				byte[] internalPageBytes = convertToInternalPage(entries.get(i), npagebytes, keyType, childPageCategory);
+				BTreePageId internalPid = new BTreePageId(tableid, bf.numPages() + 1, BTreePageId.INTERNAL);
+				bf.writePage(new BTreeInternalPage(internalPid, internalPageBytes, keyField));
+			}
+			else {
+				// split the remaining entries in half
+				ArrayList<BTreeEntry> secondToLastPg = new ArrayList<BTreeEntry>();
+				ArrayList<BTreeEntry> lastPg = new ArrayList<BTreeEntry>();
+				secondToLastPg.addAll(entries.get(i).subList(0, size/2));
+				lastPg.addAll(entries.get(i).subList(size/2 + 1, size));
+
+				// write out the last two pages of entries
+				byte[] secondToLastPageBytes = convertToInternalPage(secondToLastPg, npagebytes, keyType, childPageCategory);
+				BTreePageId secondToLastPid = new BTreePageId(tableid, bf.numPages() + 1, BTreePageId.INTERNAL);
+				bf.writePage(new BTreeInternalPage(secondToLastPid, secondToLastPageBytes, keyField));
+
+				byte[] lastPageBytes = convertToInternalPage(lastPg, npagebytes, keyType, childPageCategory);
+				BTreePageId lastPid = new BTreePageId(tableid, bf.numPages() + 1, BTreePageId.INTERNAL);
+				bf.writePage(new BTreeInternalPage(lastPid, lastPageBytes, keyField));
+
+				// update the parent by "pushing up" the next key
+				BTreeEntry pushUpEntry = new BTreeEntry(entries.get(i).get(size/2).getKey(), secondToLastPid, lastPid);
+				updateEntries(entries, bf, pushUpEntry, i+1, nentries, npagebytes, 
+						keyType, tableid, keyField);
+			}
+
+		}
+	}
+
+	/**
+	 * Recursive function to update the entries by adding a new Entry at a particular level
+	 * 
+	 * @param entries - the list of entries
+	 * @param bf - the BTreefile
+	 * @param e - the new entry 
+	 * @param level - the level of the new entry (0 is closest to the leaf pages)
+	 * @param nentries - number of entries per page
+	 * @param npagebytes - number of bytes per page
+	 * @param keyType - the type of the key field
+	 * @param tableid - the table id of this BTreeFile
+	 * @param keyField - the index of the key field
+	 * @throws IOException
+	 */
+	private static void updateEntries(ArrayList<ArrayList<BTreeEntry>> entries, 
+			BTreeFile bf, BTreeEntry e, int level, int nentries, int npagebytes, Type keyType, 
+			int tableid, int keyField) throws IOException {
+		while(entries.size() <= level) {
+			entries.add(new ArrayList<BTreeEntry>());
+		}
+
+		int childPageCategory = (level == 0 ? BTreePageId.LEAF : BTreePageId.INTERNAL);
+		int size = entries.get(level).size();
+
+		if(size > 0) {
+			BTreeEntry prev = entries.get(level).get(size-1);
+			entries.get(level).set(size-1, new BTreeEntry(prev.getKey(), prev.getLeftChild(), e.getLeftChild()));
+			if(size == nentries * 2 + 1) {
+				// write out a page of entries
+				ArrayList<BTreeEntry> pageEntries = new ArrayList<BTreeEntry>();
+				pageEntries.addAll(entries.get(level).subList(0, nentries));
+				byte[] internalPageBytes = convertToInternalPage(pageEntries, npagebytes, keyType, childPageCategory);
+				BTreePageId internalPid = new BTreePageId(tableid, bf.numPages() + 1, BTreePageId.INTERNAL);
+				bf.writePage(new BTreeInternalPage(internalPid, internalPageBytes, keyField));
+
+				// update the parent by "pushing up" the next key
+				BTreeEntry pushUpEntry = new BTreeEntry(entries.get(level).get(nentries).getKey(), internalPid, null);
+				updateEntries(entries, bf, pushUpEntry, level + 1, nentries, npagebytes, 
+						keyType, tableid, keyField);
+				ArrayList<BTreeEntry> remainingEntries = new ArrayList<BTreeEntry>();
+				remainingEntries.addAll(entries.get(level).subList(nentries+1, size));
+				entries.get(level).clear();
+				entries.get(level).addAll(remainingEntries);
+			}
+		}
+		entries.get(level).add(e);
+	}
+
+	/**
+	 * Convert a set of tuples to a byte array in the format of a BTreeLeafPage
+	 * 
+	 * @param tuples - the set of tuples
+	 * @param npagebytes - number of bytes per page
+	 * @param numFields - number of fields in each tuple
+	 * @param typeAr - array containing the types of the tuples
+	 * @param keyField - the field of the tuples the B+ tree will be keyed on
+	 * @return a byte array which can be passed to the BTreeLeafPage constructor
+	 * @throws IOException
+	 */
+	public static byte[] convertToLeafPage(ArrayList<Tuple> tuples, int npagebytes,
+			int numFields, Type[] typeAr, int keyField)
+					throws IOException {
+		int nrecbytes = 0;
+		for (int i = 0; i < numFields ; i++) {
+			nrecbytes += typeAr[i].getLen();
+		}
+		// pointerbytes: left sibling pointer, right sibling pointer, parent pointer
+		int pointerbytes = 3 * BTreeLeafPage.INDEX_SIZE; 
+		int nrecords = (npagebytes * 8 - pointerbytes * 8) /  (nrecbytes * 8 + 1);  //floor comes for free
+
+		//  per record, we need one bit; there are nrecords per page, so we need
+		// nrecords bits, i.e., ((nrecords/32)+1) integers.
+		int nheaderbytes = (nrecords / 8);
+		if (nheaderbytes * 8 < nrecords)
+			nheaderbytes++;  //ceiling
+		int nheaderbits = nheaderbytes * 8;
+
+		ByteArrayOutputStream baos = new ByteArrayOutputStream(npagebytes);
+		DataOutputStream dos = new DataOutputStream(baos);
+
+		// write out the pointers and the header of the page,
+		// then sort the tuples on the keyField and write out the tuples.
+		//
+		// in the header, write a 1 for bits that correspond to records we've
+		// written and 0 for empty slots.
+
+		int recordcount = tuples.size();
+		if (recordcount > nrecords)
+			recordcount = nrecords;
+
+		dos.writeInt(0); // parent pointer
+		dos.writeInt(0); // left sibling pointer
+		dos.writeInt(0); // right sibling pointer
+
+		int i = 0;
+		byte headerbyte = 0;
+
+		for (i=0; i<nheaderbits; i++) {
+			if (i < recordcount)
+				headerbyte |= (1 << (i % 8));
+
+			if (((i+1) % 8) == 0) {
+				dos.writeByte(headerbyte);
+				headerbyte = 0;
+			}
+		}
+
+		if (i % 8 > 0)
+			dos.writeByte(headerbyte);
+
+		Collections.sort(tuples, new TupleComparator(keyField));
+		for(int t = 0; t < recordcount; t++) {
+			TupleDesc td = tuples.get(t).getTupleDesc();
+			for(int j = 0; j < td.numFields(); j++) {
+				tuples.get(t).getField(j).serialize(dos);
+			}
+		}
+
+		// pad the rest of the page with zeroes
+		for (i=0; i<(npagebytes - (recordcount * nrecbytes + nheaderbytes + pointerbytes)); i++)
+			dos.writeByte(0);
+
+		return baos.toByteArray();
+	}
+
+	/**
+	 *  Comparator to sort BTreeEntry objects by key
+	 */
+	public static class EntryComparator implements Comparator<BTreeEntry> {
+		/**
+		 * Compare two entries based on their key field
+		 * 
+		 * @return -1 if e1 < e2, 1 if e1 > e2, 0 if e1 == e2
+		 */
+		public int compare(BTreeEntry e1, BTreeEntry e2) {
+			int cmp = 0;
+			if(e1.getKey().compare(Op.LESS_THAN, e2.getKey())) {
+				cmp = -1;
+			}
+			else if(e1.getKey().compare(Op.GREATER_THAN, e2.getKey())) {
+				cmp = 1;
+			}
+			return cmp;
+		}
+	}
+
+	/**
+	 *  Comparator to sort BTreeEntry objects by key in descending order
+	 */
+	public static class ReverseEntryComparator implements Comparator<BTreeEntry> {
+		/**
+		 * Compare two entries based on their key field
+		 * 
+		 * @return -1 if e1 > e2, 1 if e1 < e2, 0 if e1 == e2
+		 */
+		public int compare(BTreeEntry e1, BTreeEntry e2) {
+			int cmp = 0;
+			if(e1.getKey().compare(Op.GREATER_THAN, e2.getKey())) {
+				cmp = -1;
+			}
+			else if(e1.getKey().compare(Op.LESS_THAN, e2.getKey())) {
+				cmp = 1;
+			}
+			return cmp;
+		}
+	}
+
+	/**
+	 * Convert a set of entries to a byte array in the format of a BTreeInternalPage
+	 * 
+	 * @param entries - the set of entries
+	 * @param npagebytes - number of bytes per page
+	 * @param keyType - the type of the key field
+	 * @param childPageCategory - the category of the child pages (either internal or leaf)
+	 * @return a byte array which can be passed to the BTreeInternalPage constructor
+	 * @throws IOException
+	 */
+	public static byte[] convertToInternalPage(ArrayList<BTreeEntry> entries, int npagebytes,
+			Type keyType, int childPageCategory)
+					throws IOException {
+		int nentrybytes = keyType.getLen() + BTreeInternalPage.INDEX_SIZE;
+		// pointerbytes: one extra child pointer, parent pointer, child page category
+		int pointerbytes = 2 * BTreeLeafPage.INDEX_SIZE + 1; 
+		int nentries = (npagebytes * 8 - pointerbytes * 8 - 1) /  (nentrybytes * 8 + 1);  //floor comes for free
+
+		//  per entry, we need one bit; there are nentries per page, so we need
+		// nentries bits, plus 1 for the extra child pointer.
+		int nheaderbytes = (nentries + 1) / 8;
+		if (nheaderbytes * 8 < nentries + 1)
+			nheaderbytes++;  //ceiling
+		int nheaderbits = nheaderbytes * 8;
+
+		ByteArrayOutputStream baos = new ByteArrayOutputStream(npagebytes);
+		DataOutputStream dos = new DataOutputStream(baos);
+
+		// write out the pointers and the header of the page,
+		// then sort the entries and write them out.
+		//
+		// in the header, write a 1 for bits that correspond to entries we've
+		// written and 0 for empty slots.
+		int entrycount = entries.size();
+		if (entrycount > nentries)
+			entrycount = nentries;
+
+		dos.writeInt(0); // parent pointer
+		dos.writeByte((byte) childPageCategory);
+
+		int i = 0;
+		byte headerbyte = 0;
+
+		for (i=0; i<nheaderbits; i++) {
+			if (i < entrycount + 1)
+				headerbyte |= (1 << (i % 8));
+
+			if (((i+1) % 8) == 0) {
+				dos.writeByte(headerbyte);
+				headerbyte = 0;
+			}
+		}
+
+		if (i % 8 > 0)
+			dos.writeByte(headerbyte);
+
+		Collections.sort(entries, new EntryComparator());
+		for(int e = 0; e < entrycount; e++) {
+			entries.get(e).getKey().serialize(dos);
+		}
+
+		for(int e = entrycount; e < nentries; e++) {
+			for (int j=0; j<keyType.getLen(); j++) {
+				dos.writeByte(0);
+			}
+		}
+
+		dos.writeInt(entries.get(0).getLeftChild().pageNumber());
+		for(int e = 0; e < entrycount; e++) {
+			dos.writeInt(entries.get(e).getRightChild().pageNumber());
+		}
+
+		for(int e = entrycount; e < nentries; e++) {
+			for (int j=0; j<BTreeInternalPage.INDEX_SIZE; j++) {
+				dos.writeByte(0);
+			}
+		}
+
+		// pad the rest of the page with zeroes
+		for (i=0; i<(npagebytes - (nentries * nentrybytes + nheaderbytes + pointerbytes)); i++)
+			dos.writeByte(0);
+
+		return baos.toByteArray();
+
+	}
+
+	/**
+	 * Create a byte array in the format of a BTreeRootPtrPage
+	 * 
+	 * @param root - the page number of the root page
+	 * @param rootCategory - the category of the root page (leaf or internal)
+	 * @param header - the page number of the first header page
+	 * @return a byte array which can be passed to the BTreeRootPtrPage constructor
+	 * @throws IOException
+	 */
+	public static byte[] convertToRootPtrPage(int root, int rootCategory, int header)
+			throws IOException {
+
+		ByteArrayOutputStream baos = new ByteArrayOutputStream(BTreeRootPtrPage.getPageSize());
+		DataOutputStream dos = new DataOutputStream(baos);
+
+		dos.writeInt(root); // root pointer
+		dos.writeByte((byte) rootCategory); // root page category
+
+		dos.writeInt(header); // header pointer
+
+		return baos.toByteArray();
+	}
+
+}
diff -ruN lab1/src/java/simpledb/BTreeHeaderPage.java lab3/src/java/simpledb/BTreeHeaderPage.java
--- lab1/src/java/simpledb/BTreeHeaderPage.java	1969-12-31 18:00:00.000000000 -0600
+++ lab3/src/java/simpledb/BTreeHeaderPage.java	2016-11-02 22:06:55.000000000 -0500
@@ -0,0 +1,306 @@
+package simpledb;
+
+import java.io.*;
+
+/**
+ * Each instance of BTreeHeaderPage stores data for one page of a BTreeFile and 
+ * implements the Page interface that is used by BufferPool.
+ *
+ * @see BTreeFile
+ * @see BufferPool
+ *
+ */
+public class BTreeHeaderPage implements Page {
+	private volatile boolean dirty = false;
+	private volatile TransactionId dirtier = null;
+	
+	final static int INDEX_SIZE = Type.INT_TYPE.getLen();
+
+	final BTreePageId pid;
+	final byte header[];
+	final int numSlots;
+
+	private int nextPage; // next header page or 0
+	private int prevPage; // previous header page or 0
+
+	byte[] oldData;
+	private final Byte oldDataLock=new Byte((byte)0);
+
+	/**
+	 * Create a BTreeHeaderPage from a set of bytes of data read from disk.
+	 * The format of a BTreeHeaderPage is two pointers to the next and previous
+	 * header pages, followed by a set of bytes indicating which pages in the file
+	 * are used or available
+	 * @see BufferPool#getPageSize()
+	 * 
+	 */
+	public BTreeHeaderPage(BTreePageId id, byte[] data) throws IOException {
+		this.pid = id;
+		this.numSlots = getNumSlots();
+		DataInputStream dis = new DataInputStream(new ByteArrayInputStream(data));
+
+		// Read the next and prev pointers
+		try {
+			Field f = Type.INT_TYPE.parse(dis);
+			this.nextPage = ((IntField) f).getValue();
+		} catch (java.text.ParseException e) {
+			e.printStackTrace();
+		}
+
+		try {
+			Field f = Type.INT_TYPE.parse(dis);
+			this.prevPage = ((IntField) f).getValue();
+		} catch (java.text.ParseException e) {
+			e.printStackTrace();
+		}
+
+		// allocate and read the header slots of this page
+		header = new byte[getHeaderSize()];
+		for (int i=0; i<header.length; i++)
+			header[i] = dis.readByte();
+
+		dis.close();
+
+		setBeforeImage();
+	}
+
+	/**
+	 * Initially mark all slots in the header used.
+	 */
+	public void init() {
+		for (int i=0; i<header.length; i++)
+			header[i] = (byte) 0xFF;
+	}
+
+	/**
+	 * Computes the number of bytes in the header while saving room for pointers
+	 */
+	private static int getHeaderSize() {        
+		// pointerBytes: nextPage and prevPage pointers
+		int pointerBytes = 2 * INDEX_SIZE; 
+		return BufferPool.getPageSize() - pointerBytes;
+	}
+
+	/**
+	 * Computes the number of slots in the header
+	 */
+	public static int getNumSlots() {        
+		return getHeaderSize() * 8;
+	}
+
+	/** Return a view of this page before it was modified
+        -- used by recovery */
+	public BTreeHeaderPage getBeforeImage(){
+		try {
+			byte[] oldDataRef = null;
+			synchronized(oldDataLock)
+			{
+				oldDataRef = oldData;
+			}
+			return new BTreeHeaderPage(pid,oldDataRef);
+		} catch (IOException e) {
+			e.printStackTrace();
+			//should never happen -- we parsed it OK before!
+			System.exit(1);
+		}
+		return null;
+	}
+
+	public void setBeforeImage() {
+		synchronized(oldDataLock)
+		{
+			oldData = getPageData().clone();
+		}
+	}
+
+	/**
+	 * @return the PageId associated with this page.
+	 */
+	public BTreePageId getId() {
+		return pid;
+	}
+
+	/**
+	 * Generates a byte array representing the contents of this page.
+	 * Used to serialize this page to disk.
+	 * <p>
+	 * The invariant here is that it should be possible to pass the byte
+	 * array generated by getPageData to the BTreeHeaderPage constructor and
+	 * have it produce an identical BTreeHeaderPage object.
+	 *
+	 * @see #BTreeHeaderPage
+	 * @return A byte array correspond to the bytes of this page.
+	 */
+	public byte[] getPageData() {
+		int len = BufferPool.getPageSize();
+		ByteArrayOutputStream baos = new ByteArrayOutputStream(len);
+		DataOutputStream dos = new DataOutputStream(baos);
+
+		// write out the next and prev pointers
+		try {
+			dos.writeInt(nextPage);
+
+		} catch (IOException e) {
+			e.printStackTrace();
+		}
+		try {
+			dos.writeInt(prevPage);
+
+		} catch (IOException e) {
+			e.printStackTrace();
+		}
+
+		// create the header of the page
+		for (int i=0; i<header.length; i++) {
+			try {
+				dos.writeByte(header[i]);
+			} catch (IOException e) {
+				// this really shouldn't happen
+				e.printStackTrace();
+			}
+		}
+
+		try {
+			dos.flush();
+		} catch (IOException e) {
+			e.printStackTrace();
+		}
+
+		return baos.toByteArray();
+	}
+
+	/**
+	 * Static method to generate a byte array corresponding to an empty
+	 * BTreeHeaderPage.
+	 * Used to add new, empty pages to the file. Passing the results of
+	 * this method to the BTreeHeaderPage constructor will create a BTreeHeaderPage with
+	 * no valid data in it.
+	 *
+	 * @return The returned ByteArray.
+	 */
+	public static byte[] createEmptyPageData() {
+		int len = BufferPool.getPageSize();
+		return new byte[len]; //all 0
+	}
+
+	/**
+	 * Get the page id of the previous header page
+	 * @return the page id of the previous header page
+	 */
+	public BTreePageId getPrevPageId() {
+		if(prevPage == 0) {
+			return null;
+		}
+		return new BTreePageId(pid.getTableId(), prevPage, BTreePageId.HEADER);
+	}
+
+	/**
+	 * Get the page id of the next header page
+	 * @return the page id of the next header page
+	 */
+	public BTreePageId getNextPageId() {
+		if(nextPage == 0) {
+			return null;
+		}
+		return new BTreePageId(pid.getTableId(), nextPage, BTreePageId.HEADER);
+	}
+
+	/**
+	 * Set the page id of the previous header page
+	 * @param id - the page id of the previous header page
+	 * @throws DbException
+	 */
+	public void setPrevPageId(BTreePageId id) throws DbException {
+		if(id == null) {
+			prevPage = 0;
+		}
+		else {
+			if(id.getTableId() != pid.getTableId()) {
+				throw new DbException("table id mismatch in setPrevPageId");
+			}
+			if(id.pgcateg() != BTreePageId.HEADER) {
+				throw new DbException("prevPage must be a header page");
+			}
+			prevPage = id.pageNumber();
+		}
+	}
+
+	/**
+	 * Set the page id of the next header page
+	 * @param id - the page id of the next header page
+	 * @throws DbException
+	 */
+	public void setNextPageId(BTreePageId id) throws DbException {
+		if(id == null) {
+			nextPage = 0;
+		}
+		else {
+			if(id.getTableId() != pid.getTableId()) {
+				throw new DbException("table id mismatch in setNextPageId");
+			}
+			if(id.pgcateg() != BTreePageId.HEADER) {
+				throw new DbException("nextPage must be a header page");
+			}
+			nextPage = id.pageNumber();
+		}
+	}
+
+	/**
+	 * Marks this page as dirty/not dirty and record that transaction
+	 * that did the dirtying
+	 */
+	public void markDirty(boolean dirty, TransactionId tid) {
+		this.dirty = dirty;
+		if (dirty) this.dirtier = tid;
+	}
+
+	/**
+	 * Returns the tid of the transaction that last dirtied this page, or null if the page is not dirty
+	 */
+	public TransactionId isDirty() {
+		if (this.dirty)
+			return this.dirtier;
+		else
+			return null;
+	}
+
+	/**
+	 * Returns true if the page of the BTreeFile associated with slot i is used
+	 */
+	public boolean isSlotUsed(int i) {
+		int headerbit = i % 8;
+		int headerbyte = (i - headerbit) / 8;
+		return (header[headerbyte] & (1 << headerbit)) != 0;
+	}
+
+	/**
+	 * Abstraction to mark a page of the BTreeFile used or unused
+	 */
+	public void markSlotUsed(int i, boolean value) {
+		int headerbit = i % 8;
+		int headerbyte = (i - headerbit) / 8;
+
+		Debug.log(1, "BTreeHeaderPage.setSlot: setting slot %d to %b", i, value);
+		if(value)
+			header[headerbyte] |= 1 << headerbit;
+		else
+			header[headerbyte] &= (0xFF ^ (1 << headerbit));
+	}
+
+	/**
+	 * get the index of the first empty slot
+	 * @return the index of the first empty slot or -1 if none exists
+	 */
+	public int getEmptySlot() {
+		for (int i=0; i<header.length; i++) {
+			if((int) header[i] != 0xFF) {
+				for(int j = 0; j < 8; j++) {
+					if(!isSlotUsed(i*8 + j)) {
+						return i*8 + j;
+					}
+				}
+			}
+		}
+		return -1;
+	}
+}
diff -ruN lab1/src/java/simpledb/BTreeInternalPage.java lab3/src/java/simpledb/BTreeInternalPage.java
--- lab1/src/java/simpledb/BTreeInternalPage.java	1969-12-31 18:00:00.000000000 -0600
+++ lab3/src/java/simpledb/BTreeInternalPage.java	2016-11-02 22:06:55.000000000 -0500
@@ -0,0 +1,803 @@
+package simpledb;
+
+import java.util.*;
+import java.io.*;
+
+import simpledb.Predicate.Op;
+
+/**
+ * Each instance of BTreeInternalPage stores data for one page of a BTreeFile and 
+ * implements the Page interface that is used by BufferPool.
+ *
+ * @see BTreeFile
+ * @see BufferPool
+ *
+ */
+public class BTreeInternalPage extends BTreePage {
+	private final byte header[];
+	private final Field keys[];
+	private final int children[];
+	private final int numSlots;
+	
+	private int childCategory; // either leaf or internal
+
+	public void checkRep(Field lowerBound, Field upperBound, boolean checkOccupancy, int depth) {
+		Field prev = lowerBound;
+		assert(this.getId().pgcateg() == BTreePageId.INTERNAL);
+
+		Iterator<BTreeEntry> it  = this.iterator();
+		while (it.hasNext()) {
+			Field f = it.next().getKey();
+			assert(null == prev || prev.compare(Op.LESS_THAN_OR_EQ,f));
+			prev = f;
+		}
+
+		if (null != upperBound && null != prev){
+			assert(prev.compare(Op.LESS_THAN_OR_EQ, upperBound));
+		}
+
+		if (checkOccupancy && depth > 0) {
+			assert (getNumEntries() >= getMaxEntries() / 2);
+		}
+	}
+	
+	/**
+	 * Create a BTreeInternalPage from a set of bytes of data read from disk.
+	 * The format of a BTreeInternalPage is a set of header bytes indicating
+	 * the slots of the page that are in use, some number of entry slots, and extra
+	 * bytes for the parent pointer, one extra child pointer (a node with m entries 
+	 * has m+1 pointers to children), and the category of all child pages (either 
+	 * leaf or internal).
+	 *  Specifically, the number of entries is equal to: <p>
+	 *          floor((BufferPool.getPageSize()*8 - extra bytes*8) / (entry size * 8 + 1))
+	 * <p> where entry size is the size of entries in this index node
+	 * (key + child pointer), which can be determined via the key field and 
+	 * {@link Catalog#getTupleDesc}.
+	 * The number of 8-bit header words is equal to:
+	 * <p>
+	 *      ceiling((no. entry slots + 1) / 8)
+	 * <p>
+	 * @see Database#getCatalog
+	 * @see Catalog#getTupleDesc
+	 * @see BufferPool#getPageSize()
+	 * 
+	 * @param id - the id of this page
+	 * @param data - the raw data of this page
+	 * @param key - the field which the index is keyed on
+	 */
+	public BTreeInternalPage(BTreePageId id, byte[] data, int key) throws IOException {
+		super(id, key);
+		this.numSlots = getMaxEntries() + 1;
+		DataInputStream dis = new DataInputStream(new ByteArrayInputStream(data));
+
+		// Read the parent pointer
+		try {
+			Field f = Type.INT_TYPE.parse(dis);
+			this.parent = ((IntField) f).getValue();
+		} catch (java.text.ParseException e) {
+			e.printStackTrace();
+		}
+
+		// read the child page category
+		childCategory = (int) dis.readByte();
+
+		// allocate and read the header slots of this page
+		header = new byte[getHeaderSize()];
+		for (int i=0; i<header.length; i++)
+			header[i] = dis.readByte();
+
+		keys = new Field[numSlots];
+		try{
+			// allocate and read the keys of this page
+			// start from 1 because the first key slot is not used
+			// since a node with m keys has m+1 pointers
+			keys[0] = null;
+			for (int i=1; i<keys.length; i++)
+				keys[i] = readNextKey(dis,i);
+		}catch(NoSuchElementException e){
+			e.printStackTrace();
+		}
+
+		children = new int[numSlots];
+		try{
+			// allocate and read the child pointers of this page
+			for (int i=0; i<children.length; i++)
+				children[i] = readNextChild(dis,i);
+		}catch(NoSuchElementException e){
+			e.printStackTrace();
+		}
+		dis.close();
+
+		setBeforeImage();
+	}
+
+	/** 
+	 * Retrieve the maximum number of entries this page can hold. (The number of keys)
+ 	 */
+	public int getMaxEntries() {        
+		int keySize = td.getFieldType(keyField).getLen();
+		int bitsPerEntryIncludingHeader = keySize * 8 + INDEX_SIZE * 8 + 1;
+		// extraBits are: one parent pointer, 1 byte for child page category, 
+		// one extra child pointer (node with m entries has m+1 pointers to children), 1 bit for extra header
+		int extraBits = 2 * INDEX_SIZE * 8 + 8 + 1; 
+		int entriesPerPage = (BufferPool.getPageSize()*8 - extraBits) / bitsPerEntryIncludingHeader; //round down
+		return entriesPerPage;
+	}
+
+	/**
+	 * Computes the number of bytes in the header of a B+ internal page with each entry occupying entrySize bytes
+	 * @return the number of bytes in the header
+	 */
+	private int getHeaderSize() {        
+		int slotsPerPage = getMaxEntries() + 1;
+		int hb = (slotsPerPage / 8);
+		if (hb * 8 < slotsPerPage) hb++;
+
+		return hb;
+	}
+
+	/** Return a view of this page before it was modified
+        -- used by recovery */
+	public BTreeInternalPage getBeforeImage(){
+		try {
+			byte[] oldDataRef = null;
+			synchronized(oldDataLock)
+			{
+				oldDataRef = oldData;
+			}
+			return new BTreeInternalPage(pid,oldDataRef,keyField);
+		} catch (IOException e) {
+			e.printStackTrace();
+			//should never happen -- we parsed it OK before!
+			System.exit(1);
+		}
+		return null;
+	}
+
+	public void setBeforeImage() {
+		synchronized(oldDataLock)
+		{
+			oldData = getPageData().clone();
+		}
+	}
+
+	/**
+	 * Read keys from the source file.
+	 */
+	private Field readNextKey(DataInputStream dis, int slotId) throws NoSuchElementException {
+		// if associated bit is not set, read forward to the next key, and
+		// return null.
+		if (!isSlotUsed(slotId)) {
+			for (int i=0; i<td.getFieldType(keyField).getLen(); i++) {
+				try {
+					dis.readByte();
+				} catch (IOException e) {
+					throw new NoSuchElementException("error reading empty key");
+				}
+			}
+			return null;
+		}
+
+		// read the key field
+		Field f = null;
+		try {
+			f = td.getFieldType(keyField).parse(dis);
+		} catch (java.text.ParseException e) {
+			e.printStackTrace();
+			throw new NoSuchElementException("parsing error!");
+		}
+
+		return f;
+	}
+
+	/**
+	 * Read child pointers from the source file.
+	 */
+	private int readNextChild(DataInputStream dis, int slotId) throws NoSuchElementException {
+		// if associated bit is not set, read forward to the next child pointer, and
+		// return -1.
+		if (!isSlotUsed(slotId)) {
+			for (int i=0; i<INDEX_SIZE; i++) {
+				try {
+					dis.readByte();
+				} catch (IOException e) {
+					throw new NoSuchElementException("error reading empty child pointer");
+				}
+			}
+			return -1;
+		}
+
+		// read child pointer
+		int child = -1;
+		try {
+			Field f = Type.INT_TYPE.parse(dis);
+			child = ((IntField) f).getValue();
+		} catch (java.text.ParseException e) {
+			e.printStackTrace();
+			throw new NoSuchElementException("parsing error!");
+		}
+
+		return child;
+	}
+
+	/**
+	 * Generates a byte array representing the contents of this page.
+	 * Used to serialize this page to disk.
+	 * <p>
+	 * The invariant here is that it should be possible to pass the byte
+	 * array generated by getPageData to the BTreeInternalPage constructor and
+	 * have it produce an identical BTreeInternalPage object.
+	 *
+	 * @see #BTreeInternalPage
+	 * @return A byte array correspond to the bytes of this page.
+	 */
+	public byte[] getPageData() {
+		int len = BufferPool.getPageSize();
+		ByteArrayOutputStream baos = new ByteArrayOutputStream(len);
+		DataOutputStream dos = new DataOutputStream(baos);
+
+		// write out the parent pointer
+		try {
+			dos.writeInt(parent);
+
+		} catch (IOException e) {
+			e.printStackTrace();
+		}
+
+		// write out the child page category
+		try {
+			dos.writeByte((byte) childCategory);
+
+		} catch (IOException e) {
+			e.printStackTrace();
+		}
+
+		// create the header of the page
+		for (int i=0; i<header.length; i++) {
+			try {
+				dos.writeByte(header[i]);
+			} catch (IOException e) {
+				// this really shouldn't happen
+				e.printStackTrace();
+			}
+		}
+
+		// create the keys
+		// start from 1 because the first key slot is not used
+		// since a node with m keys has m+1 pointers
+		for (int i=1; i<keys.length; i++) {
+
+			// empty slot
+			if (!isSlotUsed(i)) {
+				for (int j=0; j<td.getFieldType(keyField).getLen(); j++) {
+					try {
+						dos.writeByte(0);
+					} catch (IOException e) {
+						e.printStackTrace();
+					}
+
+				}
+				continue;
+			}
+
+			// non-empty slot
+			try {
+				keys[i].serialize(dos);
+			} catch (IOException e) {
+				e.printStackTrace();
+			}
+
+		}
+
+		// create the child pointers
+		for (int i=0; i<children.length; i++) {
+
+			// empty slot
+			if (!isSlotUsed(i)) {
+				for (int j=0; j<INDEX_SIZE; j++) {
+					try {
+						dos.writeByte(0);
+					} catch (IOException e) {
+						e.printStackTrace();
+					}
+
+				}
+				continue;
+			}
+
+			// non-empty slot
+			try {
+				dos.writeInt(children[i]);
+
+			} catch (IOException e) {
+				e.printStackTrace();
+			}
+		}
+
+		// padding
+		int zerolen = BufferPool.getPageSize() - (INDEX_SIZE + 1 + header.length + 
+				td.getFieldType(keyField).getLen() * (keys.length - 1) + INDEX_SIZE * children.length); 
+		byte[] zeroes = new byte[zerolen];
+		try {
+			dos.write(zeroes, 0, zerolen);
+		} catch (IOException e) {
+			e.printStackTrace();
+		}
+
+		try {
+			dos.flush();
+		} catch (IOException e) {
+			e.printStackTrace();
+		}
+
+		return baos.toByteArray();
+	}
+
+	/**
+	 * Delete the specified entry (key + 1 child pointer) from the page. The recordId
+	 * is used to find the specified entry, so it must not be null. After deletion, the 
+	 * entry's recordId should be set to null to reflect that it is no longer stored on 
+	 * any page.
+	 * @throws DbException if this entry is not on this page, or entry slot is
+	 *         already empty.
+	 * @param e The entry to delete
+	 * @param deleteRightChild - if true, delete the right child. Otherwise
+	 *        delete the left child
+	 */
+	private void deleteEntry(BTreeEntry e, boolean deleteRightChild) throws DbException {
+		RecordId rid = e.getRecordId();
+		if(rid == null)
+			throw new DbException("tried to delete entry with null rid");
+		if((rid.getPageId().pageNumber() != pid.pageNumber()) || (rid.getPageId().getTableId() != pid.getTableId()))
+			throw new DbException("tried to delete entry on invalid page or table");
+		if (!isSlotUsed(rid.tupleno()))
+			throw new DbException("tried to delete null entry.");
+		if(deleteRightChild) {
+			markSlotUsed(rid.tupleno(), false); 
+		}
+		else {
+			for(int i = rid.tupleno() - 1; i >= 0; i--) {
+				if(isSlotUsed(i)) {
+					children[i] = children[rid.tupleno()];
+					markSlotUsed(rid.tupleno(), false); 
+					break;
+				}	
+			}
+		}
+		e.setRecordId(null);
+	}
+
+	/**
+	 * Delete the specified entry (key + right child pointer) from the page. The recordId
+	 * is used to find the specified entry, so it must not be null. After deletion, the 
+	 * entry's recordId should be set to null to reflect that it is no longer stored on 
+	 * any page.
+	 * @throws DbException if this entry is not on this page, or entry slot is
+	 *         already empty.
+	 * @param e The entry to delete
+	 */
+	public void deleteKeyAndRightChild(BTreeEntry e) throws DbException {
+		deleteEntry(e, true);
+	}
+	
+	/**
+	 * Delete the specified entry (key + left child pointer) from the page. The recordId
+	 * is used to find the specified entry, so it must not be null. After deletion, the 
+	 * entry's recordId should be set to null to reflect that it is no longer stored on 
+	 * any page.
+	 * @throws DbException if this entry is not on this page, or entry slot is
+	 *         already empty.
+	 * @param e The entry to delete
+	 */
+	public void deleteKeyAndLeftChild(BTreeEntry e) throws DbException {
+		deleteEntry(e, false);
+	}
+	
+	/**
+	 * Update the key and/or child pointers of an entry at the location specified by its 
+	 * record id.
+	 * @param e - the entry with updated key and/or child pointers
+	 * @throws DbException if this entry is not on this page, entry slot is
+	 *         already empty, or updating this key would put the entry out of 
+	 *         order on the page
+	 */
+	public void updateEntry(BTreeEntry e) throws DbException {
+		RecordId rid = e.getRecordId();
+		if(rid == null)
+			throw new DbException("tried to update entry with null rid");
+		if((rid.getPageId().pageNumber() != pid.pageNumber()) || (rid.getPageId().getTableId() != pid.getTableId()))
+			throw new DbException("tried to update entry on invalid page or table");
+		if (!isSlotUsed(rid.tupleno()))
+			throw new DbException("tried to update null entry.");
+		
+		for(int i = rid.tupleno() + 1; i < numSlots; i++) {
+			if(isSlotUsed(i)) {
+				if(keys[i].compare(Op.LESS_THAN, e.getKey())) {
+					throw new DbException("attempt to update entry with invalid key " + e.getKey() +
+							" HINT: updated key must be less than or equal to keys on the right");
+				}
+				break;
+			}	
+		}
+		for(int i = rid.tupleno() - 1; i >= 0; i--) {
+			if(isSlotUsed(i)) {
+				if(i > 0 && keys[i].compare(Op.GREATER_THAN, e.getKey())) {
+					throw new DbException("attempt to update entry with invalid key " + e.getKey() +
+							" HINT: updated key must be greater than or equal to keys on the left");
+				}
+				children[i] = e.getLeftChild().pageNumber();
+				break;
+			}	
+		}
+		children[rid.tupleno()] = e.getRightChild().pageNumber(); 
+		keys[rid.tupleno()] = e.getKey();
+	}
+
+	/**
+	 * Adds the specified entry to the page; the entry's recordId should be updated to 
+	 * reflect that it is now stored on this page.
+	 * @throws DbException if the page is full (no empty slots) or key field type,
+	 *         table id, or child page category is a mismatch, or the entry is invalid
+	 * @param e The entry to add.
+	 */
+	public void insertEntry(BTreeEntry e) throws DbException {
+		if (!e.getKey().getType().equals(td.getFieldType(keyField)))
+			throw new DbException("key field type mismatch, in insertEntry");
+
+		if(e.getLeftChild().getTableId() != pid.getTableId() || e.getRightChild().getTableId() != pid.getTableId())
+			throw new DbException("table id mismatch in insertEntry");
+
+		if(childCategory == 0) {
+			if(e.getLeftChild().pgcateg() != e.getRightChild().pgcateg())
+				throw new DbException("child page category mismatch in insertEntry");
+
+			childCategory = e.getLeftChild().pgcateg();
+		}
+		else if(e.getLeftChild().pgcateg() != childCategory || e.getRightChild().pgcateg() != childCategory)
+			throw new DbException("child page category mismatch in insertEntry");
+
+		// if this is the first entry, add it and return
+		if(getNumEmptySlots() == getMaxEntries()) {
+			children[0] = e.getLeftChild().pageNumber();
+			children[1] = e.getRightChild().pageNumber();
+			keys[1] = e.getKey();
+			markSlotUsed(0, true);
+			markSlotUsed(1, true);
+			e.setRecordId(new RecordId(pid, 1));
+			return;
+		}
+
+		// find the first empty slot, starting from 1
+		int emptySlot = -1;
+		for (int i=1; i<numSlots; i++) {
+			if (!isSlotUsed(i)) {
+				emptySlot = i;
+				break;
+			}
+		}
+
+		if (emptySlot == -1)
+			throw new DbException("called insertEntry on page with no empty slots.");        
+
+		// find the child pointer matching the left or right child in this entry
+		int lessOrEqKey = -1;
+		for (int i=0; i<numSlots; i++) {
+			if(isSlotUsed(i)) {
+				if(children[i] == e.getLeftChild().pageNumber() || children[i] == e.getRightChild().pageNumber()) {
+					if(i > 0 && keys[i].compare(Op.GREATER_THAN, e.getKey())) {
+						throw new DbException("attempt to insert invalid entry with left child " + 
+								e.getLeftChild().pageNumber() + ", right child " + 
+								e.getRightChild().pageNumber() + " and key " + e.getKey() +
+								" HINT: one of these children must match an existing child on the page" +
+								" and this key must be correctly ordered in between that child's" +
+								" left and right keys");
+					}
+					lessOrEqKey = i;
+					if(children[i] == e.getRightChild().pageNumber()) {
+						children[i] = e.getLeftChild().pageNumber();
+					}
+				}
+				else if(lessOrEqKey != -1) {
+					// validate that the next key is greater than or equal to the one we are inserting
+					if(keys[i].compare(Op.LESS_THAN, e.getKey())) {
+						throw new DbException("attempt to insert invalid entry with left child " + 
+								e.getLeftChild().pageNumber() + ", right child " + 
+								e.getRightChild().pageNumber() + " and key " + e.getKey() +
+								" HINT: one of these children must match an existing child on the page" +
+								" and this key must be correctly ordered in between that child's" +
+								" left and right keys");
+					}
+					break;
+				}
+			}
+		}
+
+		if(lessOrEqKey == -1) {
+			throw new DbException("attempt to insert invalid entry with left child " + 
+					e.getLeftChild().pageNumber() + ", right child " + 
+					e.getRightChild().pageNumber() + " and key " + e.getKey() +
+					" HINT: one of these children must match an existing child on the page" +
+					" and this key must be correctly ordered in between that child's" +
+					" left and right keys");
+		}
+
+		// shift entries back or forward to fill empty slot and make room for new entry
+		// while keeping entries in sorted order
+		int goodSlot = -1;
+		if(emptySlot < lessOrEqKey) {
+			for(int i = emptySlot; i < lessOrEqKey; i++) {
+				moveEntry(i+1, i);
+			}
+			goodSlot = lessOrEqKey;
+		}
+		else {
+			for(int i = emptySlot; i > lessOrEqKey + 1; i--) {
+				moveEntry(i-1, i);
+			}
+			goodSlot = lessOrEqKey + 1;
+		}
+
+		// insert new entry into the correct spot in sorted order
+		markSlotUsed(goodSlot, true);
+		Debug.log(1, "BTreeLeafPage.insertEntry: new entry, tableId = %d pageId = %d slotId = %d", pid.getTableId(), pid.pageNumber(), goodSlot);
+		keys[goodSlot] = e.getKey();
+		children[goodSlot] = e.getRightChild().pageNumber();
+		e.setRecordId(new RecordId(pid, goodSlot));
+	}
+
+	/**
+	 * Move an entry from one slot to another slot, and update the corresponding
+	 * headers
+	 */
+	private void moveEntry(int from, int to) {
+		if(!isSlotUsed(to) && isSlotUsed(from)) {
+			markSlotUsed(to, true);
+			keys[to] = keys[from];
+			children[to] = children[from];
+			markSlotUsed(from, false);
+		}
+	}
+
+	/**
+	 * Returns the number of entries (keys) currently stored on this page
+	 */
+	public int getNumEntries() {
+		return numSlots - getNumEmptySlots() - 1;
+	}
+	
+	/**
+	 * Returns the number of empty slots on this page.
+	 */
+	public int getNumEmptySlots() {
+		int cnt = 0;
+		// start from 1 because the first key slot is not used
+		// since a node with m keys has m+1 pointers
+		for(int i=1; i<numSlots; i++)
+			if(!isSlotUsed(i))
+				cnt++;
+		return cnt;
+	}
+
+	/**
+	 * Returns true if associated slot on this page is filled.
+	 */
+	public boolean isSlotUsed(int i) {
+		int headerbit = i % 8;
+		int headerbyte = (i - headerbit) / 8;
+		return (header[headerbyte] & (1 << headerbit)) != 0;
+	}
+
+	/**
+	 * Abstraction to fill or clear a slot on this page.
+	 */
+	private void markSlotUsed(int i, boolean value) {
+		int headerbit = i % 8;
+		int headerbyte = (i - headerbit) / 8;
+
+		Debug.log(1, "BTreeInternalPage.setSlot: setting slot %d to %b", i, value);
+		if(value)
+			header[headerbyte] |= 1 << headerbit;
+		else
+			header[headerbyte] &= (0xFF ^ (1 << headerbit));
+	}
+
+	/**
+	 * @return an iterator over all entries on this page (calling remove on this iterator throws an UnsupportedOperationException)
+	 * (note that this iterator shouldn't return entries in empty slots!)
+	 */
+	public Iterator<BTreeEntry> iterator() {
+		return new BTreeInternalPageIterator(this);
+	}
+	
+	/**
+	 * @return a reverse iterator over all entries on this page (calling remove on this iterator throws an UnsupportedOperationException)
+	 * (note that this iterator shouldn't return entries in empty slots!)
+	 */
+	public Iterator<BTreeEntry> reverseIterator() {
+		return new BTreeInternalPageReverseIterator(this);
+	}
+
+	/**
+	 * protected method used by the iterator to get the ith key out of this page
+	 * @param i - the index of the key
+	 * @return the ith key
+	 * @throws NoSuchElementException
+	 */
+	protected Field getKey(int i) throws NoSuchElementException {
+
+		// key at slot 0 is not used
+		if (i <= 0 || i >= keys.length)
+			throw new NoSuchElementException();
+
+		try {
+			if(!isSlotUsed(i)) {
+				Debug.log(1, "BTreeInternalPage.getKey: slot %d in %d:%d is not used", i, pid.getTableId(), pid.pageNumber());
+				return null;
+			}
+
+			Debug.log(1, "BTreeInternalPage.getKey: returning key %d", i);
+			return keys[i];
+
+		} catch (ArrayIndexOutOfBoundsException e) {
+			throw new NoSuchElementException();
+		}
+	}
+
+	/**
+	 * protected method used by the iterator to get the ith child page id out of this page
+	 * @param i - the index of the child page id
+	 * @return the ith child page id
+	 * @throws NoSuchElementException
+	 */
+	protected BTreePageId getChildId(int i) throws NoSuchElementException {
+
+		if (i < 0 || i >= children.length)
+			throw new NoSuchElementException();
+
+		try {
+			if(!isSlotUsed(i)) {
+				Debug.log(1, "BTreeInternalPage.getChildId: slot %d in %d:%d is not used", i, pid.getTableId(), pid.pageNumber());
+				return null;
+			}
+
+			Debug.log(1, "BTreeInternalPage.getChildId: returning child id %d", i);
+			return new BTreePageId(pid.getTableId(), children[i], childCategory);
+
+		} catch (ArrayIndexOutOfBoundsException e) {
+			throw new NoSuchElementException();
+		}
+	}
+}
+
+/**
+ * Helper class that implements the Java Iterator for entries on a BTreeInternalPage.
+ */
+class BTreeInternalPageIterator implements Iterator<BTreeEntry> {
+	int curEntry = 1;
+	BTreePageId prevChildId = null;
+	BTreeEntry nextToReturn = null;
+	BTreeInternalPage p;
+
+	public BTreeInternalPageIterator(BTreeInternalPage p) {
+		this.p = p;
+	}
+
+	public boolean hasNext() {
+		if (nextToReturn != null)
+			return true;
+
+		try {
+			if(prevChildId == null) {
+				prevChildId = p.getChildId(0);
+				if(prevChildId == null) {
+					return false;
+				}
+			}
+			while (true) {
+				int entry = curEntry++;
+				Field key = p.getKey(entry);
+				BTreePageId childId = p.getChildId(entry);
+				if(key != null && childId != null) {
+					nextToReturn = new BTreeEntry(key, prevChildId, childId);
+					nextToReturn.setRecordId(new RecordId(p.pid, entry));
+					prevChildId = childId;
+					return true;
+				}
+			}
+		} catch(NoSuchElementException e) {
+			return false;
+		}
+	}
+
+	public BTreeEntry next() {
+		BTreeEntry next = nextToReturn;
+
+		if (next == null) {
+			if (hasNext()) {
+				next = nextToReturn;
+				nextToReturn = null;
+				return next;
+			} else
+				throw new NoSuchElementException();
+		} else {
+			nextToReturn = null;
+			return next;
+		}
+	}
+
+	public void remove() {
+		throw new UnsupportedOperationException();
+	}
+}
+
+/**
+ * Helper class that implements the Java Iterator for entries on a BTreeInternalPage in reverse.
+ */
+class BTreeInternalPageReverseIterator implements Iterator<BTreeEntry> {
+	int curEntry;
+	BTreePageId childId = null;
+	Field key = null;
+	RecordId recordId = null;
+	BTreeEntry nextToReturn = null;
+	BTreeInternalPage p;
+
+	public BTreeInternalPageReverseIterator(BTreeInternalPage p) {
+		this.p = p;
+		this.curEntry = p.getMaxEntries();
+		while(!p.isSlotUsed(curEntry) && curEntry > 0) {
+			--curEntry;
+		}
+	}
+
+	public boolean hasNext() {
+		if (nextToReturn != null)
+			return true;
+
+		try {
+			if(childId == null || key == null || recordId == null) {
+				childId = p.getChildId(curEntry);
+				key = p.getKey(curEntry);
+				recordId = new RecordId(p.pid, curEntry);
+				if(childId == null || key == null) {
+					return false;
+				}
+			}
+			while (curEntry > 0) {
+				int entry = --curEntry;
+				BTreePageId nextChildId = p.getChildId(entry);
+				if(nextChildId != null) {
+					nextToReturn = new BTreeEntry(key, nextChildId, childId);
+					nextToReturn.setRecordId(recordId);
+					childId = nextChildId;
+					key = p.getKey(entry);
+					recordId = new RecordId(p.pid, entry);
+					return true;
+				}
+			}
+			return false;
+		} catch(NoSuchElementException e) {
+			return false;
+		}
+	}
+
+	public BTreeEntry next() {
+		BTreeEntry next = nextToReturn;
+
+		if (next == null) {
+			if (hasNext()) {
+				next = nextToReturn;
+				nextToReturn = null;
+				return next;
+			} else
+				throw new NoSuchElementException();
+		} else {
+			nextToReturn = null;
+			return next;
+		}
+	}
+
+	public void remove() {
+		throw new UnsupportedOperationException();
+	}
+}
+
diff -ruN lab1/src/java/simpledb/BTreeLeafPage.java lab3/src/java/simpledb/BTreeLeafPage.java
--- lab1/src/java/simpledb/BTreeLeafPage.java	1969-12-31 18:00:00.000000000 -0600
+++ lab3/src/java/simpledb/BTreeLeafPage.java	2016-11-02 22:06:55.000000000 -0500
@@ -0,0 +1,616 @@
+package simpledb;
+
+import java.util.*;
+import java.io.*;
+
+/**
+ * Each instance of BTreeLeafPage stores data for one page of a BTreeFile and 
+ * implements the Page interface that is used by BufferPool.
+ *
+ * @see BTreeFile
+ * @see BufferPool
+ *
+ */
+public class BTreeLeafPage extends BTreePage {
+	private final byte header[];
+	private final Tuple tuples[];
+	private final int numSlots;
+	
+	private int leftSibling; // leaf node or 0
+	private int rightSibling; // leaf node or 0
+
+	public void checkRep(int fieldid, Field lowerBound, Field upperBound, boolean checkoccupancy, int depth) {
+		Field prev = lowerBound;
+		assert(this.getId().pgcateg() == BTreePageId.LEAF);
+
+		Iterator<Tuple> it = this.iterator();
+		while (it.hasNext()) {
+			Tuple t = it.next();
+			assert(null == prev || prev.compare(Predicate.Op.LESS_THAN_OR_EQ, t.getField(fieldid)));
+			prev = t.getField(fieldid);
+			assert(t.getRecordId().getPageId().equals(this.getId()));
+		}
+
+		if (null != upperBound && null != prev){
+			assert(prev.compare(Predicate.Op.LESS_THAN_OR_EQ, upperBound));
+		}
+
+		if (checkoccupancy && depth > 0) {
+			assert(getNumTuples() >= getMaxTuples()/2);
+		}
+	}
+
+	/**
+	 * Create a BTreeLeafPage from a set of bytes of data read from disk.
+	 * The format of a BTreeLeafPage is a set of header bytes indicating
+	 * the slots of the page that are in use, and some number of tuple slots, 
+	 * as well as some extra bytes for the parent and sibling pointers.
+	 *  Specifically, the number of tuples is equal to: <p>
+	 *          floor((BufferPool.getPageSize()*8 - extra bytes*8) / (tuple size * 8 + 1))
+	 * <p> where tuple size is the size of tuples in this
+	 * database table, which can be determined via {@link Catalog#getTupleDesc}.
+	 * The number of 8-bit header words is equal to:
+	 * <p>
+	 *      ceiling(no. tuple slots / 8)
+	 * <p>
+	 * @see Database#getCatalog
+	 * @see Catalog#getTupleDesc
+	 * @see BufferPool#getPageSize()
+	 * 
+	 * @param id - the id of this page
+	 * @param data - the raw data of this page
+	 * @param key - the field which the index is keyed on
+	 */
+	public BTreeLeafPage(BTreePageId id, byte[] data, int key) throws IOException {
+		super(id, key);
+		this.numSlots = getMaxTuples();
+		DataInputStream dis = new DataInputStream(new ByteArrayInputStream(data));
+
+		// Read the parent and sibling pointers
+		try {
+			Field f = Type.INT_TYPE.parse(dis);
+			this.parent = ((IntField) f).getValue();
+		} catch (java.text.ParseException e) {
+			e.printStackTrace();
+		}
+
+		try {
+			Field f = Type.INT_TYPE.parse(dis);
+			this.leftSibling = ((IntField) f).getValue();
+		} catch (java.text.ParseException e) {
+			e.printStackTrace();
+		}
+
+		try {
+			Field f = Type.INT_TYPE.parse(dis);
+			this.rightSibling = ((IntField) f).getValue();
+		} catch (java.text.ParseException e) {
+			e.printStackTrace();
+		}
+
+		// allocate and read the header slots of this page
+		header = new byte[getHeaderSize()];
+		for (int i=0; i<header.length; i++)
+			header[i] = dis.readByte();
+
+		tuples = new Tuple[numSlots];
+		try{
+			// allocate and read the actual records of this page
+			for (int i=0; i<tuples.length; i++)
+				tuples[i] = readNextTuple(dis,i);
+		}catch(NoSuchElementException e){
+			e.printStackTrace();
+		}
+		dis.close();
+
+		setBeforeImage();
+	}
+
+	/** 
+	 * Retrieve the maximum number of tuples this page can hold.
+	 */
+	public int getMaxTuples() {        
+		int bitsPerTupleIncludingHeader = td.getSize() * 8 + 1;
+		// extraBits are: left sibling pointer, right sibling pointer, parent pointer
+		int extraBits = 3 * INDEX_SIZE * 8; 
+		int tuplesPerPage = (BufferPool.getPageSize()*8 - extraBits) / bitsPerTupleIncludingHeader; //round down
+		return tuplesPerPage;
+	}
+
+	/**
+	 * Computes the number of bytes in the header of a page in a BTreeFile with each tuple occupying tupleSize bytes
+	 */
+	private int getHeaderSize() {        
+		int tuplesPerPage = getMaxTuples();
+		int hb = (tuplesPerPage / 8);
+		if (hb * 8 < tuplesPerPage) hb++;
+
+		return hb;
+	}
+
+	/** Return a view of this page before it was modified
+        -- used by recovery */
+	public BTreeLeafPage getBeforeImage(){
+		try {
+			byte[] oldDataRef = null;
+			synchronized(oldDataLock)
+			{
+				oldDataRef = oldData;
+			}
+			return new BTreeLeafPage(pid,oldDataRef,keyField);
+		} catch (IOException e) {
+			e.printStackTrace();
+			//should never happen -- we parsed it OK before!
+			System.exit(1);
+		}
+		return null;
+	}
+
+	public void setBeforeImage() {
+		synchronized(oldDataLock)
+		{
+			oldData = getPageData().clone();
+		}
+	}
+
+	/**
+	 * Read tuples from the source file.
+	 */
+	private Tuple readNextTuple(DataInputStream dis, int slotId) throws NoSuchElementException {
+		// if associated bit is not set, read forward to the next tuple, and
+		// return null.
+		if (!isSlotUsed(slotId)) {
+			for (int i=0; i<td.getSize(); i++) {
+				try {
+					dis.readByte();
+				} catch (IOException e) {
+					throw new NoSuchElementException("error reading empty tuple");
+				}
+			}
+			return null;
+		}
+
+		// read fields in the tuple
+		Tuple t = new Tuple(td);
+		RecordId rid = new RecordId(pid, slotId);
+		t.setRecordId(rid);
+		try {
+			for (int j=0; j<td.numFields(); j++) {
+				Field f = td.getFieldType(j).parse(dis);
+				t.setField(j, f);
+			}
+		} catch (java.text.ParseException e) {
+			e.printStackTrace();
+			throw new NoSuchElementException("parsing error!");
+		}
+
+		return t;
+	}
+
+	/**
+	 * Generates a byte array representing the contents of this page.
+	 * Used to serialize this page to disk.
+	 * <p>
+	 * The invariant here is that it should be possible to pass the byte
+	 * array generated by getPageData to the BTreeLeafPage constructor and
+	 * have it produce an identical BTreeLeafPage object.
+	 *
+	 * @see #BTreeLeafPage
+	 * @return A byte array corresponding to the bytes of this page.
+	 */
+	public byte[] getPageData() {
+		int len = BufferPool.getPageSize();
+		ByteArrayOutputStream baos = new ByteArrayOutputStream(len);
+		DataOutputStream dos = new DataOutputStream(baos);
+
+		// write out the parent and sibling pointers
+		try {
+			dos.writeInt(parent);
+
+		} catch (IOException e) {
+			e.printStackTrace();
+		}
+		try {
+			dos.writeInt(leftSibling);
+
+		} catch (IOException e) {
+			e.printStackTrace();
+		}
+		try {
+			dos.writeInt(rightSibling);
+
+		} catch (IOException e) {
+			e.printStackTrace();
+		}
+
+		// create the header of the page
+		for (int i=0; i<header.length; i++) {
+			try {
+				dos.writeByte(header[i]);
+			} catch (IOException e) {
+				// this really shouldn't happen
+				e.printStackTrace();
+			}
+		}
+
+		// create the tuples
+		for (int i=0; i<tuples.length; i++) {
+
+			// empty slot
+			if (!isSlotUsed(i)) {
+				for (int j=0; j<td.getSize(); j++) {
+					try {
+						dos.writeByte(0);
+					} catch (IOException e) {
+						e.printStackTrace();
+					}
+
+				}
+				continue;
+			}
+
+			// non-empty slot
+			for (int j=0; j<td.numFields(); j++) {
+				Field f = tuples[i].getField(j);
+				try {
+					f.serialize(dos);
+
+				} catch (IOException e) {
+					e.printStackTrace();
+				}
+			}
+		}
+
+		// padding
+		int zerolen = BufferPool.getPageSize() - (header.length + td.getSize() * tuples.length + 3 * INDEX_SIZE); //- numSlots * td.getSize();
+		byte[] zeroes = new byte[zerolen];
+		try {
+			dos.write(zeroes, 0, zerolen);
+		} catch (IOException e) {
+			e.printStackTrace();
+		}
+
+		try {
+			dos.flush();
+		} catch (IOException e) {
+			e.printStackTrace();
+		}
+
+		return baos.toByteArray();
+	}
+
+	/**
+	 * Delete the specified tuple from the page;  the tuple should be updated to reflect
+	 *   that it is no longer stored on any page.
+	 * @throws DbException if this tuple is not on this page, or tuple slot is
+	 *         already empty.
+	 * @param t The tuple to delete
+	 */
+	public void deleteTuple(Tuple t) throws DbException {
+		RecordId rid = t.getRecordId();
+		if(rid == null)
+			throw new DbException("tried to delete tuple with null rid");
+		if((rid.getPageId().pageNumber() != pid.pageNumber()) || (rid.getPageId().getTableId() != pid.getTableId()))
+			throw new DbException("tried to delete tuple on invalid page or table");
+		if (!isSlotUsed(rid.tupleno()))
+			throw new DbException("tried to delete null tuple.");
+		markSlotUsed(rid.tupleno(), false);
+		t.setRecordId(null);
+	}
+
+	/**
+	 * Adds the specified tuple to the page such that all records remain in sorted order;  
+	 * the tuple should be updated to reflect
+	 *  that it is now stored on this page.
+	 * @throws DbException if the page is full (no empty slots) or tupledesc
+	 *         is mismatch.
+	 * @param t The tuple to add.
+	 */
+	public void insertTuple(Tuple t) throws DbException {
+		if (!t.getTupleDesc().equals(td))
+			throw new DbException("type mismatch, in addTuple");
+
+		// find the first empty slot 
+		int emptySlot = -1;
+		for (int i=0; i<numSlots; i++) {
+			if (!isSlotUsed(i)) {
+				emptySlot = i;
+				break;
+			}
+		}
+
+		if (emptySlot == -1)
+			throw new DbException("called addTuple on page with no empty slots.");
+
+		// find the last key less than or equal to the key being inserted
+		int lessOrEqKey = -1;
+		Field key = t.getField(keyField);
+		for (int i=0; i<numSlots; i++) {
+			if(isSlotUsed(i)) {
+				if(tuples[i].getField(keyField).compare(Predicate.Op.LESS_THAN_OR_EQ, key))
+					lessOrEqKey = i;
+				else
+					break;	
+			}
+		}
+
+		// shift records back or forward to fill empty slot and make room for new record
+		// while keeping records in sorted order
+		int goodSlot = -1;
+		if(emptySlot < lessOrEqKey) {
+			for(int i = emptySlot; i < lessOrEqKey; i++) {
+				moveRecord(i+1, i);
+			}
+			goodSlot = lessOrEqKey;
+		}
+		else {
+			for(int i = emptySlot; i > lessOrEqKey + 1; i--) {
+				moveRecord(i-1, i);
+			}
+			goodSlot = lessOrEqKey + 1;
+		}
+
+		// insert new record into the correct spot in sorted order
+		markSlotUsed(goodSlot, true);
+		Debug.log(1, "BTreeLeafPage.insertTuple: new tuple, tableId = %d pageId = %d slotId = %d", pid.getTableId(), pid.pageNumber(), goodSlot);
+		RecordId rid = new RecordId(pid, goodSlot);
+		t.setRecordId(rid);
+		tuples[goodSlot] = t;
+	}
+
+	/**
+	 * Move a record from one slot to another slot, and update the corresponding
+	 * headers and RecordId
+	 */
+	private void moveRecord(int from, int to) {
+		if(!isSlotUsed(to) && isSlotUsed(from)) {
+			markSlotUsed(to, true);
+			RecordId rid = new RecordId(pid, to);
+			tuples[to] = tuples[from];
+			tuples[to].setRecordId(rid);
+			markSlotUsed(from, false);
+		}
+	}
+
+	/**
+	 * Get the id of the left sibling of this page
+	 * @return the id of the left sibling
+	 */
+	public BTreePageId getLeftSiblingId() {
+		if(leftSibling == 0) {
+			return null;
+		}
+		return new BTreePageId(pid.getTableId(), leftSibling, BTreePageId.LEAF);
+	}
+
+	/**
+	 * Get the id of the right sibling of this page
+	 * @return the id of the right sibling
+	 */
+	public BTreePageId getRightSiblingId() {
+		if(rightSibling == 0) {
+			return null;
+		}
+		return new BTreePageId(pid.getTableId(), rightSibling, BTreePageId.LEAF);
+	}
+
+	/**
+	 * Set the left sibling id of this page
+	 * @param id - the new left sibling id
+	 * @throws DbException if the id is not valid
+	 */
+	public void setLeftSiblingId(BTreePageId id) throws DbException {
+		if(id == null) {
+			leftSibling = 0;
+		}
+		else {
+			if(id.getTableId() != pid.getTableId()) {
+				throw new DbException("table id mismatch in setLeftSiblingId");
+			}
+			if(id.pgcateg() != BTreePageId.LEAF) {
+				throw new DbException("leftSibling must be a leaf node");
+			}
+			leftSibling = id.pageNumber();
+		}
+	}
+
+	/**
+	 * Set the right sibling id of this page
+	 * @param id - the new right sibling id
+	 * @throws DbException if the id is not valid
+	 */
+	public void setRightSiblingId(BTreePageId id) throws DbException {
+		if(id == null) {
+			rightSibling = 0;
+		}
+		else {
+			if(id.getTableId() != pid.getTableId()) {
+				throw new DbException("table id mismatch in setRightSiblingId");
+			}
+			if(id.pgcateg() != BTreePageId.LEAF) {
+				throw new DbException("rightSibling must be a leaf node");
+			}
+			rightSibling = id.pageNumber();
+		}
+	}
+
+	/**
+	 * Returns the number of tuples currently stored on this page
+	 */
+	public int getNumTuples() {
+		return numSlots - getNumEmptySlots();
+	}
+
+	/**
+	 * Returns the number of empty slots on this page.
+	 */
+	public int getNumEmptySlots() {
+		int cnt = 0;
+		for(int i=0; i<numSlots; i++)
+			if(!isSlotUsed(i))
+				cnt++;
+		return cnt;
+	}
+
+	/**
+	 * Returns true if associated slot on this page is filled.
+	 */
+	public boolean isSlotUsed(int i) {
+		int headerbit = i % 8;
+		int headerbyte = (i - headerbit) / 8;
+		return (header[headerbyte] & (1 << headerbit)) != 0;
+	}
+
+	/**
+	 * Abstraction to fill or clear a slot on this page.
+	 */
+	private void markSlotUsed(int i, boolean value) {
+		int headerbit = i % 8;
+		int headerbyte = (i - headerbit) / 8;
+
+		Debug.log(1, "BTreeLeafPage.setSlot: setting slot %d to %b", i, value);
+		if(value)
+			header[headerbyte] |= 1 << headerbit;
+		else
+			header[headerbyte] &= (0xFF ^ (1 << headerbit));
+	}
+
+	/**
+	 * @return an iterator over all tuples on this page (calling remove on this iterator throws an UnsupportedOperationException)
+	 * (note that this iterator shouldn't return tuples in empty slots!)
+	 */
+	public Iterator<Tuple> iterator() {
+		return new BTreeLeafPageIterator(this);
+	}
+
+	/**
+	 * @return a reverse iterator over all tuples on this page (calling remove on this iterator throws an UnsupportedOperationException)
+	 * (note that this iterator shouldn't return tuples in empty slots!)
+	 */
+	public Iterator<Tuple> reverseIterator() {
+		return new BTreeLeafPageReverseIterator(this);
+	}
+
+	/**
+	 * protected method used by the iterator to get the ith tuple out of this page
+	 * @param i - the index of the tuple
+	 * @return the ith tuple in the page
+	 * @throws NoSuchElementException
+	 */
+	Tuple getTuple(int i) throws NoSuchElementException {
+
+		if (i >= tuples.length)
+			throw new NoSuchElementException();
+
+		try {
+			if(!isSlotUsed(i)) {
+				Debug.log(1, "BTreeLeafPage.getTuple: slot %d in %d:%d is not used", i, pid.getTableId(), pid.pageNumber());
+				return null;
+			}
+
+			Debug.log(1, "BTreeLeafPage.getTuple: returning tuple %d", i);
+			return tuples[i];
+
+		} catch (ArrayIndexOutOfBoundsException e) {
+			throw new NoSuchElementException();
+		}
+	}
+}
+
+/**
+ * Helper class that implements the Java Iterator for tuples on a BTreeLeafPage.
+ */
+class BTreeLeafPageIterator implements Iterator<Tuple> {
+	int curTuple = 0;
+	Tuple nextToReturn = null;
+	BTreeLeafPage p;
+
+	public BTreeLeafPageIterator(BTreeLeafPage p) {
+		this.p = p;
+	}
+
+	public boolean hasNext() {
+		if (nextToReturn != null)
+			return true;
+
+		try {
+			while (true) {
+				nextToReturn = p.getTuple(curTuple++);
+				if(nextToReturn != null)
+					return true;
+			}
+		} catch(NoSuchElementException e) {
+			return false;
+		}
+	}
+
+	public Tuple next() {
+		Tuple next = nextToReturn;
+
+		if (next == null) {
+			if (hasNext()) {
+				next = nextToReturn;
+				nextToReturn = null;
+				return next;
+			} else
+				throw new NoSuchElementException();
+		} else {
+			nextToReturn = null;
+			return next;
+		}
+	}
+
+	public void remove() {
+		throw new UnsupportedOperationException();
+	}
+}
+
+/**
+ * Helper class that implements the Java Iterator for tuples on a BTreeLeafPage in reverse.
+ */
+class BTreeLeafPageReverseIterator implements Iterator<Tuple> {
+	int curTuple;
+	Tuple nextToReturn = null;
+	BTreeLeafPage p;
+
+	public BTreeLeafPageReverseIterator(BTreeLeafPage p) {
+		this.p = p;
+		this.curTuple = p.getMaxTuples() - 1;
+	}
+
+	public boolean hasNext() {
+		if (nextToReturn != null)
+			return true;
+
+		try {
+			while (curTuple >= 0) {
+				nextToReturn = p.getTuple(curTuple--);
+				if(nextToReturn != null)
+					return true;
+			}
+			return false;
+		} catch(NoSuchElementException e) {
+			return false;
+		}
+	}
+
+	public Tuple next() {
+		Tuple next = nextToReturn;
+
+		if (next == null) {
+			if (hasNext()) {
+				next = nextToReturn;
+				nextToReturn = null;
+				return next;
+			} else
+				throw new NoSuchElementException();
+		} else {
+			nextToReturn = null;
+			return next;
+		}
+	}
+
+	public void remove() {
+		throw new UnsupportedOperationException();
+	}
+}
diff -ruN lab1/src/java/simpledb/BTreePage.java lab3/src/java/simpledb/BTreePage.java
--- lab1/src/java/simpledb/BTreePage.java	1969-12-31 18:00:00.000000000 -0600
+++ lab3/src/java/simpledb/BTreePage.java	2016-11-02 22:06:55.000000000 -0500
@@ -0,0 +1,145 @@
+package simpledb;
+
+import java.util.*;
+import java.io.*;
+
+import simpledb.Predicate.Op;
+
+/**
+ * Each instance of BTreeInternalPage stores data for one page of a BTreeFile and 
+ * implements the Page interface that is used by BufferPool.
+ *
+ * @see BTreeFile
+ * @see BufferPool
+ *
+ */
+public abstract class BTreePage implements Page {
+	protected volatile boolean dirty = false;
+	protected volatile TransactionId dirtier = null;
+
+	protected final static int INDEX_SIZE = Type.INT_TYPE.getLen();
+
+	protected final BTreePageId pid;
+	protected final TupleDesc td;
+	protected final int keyField;
+
+	protected int parent; // parent is always internal node or 0 for root node
+	protected byte[] oldData;
+	protected final Byte oldDataLock=new Byte((byte)0);
+
+	/**
+	 * Create a BTreeInternalPage from a set of bytes of data read from disk.
+	 * The format of a BTreeInternalPage is a set of header bytes indicating
+	 * the slots of the page that are in use, some number of entry slots, and extra
+	 * bytes for the parent pointer, one extra child pointer (a node with m entries 
+	 * has m+1 pointers to children), and the category of all child pages (either 
+	 * leaf or internal).
+	 *  Specifically, the number of entries is equal to: <p>
+	 *          floor((BufferPool.getPageSize()*8 - extra bytes*8) / (entry size * 8 + 1))
+	 * <p> where entry size is the size of entries in this index node
+	 * (key + child pointer), which can be determined via the key field and 
+	 * {@link Catalog#getTupleDesc}.
+	 * The number of 8-bit header words is equal to:
+	 * <p>
+	 *      ceiling((no. entry slots + 1) / 8)
+	 * <p>
+	 * @see Database#getCatalog
+	 * @see Catalog#getTupleDesc
+	 * @see BufferPool#getPageSize()
+	 * 
+	 * @param id - the id of this page
+	 * @param data - the raw data of this page
+	 * @param key - the field which the index is keyed on
+	 */
+	public BTreePage(BTreePageId id, int key) throws IOException {
+		this.pid = id;
+		this.keyField = key;
+		this.td = Database.getCatalog().getTupleDesc(id.getTableId());
+	}
+
+	/**
+	 * @return the PageId associated with this page.
+	 */
+	public BTreePageId getId() {
+		return pid;
+	}
+
+	/**
+	 * Static method to generate a byte array corresponding to an empty
+	 * BTreePage.
+	 * Used to add new, empty pages to the file. Passing the results of
+	 * this method to the BTreeInternalPage or BTreeLeafPage constructor will create a BTreePage with
+	 * no valid entries in it.
+	 *
+	 * @return The returned ByteArray.
+	 */
+	public static byte[] createEmptyPageData() {
+		int len = BufferPool.getPageSize();
+		return new byte[len]; //all 0
+	}
+
+	/**
+	 * Get the parent id of this page
+	 * @return the parent id
+	 */
+	public BTreePageId getParentId() {
+		if(parent == 0) {
+			return BTreeRootPtrPage.getId(pid.getTableId());
+		}
+		return new BTreePageId(pid.getTableId(), parent, BTreePageId.INTERNAL);
+	}
+
+	/**
+	 * Set the parent id
+	 * @param id - the id of the parent of this page
+	 * @throws DbException if the id is not valid
+	 */
+	public void setParentId(BTreePageId id) throws DbException {
+		if(id == null) {
+			throw new DbException("parent id must not be null");
+		}
+		if(id.getTableId() != pid.getTableId()) {
+			throw new DbException("table id mismatch in setParentId");
+		}
+		if(id.pgcateg() != BTreePageId.INTERNAL && id.pgcateg() != BTreePageId.ROOT_PTR) {
+			throw new DbException("parent must be an internal node or root pointer");
+		}
+		if(id.pgcateg() == BTreePageId.ROOT_PTR) {
+			parent = 0;
+		}
+		else {
+			parent = id.pageNumber();
+		}
+	}
+
+	/**
+	 * Marks this page as dirty/not dirty and record that transaction
+	 * that did the dirtying
+	 */
+	public void markDirty(boolean dirty, TransactionId tid) {
+		this.dirty = dirty;
+		if (dirty) this.dirtier = tid;
+	}
+
+	/**
+	 * Returns the tid of the transaction that last dirtied this page, or null if the page is not dirty
+	 */
+	public TransactionId isDirty() {
+		if (this.dirty)
+			return this.dirtier;
+		else
+			return null;
+	}
+
+	/**
+	 * Returns the number of empty slots on this page.
+	 */
+	public abstract int getNumEmptySlots();
+	
+	/**
+	 * Returns true if associated slot on this page is filled.
+	 */
+	public abstract boolean isSlotUsed(int i);
+
+}
+
diff -ruN lab1/src/java/simpledb/BTreePageId.java lab3/src/java/simpledb/BTreePageId.java
--- lab1/src/java/simpledb/BTreePageId.java	1969-12-31 18:00:00.000000000 -0600
+++ lab3/src/java/simpledb/BTreePageId.java	2016-11-02 22:06:55.000000000 -0500
@@ -0,0 +1,117 @@
+package simpledb;
+
+/** Unique identifier for BTreeInternalPage, BTreeLeafPage, BTreeHeaderPage
+ *  and BTreeRootPtrPage objects. 
+ */
+public class BTreePageId implements PageId {
+
+	public final static int ROOT_PTR = 0;
+	public final static int INTERNAL = 1;
+	public final static int LEAF = 2;
+	public final static int HEADER = 3;
+
+	private final int tableId;
+	private final int pgNo;
+	private int pgcateg;
+
+	static public String categToString(int categ) {
+		switch (categ) {
+			case ROOT_PTR:
+				return "ROOT_PTR";
+			case INTERNAL:
+				return "INTERNAL";
+			case LEAF:
+				return "LEAF";
+			case HEADER:
+				return "HEADER";
+			default:
+				throw new IllegalArgumentException("categ");
+		}
+	}
+
+	/**
+	 * Constructor. Create a page id structure for a specific page of a
+	 * specific table.
+	 *
+	 * @param tableId The table that is being referenced
+	 * @param pgNo The page number in that table.
+	 * @param pgcateg which kind of page it is
+	 */
+	public BTreePageId(int tableId, int pgNo, int pgcateg) {
+		this.tableId = tableId;
+		this.pgNo = pgNo;
+		this.pgcateg = pgcateg;
+	}
+
+	/** @return the table associated with this PageId */
+	public int getTableId() {
+		return tableId;
+	}
+
+	/**
+	 * @return the page number in the table getTableId() associated with
+	 *   this PageId
+	 */
+	public int pageNumber() {
+		return pgNo;
+	}
+
+	/**
+	 * @return the category of this page
+	 */
+	public int pgcateg() {
+		return pgcateg;
+	}
+
+	/**
+	 * @return a hash code for this page, represented by the concatenation of
+	 *   the table number, page number, and pgcateg (needed if a PageId is used as a
+	 *   key in a hash table in the BufferPool, for example.)
+	 * @see BufferPool
+	 */
+	public int hashCode() {
+		int code = (tableId << 16) + (pgNo << 2) + pgcateg;
+		return code;
+	}
+
+	/**
+	 * Compares one PageId to another.
+	 *
+	 * @param o The object to compare against (must be a PageId)
+	 * @return true if the objects are equal (e.g., page numbers, table
+	 *   ids and pgcateg are the same)
+	 */
+	public boolean equals(Object o) {
+		if (!(o instanceof BTreePageId))
+			return false;
+		BTreePageId p = (BTreePageId)o;
+		return tableId == p.tableId && pgNo == p.pgNo && pgcateg == p.pgcateg;
+	}
+
+	public String toString() {
+		StringBuilder sb = new StringBuilder();
+		sb.append("(tableId: ").append(tableId)
+				.append(", pgNo: ").append(pgNo)
+				.append(", pgcateg: ").append(categToString(pgcateg))
+				.append(")");
+
+		return sb.toString();
+	}
+
+	/**
+	 *  Return a representation of this object as an array of
+	 *  integers, for writing to disk.  Size of returned array must contain
+	 *  number of integers that corresponds to number of args to one of the
+	 *  constructors.
+	 */
+	public int[] serialize() {
+		int data[] = new int[3];
+
+		data[0] = tableId;
+		data[1] = pgNo;
+		data[2] = pgcateg;
+
+		return data;
+	}
+
+}
diff -ruN lab1/src/java/simpledb/BTreeRootPtrPage.java lab3/src/java/simpledb/BTreeRootPtrPage.java
--- lab1/src/java/simpledb/BTreeRootPtrPage.java	1969-12-31 18:00:00.000000000 -0600
+++ lab3/src/java/simpledb/BTreeRootPtrPage.java	2016-11-02 22:06:55.000000000 -0500
@@ -0,0 +1,226 @@
+package simpledb;
+
+import java.io.*;
+
+/**
+ * BTreeRootPtrPage stores the pointer to the root node used in the B+ tree and
+ * implements Page Interface that is used by BufferPool
+ *
+ * @see BufferPool
+ */
+public class BTreeRootPtrPage implements Page {
+	// size of this page
+	public final static int PAGE_SIZE = 9;
+
+	private boolean dirty = false;
+	private TransactionId dirtier = null;
+
+	private BTreePageId pid;
+	private DataInputStream dis;
+
+	private int root; 
+	private int rootCategory;
+	private int header;
+
+	private byte[] oldData;
+
+	/**
+	 * Constructor.
+	 * Construct the BTreeRootPtrPage from a set of bytes of data read from
+	 * disk.
+	 * The format of an BTreeRootPtrPage is an integer for the page number
+	 * of the root node, followed by a byte to encode the category of the root page
+	 * (either leaf or internal), followed by an integer for the page number
+	 * of the first header page
+	 */
+	public BTreeRootPtrPage(BTreePageId id, byte[] data) throws IOException {
+		this.pid = id;
+		this.dis = new DataInputStream(new ByteArrayInputStream(data));
+
+		// read in the root pointer
+		root = dis.readInt();
+		rootCategory = (int) dis.readByte();
+
+		// read in the header pointer
+		header = dis.readInt();
+		
+		setBeforeImage();
+	}
+
+	public void setBeforeImage() {
+		oldData = getPageData().clone();
+	}
+
+	/**
+	 * @return the PageId associated with this page.
+	 */
+	public BTreePageId getId() {
+		return pid;
+	}
+
+	/**
+	 * There is only one instance of a BTreeRootPtrPage per table. This static 
+	 * method is separate from getId() in order to maintain the Page interface
+	 * @param tableid - the tableid of this table
+	 * @return the root pointer page id for the given table
+	 */
+	public static BTreePageId getId(int tableid) {
+		return new BTreePageId(tableid, 0, BTreePageId.ROOT_PTR);
+	}
+
+	/**
+	 * Generates a byte array representing the contents of this root pointer page.
+	 * Used to serialize this root pointer page to disk.
+	 * The invariant here is that it should be possible to pass the byte array
+	 * generated by getPageData to the BTreeRootPtrPage constructor and have it
+	 * produce an identical BTreeRootPtrPage object.
+	 *
+	 * @return A byte array corresponding to the bytes of this root pointer page.
+	 */
+	public byte[] getPageData(){
+		int len = PAGE_SIZE;
+		ByteArrayOutputStream baos = new ByteArrayOutputStream(len);
+		DataOutputStream dos = new DataOutputStream(baos);
+
+		// write out the root pointer (page number of the root page)
+		try{
+			dos.writeInt(root);
+		}catch(IOException e){
+			e.printStackTrace();
+		}
+
+		// write out the category of the root page (leaf or internal)
+		try{
+			dos.writeByte((byte) rootCategory);
+		}catch(IOException e){
+			e.printStackTrace();
+		}
+
+		// write out the header pointer (page number of the first header page)
+		try{
+			dos.writeInt(header);
+		}catch(IOException e){
+			e.printStackTrace();
+		}
+
+		try {
+			dos.flush();
+		}catch(IOException e) {
+			e.printStackTrace();
+		}
+
+		return baos.toByteArray();
+	}
+
+	/**
+	 * Static method to generate a byte array corresponding to an empty
+	 * BTreeRootPtrPage.
+	 * Used to add new, empty pages to the file. Passing the results of
+	 * this method to the BTreeRootPtrPage constructor will create a BTreeRootPtrPage with
+	 * no valid entries in it.
+	 *
+	 * @return The returned ByteArray.
+	 */
+	public static byte[] createEmptyPageData() {
+		int len = PAGE_SIZE;
+		return new byte[len]; //all 0
+	}
+
+	public void markDirty(boolean dirty, TransactionId tid){
+		this.dirty = dirty;
+		if (dirty) this.dirtier = tid;
+	}
+
+	public TransactionId isDirty() {
+		if (this.dirty)
+			return this.dirtier;
+		else
+			return null;
+	}
+
+	/** Return a view of this page before it was modified
+        -- used by recovery */
+	public BTreeRootPtrPage getBeforeImage(){
+		try {
+			return new BTreeRootPtrPage(pid,oldData);
+		} catch (IOException e) {
+			e.printStackTrace();
+			//should never happen -- we parsed it OK before!
+			System.exit(1);
+		}
+		return null;
+	}
+
+	/**
+	 * Get the id of the root page in this B+ tree
+	 * @return the id of the root page
+	 */
+	public BTreePageId getRootId() {
+		if(root == 0) {
+			return null;
+		}
+		return new BTreePageId(pid.getTableId(), root, rootCategory);
+	}
+
+	/**
+	 * Set the id of the root page in this B+ tree
+	 * @param id - the id of the root page
+	 * @throws DbException if the id is invalid
+	 */
+	public void setRootId(BTreePageId id) throws DbException {
+		if(id == null) {
+			root = 0;
+		}
+		else {
+			if(id.getTableId() != pid.getTableId()) {
+				throw new DbException("table id mismatch in setRootId");
+			}
+			if(id.pgcateg() != BTreePageId.INTERNAL && id.pgcateg() != BTreePageId.LEAF) {
+				throw new DbException("root must be an internal node or leaf node");
+			}
+			root = id.pageNumber();
+			rootCategory = id.pgcateg();
+		}
+	}
+
+	/**
+	 * Get the id of the first header page, or null if none exists
+	 * @return the id of the first header page
+	 */
+	public BTreePageId getHeaderId() {
+		if(header == 0) {
+			return null;
+		}
+		return new BTreePageId(pid.getTableId(), header, BTreePageId.HEADER);
+	}
+
+	/**
+	 * Set the page id of the first header page
+	 * @param id - the id of the first header page
+	 * @throws DbException if the id is invalid
+	 */
+	public void setHeaderId(BTreePageId id) throws DbException {
+		if(id == null) {
+			header = 0;
+		}
+		else {
+			if(id.getTableId() != pid.getTableId()) {
+				throw new DbException("table id mismatch in setHeaderId");
+			}
+			if(id.pgcateg() != BTreePageId.HEADER) {
+				throw new DbException("header must be of type BTreePageId.HEADER");
+			}
+			header = id.pageNumber();
+		}
+	}
+
+	/**
+	 * Get the page size of root pointer pages
+	 * @return the page size
+	 */
+	public static int getPageSize() {
+		return PAGE_SIZE;
+	}
+
+}
+
diff -ruN lab1/src/java/simpledb/BTreeScan.java lab3/src/java/simpledb/BTreeScan.java
--- lab1/src/java/simpledb/BTreeScan.java	1969-12-31 18:00:00.000000000 -0600
+++ lab3/src/java/simpledb/BTreeScan.java	2016-11-02 22:06:55.000000000 -0500
@@ -0,0 +1,147 @@
+package simpledb;
+
+import java.util.*;
+
+/**
+ * BTreeScan is an operator which reads tuples in sorted order 
+ * according to a predicate
+ */
+public class BTreeScan implements DbIterator {
+
+	private static final long serialVersionUID = 1L;
+
+	private boolean isOpen = false;
+	private TransactionId tid;
+	private TupleDesc myTd;
+	private IndexPredicate ipred = null;
+	private transient DbFileIterator it;
+	private String tablename;
+	private String alias;
+
+	/**
+	 * Creates a B+ tree scan over the specified table as a part of the
+	 * specified transaction.
+	 * 
+	 * @param tid
+	 *            The transaction this scan is running as a part of.
+	 * @param tableid
+	 *            the table to scan.
+	 * @param tableAlias
+	 *            the alias of this table (needed by the parser); the returned
+	 *            tupleDesc should have fields with name tableAlias.fieldName
+	 *            (note: this class is not responsible for handling a case where
+	 *            tableAlias or fieldName are null. It shouldn't crash if they
+	 *            are, but the resulting name can be null.fieldName,
+	 *            tableAlias.null, or null.null).
+	 * @param ipred
+	 * 			  The index predicate to match. If null, the scan will return all tuples
+	 *            in sorted order
+	 */
+	public BTreeScan(TransactionId tid, int tableid, String tableAlias, IndexPredicate ipred) {
+		this.tid = tid;
+		this.ipred = ipred;
+		reset(tableid,tableAlias);
+	}
+
+	/**
+	 * @return
+	 *       return the table name of the table the operator scans. This should
+	 *       be the actual name of the table in the catalog of the database
+	 * */
+	public String getTableName() {
+		return this.tablename;
+	}
+
+	/**
+	 * @return Return the alias of the table this operator scans. 
+	 * */
+	public String getAlias()
+	{
+		return this.alias;
+	}
+
+	/**
+	 * Reset the tableid, and tableAlias of this operator.
+	 * @param tableid
+	 *            the table to scan.
+	 * @param tableAlias
+	 *            the alias of this table (needed by the parser); the returned
+	 *            tupleDesc should have fields with name tableAlias.fieldName
+	 *            (note: this class is not responsible for handling a case where
+	 *            tableAlias or fieldName are null. It shouldn't crash if they
+	 *            are, but the resulting name can be null.fieldName,
+	 *            tableAlias.null, or null.null).
+	 */
+	public void reset(int tableid, String tableAlias) {
+		this.isOpen=false;
+		this.alias = tableAlias;
+		this.tablename = Database.getCatalog().getTableName(tableid);
+		if(ipred == null) {
+			this.it = Database.getCatalog().getDatabaseFile(tableid).iterator(tid);
+		}
+		else {
+			this.it = ((BTreeFile) Database.getCatalog().getDatabaseFile(tableid)).indexIterator(tid, ipred);
+		}
+		myTd = Database.getCatalog().getTupleDesc(tableid);
+		String[] newNames = new String[myTd.numFields()];
+		Type[] newTypes = new Type[myTd.numFields()];
+		for (int i = 0; i < myTd.numFields(); i++) {
+			String name = myTd.getFieldName(i);
+			Type t = myTd.getFieldType(i);
+
+			newNames[i] = tableAlias + "." + name;
+			newTypes[i] = t;
+		}
+		myTd = new TupleDesc(newTypes, newNames);
+	}
+
+	public BTreeScan(TransactionId tid, int tableid, IndexPredicate ipred) {
+		this(tid, tableid, Database.getCatalog().getTableName(tableid), ipred);
+	}
+
+	public void open() throws DbException, TransactionAbortedException {
+		if (isOpen)
+			throw new DbException("double open on one DbIterator.");
+
+		it.open();
+		isOpen = true;
+	}
+
+	/**
+	 * Returns the TupleDesc with field names from the underlying BTreeFile,
+	 * prefixed with the tableAlias string from the constructor. This prefix
+	 * becomes useful when joining tables containing a field(s) with the same
+	 * name.
+	 * 
+	 * @return the TupleDesc with field names from the underlying BTreeFile,
+	 *         prefixed with the tableAlias string from the constructor.
+	 */
+	public TupleDesc getTupleDesc() {
+		return myTd;
+	}
+
+	public boolean hasNext() throws TransactionAbortedException, DbException {
+		if (!isOpen)
+			throw new IllegalStateException("iterator is closed");
+		return it.hasNext();
+	}
+
+	public Tuple next() throws NoSuchElementException,
+	TransactionAbortedException, DbException {
+		if (!isOpen)
+			throw new IllegalStateException("iterator is closed");
+
+		return it.next();
+	}
+
+	public void close() {
+		it.close();
+		isOpen = false;
+	}
+
+	public void rewind() throws DbException, NoSuchElementException,
+	TransactionAbortedException {
+		close();
+		open();
+	}
+}
diff -ruN lab1/src/java/simpledb/BTreeUtility.java lab3/src/java/simpledb/BTreeUtility.java
--- lab1/src/java/simpledb/BTreeUtility.java	1969-12-31 18:00:00.000000000 -0600
+++ lab3/src/java/simpledb/BTreeUtility.java	2016-11-02 22:06:55.000000000 -0500
@@ -0,0 +1,848 @@
+package simpledb;
+
+import java.io.BufferedOutputStream;
+import java.io.File;
+import java.io.FileOutputStream;
+import java.io.IOException;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Collections;
+import java.util.Map;
+import java.util.Random;
+import java.util.UUID;
+import java.util.concurrent.BlockingQueue;
+
+import simpledb.Predicate.Op;
+
+/** Helper methods used for testing and implementing random features. */
+public class BTreeUtility {
+
+	public static final int MAX_RAND_VALUE = 1 << 16;
+
+	public static ArrayList<Integer> tupleToList(Tuple tuple) {
+        ArrayList<Integer> list = new ArrayList<Integer>();
+        for (int i = 0; i < tuple.getTupleDesc().numFields(); ++i) {
+            int value = ((IntField)tuple.getField(i)).getValue();
+            list.add(value);
+        }
+        return list;
+    }
+	
+	/**
+	 * @return a Tuple with a single IntField with value n and with
+	 *   RecordId(BTreePageId(1,2, BTreePageId.LEAF), 3)
+	 */
+	public static Tuple getBTreeTuple(int n) {
+		Tuple tup = new Tuple(Utility.getTupleDesc(1));
+		tup.setRecordId(new RecordId(new BTreePageId(1, 2, BTreePageId.LEAF), 3));
+		tup.setField(0, new IntField(n));
+		return tup;
+	}
+
+	/**
+	 * @return a Tuple with an IntField for every element of tupdata
+	 *   and RecordId(BTreePageId(1, 2, BTreePageId.LEAF), 3)
+	 */
+	public static Tuple getBTreeTuple(int[] tupdata) {
+		Tuple tup = new Tuple(Utility.getTupleDesc(tupdata.length));
+		tup.setRecordId(new RecordId(new BTreePageId(1, 2, BTreePageId.LEAF), 3));
+		for (int i = 0; i < tupdata.length; ++i)
+			tup.setField(i, new IntField(tupdata[i]));
+		return tup;
+	}
+	
+	/**
+	 * @return a Tuple with an IntField for every element of tupdata
+	 *   and RecordId(BTreePageId(1, 2, BTreePageId.LEAF), 3)
+	 */
+	public static Tuple getBTreeTuple(ArrayList<Integer> tupdata) {
+		Tuple tup = new Tuple(Utility.getTupleDesc(tupdata.size()));
+		tup.setRecordId(new RecordId(new BTreePageId(1, 2, BTreePageId.LEAF), 3));
+		for (int i = 0; i < tupdata.size(); ++i)
+			tup.setField(i, new IntField(tupdata.get(i)));
+		return tup;
+	}
+
+	/**
+	 * @return a Tuple with a 'width' IntFields each with value n and
+	 *   with RecordId(BTreePageId(1, 2, BTreePageId.LEAF), 3)
+	 */
+	public static Tuple getBTreeTuple(int n, int width) {
+		Tuple tup = new Tuple(Utility.getTupleDesc(width));
+		tup.setRecordId(new RecordId(new BTreePageId(1, 2, BTreePageId.LEAF), 3));
+		for (int i = 0; i < width; ++i)
+			tup.setField(i, new IntField(n));
+		return tup;
+	}
+
+	/**
+	 * @return a BTreeEntry with an IntField with value n and with
+	 *   RecordId(BTreePageId(1,2, BTreePageId.INTERNAL), 3)
+	 */
+	public static BTreeEntry getBTreeEntry(int n) {
+		BTreePageId leftChild = new BTreePageId(1, n, BTreePageId.LEAF);
+		BTreePageId rightChild = new BTreePageId(1, n+1, BTreePageId.LEAF);
+		BTreeEntry e = new BTreeEntry(new IntField(n), leftChild, rightChild);
+		e.setRecordId(new RecordId(new BTreePageId(1, 2, BTreePageId.INTERNAL), 3));
+		return e;
+	}
+
+	/**
+	 * @return a BTreeEntry with an IntField with value n and with
+	 *   RecordId(BTreePageId(tableid,2, BTreePageId.INTERNAL), 3)
+	 */
+	public static BTreeEntry getBTreeEntry(int n, int tableid) {
+		BTreePageId leftChild = new BTreePageId(tableid, n, BTreePageId.LEAF);
+		BTreePageId rightChild = new BTreePageId(tableid, n+1, BTreePageId.LEAF);
+		BTreeEntry e = new BTreeEntry(new IntField(n), leftChild, rightChild);
+		e.setRecordId(new RecordId(new BTreePageId(tableid, 2, BTreePageId.INTERNAL), 3));
+		return e;
+	}
+
+	/**
+	 * @return a BTreeEntry with an IntField with value key and with
+	 *   RecordId(BTreePageId(tableid,2, BTreePageId.INTERNAL), 3)
+	 */
+	public static BTreeEntry getBTreeEntry(int n, int key, int tableid) {
+		BTreePageId leftChild = new BTreePageId(tableid, n, BTreePageId.LEAF);
+		BTreePageId rightChild = new BTreePageId(tableid, n+1, BTreePageId.LEAF);
+		BTreeEntry e = new BTreeEntry(new IntField(key), leftChild, rightChild);
+		e.setRecordId(new RecordId(new BTreePageId(tableid, 2, BTreePageId.INTERNAL), 3));
+		return e;
+	}
+
+	/** @param columnSpecification Mapping between column index and value. */
+	public static BTreeFile createRandomBTreeFile(
+			int columns, int rows, Map<Integer, Integer> columnSpecification,
+			ArrayList<ArrayList<Integer>> tuples, int keyField)
+					throws IOException, DbException, TransactionAbortedException {
+		return createRandomBTreeFile(columns, rows, MAX_RAND_VALUE, columnSpecification, tuples, keyField);
+	}
+
+	/**
+	 * Generates a random B+ tree file for testing
+	 * @param columns - number of columns
+	 * @param rows - number of rows
+	 * @param maxValue - the maximum random value in this B+ tree
+	 * @param columnSpecification - optional column specification
+	 * @param tuples - optional list of tuples to return
+	 * @param keyField - the index of the key field
+	 * @return a BTreeFile
+	 * @throws IOException
+	 * @throws DbException
+	 * @throws TransactionAbortedException
+	 */
+	public static BTreeFile createRandomBTreeFile(int columns, int rows,
+			int maxValue, Map<Integer, Integer> columnSpecification,
+			ArrayList<ArrayList<Integer>> tuples, int keyField) 
+					throws IOException, DbException, TransactionAbortedException {
+
+		if (tuples != null) {
+			tuples.clear();
+		} else {
+			tuples = new ArrayList<ArrayList<Integer>>(rows);
+		}
+
+		generateRandomTuples(columns, rows, maxValue, columnSpecification, tuples);
+		
+		// Convert the tuples list to a B+ tree file
+		File hFile = File.createTempFile("table", ".dat");
+		hFile.deleteOnExit();
+
+		File bFile = File.createTempFile("table_index", ".dat");
+		bFile.deleteOnExit();
+
+		Type[] typeAr = new Type[columns];
+		Arrays.fill(typeAr, Type.INT_TYPE);
+		return BTreeFileEncoder.convert(tuples, hFile, bFile, BufferPool.getPageSize(),
+				columns, typeAr, ',', keyField) ;
+	}
+	
+	/**
+	 * Generate a random set of tuples for testing
+	 * @param columns - number of columns
+	 * @param rows - number of rows
+	 * @param maxValue - the maximum random value in this B+ tree
+	 * @param columnSpecification - optional column specification
+	 * @param tuples - list of tuples to return
+	 */
+	public static void generateRandomTuples(int columns, int rows,
+			int maxValue, Map<Integer, Integer> columnSpecification,
+			ArrayList<ArrayList<Integer>> tuples) {
+		generateRandomTuples(columns, rows, 0, maxValue, columnSpecification, tuples);
+	}
+	
+	/**
+	 * Generate a random set of tuples for testing
+	 * @param columns - number of columns
+	 * @param rows - number of rows
+	 * @param minValue - the minimum random value in this B+ tree
+	 * @param maxValue - the maximum random value in this B+ tree
+	 * @param columnSpecification - optional column specification
+	 * @param tuples - list of tuples to return
+	 */
+	public static void generateRandomTuples(int columns, int rows,
+			int minValue, int maxValue, Map<Integer, Integer> columnSpecification,
+			ArrayList<ArrayList<Integer>> tuples) {
+
+		Random r = new Random();
+
+		// Fill the tuples list with generated values
+		for (int i = 0; i < rows; ++i) {
+			ArrayList<Integer> tuple = new ArrayList<Integer>(columns);
+			for (int j = 0; j < columns; ++j) {
+				// Generate random values, or use the column specification
+				Integer columnValue = null;
+				if (columnSpecification != null) columnValue = columnSpecification.get(j);
+				if (columnValue == null) {
+					columnValue = r.nextInt(maxValue-minValue) + minValue;
+				}
+				tuple.add(columnValue);
+			}
+			tuples.add(tuple);
+		}
+	}
+	
+	/**
+	 * Generate a random set of entries for testing
+	 * @param numKeys - number of keys
+	 * @param minKey - the minimum key value
+	 * @param maxKey - the maximum key value
+	 * @param minChildPtr - the first child pointer
+	 * @param childPointers - list of child pointers to return
+	 * @param keys - list of keys to return
+	 */
+	public static void generateRandomEntries(int numKeys, int minKey, int maxKey, int minChildPtr,
+			ArrayList<Integer> childPointers, ArrayList<Integer> keys) {
+
+		Random r = new Random();
+
+		// Fill the keys and childPointers lists with generated values
+		int child = minChildPtr;
+		for (int i = 0; i < numKeys; ++i) {
+			keys.add(r.nextInt(maxKey-minKey) + minKey);
+			childPointers.add(child);
+			++child;
+		}
+		
+		// one extra child pointer
+		childPointers.add(child);
+	}
+	
+	/**
+	 * Generate a random set of tuples for testing
+	 * @param columns - number of columns
+	 * @param rows - number of rows
+	 * @param min - the minimum value
+	 * @param max - the maximum value
+	 * @return the list of tuples
+	 */
+	public static ArrayList<Tuple> generateRandomTuples(int columns, int rows, int min, int max) {
+		ArrayList<ArrayList<Integer>> tuples = new ArrayList<ArrayList<Integer>>(rows);
+		generateRandomTuples(columns, rows, min, max, null, tuples);
+		ArrayList<Tuple> tupleList = new ArrayList<Tuple>();
+		for(ArrayList<Integer> tup : tuples) {
+			tupleList.add(getBTreeTuple(tup));	
+		}
+		return tupleList;
+	}
+	
+	/**
+	 * Generate a random set of entries for testing
+	 * @param numKeys - the number of keys
+	 * @param tableid - the tableid
+	 * @param childPageCategory - the child page category (LEAF or INTERNAL)
+	 * @param minKey - the minimum key value
+	 * @param maxKey - the maximum key value
+	 * @param minChildPtr - the first child pointer
+	 * @return the list of entries
+	 */
+	public static ArrayList<BTreeEntry> generateRandomEntries(int numKeys, int tableid, int childPageCategory, int minKey, int maxKey, int minChildPtr) {
+		ArrayList<Integer> keys = new ArrayList<Integer>(numKeys);
+		ArrayList<Integer> childPointers = new ArrayList<Integer>(numKeys+1);
+		generateRandomEntries(numKeys, minKey, maxKey, minChildPtr, childPointers, keys);
+		Collections.sort(keys);
+		ArrayList<BTreeEntry> entryList = new ArrayList<BTreeEntry>();
+		for(int i = 0; i < numKeys; ++i) {
+			entryList.add(new BTreeEntry(new IntField(keys.get(i)), 
+					new BTreePageId(tableid, childPointers.get(i), childPageCategory), 
+					new BTreePageId(tableid, childPointers.get(i+1), childPageCategory)));
+		}
+		return entryList;
+	}
+	
+	/**
+	 * Get the number of tuples that can fit on a page with the specified number of integer fields
+	 * @param columns - the number of columns
+	 * @return the number of tuples per page
+	 */
+	public static int getNumTuplesPerPage(int columns) {
+		int bytesPerTuple = Type.INT_TYPE.getLen() * columns * 8;
+		int tuplesPerPage = (BufferPool.getPageSize() * 8 - 3 * BTreeLeafPage.INDEX_SIZE * 8) /  (bytesPerTuple + 1);
+		return tuplesPerPage;
+	}
+	
+	/**
+	 * Create a random leaf page for testing
+	 * @param pid - the page id of the leaf page
+	 * @param columns - the number of fields per tuple
+	 * @param keyField - the index of the key field in each tuple
+	 * @param min - the minimum value
+	 * @param max - the maximum value
+	 * @return the leaf page
+	 * @throws IOException
+	 */
+	public static BTreeLeafPage createRandomLeafPage(BTreePageId pid, int columns, int keyField, int min, int max) throws IOException {
+		int tuplesPerPage = getNumTuplesPerPage(columns);
+		return createRandomLeafPage(pid, columns, keyField, tuplesPerPage, min, max);
+	}
+	
+	/**
+	 * Create a random leaf page for testing
+	 * @param pid - the page id of the leaf page
+	 * @param columns - the number of fields per tuple
+	 * @param keyField - the index of the key field in each tuple
+	 * @param numTuples - the number of tuples to insert
+	 * @param min - the minimum value
+	 * @param max - the maximum value
+	 * @return the leaf page
+	 * @throws IOException
+	 */
+	public static BTreeLeafPage createRandomLeafPage(BTreePageId pid, int columns, int keyField, int numTuples, int min, int max) throws IOException {
+		Type[] typeAr = new Type[columns];
+		Arrays.fill(typeAr, Type.INT_TYPE);
+		byte[] data = BTreeFileEncoder.convertToLeafPage(BTreeUtility.generateRandomTuples(columns, numTuples, min, max), 
+				BufferPool.getPageSize(), columns, typeAr, keyField);
+		BTreeLeafPage page = new BTreeLeafPage(pid, data, keyField);
+		return page;
+	}
+
+	/**
+	 * The number of entries that can fit on a page with integer key fields
+	 * @return the number of entries per page
+	 */
+	public static int getNumEntriesPerPage() {
+		int nentrybytes = Type.INT_TYPE.getLen() + BTreeInternalPage.INDEX_SIZE;
+		// pointerbytes: one extra child pointer, parent pointer, child page category
+		int internalpointerbytes = 2 * BTreeLeafPage.INDEX_SIZE + 1; 
+		int entriesPerPage = (BufferPool.getPageSize() * 8 - internalpointerbytes * 8 - 1) /  (nentrybytes * 8 + 1);  //floor comes for free
+		return entriesPerPage;
+	}
+	
+	/**
+	 * Create a random internal page for testing
+	 * @param pid - the page id of the internal page
+	 * @param keyField - the index of the key field in each tuple
+	 * @param childPageCategory - the child page category (LEAF or INTERNAL)
+	 * @param minKey - the minimum key value
+	 * @param maxKey - the maximum key value
+	 * @param minChildPtr - the first child pointer
+	 * @return the internal page
+	 * @throws IOException
+	 */
+	public static BTreeInternalPage createRandomInternalPage(BTreePageId pid, int keyField, int childPageCategory, int minKey, int maxKey, int minChildPtr) throws IOException {
+		int entriesPerPage = getNumEntriesPerPage();
+		return createRandomInternalPage(pid, keyField, childPageCategory, entriesPerPage, minKey, maxKey, minChildPtr);
+	}
+	
+	/**
+	 * Create a random internal page for testing
+	 * @param pid - the page id of the internal page
+	 * @param keyField - the index of the key field in each tuple
+	 * @param childPageCategory - the child page category (LEAF or INTERNAL)
+	 * @param numKeys - the number of keys to insert
+	 * @param minKey - the minimum key value
+	 * @param maxKey - the maximum key value
+	 * @param minChildPtr - the first child pointer
+	 * @return the internal page
+	 * @throws IOException
+	 */
+	public static BTreeInternalPage createRandomInternalPage(BTreePageId pid, int keyField, int childPageCategory, int numKeys, int minKey, int maxKey, int minChildPtr) throws IOException {
+		byte[] data = BTreeFileEncoder.convertToInternalPage(BTreeUtility.generateRandomEntries(numKeys, pid.getTableId(), childPageCategory, minKey, maxKey, minChildPtr), 
+				BufferPool.getPageSize(), Type.INT_TYPE, childPageCategory);
+		BTreeInternalPage page = new BTreeInternalPage(pid, data, keyField);
+		return page;
+	}
+
+	/**
+	 * creates a *non* random B+ tree file for testing
+	 * @param columns - number of columns
+	 * @param rows - number of rows
+	 * @param columnSpecification - optional column specification
+	 * @param tuples - optional list of tuples to return
+	 * @param keyField - the index of the key field
+	 * @return a BTreeFile
+	 * @throws IOException
+	 * @throws DbException
+	 * @throws TransactionAbortedException
+	 */
+	public static BTreeFile createBTreeFile(int columns, int rows,
+			Map<Integer, Integer> columnSpecification,
+			ArrayList<ArrayList<Integer>> tuples, int keyField) 
+					throws IOException, DbException, TransactionAbortedException {
+		if (tuples != null) {
+			tuples.clear();
+		} else {
+			tuples = new ArrayList<ArrayList<Integer>>(rows);
+		}
+
+		// Fill the tuples list with generated values
+		for (int i = 0; i < rows; ++i) {
+			ArrayList<Integer> tuple = new ArrayList<Integer>(columns);
+			for (int j = 0; j < columns; ++j) {
+				// Generate values, or use the column specification
+				Integer columnValue = null;
+				if (columnSpecification != null) columnValue = columnSpecification.get(j);
+				if (columnValue == null) {
+					columnValue = (i+1)*(j+1);
+				}
+				tuple.add(columnValue);
+			}
+			tuples.add(tuple);
+		}
+
+		// Convert the tuples list to a B+ tree file
+		File hFile = File.createTempFile("table", ".dat");
+		hFile.deleteOnExit();
+
+		File bFile = File.createTempFile("table_index", ".dat");
+		bFile.deleteOnExit();
+
+		Type[] typeAr = new Type[columns];
+		Arrays.fill(typeAr, Type.INT_TYPE);
+		return BTreeFileEncoder.convert(tuples, hFile, bFile, BufferPool.getPageSize(),
+				columns, typeAr, ',', keyField) ;
+	}
+
+	/** Opens a BTreeFile and adds it to the catalog.
+	 *
+	 * @param cols number of columns in the table.
+	 * @param f location of the file storing the table.
+	 * @param keyField the field the B+ tree is keyed on
+	 * @return the opened table.
+	 */
+	public static BTreeFile openBTreeFile(int cols, File f, int keyField) {
+		// create the BTreeFile and add it to the catalog
+		TupleDesc td = Utility.getTupleDesc(cols);
+		BTreeFile bf = new BTreeFile(f, keyField, td);
+		Database.getCatalog().addTable(bf, UUID.randomUUID().toString());
+		return bf;
+	}
+
+	public static BTreeFile openBTreeFile(int cols, String colPrefix, File f, int keyField) {
+		// create the BTreeFile and add it to the catalog
+		TupleDesc td = Utility.getTupleDesc(cols, colPrefix);
+		BTreeFile bf = new BTreeFile(f, keyField, td);
+		Database.getCatalog().addTable(bf, UUID.randomUUID().toString());
+		return bf;
+	}
+
+	/**
+	 * A utility method to create a new BTreeFile with no data,
+	 * assuming the path does not already exist. If the path exists, the file
+	 * will be overwritten. The new table will be added to the Catalog with
+	 * the specified number of columns as IntFields indexed on the keyField.
+	 */
+	public static BTreeFile createEmptyBTreeFile(String path, int cols, int keyField)
+			throws IOException {
+		File f = new File(path);
+		// touch the file
+		FileOutputStream fos = new FileOutputStream(f);
+		fos.write(new byte[0]);
+		fos.close();
+
+		BTreeFile bf = openBTreeFile(cols, f, keyField);
+
+		return bf;
+	}
+
+	/**
+	 * A utility method to create a new BTreeFile with no data, with the specified
+	 * number of pages, assuming the path does not already exist. If the path exists, 
+	 * the file will be overwritten. The new table will be added to the Catalog with
+	 * the specified number of columns as IntFields indexed on the keyField.
+	 */
+	public static BTreeFile createEmptyBTreeFile(String path, int cols, int keyField, int pages)
+			throws IOException {
+		File f = new File(path);
+		BufferedOutputStream bw = new BufferedOutputStream(
+				new FileOutputStream(f, true));
+		byte[] emptyRootPtrData = BTreeRootPtrPage.createEmptyPageData();
+		byte[] emptyPageData = BTreePage.createEmptyPageData();
+		bw.write(emptyRootPtrData);
+		for(int i = 0; i < pages; ++i) {
+			bw.write(emptyPageData);
+		}
+		bw.close();
+
+		BTreeFile bf = openBTreeFile(cols, f, keyField);
+
+		return bf;
+	}
+
+	/**
+	 * Helper class that attempts to insert a tuple in a new thread
+	 *
+	 * @return a handle to the Thread that will attempt insertion after it
+	 *   has been started
+	 */
+	static class BTreeWriter extends Thread {
+
+		TransactionId tid;
+		BTreeFile bf;
+		int item;
+		int count;
+		boolean success;
+		Exception error;
+		Object slock;
+		Object elock;
+
+		/**
+		 * @param tid the transaction on whose behalf we want to insert the tuple
+		 * @param bf the B+ tree file into which we want to insert the tuple
+		 * @param item the key of the tuple to insert
+		 * @param count the number of times to insert the tuple
+		 */
+		public BTreeWriter(TransactionId tid, BTreeFile bf, int item, int count) {
+			this.tid = tid;
+			this.bf = bf;
+			this.item = item;
+			this.count = count;
+			this.success = false;
+			this.error = null;
+			this.slock = new Object();
+			this.elock = new Object();
+		}
+
+		public void run() {
+			try {
+				int c = 0;
+				while(c < count) {
+					Tuple t = BTreeUtility.getBTreeTuple(item, 2);
+					Database.getBufferPool().insertTuple(tid, bf.getId(), t);
+
+					IndexPredicate ipred = new IndexPredicate(Op.EQUALS, t.getField(bf.keyField()));
+					DbFileIterator it = bf.indexIterator(tid, ipred);
+					it.open();
+					c = 0;
+					while(it.hasNext()) {
+						it.next();
+						c++;
+					}
+					it.close();
+				}
+				synchronized(slock) {
+					success = true;
+				}
+			} catch (Exception e) {
+				e.printStackTrace();
+				synchronized(elock) {
+					error = e;
+				}
+
+				try {
+					Database.getBufferPool().transactionComplete(tid, false);
+				} catch (java.io.IOException e2) {
+					e2.printStackTrace();
+				}
+			}
+		}
+
+		/**
+		 * @return true if we successfully inserted the tuple
+		 */
+		 public boolean succeeded() {
+			 synchronized(slock) {
+				 return success;
+			 }
+		 }
+
+		/**
+		 * @return an Exception instance if one occurred while inserting the tuple;
+		 *   null otherwise
+		 */
+		 public Exception getError() {
+			 synchronized(elock) {
+				 return error;
+			 }
+		 }
+	}
+
+	/**
+	 * Helper class that searches for tuple(s) in a new thread
+	 *
+	 * @return a handle to the Thread that will attempt to search for tuple(s) after it
+	 *   has been started
+	 */
+	static class BTreeReader extends Thread {
+
+		TransactionId tid;
+		BTreeFile bf;
+		Field f;
+		int count;
+		boolean found;
+		Exception error;
+		Object slock;
+		Object elock;
+
+		/**
+		 * @param tid the transaction on whose behalf we want to search for the tuple(s)
+		 * @param bf the B+ tree file containing the tuple(s)
+		 * @param f the field to search for
+		 * @param count the number of tuples to search for
+		 */
+		public BTreeReader(TransactionId tid, BTreeFile bf, Field f, int count) {
+			this.tid = tid;
+			this.bf = bf;
+			this.f = f;
+			this.count = count;
+			this.found = false;
+			this.error = null;
+			this.slock = new Object();
+			this.elock = new Object();
+		}
+
+		public void run() {
+			try {
+				while(true) {
+					IndexPredicate ipred = new IndexPredicate(Op.EQUALS, f);
+					DbFileIterator it = bf.indexIterator(tid, ipred);
+					it.open();
+					int c = 0;
+					while(it.hasNext()) {
+						it.next();
+						c++;
+					}
+					it.close();
+					if(c >= count) {
+						synchronized(slock) {
+							found = true;
+						}
+					}
+				}
+
+			} catch (Exception e) {
+				e.printStackTrace();
+				synchronized(elock) {
+					error = e;
+				}
+
+				try {
+					Database.getBufferPool().transactionComplete(tid, false);
+				} catch (java.io.IOException e2) {
+					e2.printStackTrace();
+				}
+			}
+		}
+
+		/**
+		 * @return true if we successfully found the tuple(s)
+		 */
+		 public boolean found() {
+			 synchronized(slock) {
+				 return found;
+			 }
+		 }
+
+		/**
+		 * @return an Exception instance if one occurred while searching for the tuple(s);
+		 *   null otherwise
+		 */
+		 public Exception getError() {
+			 synchronized(elock) {
+				 return error;
+			 }
+		 }
+	}
+	
+	/**
+	 * Helper class that attempts to insert a tuple in a new thread
+	 *
+	 * @return a handle to the Thread that will attempt insertion after it
+	 *   has been started
+	 */
+	public static class BTreeInserter extends Thread {
+
+		TransactionId tid;
+		BTreeFile bf;
+		int[] tupdata;
+		BlockingQueue<ArrayList<Integer>> insertedTuples;
+		boolean success;
+		Exception error;
+		Object slock;
+		Object elock;
+
+		/**
+		 * @param bf the B+ tree file into which we want to insert the tuple
+		 * @param tupdata the data of the tuple to insert
+		 * @param the list of tuples that were successfully inserted
+		 */
+		public BTreeInserter(BTreeFile bf, int[] tupdata, BlockingQueue<ArrayList<Integer>> insertedTuples) {
+			init(bf, tupdata, insertedTuples);
+		}
+
+		public void run() {
+			try {
+				Tuple t = BTreeUtility.getBTreeTuple(tupdata);
+				Database.getBufferPool().insertTuple(tid, bf.getId(), t);
+				Database.getBufferPool().transactionComplete(tid);
+				ArrayList<Integer> tuple = tupleToList(t);
+				insertedTuples.put(tuple);
+				synchronized(slock) {
+					success = true;
+				}
+			} catch (Exception e) {
+				if(!(e instanceof TransactionAbortedException)) {
+					e.printStackTrace();
+				}
+				synchronized(elock) {
+					error = e;
+				}
+
+				try {
+					Database.getBufferPool().transactionComplete(tid, false);
+				} catch (java.io.IOException e2) {
+					e2.printStackTrace();
+				}
+			}
+		}
+		
+		private void init(BTreeFile bf, int[] tupdata, BlockingQueue<ArrayList<Integer>> insertedTuples) {
+			this.tid = new TransactionId();
+			this.bf = bf;
+			this.tupdata = tupdata;
+			this.insertedTuples = insertedTuples;
+			this.success = false;
+			this.error = null;
+			this.slock = new Object();
+			this.elock = new Object();
+		}
+		
+		public void rerun(BTreeFile bf, int[] tupdata, BlockingQueue<ArrayList<Integer>> insertedTuples) {
+			init(bf, tupdata, insertedTuples);
+			run();
+		}
+
+		/**
+		 * @return true if we successfully inserted the tuple
+		 */
+		 public boolean succeeded() {
+			 synchronized(slock) {
+				 return success;
+			 }
+		 }
+
+		/**
+		 * @return an Exception instance if one occurred while inserting the tuple;
+		 *   null otherwise
+		 */
+		 public Exception getError() {
+			 synchronized(elock) {
+				 return error;
+			 }
+		 }
+	}
+    
+	/**
+	 * Helper class that attempts to delete tuple(s) in a new thread
+	 *
+	 * @return a handle to the Thread that will attempt deletion after it
+	 *   has been started
+	 */
+	public static class BTreeDeleter extends Thread {
+
+		TransactionId tid;
+		BTreeFile bf;
+		BlockingQueue<ArrayList<Integer>> insertedTuples;
+		ArrayList<Integer> tuple;
+		boolean success;
+		Exception error;
+		Object slock;
+		Object elock;
+
+		/**
+		 * @param bf the B+ tree file from which we want to delete the tuple(s)
+		 * @param the list of tuples to delete
+		 */
+		public BTreeDeleter(BTreeFile bf, BlockingQueue<ArrayList<Integer>> insertedTuples) {
+			init(bf, insertedTuples);
+		}
+
+		public void run() {
+			try {
+				tuple = insertedTuples.take();
+				if(bf.getTupleDesc().numFields() != tuple.size()) {
+					throw new DbException("tuple desc mismatch");
+				}
+				IntField key = new IntField(tuple.get(bf.keyField()));
+				IndexPredicate ipred = new IndexPredicate(Op.EQUALS, key);
+				DbFileIterator it = bf.indexIterator(tid, ipred);
+				it.open();
+				while(it.hasNext()) {
+					Tuple t = it.next();
+					if(tupleToList(t).equals(tuple)) {
+						Database.getBufferPool().deleteTuple(tid, t);
+						break;
+					}
+				}
+				it.close();
+				Database.getBufferPool().transactionComplete(tid);
+				synchronized(slock) {
+					success = true;
+				}
+			} catch (Exception e) {
+				if(!(e instanceof TransactionAbortedException)) {
+					e.printStackTrace();
+				}
+				synchronized(elock) {
+					error = e;
+				}
+
+				try {
+					insertedTuples.put(tuple);
+					Database.getBufferPool().transactionComplete(tid, false);
+				} catch (java.io.IOException e2) {
+					e2.printStackTrace();
+				} catch (InterruptedException e3) {
+					e3.printStackTrace();
+				}
+			}
+		}
+		
+		private void init(BTreeFile bf, BlockingQueue<ArrayList<Integer>> insertedTuples) {
+			this.tid = new TransactionId();
+			this.bf = bf;
+			this.insertedTuples = insertedTuples;
+			this.success = false;
+			this.error = null;
+			this.slock = new Object();
+			this.elock = new Object();
+		}
+		
+		public void rerun(BTreeFile bf, BlockingQueue<ArrayList<Integer>> insertedTuples) {
+			init(bf, insertedTuples);
+			run();
+		}
+
+		/**
+		 * @return true if we successfully inserted the tuple
+		 */
+		 public boolean succeeded() {
+			 synchronized(slock) {
+				 return success;
+			 }
+		 }
+
+		/**
+		 * @return an Exception instance if one occurred while inserting the tuple;
+		 *   null otherwise
+		 */
+		 public Exception getError() {
+			 synchronized(elock) {
+				 return error;
+			 }
+		 }
+	}
+
+}
+
diff -ruN lab1/src/java/simpledb/BufferPool.java lab3/src/java/simpledb/BufferPool.java
--- lab1/src/java/simpledb/BufferPool.java	2016-11-02 22:06:58.000000000 -0500
+++ lab3/src/java/simpledb/BufferPool.java	2016-11-02 22:06:55.000000000 -0500
@@ -1,6 +1,12 @@
 package simpledb;
 
 import java.io.*;
+import java.util.ArrayList;
+import java.util.Iterator;
+import java.util.Random;
+import java.util.Vector;
+
+import java.util.concurrent.ConcurrentHashMap;
 
 /**
  * BufferPool manages the reading and writing of pages into memory from
@@ -24,13 +30,14 @@
     constructor instead. */
     public static final int DEFAULT_PAGES = 50;
 
+    private final Random random = new Random();
+
     /**
      * Creates a BufferPool that caches up to numPages pages.
      *
      * @param numPages maximum number of pages in this buffer pool.
      */
     public BufferPool(int numPages) {
-        // some code goes here
     }
     
     public static int getPageSize() {
@@ -64,8 +71,6 @@
      */
     public  Page getPage(TransactionId tid, PageId pid, Permissions perm)
         throws TransactionAbortedException, DbException {
-        // some code goes here
-        return null;
     }
 
     /**
@@ -79,7 +84,6 @@
      */
     public  void releasePage(TransactionId tid, PageId pid) {
         // some code goes here
-        // not necessary for lab1|lab2
     }
 
     /**
@@ -89,7 +93,6 @@
      */
     public void transactionComplete(TransactionId tid) throws IOException {
         // some code goes here
-        // not necessary for lab1|lab2
     }
 
     /** Return true if the specified transaction has a lock on the specified page */
@@ -109,7 +112,6 @@
     public void transactionComplete(TransactionId tid, boolean commit)
         throws IOException {
         // some code goes here
-        // not necessary for lab1|lab2
     }
 
     /**
@@ -129,8 +131,33 @@
      */
     public void insertTuple(TransactionId tid, int tableId, Tuple t)
         throws DbException, IOException, TransactionAbortedException {
-        // some code goes here
-        // not necessary for lab1
+        DbFile file = Database.getCatalog().getDatabaseFile(tableId);
+
+        // let the specific implementation of the file decide which page to add it
+        // to.
+
+        ArrayList<Page> dirtypages = file.insertTuple(tid, t);
+
+        synchronized(this) {
+            for (Page p : dirtypages){
+                p.markDirty(true, tid);
+                
+                //System.out.println("ADDING TUPLE TO PAGE " + p.getId().pageno() + " WITH HASH CODE " + p.getId().hashCode());
+                
+                // if page in pool already, done.
+                if(pages.get(p.getId()) != null) {
+                    //replace old page with new one in case addTuple returns a new copy of the page
+                    pages.put(p.getId(), p);
+                }
+                else {
+                    
+                    // put page in pool
+                    if(pages.size() >= numPages)
+                        evictPage();
+                    pages.put(p.getId(), p);
+                }
+            }
+        }
     }
 
     /**
@@ -148,8 +175,27 @@
      */
     public  void deleteTuple(TransactionId tid, Tuple t)
         throws DbException, IOException, TransactionAbortedException {
-        // some code goes here
-        // not necessary for lab1
+        DbFile file = Database.getCatalog().getDatabaseFile(t.getRecordId().getPageId().getTableId());
+        ArrayList<Page> dirtypages = file.deleteTuple(tid, t);
+
+        synchronized(this) {
+        	for (Page p : dirtypages){
+        		p.markDirty(true, tid);
+                    
+        		// if page in pool already, done.
+        		if(pages.get(p.getId()) != null) {
+        			//replace old page with new one in case deleteTuple returns a new copy of the page
+        			pages.put(p.getId(), p);
+                }
+        		else {
+                        
+        			// put page in pool
+        			if(pages.size() >= numPages)
+        				evictPage();
+                    pages.put(p.getId(), p);
+                }	
+        	}   
+        }    
     }
 
     /**
@@ -158,8 +204,10 @@
      *     break simpledb if running in NO STEAL mode.
      */
     public synchronized void flushAllPages() throws IOException {
-        // some code goes here
-        // not necessary for lab1
+        /* calls flushPage() for each page in the BufferPool */
+        Iterator<PageId> i = pages.keySet().iterator();
+        while(i.hasNext())
+            flushPage(i.next());
 
     }
 
@@ -172,8 +220,10 @@
         are removed from the cache so they can be reused safely
     */
     public synchronized void discardPage(PageId pid) {
-        // some code goes here
-        // not necessary for lab1
+        Page p = pages.get(pid);
+        if (p != null) {
+            pages.remove(pid);
+        }
     }
 
     /**
@@ -181,15 +231,20 @@
      * @param pid an ID indicating the page to flush
      */
     private synchronized  void flushPage(PageId pid) throws IOException {
-        // some code goes here
-        // not necessary for lab1
+        
+        Page p = pages.get(pid);
+        if (p == null)
+            return; //not in buffer pool -- doesn't need to be flushed
+
+        DbFile file = Database.getCatalog().getDatabaseFile(pid.getTableId());
+        file.writePage(p);
+        p.markDirty(false, null);
     }
 
     /** Write all pages of the specified transaction to disk.
      */
     public synchronized  void flushPages(TransactionId tid) throws IOException {
         // some code goes here
-        // not necessary for lab1|lab2
     }
 
     /**
@@ -197,8 +252,35 @@
      * Flushes the page to disk to ensure dirty pages are updated on disk.
      */
     private synchronized  void evictPage() throws DbException {
-        // some code goes here
-        // not necessary for lab1
+        // pick a random page and flush it.
+        // XXX this will work for lab1, but not for lab4.
+        // XXX this can cause pages to be evicted that have uncommitted updates on them
+        Object pids[] = pages.keySet().toArray();
+        PageId pid = (PageId) pids[random.nextInt(pids.length)];
+        try {
+            Page p = pages.get(pid);
+            if (p.isDirty() != null) { //if this is dirty, remove first non-dirty
+                boolean gotNew = false;
+                for (PageId pg : pages.keySet()) {
+                    if (pages.get(pg).isDirty() == null) {
+                        pid = pg;
+                        gotNew = true;
+                        break;
+                    }
+                }
+                if (!gotNew) {
+                    throw new DbException("All buffer pool slots contain dirty pages;  COMMIT or ROLLBACK to continue.");
+                }
+            }
+            //XXX: The above code makes sure page is not dirty. 
+            //Assuming we have FORCE, Why do we flush it to disk?
+            //Answer: yes we don't need this if we have FORCE, but we do need it if we don't.
+            //it doesn't hurt to keep it here.            
+            flushPage(pid);
+        } catch (IOException e) {
+            throw new DbException("could not evict page");
+        }
+        pages.remove(pid);
     }
 
 }
diff -ruN lab1/src/java/simpledb/Catalog.java lab3/src/java/simpledb/Catalog.java
--- lab1/src/java/simpledb/Catalog.java	2016-11-02 22:06:58.000000000 -0500
+++ lab3/src/java/simpledb/Catalog.java	2016-11-02 22:06:55.000000000 -0500
@@ -5,6 +5,7 @@
 import java.io.FileReader;
 import java.io.IOException;
 import java.util.*;
+import java.util.concurrent.ConcurrentHashMap;
 
 /**
  * The Catalog keeps track of all available tables in the database and their
@@ -22,7 +23,6 @@
      * Creates a new, empty catalog.
      */
     public Catalog() {
-        // some code goes here
     }
 
     /**
@@ -35,7 +35,6 @@
      * @param pkeyField the name of the primary key field
      */
     public void addTable(DbFile file, String name, String pkeyField) {
-        // some code goes here
     }
 
     public void addTable(DbFile file, String name) {
@@ -58,8 +57,6 @@
      * @throws NoSuchElementException if the table doesn't exist
      */
     public int getTableId(String name) throws NoSuchElementException {
-        // some code goes here
-        return 0;
     }
 
     /**
@@ -69,8 +66,6 @@
      * @throws NoSuchElementException if the table doesn't exist
      */
     public TupleDesc getTupleDesc(int tableid) throws NoSuchElementException {
-        // some code goes here
-        return null;
     }
 
     /**
@@ -80,28 +75,19 @@
      *     function passed to addTable
      */
     public DbFile getDatabaseFile(int tableid) throws NoSuchElementException {
-        // some code goes here
-        return null;
     }
 
     public String getPrimaryKey(int tableid) {
-        // some code goes here
-        return null;
     }
 
     public Iterator<Integer> tableIdIterator() {
-        // some code goes here
-        return null;
     }
 
     public String getTableName(int id) {
-        // some code goes here
-        return null;
     }
     
     /** Delete all tables from the catalog */
     public void clear() {
-        // some code goes here
     }
     
     /**
diff -ruN lab1/src/java/simpledb/CostCard.java lab3/src/java/simpledb/CostCard.java
--- lab1/src/java/simpledb/CostCard.java	1969-12-31 18:00:00.000000000 -0600
+++ lab3/src/java/simpledb/CostCard.java	2016-11-02 22:06:55.000000000 -0500
@@ -0,0 +1,14 @@
+package simpledb;
+import java.util.Vector;
+
+/** Class returned by {@link JoinOptimizer#computeCostAndCardOfSubplan} specifying the
+    cost and cardinality of the optimal plan represented by plan.
+*/
+public class CostCard {
+    /** The cost of the optimal subplan */
+    public double cost;
+    /** The cardinality of the optimal subplan */
+    public int card;
+    /** The optimal subplan */
+    public Vector<LogicalJoinNode> plan;
+}
diff -ruN lab1/src/java/simpledb/DeadlockException.java lab3/src/java/simpledb/DeadlockException.java
--- lab1/src/java/simpledb/DeadlockException.java	1969-12-31 18:00:00.000000000 -0600
+++ lab3/src/java/simpledb/DeadlockException.java	2016-11-02 22:06:55.000000000 -0500
@@ -0,0 +1,11 @@
+package simpledb;
+
+import java.lang.Exception;
+
+/** Exception that is thrown when a deadlock occurs. */
+public class DeadlockException extends Exception {
+    private static final long serialVersionUID = 1L;
+
+    public DeadlockException() {
+    }
+}
diff -ruN lab1/src/java/simpledb/Delete.java lab3/src/java/simpledb/Delete.java
--- lab1/src/java/simpledb/Delete.java	1969-12-31 18:00:00.000000000 -0600
+++ lab3/src/java/simpledb/Delete.java	2016-11-02 22:06:55.000000000 -0500
@@ -0,0 +1,99 @@
+package simpledb;
+
+import java.io.IOException;
+
+/**
+ * The delete operator. Delete reads tuples from its child operator and removes
+ * them from the table they belong to.
+ */
+public class Delete extends Operator {
+
+    private static final long serialVersionUID = 1L;
+
+    private DbIterator child;
+    private TupleDesc returnTD;
+    private TransactionId tid;
+    private boolean processed=false;
+
+    /**
+     * Constructor specifying the transaction that this delete belongs to as
+     * well as the child to read from.
+     * 
+     * @param t
+     *            The transaction this delete runs in
+     * @param child
+     *            The child operator from which to read tuples for deletion
+     */
+    public Delete(TransactionId t, DbIterator child) {
+        this.child = child;
+        this.tid = t;
+        
+        // we return a 1-field tuple
+        Type[] typeAr = new Type[1];
+        typeAr[0] = Type.INT_TYPE;
+        this.returnTD = new TupleDesc(typeAr);
+    }
+
+    public TupleDesc getTupleDesc() {
+        return returnTD;
+    }
+
+    public void open() throws DbException, TransactionAbortedException {
+        child.open();
+        super.open();
+    }
+
+    public void close() {
+        super.close();
+        child.close();
+    }
+
+    public void rewind() throws DbException, TransactionAbortedException {
+        child.close();
+        child.open();
+    }
+
+    /**
+     * Deletes tuples as they are read from the child operator. Deletes are
+     * processed via the buffer pool (which can be accessed via the
+     * Database.getBufferPool() method.
+     * 
+     * @return A 1-field tuple containing the number of deleted records.
+     * @see Database#getBufferPool
+     * @see BufferPool#deleteTuple
+     */
+    protected Tuple fetchNext() throws TransactionAbortedException, DbException {
+
+        if (processed)
+            return null;
+        
+        int count = 0;
+        while (child.hasNext()) {
+            Tuple t = child.next();
+            try {
+            	Database.getBufferPool().deleteTuple(tid, t);
+            } catch (IOException e) {
+                throw new RuntimeException(e);
+            }
+            count++;
+        }
+
+        // finished scanning
+        // generate a new "delete count" tuple
+        Tuple tup = new Tuple(returnTD);
+        tup.setField(0, new IntField(count));
+        processed=true;
+        return tup;
+    }
+
+    @Override
+    public DbIterator[] getChildren() {
+        return new DbIterator[] { this.child };
+    }
+
+    @Override
+    public void setChildren(DbIterator[] children) {
+        this.child = children[0];
+    }
+
+}
diff -ruN lab1/src/java/simpledb/Filter.java lab3/src/java/simpledb/Filter.java
--- lab1/src/java/simpledb/Filter.java	1969-12-31 18:00:00.000000000 -0600
+++ lab3/src/java/simpledb/Filter.java	2016-11-02 22:06:55.000000000 -0500
@@ -0,0 +1,80 @@
+package simpledb;
+
+import java.util.*;
+
+/**
+ * Filter is an operator that implements a relational select.
+ */
+public class Filter extends Operator {
+
+    private static final long serialVersionUID = 1L;
+    private Predicate pred;
+    private DbIterator child;
+
+    /**
+     * Constructor accepts a predicate to apply and a child operator to read
+     * tuples to filter from.
+     * 
+     * @param p
+     *            The predicate to filter tuples with
+     * @param child
+     *            The child operator
+     */
+    public Filter(Predicate p, DbIterator child) {
+        this.pred = p;
+        this.child = child;
+    }
+
+    public Predicate getPredicate() {
+        return pred;
+    }
+
+    public TupleDesc getTupleDesc() {
+        return child.getTupleDesc();
+    }
+
+    public void open() throws DbException, NoSuchElementException,
+            TransactionAbortedException {
+        child.open();
+        super.open();
+    }
+
+    public void close() {
+        super.close();
+        child.close();
+    }
+
+    public void rewind() throws DbException, TransactionAbortedException {
+        child.rewind();
+    }
+
+    /**
+     * AbstractDbIterator.readNext implementation. Iterates over tuples from the
+     * child operator, applying the predicate to them and returning those that
+     * pass the predicate (i.e. for which the Predicate.filter() returns true.)
+     * 
+     * @return The next tuple that passes the filter, or null if there are no
+     *         more tuples
+     * @see Predicate#filter
+     */
+    protected Tuple fetchNext() throws NoSuchElementException,
+            TransactionAbortedException, DbException {
+        while (child.hasNext()) {
+            Tuple t = child.next();
+            if (pred.filter(t))
+                return t;
+        }
+        return null;
+    }
+
+    @Override
+    public DbIterator[] getChildren() {
+        return new DbIterator[] { this.child };
+    }
+
+    @Override
+    public void setChildren(DbIterator[] children) {
+        this.child = children[0];
+    }
+
+}
diff -ruN lab1/src/java/simpledb/HashEquiJoin.java lab3/src/java/simpledb/HashEquiJoin.java
--- lab1/src/java/simpledb/HashEquiJoin.java	1969-12-31 18:00:00.000000000 -0600
+++ lab3/src/java/simpledb/HashEquiJoin.java	2016-11-02 22:06:55.000000000 -0500
@@ -0,0 +1,173 @@
+package simpledb;
+
+import java.util.*;
+
+/**
+ * The Join operator implements the relational join operation.
+ */
+public class HashEquiJoin extends Operator {
+
+    private static final long serialVersionUID = 1L;
+    private JoinPredicate pred;
+    private DbIterator child1, child2;
+    private TupleDesc comboTD;
+    transient private Tuple t1 = null;
+    transient private Tuple t2 = null;
+
+    /**
+     * Constructor. Accepts to children to join and the predicate to join them
+     * on
+     * 
+     * @param p
+     *            The predicate to use to join the children
+     * @param child1
+     *            Iterator for the left(outer) relation to join
+     * @param child2
+     *            Iterator for the right(inner) relation to join
+     */
+    public HashEquiJoin(JoinPredicate p, DbIterator child1, DbIterator child2) {
+        this.pred = p;
+        this.child1 = child1;
+        this.child2 = child2;
+        comboTD = TupleDesc.merge(child1.getTupleDesc(), child2.getTupleDesc());
+    }
+
+    public JoinPredicate getJoinPredicate() {
+        return pred;
+    }
+
+    public TupleDesc getTupleDesc() {
+        return comboTD;
+    }
+    
+    public String getJoinField1Name()
+    {
+	return this.child1.getTupleDesc().getFieldName(this.pred.getField1());
+    }
+
+    public String getJoinField2Name()
+    {
+	return this.child2.getTupleDesc().getFieldName(this.pred.getField2());
+    }
+    
+    HashMap<Object, ArrayList<Tuple>> map = new HashMap<Object, ArrayList<Tuple>>();
+    public final static int MAP_SIZE = 20000;
+
+    private boolean loadMap() throws DbException, TransactionAbortedException {
+        int cnt = 0;
+        map.clear();
+        while (child1.hasNext()) {
+            t1 = child1.next();
+            ArrayList<Tuple> list = map.get(t1.getField(pred.getField1()));
+            if (list == null) {
+                list = new ArrayList<Tuple>();
+                map.put(t1.getField(pred.getField1()), list);
+            }
+            list.add(t1);
+            if (cnt++ == MAP_SIZE)
+                return true;
+        }
+        return cnt > 0;
+
+    }
+
+    public void open() throws DbException, NoSuchElementException,
+            TransactionAbortedException {
+        child1.open();
+        child2.open();
+        loadMap();
+        super.open();
+    }
+
+    public void close() {
+        super.close();
+        child2.close();
+        child1.close();
+        this.t1=null;
+        this.t2=null;
+        this.listIt=null;
+        this.map.clear();
+    }
+
+    public void rewind() throws DbException, TransactionAbortedException {
+        child1.rewind();
+        child2.rewind();
+    }
+
+    transient Iterator<Tuple> listIt = null;
+
+    /**
+     * Returns the next tuple generated by the join, or null if there are no
+     * more tuples. Logically, this is the next tuple in r1 cross r2 that
+     * satisfies the join predicate. There are many possible implementations;
+     * the simplest is a nested loops join.
+     * <p>
+     * Note that the tuples returned from this particular implementation of Join
+     * are simply the concatenation of joining tuples from the left and right
+     * relation. Therefore, there will be two copies of the join attribute in
+     * the results. (Removing such duplicate columns can be done with an
+     * additional projection operator if needed.)
+     * <p>
+     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
+     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
+     * 
+     * @return The next matching tuple.
+     * @see JoinPredicate#filter
+     */
+    private Tuple processList() throws TransactionAbortedException, DbException {
+        t1 = listIt.next();
+
+        int td1n = t1.getTupleDesc().numFields();
+        int td2n = t2.getTupleDesc().numFields();
+
+        // set fields in combined tuple
+        Tuple t = new Tuple(comboTD);
+        for (int i = 0; i < td1n; i++)
+            t.setField(i, t1.getField(i));
+        for (int i = 0; i < td2n; i++)
+            t.setField(td1n + i, t2.getField(i));
+        return t;
+
+    }
+
+    protected Tuple fetchNext() throws TransactionAbortedException, DbException {
+        if (listIt != null && listIt.hasNext()) {
+            return processList();
+        }
+
+        // loop around child2
+        while (child2.hasNext()) {
+            t2 = child2.next();
+
+            // if match, create a combined tuple and fill it with the values
+            // from both tuples
+            ArrayList<Tuple> l = map.get(t2.getField(pred.getField2()));
+            if (l == null)
+                continue;
+            listIt = l.iterator();
+
+            return processList();
+
+        }
+
+        // child2 is done: advance child1
+        child2.rewind();
+        if (loadMap()) {
+            return fetchNext();
+        }
+
+        return null;
+    }
+
+    @Override
+    public DbIterator[] getChildren() {
+        return new DbIterator[]{this.child1, this.child2};
+    }
+
+    @Override
+    public void setChildren(DbIterator[] children) {
+        this.child1 = children[0];
+        this.child2 = children[1];
+    }
+    
+}
diff -ruN lab1/src/java/simpledb/HeapFile.java lab3/src/java/simpledb/HeapFile.java
--- lab1/src/java/simpledb/HeapFile.java	2016-11-02 22:06:58.000000000 -0500
+++ lab3/src/java/simpledb/HeapFile.java	2016-11-02 22:06:55.000000000 -0500
@@ -15,6 +15,9 @@
  */
 public class HeapFile implements DbFile {
 
+    // a hack to remember the last page that had a free slot
+    private volatile int lastEmptyPage = -1;
+
     /**
      * Constructs a heap file backed by the specified file.
      * 
@@ -23,7 +26,6 @@
      *            file.
      */
     public HeapFile(File f, TupleDesc td) {
-        // some code goes here
     }
 
     /**
@@ -32,8 +34,6 @@
      * @return the File backing this HeapFile on disk.
      */
     public File getFile() {
-        // some code goes here
-        return null;
     }
 
     /**
@@ -46,8 +46,6 @@
      * @return an ID uniquely identifying this HeapFile.
      */
     public int getId() {
-        // some code goes here
-        throw new UnsupportedOperationException("implement this");
     }
 
     /**
@@ -56,50 +54,122 @@
      * @return TupleDesc of this DbFile.
      */
     public TupleDesc getTupleDesc() {
-        // some code goes here
-        throw new UnsupportedOperationException("implement this");
     }
 
     // see DbFile.java for javadocs
     public Page readPage(PageId pid) {
-        // some code goes here
-        return null;
     }
 
     // see DbFile.java for javadocs
     public void writePage(Page page) throws IOException {
-        // some code goes here
-        // not necessary for lab1
+        HeapPage p = (HeapPage) page;
+        // System.out.println("Writing back page " + p.getId().pageno());
+        byte[] data = p.getPageData();
+        RandomAccessFile rf = new RandomAccessFile(f, "rw");
+        rf.seek(p.getId().pageNumber() * BufferPool.getPageSize());
+        rf.write(data);
+        rf.close();
     }
 
     /**
      * Returns the number of pages in this HeapFile.
      */
     public int numPages() {
-        // some code goes here
-        return 0;
     }
 
     // see DbFile.java for javadocs
     public ArrayList<Page> insertTuple(TransactionId tid, Tuple t)
             throws DbException, IOException, TransactionAbortedException {
-        // some code goes here
-        return null;
-        // not necessary for lab1
+        ArrayList<Page> dirtypages = new ArrayList<Page>();
+
+        // find the first page with a free slot in it
+        int i = 0;
+        if (lastEmptyPage != -1)
+            i = lastEmptyPage;
+        // XXX: Would it not be better to scan from numPages() to 0 since the
+        // last pages are more likely to have empty slots?
+        for (; i < numPages(); i++) {
+            Debug.log(
+                    4,
+                    "HeapFile.addTuple: checking free slots on page %d of table %d",
+                    i, tableid);
+            HeapPageId pid = new HeapPageId(tableid, i);
+            HeapPage p = (HeapPage) Database.getBufferPool().getPage(tid, pid,
+                    Permissions.READ_WRITE);
+
+            // no empty slots
+            //
+            // think about why we have to invoke releasePage here.
+            // can you think of ways where
+            if (p.getNumEmptySlots() == 0) {
+                Debug.log(
+                        4,
+                        "HeapFile.addTuple: no free slots on page %d of table %d",
+                        i, tableid);
+
+                // we mistakenly got here through lastEmptyPage, just add a page
+                // XXX we know this isn't very pretty.
+                if (lastEmptyPage != -1) {
+                    lastEmptyPage = -1;
+                    break;
+                }
+                continue;
+            }
+            Debug.log(4, "HeapFile.addTuple: %d free slots in table %d",
+                    p.getNumEmptySlots(), tableid);
+            p.insertTuple(t);
+            lastEmptyPage = p.getId().pageNumber();
+            // System.out.println("nfetches = " + nfetches);
+            dirtypages.add(p);
+            return dirtypages;
+        }
+
+        // no empty slots -- append a page
+        // This must be synchronized so that the append operation is atomic.
+        // Otherwise a second
+        // thread could be blocked just after opening the file. The first
+        // transaction flushes
+        // new tuples to the page. The second transaction then overwrites the
+        // data with an empty
+        // page, losing the new data.
+        synchronized (this) {
+            BufferedOutputStream bw = new BufferedOutputStream(
+                    new FileOutputStream(f, true));
+            byte[] emptyData = HeapPage.createEmptyPageData();
+            bw.write(emptyData);
+            bw.close();
+        }
+
+        // by virtue of writing these bits to the HeapFile, it is now visible.
+        // so some other dude may have obtained a read lock on the empty page
+        // we just created---which is ok, we haven't yet added the tuple.
+        // we just need to lock the page before we can add the tuple to it.
+
+        HeapPage p = (HeapPage) Database.getBufferPool()
+                .getPage(tid, new HeapPageId(tableid, numPages() - 1),
+                        Permissions.READ_WRITE);
+        p.insertTuple(t);
+        lastEmptyPage = p.getId().pageNumber();
+        // System.out.println("nfetches = " + nfetches);
+        dirtypages.add(p);
+        return dirtypages;
     }
 
     // see DbFile.java for javadocs
     public ArrayList<Page> deleteTuple(TransactionId tid, Tuple t) throws DbException,
             TransactionAbortedException {
-        // some code goes here
-        return null;
-        // not necessary for lab1
+        HeapPage p = (HeapPage) Database.getBufferPool().getPage(
+                tid,
+                new HeapPageId(tableid, t.getRecordId().getPageId()
+                        .pageNumber()), Permissions.READ_WRITE);
+        p.deleteTuple(t);
+        ArrayList<Page> pages = new ArrayList<Page>();
+        pages.add(p);
+        return pages;
     }
 
     // see DbFile.java for javadocs
     public DbFileIterator iterator(TransactionId tid) {
-        // some code goes here
-        return null;
     }
 
 }
diff -ruN lab1/src/java/simpledb/HeapPage.java lab3/src/java/simpledb/HeapPage.java
--- lab1/src/java/simpledb/HeapPage.java	2016-11-02 22:06:58.000000000 -0500
+++ lab3/src/java/simpledb/HeapPage.java	2016-11-02 22:06:55.000000000 -0500
@@ -12,6 +12,8 @@
  *
  */
 public class HeapPage implements Page {
+    private volatile boolean dirty = false;
+    private volatile TransactionId dirtier = null;
 
     final HeapPageId pid;
     final TupleDesc td;
@@ -66,8 +68,6 @@
         @return the number of tuples on this page
     */
     private int getNumTuples() {        
-        // some code goes here
-        return 0;
 
     }
 
@@ -77,9 +77,6 @@
      */
     private int getHeaderSize() {        
         
-        // some code goes here
-        return 0;
-                 
     }
     
     /** Return a view of this page before it was modified
@@ -111,8 +108,6 @@
      * @return the PageId associated with this page.
      */
     public HeapPageId getId() {
-    // some code goes here
-    throw new UnsupportedOperationException("implement this");
     }
 
     /**
@@ -243,8 +238,12 @@
      * @param t The tuple to delete
      */
     public void deleteTuple(Tuple t) throws DbException {
-        // some code goes here
-        // not necessary for lab1
+        RecordId rid = t.getRecordId();
+        if((rid.getPageId().pageNumber() != pid.pageNumber()) || (rid.getPageId().getTableId() != pid.getTableId()))
+            throw new DbException("tried to delete tuple on invalid page or table");
+        if (!isSlotUsed(rid.tupleno()))
+            throw new DbException("tried to delete null tuple.");
+        markSlotUsed(rid.tupleno(), false);        
     }
 
     /**
@@ -255,8 +254,26 @@
      * @param t The tuple to add.
      */
     public void insertTuple(Tuple t) throws DbException {
-        // some code goes here
-        // not necessary for lab1
+
+        if (!t.getTupleDesc().equals(td))
+            throw new DbException("type mismatch, in addTuple");
+
+        int goodSlot = -1;
+        for (int i=0; i<numSlots; i++) {
+            if (!isSlotUsed(i) && goodSlot == -1) {
+                goodSlot = i;
+                break;
+            }
+            
+        }
+        if (goodSlot == -1)
+            throw new DbException("called addTuple on page with no empty slots.");
+
+        markSlotUsed(goodSlot, true);
+        Debug.log(1, "HeapPage.addTuple: new tuple, tableId = %d pageId = %d slotId = %d", pid.getTableId(), pid.pageNumber(), goodSlot);
+        RecordId rid = new RecordId(pid, goodSlot);
+        t.setRecordId(rid);
+        tuples[goodSlot] = t;
     }
 
     /**
@@ -264,41 +281,45 @@
      * that did the dirtying
      */
     public void markDirty(boolean dirty, TransactionId tid) {
-        // some code goes here
-	// not necessary for lab1
+        //Debug.println("HeapPage.markDirty: " + pid.getTableId() + ":" + pid.pageno() + " dirty = " + dirty, 1);
+        this.dirty = dirty;
+        if (dirty) this.dirtier = tid;
     }
 
     /**
      * Returns the tid of the transaction that last dirtied this page, or null if the page is not dirty
      */
     public TransactionId isDirty() {
-        // some code goes here
-	// Not necessary for lab1
-        return null;      
+        if (this.dirty)
+            return this.dirtier;
+        else
+            return null;
     }
 
     /**
      * Returns the number of empty slots on this page.
      */
     public int getNumEmptySlots() {
-        // some code goes here
-        return 0;
     }
 
     /**
      * Returns true if associated slot on this page is filled.
      */
     public boolean isSlotUsed(int i) {
-        // some code goes here
-        return false;
     }
 
     /**
      * Abstraction to fill or clear a slot on this page.
      */
     private void markSlotUsed(int i, boolean value) {
-        // some code goes here
-        // not necessary for lab1
+        int headerbit = i % 8;
+        int headerbyte = (i - headerbit) / 8;
+
+        Debug.log(1, "HeapPage.setSlot: setting slot %d to %b", i, value);
+        if(value)
+            header[headerbyte] |= 1 << headerbit;
+        else
+            header[headerbyte] &= (0xFF ^ (1 << headerbit));
     }
 
     /**
@@ -306,8 +327,6 @@
      * (note that this iterator shouldn't return tuples in empty slots!)
      */
     public Iterator<Tuple> iterator() {
-        // some code goes here
-        return null;
     }
 
 }
diff -ruN lab1/src/java/simpledb/HeapPageId.java lab3/src/java/simpledb/HeapPageId.java
--- lab1/src/java/simpledb/HeapPageId.java	2016-11-02 22:06:58.000000000 -0500
+++ lab3/src/java/simpledb/HeapPageId.java	2016-11-02 22:06:55.000000000 -0500
@@ -11,13 +11,10 @@
      * @param pgNo The page number in that table.
      */
     public HeapPageId(int tableId, int pgNo) {
-        // some code goes here
     }
 
     /** @return the table associated with this PageId */
     public int getTableId() {
-        // some code goes here
-        return 0;
     }
 
     /**
@@ -25,8 +22,6 @@
      *   this PageId
      */
     public int pageNumber() {
-        // some code goes here
-        return 0;
     }
 
     /**
@@ -36,8 +31,6 @@
      * @see BufferPool
      */
     public int hashCode() {
-        // some code goes here
-        throw new UnsupportedOperationException("implement this");
     }
 
     /**
@@ -48,8 +41,6 @@
      *   ids are the same)
      */
     public boolean equals(Object o) {
-        // some code goes here
-        return false;
     }
 
     /**
diff -ruN lab1/src/java/simpledb/IndexDbIterator.java lab3/src/java/simpledb/IndexDbIterator.java
--- lab1/src/java/simpledb/IndexDbIterator.java	1969-12-31 18:00:00.000000000 -0600
+++ lab3/src/java/simpledb/IndexDbIterator.java	2016-11-02 22:06:55.000000000 -0500
@@ -0,0 +1,20 @@
+package simpledb;
+import java.util.*;
+
+/** IndexDBIterator is the interface that index access methods
+    implement in SimpleDb.
+*/
+public interface IndexDbIterator extends DbIterator {
+    /** Open the access method such that when getNext is called, it
+        iterates through the tuples that satisfy ipred.
+        @param ipred The predicate that is used to scan the index.
+    */
+    public void open(IndexPredicate ipred)
+        throws NoSuchElementException, DbException, TransactionAbortedException;
+
+    /** Begin a new index scan with the specified predicate.
+        @param ipred The predicate that is used to scan the index.
+    */
+    public void rewind(IndexPredicate ipred)
+        throws DbException, TransactionAbortedException;
+}
diff -ruN lab1/src/java/simpledb/IndexPredicate.java lab3/src/java/simpledb/IndexPredicate.java
--- lab1/src/java/simpledb/IndexPredicate.java	1969-12-31 18:00:00.000000000 -0600
+++ lab3/src/java/simpledb/IndexPredicate.java	2016-11-02 22:06:55.000000000 -0500
@@ -0,0 +1,49 @@
+package simpledb;
+
+import java.io.Serializable;
+
+/**
+ * IndexPredicate compares a field which has index on it against a given value
+ * @see simpledb.IndexDbIterator
+ */
+public class IndexPredicate implements Serializable {
+	
+    private static final long serialVersionUID = 1L;
+	
+    private Predicate.Op op;
+    private Field fieldvalue;
+
+    /**
+     * Constructor.
+     *
+     * @param fvalue The value that the predicate compares against.
+     * @param op The operation to apply (as defined in Predicate.Op); either
+     *   Predicate.Op.GREATER_THAN, Predicate.Op.LESS_THAN, Predicate.Op.EQUAL,
+     *   Predicate.Op.GREATER_THAN_OR_EQ, or Predicate.Op.LESS_THAN_OR_EQ
+     * @see Predicate
+     */
+    public IndexPredicate(Predicate.Op op, Field fvalue) {
+        this.op = op;
+        this.fieldvalue = fvalue;
+    }
+
+    public Field getField() {
+        return fieldvalue;
+    }
+
+    public Predicate.Op getOp() {
+        return op;
+    }
+
+    /** Return true if the fieldvalue in the supplied predicate
+        is satisfied by this predicate's fieldvalue and
+        operator.
+        @param ipd The field to compare against.
+    */
+    public boolean equals(IndexPredicate ipd) {
+        if (ipd == null)
+            return false;
+        return (op.equals(ipd.op) && fieldvalue.equals(ipd.fieldvalue));
+    }
+
+}
diff -ruN lab1/src/java/simpledb/Insert.java lab3/src/java/simpledb/Insert.java
--- lab1/src/java/simpledb/Insert.java	1969-12-31 18:00:00.000000000 -0600
+++ lab3/src/java/simpledb/Insert.java	2016-11-02 22:06:55.000000000 -0500
@@ -0,0 +1,113 @@
+package simpledb;
+
+import java.io.*;
+
+/**
+ * Inserts tuples read from the child operator into the tableId specified in the
+ * constructor
+ */
+public class Insert extends Operator {
+
+    private static final long serialVersionUID = 1L;
+
+    private DbIterator child;
+    private int tableId;
+    private TransactionId tid;
+    private TupleDesc returnTD;
+    private boolean processed=false;
+
+    /**
+     * Constructor.
+     *
+     * @param t
+     *            The transaction running the insert.
+     * @param child
+     *            The child operator from which to read tuples to be inserted.
+     * @param tableId
+     *            The table in which to insert tuples.
+     * @throws DbException
+     *             if TupleDesc of child differs from table into which we are to
+     *             insert.
+     */
+    public Insert(TransactionId t,DbIterator child, int tableId)
+            throws DbException {
+        this.child = child;
+        this.tableId = tableId;
+        this.tid = t;
+
+        // verify that TupleDescriptors are the same
+        if (!child.getTupleDesc().equals(
+                Database.getCatalog().getTupleDesc(tableId)))
+            throw new DbException("incompatible tuple descriptors for Insert");
+
+        // we return a 1-field tuple
+        Type[] typeAr = new Type[1];
+        typeAr[0] = Type.INT_TYPE;
+        returnTD = new TupleDesc(typeAr);
+    }
+
+    public TupleDesc getTupleDesc() {
+        return returnTD;
+    }
+
+    public void open() throws DbException, TransactionAbortedException {
+        child.open();
+        super.open();
+    }
+
+    public void close() {
+        super.close();
+        child.close();
+    }
+
+    public void rewind() throws DbException, TransactionAbortedException {
+        child.close();
+        child.open();
+    }
+
+    /**
+     * Inserts tuples read from child into the tableId specified by the
+     * constructor. It returns a one field tuple containing the number of
+     * inserted records. Inserts should be passed through BufferPool. An
+     * instances of BufferPool is available via Database.getBufferPool(). Note
+     * that insert DOES NOT need check to see if a particular tuple is a
+     * duplicate before inserting it.
+     *
+     * @return A 1-field tuple containing the number of inserted records, or
+     *         null if called more than once.
+     * @see Database#getBufferPool
+     * @see BufferPool#insertTuple
+     */
+    protected Tuple fetchNext() throws TransactionAbortedException, DbException {
+        if (processed)
+            return null;
+
+        int count = 0;
+        while (child.hasNext()) {
+            Tuple t = child.next();
+            try {
+                Database.getBufferPool().insertTuple(tid, tableId, t);
+            } catch (IOException e) {
+                throw new RuntimeException(e);
+            }
+            count++;
+        }
+
+        // finished scanning
+        // generate a new "insert count" tuple
+        Tuple tup = new Tuple(returnTD);
+        tup.setField(0, new IntField(count));
+        processed=true;
+        return tup;
+    }
+
+    @Override
+    public DbIterator[] getChildren() {
+        return new DbIterator[] { this.child };
+    }
+
+    @Override
+    public void setChildren(DbIterator[] children) {
+        this.child = children[0];
+    }
+}
diff -ruN lab1/src/java/simpledb/IntHistogram.java lab3/src/java/simpledb/IntHistogram.java
--- lab1/src/java/simpledb/IntHistogram.java	1969-12-31 18:00:00.000000000 -0600
+++ lab3/src/java/simpledb/IntHistogram.java	2016-11-02 22:06:55.000000000 -0500
@@ -0,0 +1,72 @@
+package simpledb;
+
+/** A class to represent a fixed-width histogram over a single integer-based field.
+ */
+public class IntHistogram {
+
+    /**
+     * Create a new IntHistogram.
+     * 
+     * This IntHistogram should maintain a histogram of integer values that it receives.
+     * It should split the histogram into "buckets" buckets.
+     * 
+     * The values that are being histogrammed will be provided one-at-a-time through the "addValue()" function.
+     * 
+     * Your implementation should use space and have execution time that are both
+     * constant with respect to the number of values being histogrammed.  For example, you shouldn't 
+     * simply store every value that you see in a sorted list.
+     * 
+     * @param buckets The number of buckets to split the input value into.
+     * @param min The minimum integer value that will ever be passed to this class for histogramming
+     * @param max The maximum integer value that will ever be passed to this class for histogramming
+     */
+    public IntHistogram(int buckets, int min, int max) {
+    	// some code goes here
+    }
+
+    /**
+     * Add a value to the set of values that you are keeping a histogram of.
+     * @param v Value to add to the histogram
+     */
+    public void addValue(int v) {
+    	// some code goes here
+    }
+
+    /**
+     * Estimate the selectivity of a particular predicate and operand on this table.
+     * 
+     * For example, if "op" is "GREATER_THAN" and "v" is 5, 
+     * return your estimate of the fraction of elements that are greater than 5.
+     * 
+     * @param op Operator
+     * @param v Value
+     * @return Predicted selectivity of this particular operator and value
+     */
+    public double estimateSelectivity(Predicate.Op op, int v) {
+
+    	// some code goes here
+        return -1.0;
+    }
+    
+    /**
+     * @return
+     *     the average selectivity of this histogram.
+     *     
+     *     This is not an indispensable method to implement the basic
+     *     join optimization. It may be needed if you want to
+     *     implement a more efficient optimization
+     * */
+    public double avgSelectivity()
+    {
+        // some code goes here
+        return 1.0;
+    }
+    
+    /**
+     * @return A string describing this histogram, for debugging purposes
+     */
+    public String toString() {
+        // some code goes here
+        return null;
+    }
+}
diff -ruN lab1/src/java/simpledb/IntegerAggregator.java lab3/src/java/simpledb/IntegerAggregator.java
--- lab1/src/java/simpledb/IntegerAggregator.java	1969-12-31 18:00:00.000000000 -0600
+++ lab3/src/java/simpledb/IntegerAggregator.java	2016-11-02 22:06:55.000000000 -0500
@@ -0,0 +1,155 @@
+package simpledb;
+
+import java.util.*;
+
+/**
+ * Knows how to compute some aggregate over a set of IntFields.
+ */
+public class IntegerAggregator implements Aggregator {
+
+    private static final long serialVersionUID = 1L;
+
+    private Op what;
+    private int gbfield;
+    private Type gbfieldtype;
+    private int afield;
+    // a map of groupVal -> AggregateFields
+    private HashMap<String, AggregateFields> groups;
+
+    /**
+     * Aggregate constructor
+     * 
+     * @param gbfield
+     *            the 0-based index of the group-by field in the tuple, or
+     *            NO_GROUPING if there is no grouping
+     * @param gbfieldtype
+     *            the type of the group by field (e.g., Type.INT_TYPE), or null
+     *            if there is no grouping
+     * @param afield
+     *            the 0-based index of the aggregate field in the tuple
+     * @param what
+     *            the aggregation operator
+     */
+
+    public IntegerAggregator(int gbfield, Type gbfieldtype, int afield, Op what) {
+        this.what = what;
+        this.gbfield = gbfield;
+        this.afield = afield;
+        this.gbfieldtype = gbfieldtype;
+        this.groups = new HashMap<String, AggregateFields>();
+    }
+
+    /**
+     * Merge a new tuple into the aggregate, grouping as indicated in the
+     * constructor
+     * 
+     * @param tup
+     *            the Tuple containing an aggregate field and a group-by field
+     */
+    public void mergeTupleIntoGroup(Tuple tup) {
+        String groupVal = "";
+        if (gbfield != NO_GROUPING) {
+            groupVal = tup.getField(gbfield).toString();
+        }
+        AggregateFields agg = groups.get(groupVal);
+        if (agg == null)
+            agg = new AggregateFields(groupVal);
+
+        int x = ((IntField) tup.getField(afield)).getValue();
+
+        agg.count++;
+        agg.sum += x;
+        agg.min = (x < agg.min ? x : agg.min);
+        agg.max = (x > agg.max ? x : agg.max);
+        if (what==Op.SC_AVG)
+            agg.sumCount+=((IntField) tup.getField(afield+1)).getValue();
+
+        groups.put(groupVal, agg);
+    }
+
+    /**
+     * Create a DbIterator over group aggregate results.
+     * 
+     * @return a DbIterator whose tuples are the pair (groupVal, aggregateVal)
+     *         if using group, or a single (aggregateVal) if no grouping. The
+     *         aggregateVal is determined by the type of aggregate specified in
+     *         the constructor.
+     */
+    public DbIterator iterator() {
+        LinkedList<Tuple> result = new LinkedList<Tuple>();
+        int aggField = 1;
+        TupleDesc td;
+
+        if (gbfield == NO_GROUPING) {
+            if (what==Op.SUM_COUNT)
+        	td = new TupleDesc(new Type[]{Type.INT_TYPE, Type.INT_TYPE});
+            else
+        	td = new TupleDesc(new Type[] { Type.INT_TYPE });
+            aggField = 0;
+        } else {
+            if (what==Op.SUM_COUNT)
+        	td = new TupleDesc(new Type[]{gbfieldtype,Type.INT_TYPE, Type.INT_TYPE});
+            else
+        	td = new TupleDesc(new Type[] { gbfieldtype, Type.INT_TYPE });
+        }
+
+        // iterate over groups and create summary tuples
+        for (String groupVal : groups.keySet()) {
+            AggregateFields agg = groups.get(groupVal);
+            Tuple tup = new Tuple(td);
+
+            if (gbfield != NO_GROUPING) {
+                if (gbfieldtype == Type.INT_TYPE)
+                    tup.setField(0, new IntField(new Integer(groupVal)));
+                else
+                    tup.setField(0, new StringField(groupVal, Type.STRING_LEN));
+            }
+            switch (what) {
+            case MIN:
+                tup.setField(aggField, new IntField(agg.min));
+                break;
+            case MAX:
+                tup.setField(aggField, new IntField(agg.max));
+                break;
+            case SUM:
+                tup.setField(aggField, new IntField(agg.sum));
+                break;
+            case COUNT:
+                tup.setField(aggField, new IntField(agg.count));
+                break;
+            case AVG:
+                tup.setField(aggField, new IntField(agg.sum / agg.count));
+                break;
+            case SUM_COUNT:
+        	tup.setField(aggField, new IntField(agg.sum));
+        	tup.setField(aggField+1, new IntField(agg.count));
+        	break;
+            case SC_AVG:
+        	tup.setField(aggField, new IntField(agg.sum / agg.sumCount));
+        	break;
+            }
+
+            result.add(tup);
+        }
+
+        DbIterator retVal = null;
+        retVal = new TupleIterator(td, Collections.unmodifiableList(result));
+        return retVal;
+    }
+
+    /**
+     * A helper struct to store accumulated aggregate values.
+     */
+    private class AggregateFields {
+        public String groupVal;
+        public int min, max, sum, count, sumCount;
+
+        public AggregateFields(String groupVal) {
+            this.groupVal = groupVal;
+            min = Integer.MAX_VALUE;
+            max = Integer.MIN_VALUE;
+            sum = count = sumCount = 0;
+        }
+    }
+
+}
diff -ruN lab1/src/java/simpledb/Join.java lab3/src/java/simpledb/Join.java
--- lab1/src/java/simpledb/Join.java	1969-12-31 18:00:00.000000000 -0600
+++ lab3/src/java/simpledb/Join.java	2016-11-02 22:06:55.000000000 -0500
@@ -0,0 +1,148 @@
+package simpledb;
+
+import java.util.*;
+
+/**
+ * The Join operator implements the relational join operation.
+ */
+public class Join extends Operator {
+
+    private static final long serialVersionUID = 1L;
+    private JoinPredicate pred;
+    private DbIterator child1, child2;
+    private TupleDesc comboTD;
+    private Tuple t1 = null;
+
+    /**
+     * Constructor. Accepts to children to join and the predicate to join them
+     * on
+     * 
+     * @param p
+     *            The predicate to use to join the children
+     * @param child1
+     *            Iterator for the left(outer) relation to join
+     * @param child2
+     *            Iterator for the right(inner) relation to join
+     */
+    public Join(JoinPredicate p, DbIterator child1, DbIterator child2) {
+        this.pred = p;
+        this.child1 = child1;
+        this.child2 = child2;
+        comboTD = TupleDesc.merge(child1.getTupleDesc(), child2.getTupleDesc());
+    }
+
+    public JoinPredicate getJoinPredicate() {
+        return pred;
+    }
+
+    /**
+     * @return
+     *       the field name of join field1. Should be quantified by
+     *       alias or table name.
+     * */
+    public String getJoinField1Name() {
+        return this.child1.getTupleDesc().getFieldName(this.pred.getField1());
+    }
+
+    /**
+     * @return
+     *       the field name of join field2. Should be quantified by
+     *       alias or table name.
+     * */
+    public String getJoinField2Name() {
+        return this.child2.getTupleDesc().getFieldName(this.pred.getField2());
+    }
+
+    /**
+     * @see simpledb.TupleDesc#merge(TupleDesc, TupleDesc) for possible
+     *      implementation logic.
+     */
+    public TupleDesc getTupleDesc() {
+        return comboTD;
+    }
+
+    public void open() throws DbException, NoSuchElementException,
+            TransactionAbortedException {
+        child1.open();
+        child2.open();
+        super.open();
+    }
+
+    public void close() {
+        super.close();
+        child2.close();
+        child1.close();
+    }
+
+    public void rewind() throws DbException, TransactionAbortedException {
+        child1.rewind();
+        child2.rewind();
+    }
+
+    /**
+     * Returns the next tuple generated by the join, or null if there are no
+     * more tuples. Logically, this is the next tuple in r1 cross r2 that
+     * satisfies the join predicate. There are many possible implementations;
+     * the simplest is a nested loops join.
+     * <p>
+     * Note that the tuples returned from this particular implementation of Join
+     * are simply the concatenation of joining tuples from the left and right
+     * relation. Therefore, if an equality predicate is used there will be two
+     * copies of the join attribute in the results. (Removing such duplicate
+     * columns can be done with an additional projection operator if needed.)
+     * <p>
+     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
+     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
+     * 
+     * @return The next matching tuple.
+     * @see JoinPredicate#filter
+     */
+    protected Tuple fetchNext() throws TransactionAbortedException, DbException {
+        // loop around child1
+        while (t1 != null || child1.hasNext()) {
+            if (t1 == null) {
+                assert child1.hasNext();
+                t1 = child1.next();
+            }
+
+            // loop around child2
+            while (child2.hasNext()) {
+                Tuple t2 = child2.next();
+
+                // if match, create a combined tuple and fill it with the values
+                // from both tuples
+                if (!pred.filter(t1, t2))
+                    continue;
+
+                int td1n = t1.getTupleDesc().numFields();
+                int td2n = t2.getTupleDesc().numFields();
+
+                // set fields in combined tuple
+                Tuple t = new Tuple(comboTD);
+                for (int i = 0; i < td1n; i++)
+                    t.setField(i, t1.getField(i));
+                for (int i = 0; i < td2n; i++)
+                    t.setField(td1n + i, t2.getField(i));
+                return t;
+            }
+
+            // child2 is done: advance child1
+            t1 = null;
+            child2.rewind();
+        }
+
+        return null;
+    }
+
+    @Override
+    public DbIterator[] getChildren() {
+        return new DbIterator[] { this.child1, this.child2 };
+    }
+
+    @Override
+    public void setChildren(DbIterator[] children) {
+        this.child1 = children[0];
+        this.child2 = children[1];
+    }
+
+}
diff -ruN lab1/src/java/simpledb/JoinOptimizer.java lab3/src/java/simpledb/JoinOptimizer.java
--- lab1/src/java/simpledb/JoinOptimizer.java	1969-12-31 18:00:00.000000000 -0600
+++ lab3/src/java/simpledb/JoinOptimizer.java	2016-11-02 22:06:55.000000000 -0500
@@ -0,0 +1,553 @@
+package simpledb;
+
+import java.util.*;
+
+import javax.swing.*;
+import javax.swing.tree.*;
+
+/**
+ * The JoinOptimizer class is responsible for ordering a series of joins
+ * optimally, and for selecting the best instantiation of a join for a given
+ * logical plan.
+ */
+public class JoinOptimizer {
+    LogicalPlan p;
+    Vector<LogicalJoinNode> joins;
+
+    /**
+     * Constructor
+     * 
+     * @param p
+     *            the logical plan being optimized
+     * @param joins
+     *            the list of joins being performed
+     */
+    public JoinOptimizer(LogicalPlan p, Vector<LogicalJoinNode> joins) {
+        this.p = p;
+        this.joins = joins;
+    }
+
+    /**
+     * Return best iterator for computing a given logical join, given the
+     * specified statistics, and the provided left and right subplans. Note that
+     * there is insufficient information to determine which plan should be the
+     * inner/outer here -- because DbIterator's don't provide any cardinality
+     * estimates, and stats only has information about the base tables. For this
+     * reason, the plan1
+     * 
+     * @param lj
+     *            The join being considered
+     * @param plan1
+     *            The left join node's child
+     * @param plan2
+     *            The right join node's child
+     */
+    public static DbIterator instantiateJoin(LogicalJoinNode lj,
+            DbIterator plan1, DbIterator plan2) throws ParsingException {
+
+        int t1id = 0, t2id = 0;
+        DbIterator j;
+
+        try {
+            t1id = plan1.getTupleDesc().fieldNameToIndex(lj.f1QuantifiedName);
+        } catch (NoSuchElementException e) {
+            throw new ParsingException("Unknown field " + lj.f1QuantifiedName);
+        }
+
+        if (lj instanceof LogicalSubplanJoinNode) {
+            t2id = 0;
+        } else {
+            try {
+                t2id = plan2.getTupleDesc().fieldNameToIndex(
+                        lj.f2QuantifiedName);
+            } catch (NoSuchElementException e) {
+                throw new ParsingException("Unknown field "
+                        + lj.f2QuantifiedName);
+            }
+        }
+
+        JoinPredicate p = new JoinPredicate(t1id, lj.p, t2id);
+
+        j = new Join(p,plan1,plan2);
+
+        return j;
+
+    }
+
+    /**
+     * Estimate the cost of a join.
+     * 
+     * The cost of the join should be calculated based on the join algorithm (or
+     * algorithms) that you implemented for Lab 2. It should be a function of
+     * the amount of data that must be read over the course of the query, as
+     * well as the number of CPU opertions performed by your join. Assume that
+     * the cost of a single predicate application is roughly 1.
+     * 
+     * 
+     * @param j
+     *            A LogicalJoinNode representing the join operation being
+     *            performed.
+     * @param card1
+     *            Estimated cardinality of the left-hand side of the query
+     * @param card2
+     *            Estimated cardinality of the right-hand side of the query
+     * @param cost1
+     *            Estimated cost of one full scan of the table on the left-hand
+     *            side of the query
+     * @param cost2
+     *            Estimated cost of one full scan of the table on the right-hand
+     *            side of the query
+     * @return An estimate of the cost of this query, in terms of cost1 and
+     *         cost2
+     */
+    public double estimateJoinCost(LogicalJoinNode j, int card1, int card2,
+            double cost1, double cost2) {
+        if (j instanceof LogicalSubplanJoinNode) {
+            // A LogicalSubplanJoinNode represents a subquery.
+            // You do not need to implement proper support for these for Lab 5.
+            return card1 + cost1 + cost2;
+        } else {
+            // Insert your code here.
+            // HINT: You may need to use the variable "j" if you implemented
+            // a join algorithm that's more complicated than a basic
+            // nested-loops join.
+            return -1.0;
+        }
+    }
+
+    /**
+     * Estimate the cardinality of a join. The cardinality of a join is the
+     * number of tuples produced by the join.
+     * 
+     * @param j
+     *            A LogicalJoinNode representing the join operation being
+     *            performed.
+     * @param card1
+     *            Cardinality of the left-hand table in the join
+     * @param card2
+     *            Cardinality of the right-hand table in the join
+     * @param t1pkey
+     *            Is the left-hand table a primary-key table?
+     * @param t2pkey
+     *            Is the right-hand table a primary-key table?
+     * @param stats
+     *            The table stats, referenced by table names, not alias
+     * @return The cardinality of the join
+     */
+    public int estimateJoinCardinality(LogicalJoinNode j, int card1, int card2,
+            boolean t1pkey, boolean t2pkey, Map<String, TableStats> stats) {
+        if (j instanceof LogicalSubplanJoinNode) {
+            // A LogicalSubplanJoinNode represents a subquery.
+            // You do not need to implement proper support for these for Lab 5.
+            return card1;
+        } else {
+            return estimateTableJoinCardinality(j.p, j.t1Alias, j.t2Alias,
+                    j.f1PureName, j.f2PureName, card1, card2, t1pkey, t2pkey,
+                    stats, p.getTableAliasToIdMapping());
+        }
+    }
+
+    /**
+     * Estimate the join cardinality of two tables.
+     * */
+    public static int estimateTableJoinCardinality(Predicate.Op joinOp,
+            String table1Alias, String table2Alias, String field1PureName,
+            String field2PureName, int card1, int card2, boolean t1pkey,
+            boolean t2pkey, Map<String, TableStats> stats,
+            Map<String, Integer> tableAliasToId) {
+        int card = 1;
+        // some code goes here
+        return card <= 0 ? 1 : card;
+    }
+
+    /**
+     * Helper method to enumerate all of the subsets of a given size of a
+     * specified vector.
+     * 
+     * @param v
+     *            The vector whose subsets are desired
+     * @param size
+     *            The size of the subsets of interest
+     * @return a set of all subsets of the specified size
+     */
+    @SuppressWarnings("unchecked")
+    public <T> Set<Set<T>> enumerateSubsets(Vector<T> v, int size) {
+        Set<Set<T>> els = new HashSet<Set<T>>();
+        els.add(new HashSet<T>());
+        // Iterator<Set> it;
+        // long start = System.currentTimeMillis();
+
+        for (int i = 0; i < size; i++) {
+            Set<Set<T>> newels = new HashSet<Set<T>>();
+            for (Set<T> s : els) {
+                for (T t : v) {
+                    Set<T> news = (Set<T>) (((HashSet<T>) s).clone());
+                    if (news.add(t))
+                        newels.add(news);
+                }
+            }
+            els = newels;
+        }
+
+        return els;
+
+    }
+
+    /**
+     * Compute a logical, reasonably efficient join on the specified tables. See
+     * PS4 for hints on how this should be implemented.
+     * 
+     * @param stats
+     *            Statistics for each table involved in the join, referenced by
+     *            base table names, not alias
+     * @param filterSelectivities
+     *            Selectivities of the filter predicates on each table in the
+     *            join, referenced by table alias (if no alias, the base table
+     *            name)
+     * @param explain
+     *            Indicates whether your code should explain its query plan or
+     *            simply execute it
+     * @return A Vector<LogicalJoinNode> that stores joins in the left-deep
+     *         order in which they should be executed.
+     * @throws ParsingException
+     *             when stats or filter selectivities is missing a table in the
+     *             join, or or when another internal error occurs
+     */
+    public Vector<LogicalJoinNode> orderJoins(
+            HashMap<String, TableStats> stats,
+            HashMap<String, Double> filterSelectivities, boolean explain)
+            throws ParsingException {
+        //Not necessary for labs 1--3
+
+        // some code goes here
+        //Replace the following
+        return joins;
+    }
+
+    // ===================== Private Methods =================================
+
+    /**
+     * This is a helper method that computes the cost and cardinality of joining
+     * joinToRemove to joinSet (joinSet should contain joinToRemove), given that
+     * all of the subsets of size joinSet.size() - 1 have already been computed
+     * and stored in PlanCache pc.
+     * 
+     * @param stats
+     *            table stats for all of the tables, referenced by table names
+     *            rather than alias (see {@link #orderJoins})
+     * @param filterSelectivities
+     *            the selectivities of the filters over each of the tables
+     *            (where tables are indentified by their alias or name if no
+     *            alias is given)
+     * @param joinToRemove
+     *            the join to remove from joinSet
+     * @param joinSet
+     *            the set of joins being considered
+     * @param bestCostSoFar
+     *            the best way to join joinSet so far (minimum of previous
+     *            invocations of computeCostAndCardOfSubplan for this joinSet,
+     *            from returned CostCard)
+     * @param pc
+     *            the PlanCache for this join; should have subplans for all
+     *            plans of size joinSet.size()-1
+     * @return A {@link CostCard} objects desribing the cost, cardinality,
+     *         optimal subplan
+     * @throws ParsingException
+     *             when stats, filterSelectivities, or pc object is missing
+     *             tables involved in join
+     */
+    @SuppressWarnings("unchecked")
+    private CostCard computeCostAndCardOfSubplan(
+            HashMap<String, TableStats> stats,
+            HashMap<String, Double> filterSelectivities,
+            LogicalJoinNode joinToRemove, Set<LogicalJoinNode> joinSet,
+            double bestCostSoFar, PlanCache pc) throws ParsingException {
+
+        LogicalJoinNode j = joinToRemove;
+
+        Vector<LogicalJoinNode> prevBest;
+
+        if (this.p.getTableId(j.t1Alias) == null)
+            throw new ParsingException("Unknown table " + j.t1Alias);
+        if (this.p.getTableId(j.t2Alias) == null)
+            throw new ParsingException("Unknown table " + j.t2Alias);
+
+        String table1Name = Database.getCatalog().getTableName(
+                this.p.getTableId(j.t1Alias));
+        String table2Name = Database.getCatalog().getTableName(
+                this.p.getTableId(j.t2Alias));
+        String table1Alias = j.t1Alias;
+        String table2Alias = j.t2Alias;
+
+        Set<LogicalJoinNode> news = (Set<LogicalJoinNode>) ((HashSet<LogicalJoinNode>) joinSet)
+                .clone();
+        news.remove(j);
+
+        double t1cost, t2cost;
+        int t1card, t2card;
+        boolean leftPkey, rightPkey;
+
+        if (news.isEmpty()) { // base case -- both are base relations
+            prevBest = new Vector<LogicalJoinNode>();
+            t1cost = stats.get(table1Name).estimateScanCost();
+            t1card = stats.get(table1Name).estimateTableCardinality(
+                    filterSelectivities.get(j.t1Alias));
+            leftPkey = isPkey(j.t1Alias, j.f1PureName);
+
+            t2cost = table2Alias == null ? 0 : stats.get(table2Name)
+                    .estimateScanCost();
+            t2card = table2Alias == null ? 0 : stats.get(table2Name)
+                    .estimateTableCardinality(
+                            filterSelectivities.get(j.t2Alias));
+            rightPkey = table2Alias == null ? false : isPkey(table2Alias,
+                    j.f2PureName);
+        } else {
+            // news is not empty -- figure best way to join j to news
+            prevBest = pc.getOrder(news);
+
+            // possible that we have not cached an answer, if subset
+            // includes a cross product
+            if (prevBest == null) {
+                return null;
+            }
+
+            double prevBestCost = pc.getCost(news);
+            int bestCard = pc.getCard(news);
+
+            // estimate cost of right subtree
+            if (doesJoin(prevBest, table1Alias)) { // j.t1 is in prevBest
+                t1cost = prevBestCost; // left side just has cost of whatever
+                                       // left
+                // subtree is
+                t1card = bestCard;
+                leftPkey = hasPkey(prevBest);
+
+                t2cost = j.t2Alias == null ? 0 : stats.get(table2Name)
+                        .estimateScanCost();
+                t2card = j.t2Alias == null ? 0 : stats.get(table2Name)
+                        .estimateTableCardinality(
+                                filterSelectivities.get(j.t2Alias));
+                rightPkey = j.t2Alias == null ? false : isPkey(j.t2Alias,
+                        j.f2PureName);
+            } else if (doesJoin(prevBest, j.t2Alias)) { // j.t2 is in prevbest
+                                                        // (both
+                // shouldn't be)
+                t2cost = prevBestCost; // left side just has cost of whatever
+                                       // left
+                // subtree is
+                t2card = bestCard;
+                rightPkey = hasPkey(prevBest);
+                t1cost = stats.get(table1Name).estimateScanCost();
+                t1card = stats.get(table1Name).estimateTableCardinality(
+                        filterSelectivities.get(j.t1Alias));
+                leftPkey = isPkey(j.t1Alias, j.f1PureName);
+
+            } else {
+                // don't consider this plan if one of j.t1 or j.t2
+                // isn't a table joined in prevBest (cross product)
+                return null;
+            }
+        }
+
+        // case where prevbest is left
+        double cost1 = estimateJoinCost(j, t1card, t2card, t1cost, t2cost);
+
+        LogicalJoinNode j2 = j.swapInnerOuter();
+        double cost2 = estimateJoinCost(j2, t2card, t1card, t2cost, t1cost);
+        if (cost2 < cost1) {
+            boolean tmp;
+            j = j2;
+            cost1 = cost2;
+            tmp = rightPkey;
+            rightPkey = leftPkey;
+            leftPkey = tmp;
+        }
+        if (cost1 >= bestCostSoFar)
+            return null;
+
+        CostCard cc = new CostCard();
+
+        cc.card = estimateJoinCardinality(j, t1card, t2card, leftPkey,
+                rightPkey, stats);
+        cc.cost = cost1;
+        cc.plan = (Vector<LogicalJoinNode>) prevBest.clone();
+        cc.plan.addElement(j); // prevbest is left -- add new join to end
+        return cc;
+    }
+
+    /**
+     * Return true if the specified table is in the list of joins, false
+     * otherwise
+     */
+    private boolean doesJoin(Vector<LogicalJoinNode> joinlist, String table) {
+        for (LogicalJoinNode j : joinlist) {
+            if (j.t1Alias.equals(table)
+                    || (j.t2Alias != null && j.t2Alias.equals(table)))
+                return true;
+        }
+        return false;
+    }
+
+    /**
+     * Return true if field is a primary key of the specified table, false
+     * otherwise
+     * 
+     * @param tableAlias
+     *            The alias of the table in the query
+     * @param field
+     *            The pure name of the field
+     */
+    private boolean isPkey(String tableAlias, String field) {
+        int tid1 = p.getTableId(tableAlias);
+        String pkey1 = Database.getCatalog().getPrimaryKey(tid1);
+
+        return pkey1.equals(field);
+    }
+
+    /**
+     * Return true if a primary key field is joined by one of the joins in
+     * joinlist
+     */
+    private boolean hasPkey(Vector<LogicalJoinNode> joinlist) {
+        for (LogicalJoinNode j : joinlist) {
+            if (isPkey(j.t1Alias, j.f1PureName)
+                    || (j.t2Alias != null && isPkey(j.t2Alias, j.f2PureName)))
+                return true;
+        }
+        return false;
+
+    }
+
+    /**
+     * Helper function to display a Swing window with a tree representation of
+     * the specified list of joins. See {@link #orderJoins}, which may want to
+     * call this when the analyze flag is true.
+     * 
+     * @param js
+     *            the join plan to visualize
+     * @param pc
+     *            the PlanCache accumulated whild building the optimal plan
+     * @param stats
+     *            table statistics for base tables
+     * @param selectivities
+     *            the selectivities of the filters over each of the tables
+     *            (where tables are indentified by their alias or name if no
+     *            alias is given)
+     */
+    private void printJoins(Vector<LogicalJoinNode> js, PlanCache pc,
+            HashMap<String, TableStats> stats,
+            HashMap<String, Double> selectivities) {
+
+        JFrame f = new JFrame("Join Plan for " + p.getQuery());
+
+        // Set the default close operation for the window,
+        // or else the program won't exit when clicking close button
+        f.setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
+
+        f.setVisible(true);
+
+        f.setSize(300, 500);
+
+        HashMap<String, DefaultMutableTreeNode> m = new HashMap<String, DefaultMutableTreeNode>();
+
+        // int numTabs = 0;
+
+        // int k;
+        DefaultMutableTreeNode root = null, treetop = null;
+        HashSet<LogicalJoinNode> pathSoFar = new HashSet<LogicalJoinNode>();
+        boolean neither;
+
+        System.out.println(js);
+        for (LogicalJoinNode j : js) {
+            pathSoFar.add(j);
+            System.out.println("PATH SO FAR = " + pathSoFar);
+
+            String table1Name = Database.getCatalog().getTableName(
+                    this.p.getTableId(j.t1Alias));
+            String table2Name = Database.getCatalog().getTableName(
+                    this.p.getTableId(j.t2Alias));
+
+            // Double c = pc.getCost(pathSoFar);
+            neither = true;
+
+            root = new DefaultMutableTreeNode("Join " + j + " (Cost ="
+                    + pc.getCost(pathSoFar) + ", card = "
+                    + pc.getCard(pathSoFar) + ")");
+            DefaultMutableTreeNode n = m.get(j.t1Alias);
+            if (n == null) { // never seen this table before
+                n = new DefaultMutableTreeNode(j.t1Alias
+                        + " (Cost = "
+                        + stats.get(table1Name).estimateScanCost()
+                        + ", card = "
+                        + stats.get(table1Name).estimateTableCardinality(
+                                selectivities.get(j.t1Alias)) + ")");
+                root.add(n);
+            } else {
+                // make left child root n
+                root.add(n);
+                neither = false;
+            }
+            m.put(j.t1Alias, root);
+
+            n = m.get(j.t2Alias);
+            if (n == null) { // never seen this table before
+
+                n = new DefaultMutableTreeNode(
+                        j.t2Alias == null ? "Subplan"
+                                : (j.t2Alias
+                                        + " (Cost = "
+                                        + stats.get(table2Name)
+                                                .estimateScanCost()
+                                        + ", card = "
+                                        + stats.get(table2Name)
+                                                .estimateTableCardinality(
+                                                        selectivities
+                                                                .get(j.t2Alias)) + ")"));
+                root.add(n);
+            } else {
+                // make right child root n
+                root.add(n);
+                neither = false;
+            }
+            m.put(j.t2Alias, root);
+
+            // unless this table doesn't join with other tables,
+            // all tables are accessed from root
+            if (!neither) {
+                for (String key : m.keySet()) {
+                    m.put(key, root);
+                }
+            }
+
+            treetop = root;
+        }
+
+        JTree tree = new JTree(treetop);
+        JScrollPane treeView = new JScrollPane(tree);
+
+        tree.setShowsRootHandles(true);
+
+        // Set the icon for leaf nodes.
+        ImageIcon leafIcon = new ImageIcon("join.jpg");
+        DefaultTreeCellRenderer renderer = new DefaultTreeCellRenderer();
+        renderer.setOpenIcon(leafIcon);
+        renderer.setClosedIcon(leafIcon);
+
+        tree.setCellRenderer(renderer);
+
+        f.setSize(300, 500);
+
+        f.add(treeView);
+        for (int i = 0; i < tree.getRowCount(); i++) {
+            tree.expandRow(i);
+        }
+
+        if (js.size() == 0) {
+            f.add(new JLabel("No joins in plan."));
+        }
+
+        f.pack();
+
+    }
+
+}
diff -ruN lab1/src/java/simpledb/JoinPredicate.java lab3/src/java/simpledb/JoinPredicate.java
--- lab1/src/java/simpledb/JoinPredicate.java	1969-12-31 18:00:00.000000000 -0600
+++ lab3/src/java/simpledb/JoinPredicate.java	2016-11-02 22:06:55.000000000 -0500
@@ -0,0 +1,62 @@
+package simpledb;
+
+import java.io.Serializable;
+
+/**
+ * JoinPredicate compares fields of two tuples using a predicate. JoinPredicate
+ * is most likely used by the Join operator.
+ */
+public class JoinPredicate implements Serializable {
+
+    private static final long serialVersionUID = 1L;
+
+    private Predicate.Op op;
+    private int field1, field2;
+
+    /**
+     * Constructor -- create a new predicate over two fields of two tuples.
+     * 
+     * @param field1
+     *            The field index into the first tuple in the predicate
+     * @param field2
+     *            The field index into the second tuple in the predicate
+     * @param op
+     *            The operation to apply (as defined in Predicate.Op); either
+     *            Predicate.Op.GREATER_THAN, Predicate.Op.LESS_THAN,
+     *            Predicate.Op.EQUAL, Predicate.Op.GREATER_THAN_OR_EQ, or
+     *            Predicate.Op.LESS_THAN_OR_EQ
+     * @see Predicate
+     */
+    public JoinPredicate(int field1, Predicate.Op op, int field2) {
+        this.field1 = field1;
+        this.field2 = field2;
+        this.op = op;
+    }
+
+    /**
+     * Apply the predicate to the two specified tuples. The comparison can be
+     * made through Field's compare method.
+     * 
+     * @return true if the tuples satisfy the predicate.
+     */
+    public boolean filter(Tuple t1, Tuple t2) {
+        Field f1 = t1.getField(field1);
+        Field f2 = t2.getField(field2);
+        return f1.compare(op, f2);
+    }
+    
+    public int getField1()
+    {
+        return this.field1;
+    }
+    
+    public int getField2()
+    {
+        return this.field2;
+    }
+    
+    public Predicate.Op getOperator()
+    {
+        return this.op;
+    }
+}
diff -ruN lab1/src/java/simpledb/LogicalFilterNode.java lab3/src/java/simpledb/LogicalFilterNode.java
--- lab1/src/java/simpledb/LogicalFilterNode.java	1969-12-31 18:00:00.000000000 -0600
+++ lab3/src/java/simpledb/LogicalFilterNode.java	2016-11-02 22:06:55.000000000 -0500
@@ -0,0 +1,35 @@
+package simpledb;
+
+/** A LogicalFilterNode represents the parameters of a filter in the WHERE clause of a query. 
+    <p>
+    Filter is of the form t.f p c
+    <p>
+    Where t is a table, f is a field in t, p is a predicate, and c is a constant
+*/
+public class LogicalFilterNode {
+    /** The alias of a table (or the name if no alias) over which the filter ranges */
+    public String tableAlias;
+
+    /** The predicate in the filter */
+    public Predicate.Op p;
+    
+    /* The constant on the right side of the filter */
+    public String c;
+    
+    /** The field from t which is in the filter. The pure name, without alias or tablename*/
+    public String fieldPureName;
+    
+    public String fieldQuantifiedName;
+    
+    public LogicalFilterNode(String table, String field, Predicate.Op pred, String constant) {
+        tableAlias = table;
+        p = pred;
+        c = constant;
+        String[] tmps = field.split("[.]");
+        if (tmps.length>1)
+            fieldPureName = tmps[tmps.length-1];
+        else
+            fieldPureName=field;
+        this.fieldQuantifiedName = tableAlias+"."+fieldPureName;
+    }
+}
diff -ruN lab1/src/java/simpledb/LogicalJoinNode.java lab3/src/java/simpledb/LogicalJoinNode.java
--- lab1/src/java/simpledb/LogicalJoinNode.java	1969-12-31 18:00:00.000000000 -0600
+++ lab3/src/java/simpledb/LogicalJoinNode.java	2016-11-02 22:06:55.000000000 -0500
@@ -0,0 +1,79 @@
+package simpledb;
+
+/** A LogicalJoinNode represens the state needed of a join of two
+ * tables in a LogicalQueryPlan */
+public class LogicalJoinNode {
+
+    /** The first table to join (may be null). It's the alias of the table (if no alias, the true table name) */
+    public String t1Alias;
+
+    /** The second table to join (may be null).  It's the alias of the table, (if no alias, the true table name).*/
+    public String t2Alias;
+    
+    /** The name of the field in t1 to join with. It's the pure name of a field, rather that alias.field. */
+    public String f1PureName;
+
+    public String f1QuantifiedName;
+    
+    /** The name of the field in t2 to join with. It's the pure name of a field.*/
+    public String f2PureName;
+    
+    public String f2QuantifiedName;
+
+    /** The join predicate */
+    public Predicate.Op p;
+
+    public LogicalJoinNode() {
+    }
+
+    public LogicalJoinNode(String table1, String table2, String joinField1, String joinField2, Predicate.Op pred) {
+        t1Alias = table1;
+        t2Alias = table2;
+        String[] tmps = joinField1.split("[.]");
+        if (tmps.length>1)
+            f1PureName = tmps[tmps.length-1];
+        else
+            f1PureName=joinField1;
+        tmps = joinField2.split("[.]");
+        if (tmps.length>1)
+            f2PureName = tmps[tmps.length-1];
+        else
+            f2PureName = joinField2;
+        p = pred;
+        this.f1QuantifiedName = t1Alias+"."+this.f1PureName;
+        this.f2QuantifiedName = t2Alias+"."+this.f2PureName;
+    }
+    
+    /** Return a new LogicalJoinNode with the inner and outer (t1.f1
+     * and t2.f2) tables swapped. */
+    public LogicalJoinNode swapInnerOuter() {
+        Predicate.Op newp;
+        if (p == Predicate.Op.GREATER_THAN)
+            newp = Predicate.Op.LESS_THAN;
+        else if (p == Predicate.Op.GREATER_THAN_OR_EQ)
+            newp = Predicate.Op.LESS_THAN_OR_EQ;
+        else if (p == Predicate.Op.LESS_THAN)
+            newp = Predicate.Op.GREATER_THAN;
+        else if (p == Predicate.Op.LESS_THAN_OR_EQ)
+            newp = Predicate.Op.GREATER_THAN_OR_EQ;
+        else 
+            newp = p;
+        
+        LogicalJoinNode j2 = new LogicalJoinNode(t2Alias,t1Alias,f2PureName,f1PureName, newp);
+        return j2;
+    }
+    
+    @Override public boolean equals(Object o) {
+        LogicalJoinNode j2 =(LogicalJoinNode)o;
+        return (j2.t1Alias.equals(t1Alias)  || j2.t1Alias.equals(t2Alias)) && (j2.t2Alias.equals(t1Alias)  || j2.t2Alias.equals(t2Alias));
+    }
+    
+    @Override public String toString() {
+        return t1Alias + ":" + t2Alias ;//+ ";" + f1 + " " + p + " " + f2;
+    }
+    
+    @Override public int hashCode() {
+        return t1Alias.hashCode() + t2Alias.hashCode() + f1PureName.hashCode() + f2PureName.hashCode();
+    }
+}
+
diff -ruN lab1/src/java/simpledb/LogicalPlan.java lab3/src/java/simpledb/LogicalPlan.java
--- lab1/src/java/simpledb/LogicalPlan.java	1969-12-31 18:00:00.000000000 -0600
+++ lab3/src/java/simpledb/LogicalPlan.java	2016-11-02 22:06:55.000000000 -0500
@@ -0,0 +1,546 @@
+package simpledb;
+import java.util.Map;
+import java.util.Vector;
+import java.util.HashMap;
+import java.util.Iterator;
+import java.io.File;
+import java.util.ArrayList;
+import java.util.NoSuchElementException;
+
+/**
+ * LogicalPlan represents a logical query plan that has been through
+ * the parser and is ready to be processed by the optimizer.
+ * <p>
+ * A LogicalPlan consits of a collection of table scan nodes, join
+ * nodes, filter nodes, a select list, and a group by field.
+ * LogicalPlans can only represent queries with one aggregation field
+ * and one group by field.
+ * <p>
+ * LogicalPlans can be converted to physical (optimized) plans using
+ * the {@link #physicalPlan} method, which uses the
+ * {@link JoinOptimizer} to order joins optimally and to select the
+ * best implementations for joins.
+ */
+public class LogicalPlan {
+    private Vector<LogicalJoinNode> joins;
+    private Vector<LogicalScanNode> tables;
+    private Vector<LogicalFilterNode> filters;
+    private HashMap<String,DbIterator> subplanMap;
+    private HashMap<String,Integer> tableMap;
+
+    private Vector<LogicalSelectListNode> selectList;
+    private String groupByField = null;
+    private boolean hasAgg = false;
+    private String aggOp;
+    private String aggField;
+    private boolean oByAsc, hasOrderBy = false;
+    private String oByField;
+    private String query;
+//    private Query owner;
+
+    /** Constructor -- generate an empty logical plan */
+    public LogicalPlan() {
+        joins = new Vector<LogicalJoinNode>();
+        filters = new Vector<LogicalFilterNode>();
+        tables = new Vector<LogicalScanNode>();
+        subplanMap = new HashMap<String,DbIterator>();
+        tableMap = new HashMap<String,Integer>();
+
+        selectList = new Vector<LogicalSelectListNode>();
+        this.query = "";
+    }
+
+    /** Set the text of the query representing this logical plan.  Does NOT parse the
+        specified query -- this method is just used so that the object can print the
+        SQL it represents.
+
+        @param query the text of the query associated with this plan
+    */
+    public void setQuery(String query)  {
+        this.query = query;
+    }
+      
+    /** Get the query text associated with this plan via {@link #setQuery}.
+     */
+    public String getQuery() {
+        return query;
+    }
+
+    /** Given a table alias, return id of the table object (this id can be supplied to {@link Catalog#getDatabaseFile(int)}).
+        Aliases are added as base tables are added via {@link #addScan}.
+
+        @param alias the table alias to return a table id for
+        @return the id of the table corresponding to alias, or null if the alias is unknown
+     */
+    public Integer getTableId(String alias) {
+        return tableMap.get(alias);
+    }
+    
+    public HashMap<String,Integer> getTableAliasToIdMapping()
+    {
+        return this.tableMap;
+    }
+
+    /** Add a new filter to the logical plan
+     *   @param field The name of the over which the filter applies;
+     *   this can be a fully qualified field (tablename.field or
+     *   alias.field), or can be a unique field name without a
+     *   tablename qualifier.  If it is an ambiguous name, it will
+     *   throw a ParsingException
+     *   @param p The predicate for the filter
+     *   @param constantValue the constant to compare the predicate
+     *   against; if field is an integer field, this should be a
+     *   String representing an integer
+     *   @throws ParsingException if field is not in one of the tables
+     *   added via {@link #addScan} or if field is ambiguous (e.g., two
+     *   tables contain a field named field.)
+     */
+    public void addFilter(String field, Predicate.Op p, String
+        constantValue) throws ParsingException{ 
+
+        field = disambiguateName(field); 
+        String table = field.split("[.]")[0];
+        
+        LogicalFilterNode lf = new LogicalFilterNode(table, field.split("[.]")[1], p, constantValue);
+        filters.addElement(lf);
+    }
+
+    /** Add a join between two fields of two different tables.  
+     *  @param joinField1 The name of the first join field; this can
+     *  be a fully qualified name (e.g., tableName.field or
+     *  alias.field) or may be an unqualified unique field name.  If
+     *  the name is ambiguous or unknown, a ParsingException will be
+     *  thrown.
+     *  @param joinField2 The name of the second join field
+     *  @param pred The join predicate
+     *  @throws ParsingException if either of the fields is ambiguous,
+     *      or is not in one of the tables added via {@link #addScan}
+    */
+
+    public void addJoin( String joinField1, String joinField2, Predicate.Op pred) throws ParsingException {
+        joinField1 = disambiguateName(joinField1);
+        joinField2 = disambiguateName(joinField2);
+        String table1Alias = joinField1.split("[.]")[0];
+        String table2Alias = joinField2.split("[.]")[0];
+        String pureField1 = joinField1.split("[.]")[1];
+        String pureField2 = joinField2.split("[.]")[1];
+
+        if (table1Alias.equals(table2Alias))
+            throw new ParsingException("Cannot join on two fields from same table");
+        LogicalJoinNode lj = new LogicalJoinNode(table1Alias,table2Alias,pureField1, pureField2, pred);
+        System.out.println("Added join between " + joinField1 + " and " + joinField2);
+        joins.addElement(lj);
+
+    }
+
+    /** Add a join between a field and a subquery.
+     *  @param joinField1 The name of the first join field; this can
+     *  be a fully qualified name (e.g., tableName.field or
+     *  alias.field) or may be an unqualified unique field name.  If
+     *  the name is ambiguous or unknown, a ParsingException will be
+     *  thrown.
+     *  @param joinField2 the subquery to join with -- the join field
+     *    of the subquery is the first field in the result set of the query
+     *  @param pred The join predicate.
+     *  @throws ParsingException if either of the fields is ambiguous,
+     *      or is not in one of the tables added via {@link #addScan}
+     */
+    public void addJoin( String joinField1, DbIterator joinField2, Predicate.Op pred) throws ParsingException {
+        joinField1 = disambiguateName(joinField1);
+
+        String table1 = joinField1.split("[.]")[0];
+        String pureField = joinField1.split("[.]")[1];
+
+        LogicalSubplanJoinNode lj = new LogicalSubplanJoinNode(table1,pureField, joinField2, pred);
+        System.out.println("Added subplan join on " + joinField1);
+        joins.addElement(lj);
+    }
+
+    /** Add a scan to the plan. One scan node needs to be added for each alias of a table
+        accessed by the plan.
+        @param table the id of the table accessed by the plan (can be resolved to a DbFile using {@link Catalog#getDatabaseFile}
+        @param name the alias of the table in the plan
+    */
+
+    public void addScan(int table, String name) {
+        System.out.println("Added scan of table " + name);
+        tables.addElement(new LogicalScanNode(table,name));
+        tableMap.put(name,table);
+    }
+
+    /** Add a specified field/aggregate combination to the select list of the query.
+        Fields are output by the query such that the rightmost field is the first added via addProjectField.
+        @param fname the field to add to the output
+        @param aggOp the aggregate operation over the field.
+     * @throws ParsingException 
+    */
+    public void addProjectField(String fname, String aggOp) throws ParsingException {
+        fname=disambiguateName(fname);
+        if (fname.equals("*"))
+            fname="null.*";
+        System.out.println("Added select list field " + fname);
+        if (aggOp != null) {
+            System.out.println("\t with aggregator " + aggOp);
+        }
+        selectList.addElement(new LogicalSelectListNode(aggOp, fname));
+    }
+    
+    /** Add an aggregate over the field with the specified grouping to
+        the query.  SimpleDb only supports a single aggregate
+        expression and GROUP BY field.
+        @param op the aggregation operator
+        @param afield the field to aggregate over
+        @param gfield the field to group by
+     * @throws ParsingException 
+    */
+    public void addAggregate(String op, String afield, String gfield) throws ParsingException {
+        afield=disambiguateName(afield);
+        if (gfield!=null)
+            gfield=disambiguateName(gfield);
+        aggOp = op;
+        aggField = afield;
+        groupByField = gfield;
+        hasAgg = true;
+    }
+
+    /** Add an ORDER BY expression in the specified order on the specified field.  SimpleDb only supports
+        a single ORDER BY field.
+        @param field the field to order by
+        @param asc true if should be ordered in ascending order, false for descending order
+     * @throws ParsingException 
+    */
+    public void addOrderBy(String field, boolean asc) throws ParsingException {
+        field=disambiguateName(field);
+        oByField = field;
+        oByAsc = asc;
+        hasOrderBy = true;
+    }
+
+    /** Given a name of a field, try to figure out what table it belongs to by looking
+     *   through all of the tables added via {@link #addScan}. 
+     *  @return A fully qualified name of the form tableAlias.name.  If the name parameter is already qualified
+     *   with a table name, simply returns name.
+     *  @throws ParsingException if the field cannot be found in any of the tables, or if the
+     *   field is ambiguous (appears in multiple tables)
+     */
+    String disambiguateName(String name) throws ParsingException {
+
+        String[] fields = name.split("[.]");
+        if (fields.length == 2 && (!fields[0].equals("null")))
+            return name;
+        if (fields.length > 2) 
+            throw new ParsingException("Field " + name + " is not a valid field reference.");
+        if (fields.length == 2)
+            name = fields[1];
+        if (name.equals("*")) return name;
+        //now look for occurrences of name in all of the tables
+        Iterator<LogicalScanNode> tableIt = tables.iterator();
+        String tableName = null;
+        while (tableIt.hasNext()) {
+            LogicalScanNode table = tableIt.next();
+            try {
+                TupleDesc td = Database.getCatalog().getDatabaseFile(table.t).getTupleDesc();
+//                int id = 
+                  td.fieldNameToIndex(name);
+                if (tableName == null) {
+                    tableName = table.alias;
+                } else {
+                    throw new ParsingException("Field " + name + " appears in multiple tables; disambiguate by referring to it as tablename." + name);
+                }
+            } catch (NoSuchElementException e) {
+                //ignore
+            }
+        }
+        if (tableName != null)
+            return tableName + "." + name;
+        else
+            throw new ParsingException("Field " + name + " does not appear in any tables.");
+
+    }
+
+    /** Convert the aggregate operator name s into an Aggregator.op operation.
+     *  @throws ParsingException if s is not a valid operator name 
+     */
+    static Aggregator.Op getAggOp(String s) throws ParsingException {
+        s = s.toUpperCase();
+        if (s.equals("AVG")) return Aggregator.Op.AVG;
+        if (s.equals("SUM")) return Aggregator.Op.SUM;
+        if (s.equals("COUNT")) return Aggregator.Op.COUNT;
+        if (s.equals("MIN")) return Aggregator.Op.MIN;
+        if (s.equals("MAX")) return Aggregator.Op.MAX;
+        throw new ParsingException("Unknown predicate " + s);
+    }
+
+    /** Convert this LogicalPlan into a physicalPlan represented by a {@link DbIterator}.  Attempts to
+     *   find the optimal plan by using {@link JoinOptimizer#orderJoins} to order the joins in the plan.
+     *  @param t The transaction that the returned DbIterator will run as a part of
+     *  @param baseTableStats a HashMap providing a {@link TableStats}
+     *    object for each table used in the LogicalPlan.  This should
+     *    have one entry for each table referenced by the plan, not one
+     *    entry for each table alias (so a table t aliases as t1 and
+     *    t2 would have just one entry with key 't' in this HashMap).
+     *  @param explain flag indicating whether output visualizing the physical
+     *    query plan should be given.
+     *  @throws ParsingException if the logical plan is not valid
+     *  @return A DbIterator representing this plan.
+     */ 
+    public DbIterator physicalPlan(TransactionId t, Map<String,TableStats> baseTableStats, boolean explain) throws ParsingException {
+        Iterator<LogicalScanNode> tableIt = tables.iterator();
+        HashMap<String,String> equivMap = new HashMap<String,String>();
+        HashMap<String,Double> filterSelectivities = new HashMap<String, Double>();
+        HashMap<String,TableStats> statsMap = new HashMap<String,TableStats>();
+
+        while (tableIt.hasNext()) {
+            LogicalScanNode table = tableIt.next();
+            SeqScan ss = null;
+            try {
+                 ss = new SeqScan(t, Database.getCatalog().getDatabaseFile(table.t).getId(), table.alias);
+            } catch (NoSuchElementException e) {
+                throw new ParsingException("Unknown table " + table.t);
+            }
+            
+            subplanMap.put(table.alias,ss);
+            String baseTableName = Database.getCatalog().getTableName(table.t);
+            statsMap.put(baseTableName, baseTableStats.get(baseTableName));
+            filterSelectivities.put(table.alias, 1.0);
+
+        }
+
+        Iterator<LogicalFilterNode> filterIt = filters.iterator();        
+        while (filterIt.hasNext()) {
+            LogicalFilterNode lf = filterIt.next();
+            DbIterator subplan = subplanMap.get(lf.tableAlias);
+            if (subplan == null) {
+                throw new ParsingException("Unknown table in WHERE clause " + lf.tableAlias);
+            }
+
+            Field f;
+            Type ftyp;
+            TupleDesc td = subplanMap.get(lf.tableAlias).getTupleDesc();
+            
+            try {//td.fieldNameToIndex(disambiguateName(lf.fieldPureName))
+                ftyp = td.getFieldType(td.fieldNameToIndex(lf.fieldQuantifiedName));
+            } catch (java.util.NoSuchElementException e) {
+                throw new ParsingException("Unknown field in filter expression " + lf.fieldQuantifiedName);
+            }
+            if (ftyp == Type.INT_TYPE)
+                f = new IntField(new Integer(lf.c).intValue());
+            else
+                f = new StringField(lf.c, Type.STRING_LEN);
+
+            Predicate p = null;
+            try {
+                p = new Predicate(subplan.getTupleDesc().fieldNameToIndex(lf.fieldQuantifiedName), lf.p,f);
+            } catch (NoSuchElementException e) {
+                throw new ParsingException("Unknown field " + lf.fieldQuantifiedName);
+            }
+            subplanMap.put(lf.tableAlias, new Filter(p, subplan));
+
+            TableStats s = statsMap.get(Database.getCatalog().getTableName(this.getTableId(lf.tableAlias)));
+            
+            double sel= s.estimateSelectivity(subplan.getTupleDesc().fieldNameToIndex(lf.fieldQuantifiedName), lf.p, f);
+            filterSelectivities.put(lf.tableAlias, filterSelectivities.get(lf.tableAlias) * sel);
+
+            //s.addSelectivityFactor(estimateFilterSelectivity(lf,statsMap));
+        }
+        
+        JoinOptimizer jo = new JoinOptimizer(this,joins);
+
+        joins = jo.orderJoins(statsMap,filterSelectivities,explain);
+
+        Iterator<LogicalJoinNode> joinIt = joins.iterator();
+        while (joinIt.hasNext()) {
+            LogicalJoinNode lj = joinIt.next();
+            DbIterator plan1;
+            DbIterator plan2;
+            boolean isSubqueryJoin = lj instanceof LogicalSubplanJoinNode;
+            String t1name, t2name;
+
+            if (equivMap.get(lj.t1Alias)!=null)
+                t1name = equivMap.get(lj.t1Alias);
+            else
+                t1name = lj.t1Alias;
+
+            if (equivMap.get(lj.t2Alias)!=null)
+                t2name = equivMap.get(lj.t2Alias);
+            else
+                t2name = lj.t2Alias;
+
+            plan1 = subplanMap.get(t1name);
+
+            if (isSubqueryJoin) {
+                plan2 = ((LogicalSubplanJoinNode)lj).subPlan;
+                if (plan2 == null) 
+                    throw new ParsingException("Invalid subquery.");
+            } else { 
+                plan2 = subplanMap.get(t2name);
+            }
+            
+            if (plan1 == null)
+                throw new ParsingException("Unknown table in WHERE clause " + lj.t1Alias);
+            if (plan2 == null)
+                throw new ParsingException("Unknown table in WHERE clause " + lj.t2Alias);
+            
+            DbIterator j;
+            j = jo.instantiateJoin(lj,plan1,plan2);
+            subplanMap.put(t1name, j);
+
+            if (!isSubqueryJoin) {
+                subplanMap.remove(t2name);
+                equivMap.put(t2name,t1name);  //keep track of the fact that this new node contains both tables
+                    //make sure anything that was equiv to lj.t2 (which we are just removed) is
+                    // marked as equiv to lj.t1 (which we are replacing lj.t2 with.)
+                    for (java.util.Map.Entry<String, String> s: equivMap.entrySet()) {
+                        String val = s.getValue();
+                        if (val.equals(t2name)) {
+                            s.setValue(t1name);
+                        }
+                    }
+                    
+                // subplanMap.put(lj.t2, j);
+            }
+            
+        }
+
+        if (subplanMap.size() > 1) {
+            throw new ParsingException("Query does not include join expressions joining all nodes!");
+        }
+        
+        DbIterator node =  (DbIterator)(subplanMap.entrySet().iterator().next().getValue());
+
+        //walk the select list, to determine order in which to project output fields
+        ArrayList<Integer> outFields = new ArrayList<Integer>();
+        ArrayList<Type> outTypes = new ArrayList<Type>();
+        for (int i = 0; i < selectList.size(); i++) {
+            LogicalSelectListNode si = selectList.elementAt(i);
+            if (si.aggOp != null) {
+                outFields.add(groupByField!=null?1:0);
+                TupleDesc td = node.getTupleDesc();
+//                int  id;
+                try {
+//                    id = 
+                    td.fieldNameToIndex(si.fname);
+                } catch (NoSuchElementException e) {
+                    throw new ParsingException("Unknown field " +  si.fname + " in SELECT list");
+                }
+                outTypes.add(Type.INT_TYPE);  //the type of all aggregate functions is INT
+
+            } else if (hasAgg) {
+                    if (groupByField == null) {
+                        throw new ParsingException("Field " + si.fname + " does not appear in GROUP BY list");
+                    }
+                    outFields.add(0);
+                    TupleDesc td = node.getTupleDesc();
+                    int  id;
+                    try {
+                        id = td.fieldNameToIndex(groupByField);
+                    } catch (NoSuchElementException e) {
+                        throw new ParsingException("Unknown field " +  groupByField + " in GROUP BY statement");
+                    }
+                    outTypes.add(td.getFieldType(id));
+            } else if (si.fname.equals("null.*")) {
+                    TupleDesc td = node.getTupleDesc();
+                    for ( i = 0; i < td.numFields(); i++) {
+                        outFields.add(i);
+                        outTypes.add(td.getFieldType(i));
+                    }
+            } else  {
+                    TupleDesc td = node.getTupleDesc();
+                    int id;
+                    try {
+                        id = td.fieldNameToIndex(si.fname);
+                    } catch (NoSuchElementException e) {
+                        throw new ParsingException("Unknown field " +  si.fname + " in SELECT list");
+                    }
+                    outFields.add(id);
+                    outTypes.add(td.getFieldType(id));
+
+                }
+        }
+
+        if (hasAgg) {
+            TupleDesc td = node.getTupleDesc();
+            Aggregate aggNode;
+            try {
+                aggNode = new Aggregate(node,
+                                        td.fieldNameToIndex(aggField),
+                                        groupByField == null?Aggregator.NO_GROUPING:td.fieldNameToIndex(groupByField),
+                                getAggOp(aggOp));
+            } catch (NoSuchElementException e) {
+                throw new simpledb.ParsingException(e);
+            } catch (IllegalArgumentException e) {
+                throw new simpledb.ParsingException(e);
+            }
+            node = aggNode;
+        }
+
+        if (hasOrderBy) {
+            node = new OrderBy(node.getTupleDesc().fieldNameToIndex(oByField), oByAsc, node);
+        }
+
+        return new Project(outFields, outTypes, node);
+    }
+
+    public static void main(String argv[]) {
+        // construct a 3-column table schema
+        Type types[] = new Type[]{ Type.INT_TYPE, Type.INT_TYPE, Type.INT_TYPE };
+        String names[] = new String[]{ "field0", "field1", "field2" };
+
+        TupleDesc td = new TupleDesc(types, names);
+        TableStats ts;
+        HashMap<String, TableStats> tableMap = new HashMap<String,TableStats>();
+
+        // create the tables, associate them with the data files
+        // and tell the catalog about the schema  the tables.
+        HeapFile table1 = new HeapFile(new File("some_data_file1.dat"), td);
+        Database.getCatalog().addTable(table1, "t1");
+        ts = new TableStats(table1.getId(), 1);
+        tableMap.put("t1", ts);
+
+        TransactionId tid = new TransactionId();
+
+        LogicalPlan lp = new LogicalPlan();
+        
+        lp.addScan(table1.getId(), "t1");
+
+        try {
+            lp.addFilter("t1.field0", Predicate.Op.GREATER_THAN, "1");
+        } catch (Exception e) {
+        }
+
+        /*
+        SeqScan ss1 = new SeqScan(tid, table1.getId(), "t1");
+        SeqScan ss2 = new SeqScan(tid, table2.getId(), "t2");
+
+        // create a filter for the where condition
+        Filter sf1 = new Filter(
+                                new Predicate(0,
+                                Predicate.Op.GREATER_THAN, new IntField(1)),  ss1);
+
+        JoinPredicate p = new JoinPredicate(1, Predicate.Op.EQUALS, 1);
+        Join j = new Join(p, sf1, ss2);
+        */
+        DbIterator j = null;
+        try {
+            j = lp.physicalPlan(tid,tableMap, false);
+        } catch (ParsingException e) {
+            e.printStackTrace();
+            System.exit(0);
+        }
+        // and run it
+        try {
+            j.open();
+            while (j.hasNext()) {
+                Tuple tup = j.next();
+                System.out.println(tup);
+            }
+            j.close();
+            Database.getBufferPool().transactionComplete(tid);
+
+        } catch (Exception e) {
+            e.printStackTrace();
+        }
+       
+    }
+
+}
diff -ruN lab1/src/java/simpledb/LogicalScanNode.java lab3/src/java/simpledb/LogicalScanNode.java
--- lab1/src/java/simpledb/LogicalScanNode.java	1969-12-31 18:00:00.000000000 -0600
+++ lab3/src/java/simpledb/LogicalScanNode.java	2016-11-02 22:06:55.000000000 -0500
@@ -0,0 +1,19 @@
+package simpledb;
+
+/** A LogicalScanNode represents table in the FROM list in a
+ * LogicalQueryPlan */
+public class LogicalScanNode {
+
+    /** The name (alias) of the table as it is used in the query */
+    public String alias;
+
+    /** The table identifier (can be passed to {@link Catalog#getDatabaseFile})
+     *   to retrieve a DbFile */
+    public int t;
+
+    public LogicalScanNode(int table, String tableAlias) {
+        this.alias = tableAlias;
+        this.t = table;
+    }
+}
+
diff -ruN lab1/src/java/simpledb/LogicalSelectListNode.java lab3/src/java/simpledb/LogicalSelectListNode.java
--- lab1/src/java/simpledb/LogicalSelectListNode.java	1969-12-31 18:00:00.000000000 -0600
+++ lab3/src/java/simpledb/LogicalSelectListNode.java	2016-11-02 22:06:55.000000000 -0500
@@ -0,0 +1,19 @@
+package simpledb;
+
+/** A LogicalSelectListNode represents a clause in the select list in
+ * a LogicalQueryPlan
+*/
+public class LogicalSelectListNode {
+    /** The field name being selected; the name may be (optionally) be
+     * qualified with a table name or alias.
+     */
+    public String fname;
+   
+    /** The aggregation operation over the field (if any) */
+    public String aggOp;
+
+    public LogicalSelectListNode(String aggOp, String fname) {
+        this.aggOp = aggOp;
+        this.fname = fname;
+    }
+}
diff -ruN lab1/src/java/simpledb/LogicalSubplanJoinNode.java lab3/src/java/simpledb/LogicalSubplanJoinNode.java
--- lab1/src/java/simpledb/LogicalSubplanJoinNode.java	1969-12-31 18:00:00.000000000 -0600
+++ lab3/src/java/simpledb/LogicalSubplanJoinNode.java	2016-11-02 22:06:55.000000000 -0500
@@ -0,0 +1,41 @@
+package simpledb;
+
+/** A LogicalSubplanJoinNode represens the state needed of a join of a
+ * table to a subplan in a LogicalQueryPlan -- inherits state from
+ * {@link LogicalJoinNode}; t2 and f2 should always be null
+ */
+public class LogicalSubplanJoinNode extends LogicalJoinNode {
+    
+    /** The subplan (used on the inner) of the join */
+    DbIterator subPlan;
+    
+    public LogicalSubplanJoinNode(String table1, String joinField1, DbIterator sp, Predicate.Op pred) {
+        t1Alias = table1;
+        String[] tmps = joinField1.split("[.]");
+        if (tmps.length>1)
+            f1PureName = tmps[tmps.length-1];
+        else
+            f1PureName=joinField1;
+        f1QuantifiedName=t1Alias+"."+f1PureName;
+        subPlan = sp;
+        p = pred;
+    }
+    
+    @Override public int hashCode() {
+        return t1Alias.hashCode() + f1PureName.hashCode() + subPlan.hashCode();
+    }
+    
+    @Override public boolean equals(Object o) {
+        LogicalJoinNode j2 =(LogicalJoinNode)o;
+        if (!(o instanceof LogicalSubplanJoinNode))
+            return false;
+        
+        return (j2.t1Alias.equals(t1Alias)  && j2.f1PureName.equals(f1PureName) && ((LogicalSubplanJoinNode)o).subPlan.equals(subPlan));
+    }
+    
+    public LogicalSubplanJoinNode swapInnerOuter() {
+        LogicalSubplanJoinNode j2 = new LogicalSubplanJoinNode(t1Alias,f1PureName,subPlan, p);
+        return j2;
+    }
+
+}
diff -ruN lab1/src/java/simpledb/Operator.java lab3/src/java/simpledb/Operator.java
--- lab1/src/java/simpledb/Operator.java	1969-12-31 18:00:00.000000000 -0600
+++ lab3/src/java/simpledb/Operator.java	2016-11-02 22:06:55.000000000 -0500
@@ -0,0 +1,107 @@
+package simpledb;
+
+import java.util.NoSuchElementException;
+
+/**
+ * Abstract class for implementing operators. It handles <code>close</code>,
+ * <code>next</code> and <code>hasNext</code>. Subclasses only need to implement
+ * <code>open</code> and <code>readNext</code>.
+ */
+public abstract class Operator implements DbIterator {
+
+    private static final long serialVersionUID = 1L;
+
+    public boolean hasNext() throws DbException, TransactionAbortedException {
+        if (!this.open)
+            throw new IllegalStateException("Operator not yet open");
+        
+        if (next == null)
+            next = fetchNext();
+        return next != null;
+    }
+
+    public Tuple next() throws DbException, TransactionAbortedException,
+            NoSuchElementException {
+        if (next == null) {
+            next = fetchNext();
+            if (next == null)
+                throw new NoSuchElementException();
+        }
+
+        Tuple result = next;
+        next = null;
+        return result;
+    }
+
+    /**
+     * Returns the next Tuple in the iterator, or null if the iteration is
+     * finished. Operator uses this method to implement both <code>next</code>
+     * and <code>hasNext</code>.
+     * 
+     * @return the next Tuple in the iterator, or null if the iteration is
+     *         finished.
+     */
+    protected abstract Tuple fetchNext() throws DbException,
+            TransactionAbortedException;
+
+    /**
+     * Closes this iterator. If overridden by a subclass, they should call
+     * super.close() in order for Operator's internal state to be consistent.
+     */
+    public void close() {
+        // Ensures that a future call to next() will fail
+        next = null;
+        this.open = false;
+    }
+
+    private Tuple next = null;
+    private boolean open = false;
+    private int estimatedCardinality = 0;
+
+    public void open() throws DbException, TransactionAbortedException {
+        this.open = true;
+    }
+
+    /**
+     * @return return the children DbIterators of this operator. If there is
+     *         only one child, return an array of only one element. For join
+     *         operators, the order of the children is not important. But they
+     *         should be consistent among multiple calls.
+     * */
+    public abstract DbIterator[] getChildren();
+
+    /**
+     * Set the children(child) of this operator. If the operator has only one
+     * child, children[0] should be used. If the operator is a join, children[0]
+     * and children[1] should be used.
+     * 
+     * 
+     * @param children
+     *            the DbIterators which are to be set as the children(child) of
+     *            this operator
+     * */
+    public abstract void setChildren(DbIterator[] children);
+
+    /**
+     * @return return the TupleDesc of the output tuples of this operator
+     * */
+    public abstract TupleDesc getTupleDesc();
+
+    /**
+     * @return The estimated cardinality of this operator. Will only be used in
+     *         lab7
+     * */
+    public int getEstimatedCardinality() {
+        return this.estimatedCardinality;
+    }
+
+    /**
+     * @param card
+     *            The estimated cardinality of this operator Will only be used
+     *            in lab7
+     * */
+    protected void setEstimatedCardinality(int card) {
+        this.estimatedCardinality = card;
+    }
+
+}
diff -ruN lab1/src/java/simpledb/OperatorCardinality.java lab3/src/java/simpledb/OperatorCardinality.java
--- lab1/src/java/simpledb/OperatorCardinality.java	1969-12-31 18:00:00.000000000 -0600
+++ lab3/src/java/simpledb/OperatorCardinality.java	2016-11-02 22:06:55.000000000 -0500
@@ -0,0 +1,247 @@
+package simpledb;
+
+//import java.util.HashMap;
+import java.util.Map;
+
+/**
+ * A utility class, which computes the estimated cardinalities of an operator
+ * tree.
+ * 
+ * All methods have been fully provided. No extra codes are required.
+ */
+public class OperatorCardinality {
+
+    /**
+     * 
+     * @param tableAliasToId
+     *            table alias to table id mapping
+     * @param tableStats
+     *            table statistics
+     * */
+    public static boolean updateOperatorCardinality(Operator o,
+            Map<String, Integer> tableAliasToId,
+            Map<String, TableStats> tableStats) {
+        if (o instanceof Filter) {
+            return updateFilterCardinality((Filter) o, tableAliasToId,
+                    tableStats);
+        } else if (o instanceof Join) {
+            return updateJoinCardinality((Join) o, tableAliasToId, tableStats);
+        } else if (o instanceof HashEquiJoin) {
+            return updateHashEquiJoinCardinality((HashEquiJoin) o,
+                    tableAliasToId, tableStats);
+        } else if (o instanceof Aggregate) {
+            return updateAggregateCardinality((Aggregate) o, tableAliasToId,
+                    tableStats);
+        } else {
+            DbIterator[] children = o.getChildren();
+            int childC = 1;
+            boolean hasJoinPK = false;
+            if (children.length > 0 && children[0] != null) {
+                if (children[0] instanceof Operator) {
+                    hasJoinPK = updateOperatorCardinality(
+                            (Operator) children[0], tableAliasToId, tableStats);
+                    childC = ((Operator) children[0]).getEstimatedCardinality();
+                } else if (children[0] instanceof SeqScan) {
+                    childC = tableStats.get(
+                            ((SeqScan) children[0]).getTableName())
+                            .estimateTableCardinality(1.0);
+                }
+            }
+            o.setEstimatedCardinality(childC);
+            return hasJoinPK;
+        }
+    }
+
+    private static boolean updateFilterCardinality(Filter f,
+            Map<String, Integer> tableAliasToId,
+            Map<String, TableStats> tableStats) {
+        DbIterator child = f.getChildren()[0];
+        Predicate pred = f.getPredicate();
+        String[] tmp = child.getTupleDesc().getFieldName(pred.getField())
+                .split("[.]");
+        String tableAlias = tmp[0];
+        String pureFieldName = tmp[1];
+        Integer tableId = tableAliasToId.get(tableAlias);
+        double selectivity = 1.0;
+        if (tableId != null) {
+            selectivity = tableStats.get(
+                    Database.getCatalog().getTableName(tableId))
+                    .estimateSelectivity(
+                            Database.getCatalog().getTupleDesc(tableId)
+                                    .fieldNameToIndex(pureFieldName),
+                            pred.getOp(), pred.getOperand());
+            if (child instanceof Operator) {
+                Operator oChild = (Operator) child;
+                boolean hasJoinPK = updateOperatorCardinality(oChild,
+                        tableAliasToId, tableStats);
+                f.setEstimatedCardinality((int) (oChild
+                        .getEstimatedCardinality() * selectivity) + 1);
+                return hasJoinPK;
+            } else if (child instanceof SeqScan) {
+                f.setEstimatedCardinality((int) (tableStats.get(
+                        ((SeqScan) child).getTableName())
+                        .estimateTableCardinality(1.0) * selectivity) + 1);
+                return false;
+            }
+        }
+        f.setEstimatedCardinality(1);
+        return false;
+    }
+
+    private static boolean updateJoinCardinality(Join j,
+            Map<String, Integer> tableAliasToId,
+            Map<String, TableStats> tableStats) {
+
+        DbIterator[] children = j.getChildren();
+        DbIterator child1 = children[0];
+        DbIterator child2 = children[1];
+        int child1Card = 1;
+        int child2Card = 1;
+
+        String[] tmp1 = j.getJoinField1Name().split("[.]");
+        String tableAlias1 = tmp1[0];
+        String pureFieldName1 = tmp1[1];
+
+        String[] tmp2 = j.getJoinField2Name().split("[.]");
+        String tableAlias2 = tmp2[0];
+        String pureFieldName2 = tmp2[1];
+
+        boolean child1HasJoinPK = Database.getCatalog()
+                .getPrimaryKey(tableAliasToId.get(tableAlias1))
+                .equals(pureFieldName1);
+        boolean child2HasJoinPK = Database.getCatalog()
+                .getPrimaryKey(tableAliasToId.get(tableAlias2))
+                .equals(pureFieldName2);
+
+        if (child1 instanceof Operator) {
+            Operator child1O = (Operator) child1;
+            boolean pk = updateOperatorCardinality(child1O, tableAliasToId,
+                    tableStats);
+            child1HasJoinPK = pk || child1HasJoinPK;
+            child1Card = child1O.getEstimatedCardinality();
+            child1Card = child1Card > 0 ? child1Card : 1;
+        } else if (child1 instanceof SeqScan) {
+            child1Card = (int) (tableStats.get(((SeqScan) child1)
+                    .getTableName()).estimateTableCardinality(1.0));
+        }
+
+        if (child2 instanceof Operator) {
+            Operator child2O = (Operator) child2;
+            boolean pk = updateOperatorCardinality(child2O, tableAliasToId,
+                    tableStats);
+            child2HasJoinPK = pk || child2HasJoinPK;
+            child2Card = child2O.getEstimatedCardinality();
+            child2Card = child2Card > 0 ? child2Card : 1;
+        } else if (child2 instanceof SeqScan) {
+            child2Card = (int) (tableStats.get(((SeqScan) child2)
+                    .getTableName()).estimateTableCardinality(1.0));
+        }
+
+        j.setEstimatedCardinality(JoinOptimizer.estimateTableJoinCardinality(j
+                .getJoinPredicate().getOperator(), tableAlias1, tableAlias2,
+                pureFieldName1, pureFieldName2, child1Card, child2Card,
+                child1HasJoinPK, child2HasJoinPK, tableStats, tableAliasToId));
+        return child1HasJoinPK || child2HasJoinPK;
+    }
+
+    private static boolean updateHashEquiJoinCardinality(HashEquiJoin j,
+            Map<String, Integer> tableAliasToId,
+            Map<String, TableStats> tableStats) {
+
+        DbIterator[] children = j.getChildren();
+        DbIterator child1 = children[0];
+        DbIterator child2 = children[1];
+        int child1Card = 1;
+        int child2Card = 1;
+
+        String[] tmp1 = j.getJoinField1Name().split("[.]");
+        String tableAlias1 = tmp1[0];
+        String pureFieldName1 = tmp1[1];
+        String[] tmp2 = j.getJoinField2Name().split("[.]");
+        String tableAlias2 = tmp2[0];
+        String pureFieldName2 = tmp2[1];
+
+        boolean child1HasJoinPK = Database.getCatalog()
+                .getPrimaryKey(tableAliasToId.get(tableAlias1))
+                .equals(pureFieldName1);
+        ;
+        boolean child2HasJoinPK = Database.getCatalog()
+                .getPrimaryKey(tableAliasToId.get(tableAlias2))
+                .equals(pureFieldName2);
+        ;
+
+        if (child1 instanceof Operator) {
+            Operator child1O = (Operator) child1;
+            boolean pk = updateOperatorCardinality(child1O, tableAliasToId,
+                    tableStats);
+            child1HasJoinPK = pk || child1HasJoinPK;
+            child1Card = child1O.getEstimatedCardinality();
+            child1Card = child1Card > 0 ? child1Card : 1;
+        } else if (child1 instanceof SeqScan) {
+            child1Card = (int) (tableStats.get(((SeqScan) child1)
+                    .getTableName()).estimateTableCardinality(1.0));
+        }
+
+        if (child2 instanceof Operator) {
+            Operator child2O = (Operator) child2;
+            boolean pk = updateOperatorCardinality(child2O, tableAliasToId,
+                    tableStats);
+            child2HasJoinPK = pk || child2HasJoinPK;
+            child2Card = child2O.getEstimatedCardinality();
+            child2Card = child2Card > 0 ? child2Card : 1;
+        } else if (child2 instanceof SeqScan) {
+            child2Card = (int) (tableStats.get(((SeqScan) child2)
+                    .getTableName()).estimateTableCardinality(1.0));
+        }
+
+        j.setEstimatedCardinality(JoinOptimizer.estimateTableJoinCardinality(j
+                .getJoinPredicate().getOperator(), tableAlias1, tableAlias2,
+                pureFieldName1, pureFieldName2, child1Card, child2Card,
+                child1HasJoinPK, child2HasJoinPK, tableStats, tableAliasToId));
+        return child1HasJoinPK || child2HasJoinPK;
+    }
+
+    private static boolean updateAggregateCardinality(Aggregate a,
+            Map<String, Integer> tableAliasToId,
+            Map<String, TableStats> tableStats) {
+        DbIterator child = a.getChildren()[0];
+        int childCard = 1;
+        boolean hasJoinPK = false;
+        if (child instanceof Operator) {
+            Operator oChild = (Operator) child;
+            hasJoinPK = updateOperatorCardinality(oChild, tableAliasToId,
+                    tableStats);
+            childCard = oChild.getEstimatedCardinality();
+        }
+
+        if (a.groupField() == Aggregator.NO_GROUPING) {
+            a.setEstimatedCardinality(1);
+            return hasJoinPK;
+        }
+
+        if (child instanceof SeqScan) {
+            childCard = (int) (tableStats.get(((SeqScan) child).getTableName())
+                    .estimateTableCardinality(1.0));
+        }
+
+        String[] tmp = a.groupFieldName().split("[.]");
+        String tableAlias = tmp[0];
+        String pureFieldName = tmp[1];
+        Integer tableId = tableAliasToId.get(tableAlias);
+
+        double groupFieldAvgSelectivity = 1.0;
+        if (tableId != null) {
+            groupFieldAvgSelectivity = tableStats.get(
+                    Database.getCatalog().getTableName(tableId))
+                    .avgSelectivity(
+                            Database.getCatalog().getTupleDesc(tableId)
+                                    .fieldNameToIndex(pureFieldName),
+                            Predicate.Op.EQUALS);
+            a.setEstimatedCardinality((int) (Math.min(childCard,
+                    1.0 / groupFieldAvgSelectivity)));
+            return hasJoinPK;
+        }
+        a.setEstimatedCardinality(childCard);
+        return hasJoinPK;
+    }
+}
diff -ruN lab1/src/java/simpledb/OrderBy.java lab3/src/java/simpledb/OrderBy.java
--- lab1/src/java/simpledb/OrderBy.java	1969-12-31 18:00:00.000000000 -0600
+++ lab3/src/java/simpledb/OrderBy.java	2016-11-02 22:06:55.000000000 -0500
@@ -0,0 +1,123 @@
+package simpledb;
+
+import java.util.*;
+
+/**
+ * OrderBy is an operator that implements a relational ORDER BY.
+ */
+public class OrderBy extends Operator {
+
+    private static final long serialVersionUID = 1L;
+    private DbIterator child;
+    private TupleDesc td;
+    private ArrayList<Tuple> childTups = new ArrayList<Tuple>();
+    private int orderByField;
+    private String orderByFieldName;
+    private Iterator<Tuple> it;
+    private boolean asc;
+
+    /**
+     * Creates a new OrderBy node over the tuples from the iterator.
+     * 
+     * @param orderbyField
+     *            the field to which the sort is applied.
+     * @param asc
+     *            true if the sort order is ascending.
+     * @param child
+     *            the tuples to sort.
+     */
+    public OrderBy(int orderbyField, boolean asc, DbIterator child) {
+        this.child = child;
+        td = child.getTupleDesc();
+        this.orderByField = orderbyField;
+        this.orderByFieldName = td.getFieldName(orderbyField);
+        this.asc = asc;
+    }
+    
+    public boolean isASC()
+    {
+	return this.asc;
+    }
+    
+    public int getOrderByField()
+    {
+        return this.orderByField;
+    }
+    
+    public String getOrderFieldName()
+    {
+	return this.orderByFieldName;
+    }
+    
+    public TupleDesc getTupleDesc() {
+        return td;
+    }
+
+    public void open() throws DbException, NoSuchElementException,
+            TransactionAbortedException {
+        child.open();
+        // load all the tuples in a collection, and sort it
+        while (child.hasNext())
+            childTups.add((Tuple) child.next());
+        Collections.sort(childTups, new TupleComparator(orderByField, asc));
+        it = childTups.iterator();
+        super.open();
+    }
+
+    public void close() {
+        super.close();
+        it = null;
+    }
+
+    public void rewind() throws DbException, TransactionAbortedException {
+        it = childTups.iterator();
+    }
+
+    /**
+     * Operator.fetchNext implementation. Returns tuples from the child operator
+     * in order
+     * 
+     * @return The next tuple in the ordering, or null if there are no more
+     *         tuples
+     */
+    protected Tuple fetchNext() throws NoSuchElementException,
+            TransactionAbortedException, DbException {
+        if (it != null && it.hasNext()) {
+            return it.next();
+        } else
+            return null;
+    }
+
+    @Override
+    public DbIterator[] getChildren() {
+        return new DbIterator[] { this.child };
+    }
+
+    @Override
+    public void setChildren(DbIterator[] children) {
+        this.child = children[0];
+    }
+
+}
+
+class TupleComparator implements Comparator<Tuple> {
+    int field;
+    boolean asc;
+
+    public TupleComparator(int field, boolean asc) {
+        this.field = field;
+        this.asc = asc;
+    }
+
+    public int compare(Tuple o1, Tuple o2) {
+        Field t1 = (o1).getField(field);
+        Field t2 = (o2).getField(field);
+        if (t1.compare(Predicate.Op.EQUALS, t2))
+            return 0;
+        if (t1.compare(Predicate.Op.GREATER_THAN, t2))
+            return asc ? 1 : -1;
+        else
+            return asc ? -1 : 1;
+    }
+    
+}
diff -ruN lab1/src/java/simpledb/Parser.java lab3/src/java/simpledb/Parser.java
--- lab1/src/java/simpledb/Parser.java	1969-12-31 18:00:00.000000000 -0600
+++ lab3/src/java/simpledb/Parser.java	2016-11-02 22:06:55.000000000 -0500
@@ -0,0 +1,761 @@
+package simpledb;
+
+import Zql.*;
+import java.io.*;
+import java.lang.reflect.InvocationTargetException;
+import java.util.*;
+
+import jline.ArgumentCompletor;
+import jline.ConsoleReader;
+import jline.SimpleCompletor;
+
+public class Parser {
+    static boolean explain = false;
+
+    public static Predicate.Op getOp(String s) throws simpledb.ParsingException {
+        if (s.equals("="))
+            return Predicate.Op.EQUALS;
+        if (s.equals(">"))
+            return Predicate.Op.GREATER_THAN;
+        if (s.equals(">="))
+            return Predicate.Op.GREATER_THAN_OR_EQ;
+        if (s.equals("<"))
+            return Predicate.Op.LESS_THAN;
+        if (s.equals("<="))
+            return Predicate.Op.LESS_THAN_OR_EQ;
+        if (s.equals("LIKE"))
+            return Predicate.Op.LIKE;
+        if (s.equals("~"))
+            return Predicate.Op.LIKE;
+        if (s.equals("<>"))
+            return Predicate.Op.NOT_EQUALS;
+        if (s.equals("!="))
+            return Predicate.Op.NOT_EQUALS;
+
+        throw new simpledb.ParsingException("Unknown predicate " + s);
+    }
+
+    void processExpression(TransactionId tid, ZExpression wx, LogicalPlan lp)
+            throws simpledb.ParsingException {
+        if (wx.getOperator().equals("AND")) {
+            for (int i = 0; i < wx.nbOperands(); i++) {
+                if (!(wx.getOperand(i) instanceof ZExpression)) {
+                    throw new simpledb.ParsingException(
+                            "Nested queries are currently unsupported.");
+                }
+                ZExpression newWx = (ZExpression) wx.getOperand(i);
+                processExpression(tid, newWx, lp);
+
+            }
+        } else if (wx.getOperator().equals("OR")) {
+            throw new simpledb.ParsingException(
+                    "OR expressions currently unsupported.");
+        } else {
+            // this is a binary expression comparing two constants
+            @SuppressWarnings("unchecked")
+            Vector<ZExp> ops = wx.getOperands();
+            if (ops.size() != 2) {
+                throw new simpledb.ParsingException(
+                        "Only simple binary expresssions of the form A op B are currently supported.");
+            }
+
+            boolean isJoin = false;
+            Predicate.Op op = getOp(wx.getOperator());
+
+            boolean op1const = ops.elementAt(0) instanceof ZConstant; // otherwise
+                                                                      // is a
+                                                                      // Query
+            boolean op2const = ops.elementAt(1) instanceof ZConstant; // otherwise
+                                                                      // is a
+                                                                      // Query
+            if (op1const && op2const) {
+                isJoin = ((ZConstant) ops.elementAt(0)).getType() == ZConstant.COLUMNNAME
+                        && ((ZConstant) ops.elementAt(1)).getType() == ZConstant.COLUMNNAME;
+            } else if (ops.elementAt(0) instanceof ZQuery
+                    || ops.elementAt(1) instanceof ZQuery) {
+                isJoin = true;
+            } else if (ops.elementAt(0) instanceof ZExpression
+                    || ops.elementAt(1) instanceof ZExpression) {
+                throw new simpledb.ParsingException(
+                        "Only simple binary expresssions of the form A op B are currently supported, where A or B are fields, constants, or subqueries.");
+            } else
+                isJoin = false;
+
+            if (isJoin) { // join node
+
+                String tab1field = "", tab2field = "";
+
+                if (!op1const) { // left op is a nested query
+                    // generate a virtual table for the left op
+                    // this isn't a valid ZQL query
+                } else {
+                    tab1field = ((ZConstant) ops.elementAt(0)).getValue();
+
+                }
+
+                if (!op2const) { // right op is a nested query
+                    try {
+                        LogicalPlan sublp = parseQueryLogicalPlan(tid,
+                                (ZQuery) ops.elementAt(1));
+                        DbIterator pp = sublp.physicalPlan(tid,
+                                TableStats.getStatsMap(), explain);
+                        lp.addJoin(tab1field, pp, op);
+                    } catch (IOException e) {
+                        throw new simpledb.ParsingException("Invalid subquery "
+                                + ops.elementAt(1));
+                    } catch (Zql.ParseException e) {
+                        throw new simpledb.ParsingException("Invalid subquery "
+                                + ops.elementAt(1));
+                    }
+                } else {
+                    tab2field = ((ZConstant) ops.elementAt(1)).getValue();
+                    lp.addJoin(tab1field, tab2field, op);
+                }
+
+            } else { // select node
+                String column;
+                String compValue;
+                ZConstant op1 = (ZConstant) ops.elementAt(0);
+                ZConstant op2 = (ZConstant) ops.elementAt(1);
+                if (op1.getType() == ZConstant.COLUMNNAME) {
+                    column = op1.getValue();
+                    compValue = new String(op2.getValue());
+                } else {
+                    column = op2.getValue();
+                    compValue = new String(op1.getValue());
+                }
+
+                lp.addFilter(column, op, compValue);
+
+            }
+        }
+
+    }
+
+    public LogicalPlan parseQueryLogicalPlan(TransactionId tid, ZQuery q)
+            throws IOException, Zql.ParseException, simpledb.ParsingException {
+        @SuppressWarnings("unchecked")
+        Vector<ZFromItem> from = q.getFrom();
+        LogicalPlan lp = new LogicalPlan();
+        lp.setQuery(q.toString());
+        // walk through tables in the FROM clause
+        for (int i = 0; i < from.size(); i++) {
+            ZFromItem fromIt = from.elementAt(i);
+            try {
+
+                int id = Database.getCatalog().getTableId(fromIt.getTable()); // will
+                                                                              // fall
+                                                                              // through
+                                                                              // if
+                                                                              // table
+                                                                              // doesn't
+                                                                              // exist
+                String name;
+
+                if (fromIt.getAlias() != null)
+                    name = fromIt.getAlias();
+                else
+                    name = fromIt.getTable();
+
+                lp.addScan(id, name);
+
+                // XXX handle subquery?
+            } catch (NoSuchElementException e) {
+                e.printStackTrace();
+                throw new simpledb.ParsingException("Table "
+                        + fromIt.getTable() + " is not in catalog");
+            }
+        }
+
+        // now parse the where clause, creating Filter and Join nodes as needed
+        ZExp w = q.getWhere();
+        if (w != null) {
+
+            if (!(w instanceof ZExpression)) {
+                throw new simpledb.ParsingException(
+                        "Nested queries are currently unsupported.");
+            }
+            ZExpression wx = (ZExpression) w;
+            processExpression(tid, wx, lp);
+
+        }
+
+        // now look for group by fields
+        ZGroupBy gby = q.getGroupBy();
+        String groupByField = null;
+        if (gby != null) {
+            @SuppressWarnings("unchecked")
+            Vector<ZExp> gbs = gby.getGroupBy();
+            if (gbs.size() > 1) {
+                throw new simpledb.ParsingException(
+                        "At most one grouping field expression supported.");
+            }
+            if (gbs.size() == 1) {
+                ZExp gbe = gbs.elementAt(0);
+                if (!(gbe instanceof ZConstant)) {
+                    throw new simpledb.ParsingException(
+                            "Complex grouping expressions (" + gbe
+                                    + ") not supported.");
+                }
+                groupByField = ((ZConstant) gbe).getValue();
+                System.out.println("GROUP BY FIELD : " + groupByField);
+            }
+
+        }
+
+        // walk the select list, pick out aggregates, and check for query
+        // validity
+        @SuppressWarnings("unchecked")
+        Vector<ZSelectItem> selectList = q.getSelect();
+        String aggField = null;
+        String aggFun = null;
+
+        for (int i = 0; i < selectList.size(); i++) {
+            ZSelectItem si = selectList.elementAt(i);
+            if (si.getAggregate() == null
+                    && (si.isExpression() && !(si.getExpression() instanceof ZConstant))) {
+                throw new simpledb.ParsingException(
+                        "Expressions in SELECT list are not supported.");
+            }
+            if (si.getAggregate() != null) {
+                if (aggField != null) {
+                    throw new simpledb.ParsingException(
+                            "Aggregates over multiple fields not supported.");
+                }
+                aggField = ((ZConstant) ((ZExpression) si.getExpression())
+                        .getOperand(0)).getValue();
+                aggFun = si.getAggregate();
+                System.out.println("Aggregate field is " + aggField
+                        + ", agg fun is : " + aggFun);
+                lp.addProjectField(aggField, aggFun);
+            } else {
+                if (groupByField != null
+                        && !(groupByField.equals(si.getTable() + "."
+                                + si.getColumn()) || groupByField.equals(si
+                                .getColumn()))) {
+                    throw new simpledb.ParsingException("Non-aggregate field "
+                            + si.getColumn()
+                            + " does not appear in GROUP BY list.");
+                }
+                lp.addProjectField(si.getTable() + "." + si.getColumn(), null);
+            }
+        }
+
+        if (groupByField != null && aggFun == null) {
+            throw new simpledb.ParsingException("GROUP BY without aggregation.");
+        }
+
+        if (aggFun != null) {
+            lp.addAggregate(aggFun, aggField, groupByField);
+        }
+        // sort the data
+
+        if (q.getOrderBy() != null) {
+            @SuppressWarnings("unchecked")
+            Vector<ZOrderBy> obys = q.getOrderBy();
+            if (obys.size() > 1) {
+                throw new simpledb.ParsingException(
+                        "Multi-attribute ORDER BY is not supported.");
+            }
+            ZOrderBy oby = obys.elementAt(0);
+            if (!(oby.getExpression() instanceof ZConstant)) {
+                throw new simpledb.ParsingException(
+                        "Complex ORDER BY's are not supported");
+            }
+            ZConstant f = (ZConstant) oby.getExpression();
+
+            lp.addOrderBy(f.getValue(), oby.getAscOrder());
+
+        }
+        return lp;
+    }
+
+    private Transaction curtrans = null;
+    private boolean inUserTrans = false;
+
+    public Query handleQueryStatement(ZQuery s, TransactionId tId)
+            throws TransactionAbortedException, DbException, IOException,
+            simpledb.ParsingException, Zql.ParseException {
+        Query query = new Query(tId);
+
+        LogicalPlan lp = parseQueryLogicalPlan(tId, s);
+        DbIterator physicalPlan = lp.physicalPlan(tId,
+                TableStats.getStatsMap(), explain);
+        query.setPhysicalPlan(physicalPlan);
+        query.setLogicalPlan(lp);
+
+        if (physicalPlan != null) {
+            Class<?> c;
+            try {
+                c = Class.forName("simpledb.OperatorCardinality");
+
+                Class<?> p = Operator.class;
+                Class<?> h = Map.class;
+
+                java.lang.reflect.Method m = c.getMethod(
+                        "updateOperatorCardinality", p, h, h);
+
+                System.out.println("The query plan is:");
+                m.invoke(null, (Operator) physicalPlan,
+                        lp.getTableAliasToIdMapping(), TableStats.getStatsMap());
+                c = Class.forName("simpledb.QueryPlanVisualizer");
+                m = c.getMethod(
+                        "printQueryPlanTree", DbIterator.class, System.out.getClass());
+                m.invoke(c.newInstance(), physicalPlan,System.out);
+            } catch (ClassNotFoundException e) {
+            } catch (SecurityException e) {
+            } catch (NoSuchMethodException e) {
+                e.printStackTrace();
+            } catch (IllegalArgumentException e) {
+                e.printStackTrace();
+            } catch (IllegalAccessException e) {
+                e.printStackTrace();
+            } catch (InvocationTargetException e) {
+                e.printStackTrace();
+            } catch (InstantiationException e) {
+                e.printStackTrace();
+            }
+        }
+
+        return query;
+    }
+
+    public Query handleInsertStatement(ZInsert s, TransactionId tId)
+            throws TransactionAbortedException, DbException, IOException,
+            simpledb.ParsingException, Zql.ParseException {
+        int tableId;
+        try {
+            tableId = Database.getCatalog().getTableId(s.getTable()); // will
+                                                                      // fall
+            // through if
+            // table
+            // doesn't
+            // exist
+        } catch (NoSuchElementException e) {
+            throw new simpledb.ParsingException("Unknown table : "
+                    + s.getTable());
+        }
+
+        TupleDesc td = Database.getCatalog().getTupleDesc(tableId);
+
+        Tuple t = new Tuple(td);
+        int i = 0;
+        DbIterator newTups;
+
+        if (s.getValues() != null) {
+            @SuppressWarnings("unchecked")
+            Vector<ZExp> values = (Vector<ZExp>) s.getValues();
+            if (td.numFields() != values.size()) {
+                throw new simpledb.ParsingException(
+                        "INSERT statement does not contain same number of fields as table "
+                                + s.getTable());
+            }
+            for (ZExp e : values) {
+
+                if (!(e instanceof ZConstant))
+                    throw new simpledb.ParsingException(
+                            "Complex expressions not allowed in INSERT statements.");
+                ZConstant zc = (ZConstant) e;
+                if (zc.getType() == ZConstant.NUMBER) {
+                    if (td.getFieldType(i) != Type.INT_TYPE) {
+                        throw new simpledb.ParsingException("Value "
+                                + zc.getValue()
+                                + " is not an integer, expected a string.");
+                    }
+                    IntField f = new IntField(new Integer(zc.getValue()));
+                    t.setField(i, f);
+                } else if (zc.getType() == ZConstant.STRING) {
+                    if (td.getFieldType(i) != Type.STRING_TYPE) {
+                        throw new simpledb.ParsingException("Value "
+                                + zc.getValue()
+                                + " is a string, expected an integer.");
+                    }
+                    StringField f = new StringField(zc.getValue(),
+                            Type.STRING_LEN);
+                    t.setField(i, f);
+                } else {
+                    throw new simpledb.ParsingException(
+                            "Only string or int fields are supported.");
+                }
+
+                i++;
+            }
+            ArrayList<Tuple> tups = new ArrayList<Tuple>();
+            tups.add(t);
+            newTups = new TupleArrayIterator(tups);
+
+        } else {
+            ZQuery zq = (ZQuery) s.getQuery();
+            LogicalPlan lp = parseQueryLogicalPlan(tId, zq);
+            newTups = lp.physicalPlan(tId, TableStats.getStatsMap(), explain);
+        }
+        Query insertQ = new Query(tId);
+        insertQ.setPhysicalPlan(new Insert(tId, newTups, tableId));
+        return insertQ;
+    }
+
+    public Query handleDeleteStatement(ZDelete s, TransactionId tid)
+            throws TransactionAbortedException, DbException, IOException,
+            simpledb.ParsingException, Zql.ParseException {
+        int id;
+        try {
+            id = Database.getCatalog().getTableId(s.getTable()); // will fall
+                                                                 // through if
+                                                                 // table
+                                                                 // doesn't
+                                                                 // exist
+        } catch (NoSuchElementException e) {
+            throw new simpledb.ParsingException("Unknown table : "
+                    + s.getTable());
+        }
+        String name = s.getTable();
+        Query sdbq = new Query(tid);
+
+        LogicalPlan lp = new LogicalPlan();
+        lp.setQuery(s.toString());
+
+        lp.addScan(id, name);
+        if (s.getWhere() != null)
+            processExpression(tid, (ZExpression) s.getWhere(), lp);
+        lp.addProjectField("null.*", null);
+
+        DbIterator op = new Delete(tid, lp.physicalPlan(tid,
+                TableStats.getStatsMap(), false));
+        sdbq.setPhysicalPlan(op);
+
+        return sdbq;
+
+    }
+
+    public void handleTransactStatement(ZTransactStmt s)
+            throws TransactionAbortedException, DbException, IOException,
+            simpledb.ParsingException, Zql.ParseException {
+        if (s.getStmtType().equals("COMMIT")) {
+            if (curtrans == null)
+                throw new simpledb.ParsingException(
+                        "No transaction is currently running");
+            curtrans.commit();
+            curtrans = null;
+            inUserTrans = false;
+            System.out.println("Transaction " + curtrans.getId().getId()
+                    + " committed.");
+        } else if (s.getStmtType().equals("ROLLBACK")) {
+            if (curtrans == null)
+                throw new simpledb.ParsingException(
+                        "No transaction is currently running");
+            curtrans.abort();
+            curtrans = null;
+            inUserTrans = false;
+            System.out.println("Transaction " + curtrans.getId().getId()
+                    + " aborted.");
+
+        } else if (s.getStmtType().equals("SET TRANSACTION")) {
+            if (curtrans != null)
+                throw new simpledb.ParsingException(
+                        "Can't start new transactions until current transaction has been committed or rolledback.");
+            curtrans = new Transaction();
+            curtrans.start();
+            inUserTrans = true;
+            System.out.println("Started a new transaction tid = "
+                    + curtrans.getId().getId());
+        } else {
+            throw new simpledb.ParsingException("Unsupported operation");
+        }
+    }
+
+    public LogicalPlan generateLogicalPlan(TransactionId tid, String s)
+            throws simpledb.ParsingException {
+        ByteArrayInputStream bis = new ByteArrayInputStream(s.getBytes());
+        ZqlParser p = new ZqlParser(bis);
+        try {
+            ZStatement stmt = p.readStatement();
+            if (stmt instanceof ZQuery) {
+                LogicalPlan lp = parseQueryLogicalPlan(tid, (ZQuery) stmt);
+                return lp;
+            }
+        } catch (Zql.ParseException e) {
+            throw new simpledb.ParsingException(
+                    "Invalid SQL expression: \n \t " + e);
+        } catch (IOException e) {
+            throw new simpledb.ParsingException(e);
+        }
+
+        throw new simpledb.ParsingException(
+                "Cannot generate logical plan for expression : " + s);
+    }
+
+    public void setTransaction(Transaction t) {
+        curtrans = t;
+    }
+
+    public Transaction getTransaction() {
+        return curtrans;
+    }
+
+    public void processNextStatement(String s) {
+        try {
+            processNextStatement(new ByteArrayInputStream(s.getBytes("UTF-8")));
+        } catch (UnsupportedEncodingException e) {
+            e.printStackTrace();
+            throw new RuntimeException(e);
+        }
+    }
+
+    public void processNextStatement(InputStream is) {
+        try {
+            ZqlParser p = new ZqlParser(is);
+            ZStatement s = p.readStatement();
+
+            Query query = null;
+            if (s instanceof ZTransactStmt)
+                handleTransactStatement((ZTransactStmt) s);
+            else {
+                if (!this.inUserTrans) {
+                    curtrans = new Transaction();
+                    curtrans.start();
+                    System.out.println("Started a new transaction tid = "
+                            + curtrans.getId().getId());
+                }
+                try {
+                    if (s instanceof ZInsert)
+                        query = handleInsertStatement((ZInsert) s,
+                                curtrans.getId());
+                    else if (s instanceof ZDelete)
+                        query = handleDeleteStatement((ZDelete) s,
+                                curtrans.getId());
+                    else if (s instanceof ZQuery)
+                        query = handleQueryStatement((ZQuery) s,
+                                curtrans.getId());
+                    else {
+                        System.out
+                                .println("Can't parse "
+                                        + s
+                                        + "\n -- parser only handles SQL transactions, insert, delete, and select statements");
+                    }
+                    if (query != null)
+                        query.execute();
+
+                    if (!inUserTrans && curtrans != null) {
+                        curtrans.commit();
+                        System.out.println("Transaction "
+                                + curtrans.getId().getId() + " committed.");
+                    }
+                } catch (Throwable a) {
+                    // Whenever error happens, abort the current transaction
+                    if (curtrans != null) {
+                        curtrans.abort();
+                        System.out.println("Transaction "
+                                + curtrans.getId().getId()
+                                + " aborted because of unhandled error");
+                    }
+                    this.inUserTrans = false;
+
+                    if (a instanceof simpledb.ParsingException
+                            || a instanceof Zql.ParseException)
+                        throw new ParsingException((Exception) a);
+                    if (a instanceof Zql.TokenMgrError)
+                        throw (Zql.TokenMgrError) a;
+                    throw new DbException(a.getMessage());
+                } finally {
+                    if (!inUserTrans)
+                        curtrans = null;
+                }
+            }
+
+        } catch (TransactionAbortedException e) {
+            e.printStackTrace();
+        } catch (DbException e) {
+            e.printStackTrace();
+        } catch (IOException e) {
+            e.printStackTrace();
+        } catch (simpledb.ParsingException e) {
+            System.out
+                    .println("Invalid SQL expression: \n \t" + e.getMessage());
+        } catch (Zql.ParseException e) {
+            System.out.println("Invalid SQL expression: \n \t " + e);
+        } catch (Zql.TokenMgrError e) {
+            System.out.println("Invalid SQL expression: \n \t " + e);
+        }
+    }
+
+    // Basic SQL completions
+    public static final String[] SQL_COMMANDS = { "select", "from", "where",
+            "group by", "max(", "min(", "avg(", "count", "rollback", "commit",
+            "insert", "delete", "values", "into" };
+
+    public static void main(String argv[]) throws IOException {
+
+        if (argv.length < 1 || argv.length > 4) {
+            System.out.println("Invalid number of arguments.\n" + usage);
+            System.exit(0);
+        }
+
+        Parser p = new Parser();
+
+        p.start(argv);
+    }
+
+    static final String usage = "Usage: parser catalogFile [-explain] [-f queryFile]";
+    static final int SLEEP_TIME = 5000;
+
+    protected void shutdown() {
+        System.out.println("Bye");
+    }
+
+    protected boolean interactive = true;
+
+    protected void start(String[] argv) throws IOException {
+        // first add tables to database
+        Database.getCatalog().loadSchema(argv[0]);
+        TableStats.computeStatistics();
+
+        String queryFile = null;
+
+        if (argv.length > 1) {
+            for (int i = 1; i < argv.length; i++) {
+                if (argv[i].equals("-explain")) {
+                    explain = true;
+                    System.out.println("Explain mode enabled.");
+                } else if (argv[i].equals("-f")) {
+                    interactive = false;
+                    if (i++ == argv.length) {
+                        System.out.println("Expected file name after -f\n"
+                                + usage);
+                        System.exit(0);
+                    }
+                    queryFile = argv[i];
+
+                } else {
+                    System.out.println("Unknown argument " + argv[i] + "\n "
+                            + usage);
+                }
+            }
+        }
+        if (!interactive) {
+            try {
+                // curtrans = new Transaction();
+                // curtrans.start();
+                try {
+                    Thread.sleep(SLEEP_TIME);
+                } catch (InterruptedException e) {
+                    e.printStackTrace();
+                }
+
+                long startTime = System.currentTimeMillis();
+                processNextStatement(new FileInputStream(new File(queryFile)));
+                long time = System.currentTimeMillis() - startTime;
+                System.out.printf("----------------\n%.2f seconds\n\n",
+                        ((double) time / 1000.0));
+                System.out.println("Press Enter to exit");
+                System.in.read();
+                this.shutdown();
+            } catch (FileNotFoundException e) {
+                System.out.println("Unable to find query file" + queryFile);
+                e.printStackTrace();
+            }
+        } else { // no query file, run interactive prompt
+            ConsoleReader reader = new ConsoleReader();
+
+            // Add really stupid tab completion for simple SQL
+            ArgumentCompletor completor = new ArgumentCompletor(
+                    new SimpleCompletor(SQL_COMMANDS));
+            completor.setStrict(false); // match at any position
+            reader.addCompletor(completor);
+
+            StringBuilder buffer = new StringBuilder();
+            String line;
+            boolean quit = false;
+            while (!quit && (line = reader.readLine("SimpleDB> ")) != null) {
+                // Split statements at ';': handles multiple statements on one
+                // line, or one
+                // statement spread across many lines
+                while (line.indexOf(';') >= 0) {
+                    int split = line.indexOf(';');
+                    buffer.append(line.substring(0, split + 1));
+                    String cmd = buffer.toString().trim();
+                    cmd = cmd.substring(0, cmd.length() - 1).trim() + ";";
+                    byte[] statementBytes = cmd.getBytes("UTF-8");
+                    if (cmd.equalsIgnoreCase("quit;")
+                            || cmd.equalsIgnoreCase("exit;")) {
+                        shutdown();
+                        quit = true;
+                        break;
+                    }
+
+                    long startTime = System.currentTimeMillis();
+                    processNextStatement(new ByteArrayInputStream(
+                            statementBytes));
+                    long time = System.currentTimeMillis() - startTime;
+                    System.out.printf("----------------\n%.2f seconds\n\n",
+                            ((double) time / 1000.0));
+
+                    // Grab the remainder of the line
+                    line = line.substring(split + 1);
+                    buffer = new StringBuilder();
+                }
+                if (line.length() > 0) {
+                    buffer.append(line);
+                    buffer.append("\n");
+                }
+            }
+        }
+    }
+}
+
+class TupleArrayIterator implements DbIterator {
+    /**
+	 *
+	 */
+    private static final long serialVersionUID = 1L;
+    ArrayList<Tuple> tups;
+    Iterator<Tuple> it = null;
+
+    public TupleArrayIterator(ArrayList<Tuple> tups) {
+        this.tups = tups;
+    }
+
+    public void open() throws DbException, TransactionAbortedException {
+        it = tups.iterator();
+    }
+
+    /** @return true if the iterator has more items. */
+    public boolean hasNext() throws DbException, TransactionAbortedException {
+        return it.hasNext();
+    }
+
+    /**
+     * Gets the next tuple from the operator (typically implementing by reading
+     * from a child operator or an access method).
+     *
+     * @return The next tuple in the iterator, or null if there are no more
+     *         tuples.
+     */
+    public Tuple next() throws DbException, TransactionAbortedException,
+            NoSuchElementException {
+        return it.next();
+    }
+
+    /**
+     * Resets the iterator to the start.
+     *
+     * @throws DbException
+     *             When rewind is unsupported.
+     */
+    public void rewind() throws DbException, TransactionAbortedException {
+        it = tups.iterator();
+    }
+
+    /**
+     * Returns the TupleDesc associated with this DbIterator.
+     */
+    public TupleDesc getTupleDesc() {
+        return tups.get(0).getTupleDesc();
+    }
+
+    /**
+     * Closes the iterator.
+     */
+    public void close() {
+    }
+
+}
diff -ruN lab1/src/java/simpledb/ParsingException.java lab3/src/java/simpledb/ParsingException.java
--- lab1/src/java/simpledb/ParsingException.java	1969-12-31 18:00:00.000000000 -0600
+++ lab3/src/java/simpledb/ParsingException.java	2016-11-02 22:06:55.000000000 -0500
@@ -0,0 +1,17 @@
+package simpledb;
+import java.lang.Exception;
+
+public class ParsingException extends Exception {
+    public ParsingException(String string) {
+        super(string);
+    }
+
+    public ParsingException(Exception e) {
+        super(e);
+    }
+
+    /**
+     *
+     */
+    private static final long serialVersionUID = 1L;
+}
diff -ruN lab1/src/java/simpledb/PlanCache.java lab3/src/java/simpledb/PlanCache.java
--- lab1/src/java/simpledb/PlanCache.java	1969-12-31 18:00:00.000000000 -0600
+++ lab3/src/java/simpledb/PlanCache.java	2016-11-02 22:06:55.000000000 -0500
@@ -0,0 +1,50 @@
+package simpledb;
+import java.util.HashMap;
+import java.util.Set;
+import java.util.Vector;
+
+/** A PlanCache is a helper class that can be used to store the best
+ * way to order a given set of joins */
+public class PlanCache {
+    HashMap<Set<LogicalJoinNode>,Vector<LogicalJoinNode>> bestOrders= new HashMap<Set<LogicalJoinNode>,Vector<LogicalJoinNode>>();
+    HashMap<Set<LogicalJoinNode>,Double> bestCosts= new HashMap<Set<LogicalJoinNode>,Double>();
+    HashMap<Set<LogicalJoinNode>,Integer> bestCardinalities = new HashMap<Set<LogicalJoinNode>,Integer>();
+    
+    /** Add a new cost, cardinality and ordering for a particular join set.  Does not verify that the
+        new cost is less than any previously added cost -- simply adds or replaces an existing plan for the
+        specified join set
+        @param s the set of joins for which a new ordering (plan) is being added
+        @param cost the estimated cost of the specified plan
+        @param card the estimatied cardinality of the specified plan
+        @param order the ordering of the joins in the plan
+    */
+    void addPlan(Set<LogicalJoinNode> s, double cost, int card, Vector<LogicalJoinNode> order) {
+        bestOrders.put(s,order);                        
+        bestCosts.put(s,cost);
+        bestCardinalities.put(s,card);
+    }
+    
+    /** Find the best join order in the cache for the specified plan 
+        @param s the set of joins to look up the best order for
+        @return the best order for s in the cache
+    */
+    Vector<LogicalJoinNode> getOrder(Set<LogicalJoinNode> s) {
+        return bestOrders.get(s);
+    }
+    
+    /** Find the cost of the best join order in the cache for the specified plan 
+        @param s the set of joins to look up the best cost for
+        @return the cost of the best order for s in the cache
+    */
+    double getCost(Set<LogicalJoinNode> s) {
+        return bestCosts.get(s);
+    }
+    
+    /** Find the cardinality of the best join order in the cache for the specified plan 
+        @param s the set of joins to look up the best cardinality for
+        @return the cardinality of the best order for s in the cache
+    */
+    int getCard(Set<LogicalJoinNode> s) {
+        return bestCardinalities.get(s);
+    }
+}
diff -ruN lab1/src/java/simpledb/Predicate.java lab3/src/java/simpledb/Predicate.java
--- lab1/src/java/simpledb/Predicate.java	2016-11-02 22:06:58.000000000 -0500
+++ lab3/src/java/simpledb/Predicate.java	2016-11-02 22:06:55.000000000 -0500
@@ -9,6 +9,10 @@
 
     private static final long serialVersionUID = 1L;
 
+    private Op op;
+    private int field;
+    private Field operand;
+
     /** Constants used for return codes in Field.compare */
     public enum Op implements Serializable {
         EQUALS, GREATER_THAN, LESS_THAN, LESS_THAN_OR_EQ, GREATER_THAN_OR_EQ, LIKE, NOT_EQUALS;
@@ -55,7 +59,9 @@
      *            field value to compare passed in tuples to
      */
     public Predicate(int field, Op op, Field operand) {
-        // some code goes here
+        this.field = field;
+        this.op = op;
+        this.operand = operand;
     }
 
     /**
@@ -63,8 +69,7 @@
      */
     public int getField()
     {
-        // some code goes here
-        return -1;
+        return this.field;
     }
 
     /**
@@ -72,8 +77,7 @@
      */
     public Op getOp()
     {
-        // some code goes here
-        return null;
+        return this.op;
     }
     
     /**
@@ -81,8 +85,7 @@
      */
     public Field getOperand()
     {
-        // some code goes here
-        return null;
+        return this.operand;
     }
     
     /**
@@ -96,8 +99,8 @@
      * @return true if the comparison is true, false otherwise.
      */
     public boolean filter(Tuple t) {
-        // some code goes here
-        return false;
+        Field f = t.getField(field);
+        return f.compare(op, operand);
     }
 
     /**
@@ -105,7 +108,8 @@
      * operand_string
      */
     public String toString() {
-        // some code goes here
-        return "";
+        String p = "";
+        p += "f = " + field + " op = " + op + " operand = " + operand;
+        return p;
     }
 }
diff -ruN lab1/src/java/simpledb/Project.java lab3/src/java/simpledb/Project.java
--- lab1/src/java/simpledb/Project.java	1969-12-31 18:00:00.000000000 -0600
+++ lab3/src/java/simpledb/Project.java	2016-11-02 22:06:55.000000000 -0500
@@ -0,0 +1,96 @@
+package simpledb;
+
+import java.util.*;
+
+/**
+ * Project is an operator that implements a relational projection.
+ */
+public class Project extends Operator {
+
+    private static final long serialVersionUID = 1L;
+    private DbIterator child;
+    private TupleDesc td;
+    private ArrayList<Integer> outFieldIds;
+
+    /**
+     * Constructor accepts a child operator to read tuples to apply projection
+     * to and a list of fields in output tuple
+     * 
+     * @param fieldList
+     *            The ids of the fields child's tupleDesc to project out
+     * @param typesList
+     *            the types of the fields in the final projection
+     * @param child
+     *            The child operator
+     */
+    public Project(ArrayList<Integer> fieldList, ArrayList<Type> typesList,
+            DbIterator child) {
+        this(fieldList,typesList.toArray(new Type[]{}),child);
+    }
+    
+    public Project(ArrayList<Integer> fieldList, Type[] types,
+            DbIterator child) {
+        this.child = child;
+        outFieldIds = fieldList;
+        String[] fieldAr = new String[fieldList.size()];
+        TupleDesc childtd = child.getTupleDesc();
+
+        for (int i = 0; i < fieldAr.length; i++) {
+            fieldAr[i] = childtd.getFieldName(fieldList.get(i));
+        }
+        td = new TupleDesc(types, fieldAr);
+    }
+
+    public TupleDesc getTupleDesc() {
+        return td;
+    }
+
+    public void open() throws DbException, NoSuchElementException,
+            TransactionAbortedException {
+        child.open();
+        super.open();
+    }
+
+    public void close() {
+        super.close();
+        child.close();
+    }
+
+    public void rewind() throws DbException, TransactionAbortedException {
+        child.rewind();
+    }
+
+    /**
+     * Operator.fetchNext implementation. Iterates over tuples from the child
+     * operator, projecting out the fields from the tuple
+     * 
+     * @return The next tuple, or null if there are no more tuples
+     */
+    protected Tuple fetchNext() throws NoSuchElementException,
+            TransactionAbortedException, DbException {
+        while (child.hasNext()) {
+            Tuple t = child.next();
+            Tuple newTuple = new Tuple(td);
+            newTuple.setRecordId(t.getRecordId());
+            for (int i = 0; i < td.numFields(); i++) {
+                newTuple.setField(i, t.getField(outFieldIds.get(i)));
+            }
+            return newTuple;
+        }
+        return null;
+    }
+
+    @Override
+    public DbIterator[] getChildren() {
+        return new DbIterator[] { this.child };
+    }
+
+    @Override
+    public void setChildren(DbIterator[] children) {
+	if (this.child!=children[0])
+	{
+	    this.child = children[0];
+	}
+    }
+    
+}
diff -ruN lab1/src/java/simpledb/Query.java lab3/src/java/simpledb/Query.java
--- lab1/src/java/simpledb/Query.java	1969-12-31 18:00:00.000000000 -0600
+++ lab3/src/java/simpledb/Query.java	2016-11-02 22:06:55.000000000 -0500
@@ -0,0 +1,118 @@
+package simpledb;
+
+import java.io.*;
+import java.util.*;
+
+/**
+ * Query is a wrapper class to manage the execution of queries. It takes a query
+ * plan in the form of a high level DbIterator (built by initiating the
+ * constructors of query plans) and runs it as a part of a specified
+ * transaction.
+ * 
+ * @author Sam Madden
+ */
+
+public class Query implements Serializable {
+
+    private static final long serialVersionUID = 1L;
+
+    transient private DbIterator op;
+    transient private LogicalPlan logicalPlan;
+    TransactionId tid;
+    transient private boolean started = false;
+
+    public TransactionId getTransactionId() {
+        return this.tid;
+    }
+
+    public void setLogicalPlan(LogicalPlan lp) {
+        this.logicalPlan = lp;
+    }
+
+    public LogicalPlan getLogicalPlan() {
+        return this.logicalPlan;
+    }
+
+    public void setPhysicalPlan(DbIterator pp) {
+        this.op = pp;
+    }
+
+    public DbIterator getPhysicalPlan() {
+        return this.op;
+    }
+
+    public Query(TransactionId t) {
+        tid = t;
+    }
+
+    public Query(DbIterator root, TransactionId t) {
+        op = root;
+        tid = t;
+    }
+
+    public void start() throws IOException, DbException,
+            TransactionAbortedException {
+        op.open();
+
+        started = true;
+    }
+
+    public TupleDesc getOutputTupleDesc() {
+        return this.op.getTupleDesc();
+    }
+
+    /** @return true if there are more tuples remaining. */
+    public boolean hasNext() throws DbException, TransactionAbortedException {
+        return op.hasNext();
+    }
+
+    /**
+     * Returns the next tuple, or throws NoSuchElementException if the iterator
+     * is closed.
+     * 
+     * @return The next tuple in the iterator
+     * @throws DbException
+     *             If there is an error in the database system
+     * @throws NoSuchElementException
+     *             If the iterator has finished iterating
+     * @throws TransactionAbortedException
+     *             If the transaction is aborted (e.g., due to a deadlock)
+     */
+    public Tuple next() throws DbException, NoSuchElementException,
+            TransactionAbortedException {
+        if (!started)
+            throw new DbException("Database not started.");
+
+        return op.next();
+    }
+
+    /** Close the iterator */
+    public void close() throws IOException {
+        op.close();
+        started = false;
+    }
+
+    public void execute() throws IOException, DbException, TransactionAbortedException {
+        TupleDesc td = this.getOutputTupleDesc();
+
+        String names = "";
+        for (int i = 0; i < td.numFields(); i++) {
+            names += td.getFieldName(i) + "\t";
+        }
+        System.out.println(names);
+        for (int i = 0; i < names.length() + td.numFields() * 4; i++) {
+            System.out.print("-");
+        }
+        System.out.println("");
+
+        this.start();
+        int cnt = 0;
+        while (this.hasNext()) {
+            Tuple tup = this.next();
+            System.out.println(tup);
+            cnt++;
+        }
+        System.out.println("\n " + cnt + " rows.");
+        this.close();
+    }
+}
diff -ruN lab1/src/java/simpledb/QueryPlanVisualizer.java lab3/src/java/simpledb/QueryPlanVisualizer.java
--- lab1/src/java/simpledb/QueryPlanVisualizer.java	1969-12-31 18:00:00.000000000 -0600
+++ lab3/src/java/simpledb/QueryPlanVisualizer.java	2016-11-02 22:06:55.000000000 -0500
@@ -0,0 +1,401 @@
+package simpledb;
+
+import java.io.PrintStream;
+import java.util.Arrays;
+import java.util.Iterator;
+import simpledb.TupleDesc.TDItem;
+
+public class QueryPlanVisualizer {
+
+    static final String JOIN = "⨝";
+    static final String HASH_JOIN = "⨝(hash)";
+    static final String SELECT = "σ";
+    static final String PROJECT = "π";
+    static final String RENAME = "ρ";
+    static final String SCAN = "scan";
+    static final String ORDERBY = "o";
+    static final String GROUPBY = "g";
+    static final String SPACE = "  ";
+
+    private int calculateQueryPlanTreeDepth(DbIterator root) {
+        if (root == null)
+            return 0;
+
+        if (!(root instanceof Operator))
+            return 2;
+        Operator o = (Operator) root;
+        DbIterator[] children = o.getChildren();
+
+        if (o instanceof Join || o instanceof HashEquiJoin) {
+            int d1 = this.calculateQueryPlanTreeDepth(children[0]);
+            int d2 = this.calculateQueryPlanTreeDepth(children[1]);
+            return Math.max(d1, d2) + 3;
+        }
+        else
+        {
+            if (children!=null && children[0]!=null)
+                return this.calculateQueryPlanTreeDepth(children[0])+2;
+        }
+        return 2;
+    }
+
+    private static class SubTreeDescriptor {
+        int width;
+        int upBarPosition;
+        SubTreeDescriptor leftChild;
+        SubTreeDescriptor rightChild;
+        int textStartPosition;
+        String text;
+        int height;
+
+        SubTreeDescriptor(SubTreeDescriptor leftChild,
+                SubTreeDescriptor rightChild) {
+            this.leftChild = leftChild;
+            this.rightChild = rightChild;
+        }
+
+    }
+
+    private SubTreeDescriptor buildTree(int queryPlanDepth, int currentDepth,
+            DbIterator queryPlan, int currentStartPosition,
+            int parentUpperBarStartShift) {
+        if (queryPlan == null)
+            return null;
+
+        int adjustDepth = currentDepth == 0 ? -1 : 0;
+        SubTreeDescriptor thisNode = new SubTreeDescriptor(null, null);
+
+        if (queryPlan instanceof SeqScan) {
+            SeqScan s = (SeqScan) queryPlan;
+            String tableName = s.getTableName();
+            String alias = s.getAlias();
+//            TupleDesc td = s.getTupleDesc();
+            if (!tableName.equals(alias))
+                alias = " " + alias;
+            else
+                alias = "";
+            thisNode.text = String
+                    .format("%1$s(%2$s)", SCAN, tableName + alias);
+            if (SCAN.length() / 2 < parentUpperBarStartShift) {
+                thisNode.upBarPosition = currentStartPosition
+                        + parentUpperBarStartShift;
+                thisNode.textStartPosition = thisNode.upBarPosition
+                        - SCAN.length() / 2;
+            } else {
+                thisNode.upBarPosition = currentStartPosition + SCAN.length()
+                        / 2;
+                thisNode.textStartPosition = currentStartPosition;
+            }
+            thisNode.width = thisNode.textStartPosition - currentStartPosition
+                    + thisNode.text.length();
+            int embedHeight = (queryPlanDepth - currentDepth) / 2 - 1;
+            thisNode.height = currentDepth + 2 * embedHeight;
+            int currentHeight = thisNode.height;
+            SubTreeDescriptor parentNode = thisNode;
+            for (int i = 0; i < embedHeight; i++) {
+                parentNode = new SubTreeDescriptor(parentNode, null);
+                parentNode.text = "|";
+                parentNode.upBarPosition = thisNode.upBarPosition;
+                parentNode.width = thisNode.width;
+                parentNode.height = currentHeight - 2;
+                parentNode.textStartPosition = thisNode.upBarPosition;
+                currentHeight -= 2;
+            }
+            thisNode = parentNode;
+        } else {
+
+            Operator plan = (Operator) queryPlan;
+            DbIterator[] children = plan.getChildren();
+
+            if (plan instanceof Join) {
+                Join j = (Join) plan;
+                TupleDesc td = j.getTupleDesc();
+                JoinPredicate jp = j.getJoinPredicate();
+                String field1 = td.getFieldName(jp.getField1());
+                String field2 = td.getFieldName(jp.getField2()
+                        + children[0].getTupleDesc().numFields());
+                thisNode.text = String.format("%1$s(%2$s),card:%3$d", JOIN,
+                        field1 + jp.getOperator() + field2,j.getEstimatedCardinality());
+                int upBarShift = parentUpperBarStartShift;
+                if (JOIN.length() / 2 > parentUpperBarStartShift)
+                    upBarShift = JOIN.length() / 2;
+
+                SubTreeDescriptor left = this.buildTree(queryPlanDepth,
+                        currentDepth + adjustDepth + 3, children[0],
+                        currentStartPosition, upBarShift);
+                SubTreeDescriptor right = this.buildTree(queryPlanDepth,
+                        currentDepth + adjustDepth + 3, children[1],
+                        currentStartPosition + left.width + SPACE.length(), 0);
+                thisNode.upBarPosition = (left.upBarPosition + right.upBarPosition) / 2;
+                thisNode.textStartPosition = thisNode.upBarPosition
+                        - JOIN.length() / 2;
+                thisNode.width = Math.max(
+                        left.width + right.width + SPACE.length(),
+                        thisNode.textStartPosition + thisNode.text.length()
+                                - currentStartPosition);
+                thisNode.leftChild = left;
+                thisNode.rightChild = right;
+                thisNode.height = currentDepth;
+            } else if (plan instanceof HashEquiJoin) {
+                HashEquiJoin j = (HashEquiJoin) plan;
+                JoinPredicate jp = j.getJoinPredicate();
+                TupleDesc td = j.getTupleDesc();
+                String field1 = td.getFieldName(jp.getField1());
+                String field2 = td.getFieldName(jp.getField2()
+                        + children[0].getTupleDesc().numFields());
+                thisNode.text = String.format("%1$s(%2$s),card:%3$d", HASH_JOIN, field1
+                        + jp.getOperator() + field2,j.getEstimatedCardinality());
+                int upBarShift = parentUpperBarStartShift;
+                if (HASH_JOIN.length() / 2 > parentUpperBarStartShift)
+                    upBarShift = HASH_JOIN.length() / 2;
+                SubTreeDescriptor left = this.buildTree(queryPlanDepth,
+                        currentDepth + 3 + adjustDepth, children[0],
+                        currentStartPosition, upBarShift);
+                SubTreeDescriptor right = this.buildTree(queryPlanDepth,
+                        currentDepth + 3 + adjustDepth, children[1],
+                        currentStartPosition + left.width + SPACE.length(), 0);
+                thisNode.upBarPosition = (left.upBarPosition + right.upBarPosition) / 2;
+                thisNode.textStartPosition = thisNode.upBarPosition
+                        - HASH_JOIN.length() / 2;
+                thisNode.width = Math.max(
+                        left.width + right.width + SPACE.length(),
+                        thisNode.textStartPosition + thisNode.text.length()
+                                - currentStartPosition);
+                thisNode.leftChild = left;
+                thisNode.rightChild = right;
+                thisNode.height = currentDepth;
+            }
+            else if (plan instanceof Aggregate) {
+                Aggregate a = (Aggregate) plan;
+                int upBarShift = parentUpperBarStartShift;
+                String alignTxt;
+                TupleDesc td = a.getTupleDesc();
+                int gfield = a.groupField();
+
+                if (gfield == Aggregator.NO_GROUPING) {
+                    thisNode.text = String.format("%1$s(%2$s),card:%3$d",
+                            a.aggregateOp(), a.aggregateFieldName(),a.getEstimatedCardinality());
+                    alignTxt = td.getFieldName(00);
+                } else {
+                    thisNode.text = String.format("%1$s(%2$s), %3$s(%4$s),card:%5$d",
+                            GROUPBY, a.groupFieldName(), a.aggregateOp(),
+                            a.aggregateFieldName(),a.getEstimatedCardinality());
+                    alignTxt = GROUPBY;
+                }
+                if (alignTxt.length() / 2 > parentUpperBarStartShift)
+                    upBarShift = alignTxt.length() / 2;
+
+                SubTreeDescriptor child = this.buildTree(queryPlanDepth,
+                        currentDepth + 2 + adjustDepth, children[0],
+                        currentStartPosition, upBarShift);
+                thisNode.upBarPosition = child.upBarPosition;
+                thisNode.textStartPosition = thisNode.upBarPosition
+                        - alignTxt.length() / 2;
+                thisNode.width = Math.max(child.width,
+                        thisNode.textStartPosition + thisNode.text.length()
+                                - currentStartPosition);
+                thisNode.leftChild = child;
+                thisNode.height = currentDepth;
+            } else if (plan instanceof Filter) {
+                Filter f = (Filter) plan;
+                Predicate p = f.getPredicate();
+                thisNode.text = String.format("%1$s(%2$s),card:%3$d", SELECT, children[0]
+                        .getTupleDesc().getFieldName(p.getField())
+                        + p.getOp()
+                        + p.getOperand(),f.getEstimatedCardinality());
+                int upBarShift = parentUpperBarStartShift;
+                if (SELECT.length() / 2 > parentUpperBarStartShift)
+                    upBarShift = SELECT.length() / 2;
+                SubTreeDescriptor child = this.buildTree(queryPlanDepth,
+                        currentDepth + 2 + adjustDepth, children[0],
+                        currentStartPosition, upBarShift);
+                thisNode.upBarPosition = child.upBarPosition;
+                thisNode.textStartPosition = thisNode.upBarPosition
+                        - SELECT.length() / 2;
+                thisNode.width = Math.max(child.width,
+                        thisNode.textStartPosition + thisNode.text.length()
+                                - currentStartPosition);
+                thisNode.leftChild = child;
+                thisNode.height = currentDepth;
+            } else if (plan instanceof OrderBy) {
+                OrderBy o = (OrderBy) plan;
+                thisNode.text = String.format(
+                        "%1$s(%2$s),card:%3$d",
+                        ORDERBY,
+                        children[0].getTupleDesc().getFieldName(
+                                o.getOrderByField()),o.getEstimatedCardinality());
+                int upBarShift = parentUpperBarStartShift;
+                if (ORDERBY.length() / 2 > parentUpperBarStartShift)
+                    upBarShift = ORDERBY.length() / 2;
+                SubTreeDescriptor child = this.buildTree(queryPlanDepth,
+                        currentDepth + 2 + adjustDepth, children[0],
+                        currentStartPosition, upBarShift);
+                thisNode.upBarPosition = child.upBarPosition;
+                thisNode.textStartPosition = thisNode.upBarPosition
+                        - ORDERBY.length() / 2;
+                thisNode.width = Math.max(child.width,
+                        thisNode.textStartPosition + thisNode.text.length()
+                                - currentStartPosition);
+                thisNode.leftChild = child;
+                thisNode.height = currentDepth;
+            } else if (plan instanceof Project) {
+                Project p = (Project) plan;
+                String fields = "";
+                Iterator<TDItem> it = p.getTupleDesc().iterator();
+                while (it.hasNext())
+                    fields += it.next().fieldName + ",";
+                fields = fields.substring(0, fields.length() - 1);
+                thisNode.text = String.format("%1$s(%2$s),card:%3$d", PROJECT, fields,p.getEstimatedCardinality());
+                int upBarShift = parentUpperBarStartShift;
+                if (PROJECT.length() / 2 > parentUpperBarStartShift)
+                    upBarShift = PROJECT.length() / 2;
+                SubTreeDescriptor child = this.buildTree(queryPlanDepth,
+                        currentDepth + 2 + adjustDepth, children[0],
+                        currentStartPosition, upBarShift);
+                thisNode.upBarPosition = child.upBarPosition;
+                thisNode.textStartPosition = thisNode.upBarPosition
+                        - PROJECT.length() / 2;
+                thisNode.width = Math.max(child.width,
+                        thisNode.textStartPosition + thisNode.text.length()
+                                - currentStartPosition);
+                thisNode.leftChild = child;
+                thisNode.height = currentDepth;
+            }
+            else if (plan.getClass().getSuperclass().getSuperclass().getSimpleName().equals("Exchange")) {
+                String name="Exchange";
+                int card=0;
+                try {
+                    name = (String) plan.getClass().getMethod("getName").invoke(plan);
+                    card = (Integer) plan.getClass().getMethod("getEstimatedCardinality").invoke(plan);
+                } catch (Exception e) {
+                    e.printStackTrace();
+                } 
+
+                thisNode.text = String.format("%1$s,card:%2$d", name,card);
+                int upBarShift = parentUpperBarStartShift;
+                if (name.length() / 2 > parentUpperBarStartShift)
+                    upBarShift = name.length() / 2;
+                SubTreeDescriptor child = this.buildTree(queryPlanDepth,
+                        currentDepth + 2 + adjustDepth, children[0],
+                        currentStartPosition, upBarShift);
+                if (child == null) {
+                    thisNode.upBarPosition = upBarShift;
+                    thisNode.textStartPosition = thisNode.upBarPosition
+                            - name.length() / 2;
+                    thisNode.width = thisNode.textStartPosition + thisNode.text.length()
+                                    - currentStartPosition;
+                } else {
+                    thisNode.upBarPosition = child.upBarPosition;
+                    thisNode.textStartPosition = thisNode.upBarPosition
+                            - name.length() / 2;
+                    thisNode.width = Math.max(child.width,
+                            thisNode.textStartPosition + thisNode.text.length()
+                                    - currentStartPosition);
+                    thisNode.leftChild = child;
+                }
+                thisNode.height = currentDepth;
+            }
+            else if (plan.getClass().getName().equals("simpledb.Rename"))
+            {
+                String newName=null;
+                int fieldIdx=0;
+                try {
+                    newName=(String) plan.getClass().getMethod("newName", (Class<?>[])null).invoke(plan);
+                    fieldIdx = (Integer) plan.getClass().getMethod("renamedField", (Class<?>[])null).invoke(plan);
+                } catch (Exception e) {
+                    e.printStackTrace();
+                } 
+                String oldName = plan.getChildren()[0].getTupleDesc().getFieldName(fieldIdx);
+                thisNode.text = String.format("%1$s,%2$s->%3$s,card:%4$d", RENAME,oldName,newName,plan.getEstimatedCardinality());
+                int upBarShift = parentUpperBarStartShift;
+                if (RENAME.length() / 2 > parentUpperBarStartShift)
+                    upBarShift = RENAME.length() / 2;
+                SubTreeDescriptor child = this.buildTree(queryPlanDepth,
+                        currentDepth + 2 + adjustDepth, children[0],
+                        currentStartPosition, upBarShift);
+                if (child == null) {
+                    thisNode.upBarPosition = upBarShift;
+                    thisNode.textStartPosition = thisNode.upBarPosition
+                            - RENAME.length() / 2;
+                    thisNode.width = thisNode.textStartPosition + thisNode.text.length()
+                                    - currentStartPosition;
+                } else {
+                    thisNode.upBarPosition = child.upBarPosition;
+                    thisNode.textStartPosition = thisNode.upBarPosition
+                            - RENAME.length() / 2;
+                    thisNode.width = Math.max(child.width,
+                            thisNode.textStartPosition + thisNode.text.length()
+                                    - currentStartPosition);
+                    thisNode.leftChild = child;
+                }
+                thisNode.height = currentDepth;
+            }
+        }
+        return thisNode;
+    }
+
+    private void printTree(SubTreeDescriptor root, char[] buffer, int width) {
+        if (root == null)
+            return;
+        int textHeight = root.height + 1;
+        if (root.height != 0)
+            buffer[width * root.height + root.upBarPosition] = '|';
+        else
+            textHeight = root.height;
+
+        int base = width * textHeight + root.textStartPosition;
+        char[] text = root.text.toCharArray();
+        System.arraycopy(text, 0, buffer, base, text.length);
+
+        if (root.leftChild != null && root.rightChild == null) {
+            printTree(root.leftChild, buffer, width);
+        } else if (root.leftChild != null && root.rightChild != null) {
+            Arrays.fill(buffer, (textHeight + 1) * width
+                    + root.leftChild.upBarPosition, (textHeight + 1) * width
+                    + root.rightChild.upBarPosition + 1, '_');
+            buffer[(textHeight + 1) * width + root.upBarPosition] = '|';
+            printTree(root.leftChild, buffer, width);
+            printTree(root.rightChild, buffer, width);
+        }
+    }
+
+    public String getQueryPlanTree(DbIterator physicalPlan) {
+        int queryPlanDepth = this.calculateQueryPlanTreeDepth(physicalPlan) - 1;
+
+        SubTreeDescriptor root = this.buildTree(queryPlanDepth, 0,
+                physicalPlan, 0, 0);
+        char[] buffer = new char[queryPlanDepth * (root.width + 1)];
+        Arrays.fill(buffer, ' ');
+        for (int i = 1; i <= queryPlanDepth; i++) {
+            buffer[i * (root.width + 1) - 1] = '\n';
+        }
+
+        printTree(root, buffer, root.width + 1);
+        StringBuilder sb = new StringBuilder();
+
+        boolean ending = false;
+        for (int i = buffer.length - 1; i >= 0; i--) {
+            if (buffer[i] == '\n') {
+                sb.append(buffer[i]);
+                ending = true;
+            } else if (ending) {
+                if (buffer[i] != ' ') {
+                    ending = false;
+                    sb.append(buffer[i]);
+                }
+            } else
+                sb.append(buffer[i]);
+        }
+
+        return sb.reverse().toString();
+    }
+
+    public void printQueryPlanTree(DbIterator physicalPlan, PrintStream out) {
+        if (out == null)
+            out = System.out;
+
+        String tree = this.getQueryPlanTree(physicalPlan);
+
+        out.println(tree);
+    }
+}
diff -ruN lab1/src/java/simpledb/RecordId.java lab3/src/java/simpledb/RecordId.java
--- lab1/src/java/simpledb/RecordId.java	2016-11-02 22:06:58.000000000 -0500
+++ lab3/src/java/simpledb/RecordId.java	2016-11-02 22:06:55.000000000 -0500
@@ -20,23 +20,18 @@
      *            the tuple number within the page.
      */
     public RecordId(PageId pid, int tupleno) {
-        // some code goes here
     }
 
     /**
      * @return the tuple number this RecordId references.
      */
     public int tupleno() {
-        // some code goes here
-        return 0;
     }
 
     /**
      * @return the page id this RecordId references.
      */
     public PageId getPageId() {
-        // some code goes here
-        return null;
     }
 
     /**
@@ -47,8 +42,6 @@
      */
     @Override
     public boolean equals(Object o) {
-        // some code goes here
-        throw new UnsupportedOperationException("implement this");
     }
 
     /**
@@ -59,8 +52,6 @@
      */
     @Override
     public int hashCode() {
-        // some code goes here
-        throw new UnsupportedOperationException("implement this");
 
     }
 
diff -ruN lab1/src/java/simpledb/SeqScan.java lab3/src/java/simpledb/SeqScan.java
--- lab1/src/java/simpledb/SeqScan.java	2016-11-02 22:06:58.000000000 -0500
+++ lab3/src/java/simpledb/SeqScan.java	2016-11-02 22:06:55.000000000 -0500
@@ -14,7 +14,7 @@
     /**
      * Creates a sequential scan over the specified table as a part of the
      * specified transaction.
-     * 
+     *
      * @param tid
      *            The transaction this scan is running as a part of.
      * @param tableid
@@ -28,7 +28,6 @@
      *            tableAlias.null, or null.null).
      */
     public SeqScan(TransactionId tid, int tableid, String tableAlias) {
-        // some code goes here
     }
 
     /**
@@ -37,16 +36,13 @@
      *       be the actual name of the table in the catalog of the database
      * */
     public String getTableName() {
-        return null;
     }
-    
+
     /**
-     * @return Return the alias of the table this operator scans. 
+     * @return Return the alias of the table this operator scans.
      * */
     public String getAlias()
     {
-        // some code goes here
-        return null;
     }
 
     /**
@@ -62,7 +58,6 @@
      *            tableAlias.null, or null.null).
      */
     public void reset(int tableid, String tableAlias) {
-        // some code goes here
     }
 
     public SeqScan(TransactionId tid, int tableid) {
@@ -70,40 +65,32 @@
     }
 
     public void open() throws DbException, TransactionAbortedException {
-        // some code goes here
     }
 
     /**
      * Returns the TupleDesc with field names from the underlying HeapFile,
      * prefixed with the tableAlias string from the constructor. This prefix
      * becomes useful when joining tables containing a field(s) with the same
-     * name.
-     * 
+     * name.  The alias and name should be separated with a "." character
+     * (e.g., "alias.fieldName").
+     *
      * @return the TupleDesc with field names from the underlying HeapFile,
      *         prefixed with the tableAlias string from the constructor.
      */
     public TupleDesc getTupleDesc() {
-        // some code goes here
-        return null;
     }
 
     public boolean hasNext() throws TransactionAbortedException, DbException {
-        // some code goes here
-        return false;
     }
 
     public Tuple next() throws NoSuchElementException,
             TransactionAbortedException, DbException {
-        // some code goes here
-        return null;
     }
 
     public void close() {
-        // some code goes here
     }
 
     public void rewind() throws DbException, NoSuchElementException,
             TransactionAbortedException {
-        // some code goes here
     }
 }
diff -ruN lab1/src/java/simpledb/StringAggregator.java lab3/src/java/simpledb/StringAggregator.java
--- lab1/src/java/simpledb/StringAggregator.java	1969-12-31 18:00:00.000000000 -0600
+++ lab3/src/java/simpledb/StringAggregator.java	2016-11-02 22:06:55.000000000 -0500
@@ -0,0 +1,111 @@
+package simpledb;
+
+import java.util.*;
+
+/**
+ * Knows how to compute some aggregate over a set of StringFields.
+ */
+public class StringAggregator implements Aggregator {
+
+    private static final long serialVersionUID = 1L;
+    private Op what;
+    private int gbfield;
+    private Type gbfieldtype;
+    private int afield;
+    // a map of groupVal -> AggregateFields
+    private HashMap<String, AggregateFields> groups;
+
+    /**
+     * Aggregate constructor
+     * @param gbfield the 0-based index of the group-by field in the tuple, or NO_GROUPING if there is no grouping
+     * @param gbfieldtype the type of the group by field (e.g., Type.INT_TYPE), or null if there is no grouping
+     * @param afield the 0-based index of the aggregate field in the tuple
+     * @param what aggregation operator to use -- only supports COUNT
+     * @throws IllegalArgumentException if what != COUNT
+     */
+
+    public StringAggregator(int gbfield, Type gbfieldtype, int afield, Op what) {
+        this.what = what;
+        if (what != Op.COUNT)
+            throw new IllegalArgumentException("Invalid operator type " + what);
+        this.gbfield = gbfield;
+        this.afield = afield;
+        this.gbfieldtype = gbfieldtype;
+        this.groups = new HashMap<String, AggregateFields>();
+    }
+
+    /**
+     * Merge a new tuple into the aggregate, grouping as indicated in the constructor
+     * @param tup the Tuple containing an aggregate field and a group-by field
+     */
+    public void mergeTupleIntoGroup(Tuple tup) {
+        String groupVal = "";
+        if (gbfield != NO_GROUPING) {
+            groupVal = tup.getField(gbfield).toString();
+        }
+        AggregateFields agg = groups.get(groupVal);
+        if (agg == null)
+            agg = new AggregateFields(groupVal);
+
+        agg.count++;
+
+        groups.put(groupVal, agg);
+    }
+
+    /**
+     * Create a DbIterator over group aggregate results.
+     *
+     * @return a DbIterator whose tuples are the pair (groupVal,
+     *   aggregateVal) if using group, or a single (aggregateVal) if no
+     *   grouping. The aggregateVal is determined by the type of
+     *   aggregate specified in the constructor.
+     */
+    public DbIterator iterator() {
+        LinkedList<Tuple> result = new LinkedList<Tuple>();
+        int aggField = 1;
+        TupleDesc td;
+
+        if (gbfield == NO_GROUPING) {
+            td = new TupleDesc(new Type[] { Type.INT_TYPE });
+            aggField = 0;
+        } else {
+            td = new TupleDesc(new Type[] { gbfieldtype, Type.INT_TYPE });
+        }
+
+        // iterate over groups and create summary tuples
+        for (String groupVal : groups.keySet()) {
+            AggregateFields agg = groups.get(groupVal);
+            Tuple tup = new Tuple(td);
+
+            if (gbfield != NO_GROUPING) {
+                if (gbfieldtype == Type.INT_TYPE)
+                    tup.setField(0, new IntField(new Integer(groupVal)));
+                else tup.setField(0, new StringField(groupVal, Type.STRING_LEN));
+            }
+
+            switch (what) {
+            case COUNT: tup.setField(aggField, new IntField(agg.count));
+            break;
+            }
+
+            result.add(tup);
+        }
+
+        DbIterator retVal = null;
+        retVal = new TupleIterator(td, Collections.unmodifiableList(result));
+        return retVal;
+    }
+
+    /**
+     * A helper struct to store accumulated aggregate values.
+     */
+    private class AggregateFields {
+        public String groupVal;
+        public int count;
+
+        public AggregateFields(String groupVal) {
+            this.groupVal = groupVal;
+            count = 0;
+        }
+    }
+}
diff -ruN lab1/src/java/simpledb/StringHistogram.java lab3/src/java/simpledb/StringHistogram.java
--- lab1/src/java/simpledb/StringHistogram.java	1969-12-31 18:00:00.000000000 -0600
+++ lab3/src/java/simpledb/StringHistogram.java	2016-11-02 22:06:55.000000000 -0500
@@ -0,0 +1,92 @@
+package simpledb;
+
+/**
+ * A class to represent a fixed-width histogram over a single String-based
+ * field.
+ */
+public class StringHistogram {
+    final IntHistogram hist;
+
+    /**
+     * Create a new StringHistogram with a specified number of buckets.
+     * <p>
+     * Our implementation is written in terms of an IntHistogram by converting
+     * each String to an integer.
+     * 
+     * @param buckets
+     *            the number of buckets
+     */
+    public StringHistogram(int buckets) {
+        hist = new IntHistogram(buckets, minVal(), maxVal());
+    }
+
+    /**
+     * Convert a string to an integer, with the property that if the return
+     * value(s1) < return value(s2), then s1 < s2
+     */
+    private int stringToInt(String s) {
+        int i;
+        int v = 0;
+        for (i = 3; i >= 0; i--) {
+            if (s.length() > 3 - i) {
+                int ci = (int) s.charAt(3 - i);
+                v += (ci) << (i * 8);
+            }
+        }
+
+        // XXX: hack to avoid getting wrong results for
+        // strings which don't output in the range min to max
+        if (!(s.equals("") || s.equals("zzzz"))) {
+            if (v < minVal()) {
+                v = minVal();
+            }
+
+            if (v > maxVal()) {
+                v = maxVal();
+            }
+        }
+
+        return v;
+    }
+
+    /** @return the maximum value indexed by the histogram */
+    int maxVal() {
+        return stringToInt("zzzz");
+    }
+
+    /** @return the minimum value indexed by the histogram */
+    int minVal() {
+        return stringToInt("");
+    }
+
+    /** Add a new value to thte histogram */
+    public void addValue(String s) {
+        int val = stringToInt(s);
+        hist.addValue(val);
+    }
+
+    /**
+     * Estimate the selectivity (as a double between 0 and 1) of the specified
+     * predicate over the specified string
+     * 
+     * @param op
+     *            The operation being applied
+     * @param s
+     *            The string to apply op to
+     */
+    public double estimateSelectivity(Predicate.Op op, String s) {
+        int val = stringToInt(s);
+        return hist.estimateSelectivity(op, val);
+    }
+
+    /**
+     * @return the average selectivity of this histogram.
+     * 
+     *         This is not an indispensable method to implement the basic join
+     *         optimization. It may be needed if you want to implement a more
+     *         efficient optimization
+     * */
+    public double avgSelectivity() {
+        return hist.avgSelectivity();
+    }
+}
diff -ruN lab1/src/java/simpledb/TableStats.java lab3/src/java/simpledb/TableStats.java
--- lab1/src/java/simpledb/TableStats.java	1969-12-31 18:00:00.000000000 -0600
+++ lab3/src/java/simpledb/TableStats.java	2016-11-02 22:06:55.000000000 -0500
@@ -0,0 +1,162 @@
+package simpledb;
+
+import java.util.HashMap;
+import java.util.Iterator;
+import java.util.Map;
+import java.util.concurrent.ConcurrentHashMap;
+
+/**
+ * TableStats represents statistics (e.g., histograms) about base tables in a
+ * query. 
+ * 
+ * This class is not needed in implementing lab1 and lab2.
+ */
+public class TableStats {
+
+    private static final ConcurrentHashMap<String, TableStats> statsMap = new ConcurrentHashMap<String, TableStats>();
+
+    static final int IOCOSTPERPAGE = 1000;
+
+    public static TableStats getTableStats(String tablename) {
+        return statsMap.get(tablename);
+    }
+
+    public static void setTableStats(String tablename, TableStats stats) {
+        statsMap.put(tablename, stats);
+    }
+    
+    public static void setStatsMap(HashMap<String,TableStats> s)
+    {
+        try {
+            java.lang.reflect.Field statsMapF = TableStats.class.getDeclaredField("statsMap");
+            statsMapF.setAccessible(true);
+            statsMapF.set(null, s);
+        } catch (NoSuchFieldException e) {
+            e.printStackTrace();
+        } catch (SecurityException e) {
+            e.printStackTrace();
+        } catch (IllegalArgumentException e) {
+            e.printStackTrace();
+        } catch (IllegalAccessException e) {
+            e.printStackTrace();
+        }
+
+    }
+
+    public static Map<String, TableStats> getStatsMap() {
+        return statsMap;
+    }
+
+    public static void computeStatistics() {
+        Iterator<Integer> tableIt = Database.getCatalog().tableIdIterator();
+
+        System.out.println("Computing table stats.");
+        while (tableIt.hasNext()) {
+            int tableid = tableIt.next();
+            TableStats s = new TableStats(tableid, IOCOSTPERPAGE);
+            setTableStats(Database.getCatalog().getTableName(tableid), s);
+        }
+        System.out.println("Done.");
+    }
+
+    /**
+     * Number of bins for the histogram. Feel free to increase this value over
+     * 100, though our tests assume that you have at least 100 bins in your
+     * histograms.
+     */
+    static final int NUM_HIST_BINS = 100;
+
+    /**
+     * Create a new TableStats object, that keeps track of statistics on each
+     * column of a table
+     * 
+     * @param tableid
+     *            The table over which to compute statistics
+     * @param ioCostPerPage
+     *            The cost per page of IO. This doesn't differentiate between
+     *            sequential-scan IO and disk seeks.
+     */
+    public TableStats(int tableid, int ioCostPerPage) {
+        // For this function, you'll have to get the
+        // DbFile for the table in question,
+        // then scan through its tuples and calculate
+        // the values that you need.
+        // You should try to do this reasonably efficiently, but you don't
+        // necessarily have to (for example) do everything
+        // in a single scan of the table.
+        // some code goes here
+    }
+
+    /**
+     * Estimates the cost of sequentially scanning the file, given that the cost
+     * to read a page is costPerPageIO. You can assume that there are no seeks
+     * and that no pages are in the buffer pool.
+     * 
+     * Also, assume that your hard drive can only read entire pages at once, so
+     * if the last page of the table only has one tuple on it, it's just as
+     * expensive to read as a full page. (Most real hard drives can't
+     * efficiently address regions smaller than a page at a time.)
+     * 
+     * @return The estimated cost of scanning the table.
+     */
+    public double estimateScanCost() {
+        // some code goes here
+        return 0;
+    }
+
+    /**
+     * This method returns the number of tuples in the relation, given that a
+     * predicate with selectivity selectivityFactor is applied.
+     * 
+     * @param selectivityFactor
+     *            The selectivity of any predicates over the table
+     * @return The estimated cardinality of the scan with the specified
+     *         selectivityFactor
+     */
+    public int estimateTableCardinality(double selectivityFactor) {
+        // some code goes here
+        return 0;
+    }
+
+    /**
+     * The average selectivity of the field under op.
+     * @param field
+     *        the index of the field
+     * @param op
+     *        the operator in the predicate
+     * The semantic of the method is that, given the table, and then given a
+     * tuple, of which we do not know the value of the field, return the
+     * expected selectivity. You may estimate this value from the histograms.
+     * */
+    public double avgSelectivity(int field, Predicate.Op op) {
+        // some code goes here
+        return 1.0;
+    }
+
+    /**
+     * Estimate the selectivity of predicate <tt>field op constant</tt> on the
+     * table.
+     * 
+     * @param field
+     *            The field over which the predicate ranges
+     * @param op
+     *            The logical operation in the predicate
+     * @param constant
+     *            The value against which the field is compared
+     * @return The estimated selectivity (fraction of tuples that satisfy) the
+     *         predicate
+     */
+    public double estimateSelectivity(int field, Predicate.Op op, Field constant) {
+        // some code goes here
+        return 1.0;
+    }
+
+    /**
+     * return the total number of tuples in this table
+     * */
+    public int totalTuples() {
+        // some code goes here
+        return 0;
+    }
+
+}
diff -ruN lab1/src/java/simpledb/Transaction.java lab3/src/java/simpledb/Transaction.java
--- lab1/src/java/simpledb/Transaction.java	1969-12-31 18:00:00.000000000 -0600
+++ lab3/src/java/simpledb/Transaction.java	2016-11-02 22:06:55.000000000 -0500
@@ -0,0 +1,65 @@
+package simpledb;
+
+import java.io.*;
+
+/**
+ * Transaction encapsulates information about the state of
+ * a transaction and manages transaction commit / abort.
+ */
+
+public class Transaction {
+    private final TransactionId tid;
+    volatile boolean started = false;
+
+    public Transaction() {
+        tid = new TransactionId();
+    }
+
+    /** Start the transaction running */
+    public void start() {
+        started = true;
+        try {
+            Database.getLogFile().logXactionBegin(tid);
+        } catch (IOException e) {
+            e.printStackTrace();
+        }
+    }
+
+    public TransactionId getId() {
+        return tid;
+    }
+
+    /** Finish the transaction */
+    public void commit() throws IOException {
+        transactionComplete(false);
+    }
+
+    /** Finish the transaction */
+    public void abort() throws IOException {
+        transactionComplete(true);
+    }
+
+    /** Handle the details of transaction commit / abort */
+    public void transactionComplete(boolean abort) throws IOException {
+
+        if (started) {
+            //write commit / abort records
+            if (abort) {
+                Database.getLogFile().logAbort(tid); //does rollback too
+            } else {
+                //write all the dirty pages for this transaction out
+                Database.getBufferPool().flushPages(tid);
+                Database.getLogFile().logCommit(tid);
+            }
+
+            try {
+                Database.getBufferPool().transactionComplete(tid, !abort); // release locks
+            } catch (IOException e) {
+                e.printStackTrace();
+            }
+
+            //setting this here means we could possibly write multiple abort records -- OK?
+            started = false;
+        }
+    }
+}
diff -ruN lab1/src/java/simpledb/Tuple.java lab3/src/java/simpledb/Tuple.java
--- lab1/src/java/simpledb/Tuple.java	2016-11-02 22:06:58.000000000 -0500
+++ lab3/src/java/simpledb/Tuple.java	2016-11-02 22:06:55.000000000 -0500
@@ -1,6 +1,7 @@
 package simpledb;
 
 import java.io.Serializable;
+import java.util.Arrays;
 import java.util.Iterator;
 
 /**
@@ -14,21 +15,18 @@
 
     /**
      * Create a new tuple with the specified schema (type).
-     * 
+     *
      * @param td
      *            the schema of this tuple. It must be a valid TupleDesc
      *            instance with at least one field.
      */
     public Tuple(TupleDesc td) {
-        // some code goes here
     }
 
     /**
      * @return The TupleDesc representing the schema of this tuple.
      */
     public TupleDesc getTupleDesc() {
-        // some code goes here
-        return null;
     }
 
     /**
@@ -36,71 +34,60 @@
      *         be null.
      */
     public RecordId getRecordId() {
-        // some code goes here
-        return null;
     }
 
     /**
      * Set the RecordId information for this tuple.
-     * 
+     *
      * @param rid
      *            the new RecordId for this tuple.
      */
     public void setRecordId(RecordId rid) {
-        // some code goes here
     }
 
     /**
      * Change the value of the ith field of this tuple.
-     * 
+     *
      * @param i
      *            index of the field to change. It must be a valid index.
      * @param f
      *            new value for the field.
      */
     public void setField(int i, Field f) {
-        // some code goes here
     }
 
     /**
      * @return the value of the ith field, or null if it has not been set.
-     * 
+     *
      * @param i
      *            field index to return. Must be a valid index.
      */
     public Field getField(int i) {
-        // some code goes here
-        return null;
     }
 
     /**
      * Returns the contents of this Tuple as a string. Note that to pass the
      * system tests, the format needs to be as follows:
-     * 
-     * column1\tcolumn2\tcolumn3\t...\tcolumnN\n
-     * 
-     * where \t is any whitespace, except newline, and \n is a newline
+     *
+     * column1\tcolumn2\tcolumn3\t...\tcolumnN
+     *
+     * where \t is any whitespace (except a newline)
      */
     public String toString() {
-        // some code goes here
-        throw new UnsupportedOperationException("Implement this");
     }
-    
+
     /**
      * @return
      *        An iterator which iterates over all the fields of this tuple
      * */
     public Iterator<Field> fields()
     {
-        // some code goes here
-        return null;
     }
-    
+
     /**
      * reset the TupleDesc of thi tuple
      * */
     public void resetTupleDesc(TupleDesc td)
     {
-        // some code goes here
     }
 }
diff -ruN lab1/src/java/simpledb/TupleDesc.java lab3/src/java/simpledb/TupleDesc.java
--- lab1/src/java/simpledb/TupleDesc.java	2016-11-02 22:06:58.000000000 -0500
+++ lab3/src/java/simpledb/TupleDesc.java	2016-11-02 22:06:55.000000000 -0500
@@ -41,8 +41,6 @@
      *        that are included in this TupleDesc
      * */
     public Iterator<TDItem> iterator() {
-        // some code goes here
-        return null;
     }
 
     private static final long serialVersionUID = 1L;
@@ -59,7 +57,6 @@
      *            be null.
      */
     public TupleDesc(Type[] typeAr, String[] fieldAr) {
-        // some code goes here
     }
 
     /**
@@ -71,15 +68,12 @@
      *            TupleDesc. It must contain at least one entry.
      */
     public TupleDesc(Type[] typeAr) {
-        // some code goes here
     }
 
     /**
      * @return the number of fields in this TupleDesc
      */
     public int numFields() {
-        // some code goes here
-        return 0;
     }
 
     /**
@@ -92,8 +86,6 @@
      *             if i is not a valid field reference.
      */
     public String getFieldName(int i) throws NoSuchElementException {
-        // some code goes here
-        return null;
     }
 
     /**
@@ -107,8 +99,6 @@
      *             if i is not a valid field reference.
      */
     public Type getFieldType(int i) throws NoSuchElementException {
-        // some code goes here
-        return null;
     }
 
     /**
@@ -121,8 +111,6 @@
      *             if no field with a matching name is found.
      */
     public int fieldNameToIndex(String name) throws NoSuchElementException {
-        // some code goes here
-        return 0;
     }
 
     /**
@@ -130,8 +118,6 @@
      *         Note that tuples from a given TupleDesc are of a fixed size.
      */
     public int getSize() {
-        // some code goes here
-        return 0;
     }
 
     /**
@@ -145,8 +131,6 @@
      * @return the new TupleDesc
      */
     public static TupleDesc merge(TupleDesc td1, TupleDesc td2) {
-        // some code goes here
-        return null;
     }
 
     /**
@@ -159,8 +143,6 @@
      * @return true if the object is equal to this TupleDesc.
      */
     public boolean equals(Object o) {
-        // some code goes here
-        return false;
     }
 
     public int hashCode() {
@@ -177,7 +159,5 @@
      * @return String describing this descriptor.
      */
     public String toString() {
-        // some code goes here
-        return "";
     }
 }
diff -ruN lab1/test/simpledb/AggregateTest.java lab3/test/simpledb/AggregateTest.java
--- lab1/test/simpledb/AggregateTest.java	1969-12-31 18:00:00.000000000 -0600
+++ lab3/test/simpledb/AggregateTest.java	2016-11-02 22:06:55.000000000 -0500
@@ -0,0 +1,186 @@
+package simpledb;
+
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertNotNull;
+import static org.junit.Assert.assertTrue;
+import junit.framework.JUnit4TestAdapter;
+
+import org.junit.Before;
+import org.junit.Test;
+
+import simpledb.systemtest.SimpleDbTestBase;
+
+public class AggregateTest extends SimpleDbTestBase {
+
+  int width1 = 2;
+  DbIterator scan1;
+  DbIterator scan2;
+  DbIterator scan3;
+
+  DbIterator sum;
+  DbIterator sumstring;
+
+  DbIterator avg;
+  DbIterator max;
+  DbIterator min;
+  DbIterator count;
+
+  /**
+   * Initialize each unit test
+   */
+  @Before public void createTupleLists() throws Exception {	  
+    this.scan1 = TestUtil.createTupleList(width1,
+        new int[] { 1, 2,
+                    1, 4,
+                    1, 6,
+                    3, 2,
+                    3, 4,
+                    3, 6,
+                    5, 7 });
+    this.scan2 = TestUtil.createTupleList(width1,
+        new Object[] { 1, "a",
+                    1, "a",
+                    1, "a",
+                    3, "a",
+                    3, "a",
+                    3, "a",
+                    5, "a" });
+    this.scan3 = TestUtil.createTupleList(width1,
+        new Object[] { "a", 2,
+                    "a", 4,
+                    "a", 6,
+                    "b", 2,
+                    "b", 4,
+                    "b", 6,
+                    "c", 7 });
+
+    this.sum = TestUtil.createTupleList(width1,
+        new int[] { 1, 12,
+                    3, 12,
+                    5, 7 });
+    this.sumstring = TestUtil.createTupleList(width1,
+        new Object[] { "a", 12,
+                    "b", 12,
+                    "c", 7 });
+
+    this.avg = TestUtil.createTupleList(width1,
+        new int[] { 1, 4,
+                    3, 4,
+                    5, 7 });
+    this.min = TestUtil.createTupleList(width1,
+        new int[] { 1, 2,
+                    3, 2,
+                    5, 7 });
+    this.max = TestUtil.createTupleList(width1,
+        new int[] { 1, 6,
+                    3, 6,
+                    5, 7 });
+    this.count = TestUtil.createTupleList(width1,
+        new int[] { 1, 3,
+                    3, 3,
+                    5, 1 });
+
+  }
+
+  /**
+   * Unit test for Aggregate.getTupleDesc()
+   */
+  @Test public void getTupleDesc() {
+    Aggregate op = new Aggregate(scan1, 0, 0,
+        Aggregator.Op.MIN);
+    TupleDesc expected = Utility.getTupleDesc(2);
+    TupleDesc actual = op.getTupleDesc();
+    assertEquals(expected, actual);
+  }
+
+  /**
+   * Unit test for Aggregate.rewind()
+   */
+  @Test public void rewind() throws Exception {
+    Aggregate op = new Aggregate(scan1, 1, 0,
+        Aggregator.Op.MIN);
+    op.open();
+    while (op.hasNext()) {
+      assertNotNull(op.next());
+    }
+    assertTrue(TestUtil.checkExhausted(op));
+
+    op.rewind();
+    min.open();
+    TestUtil.matchAllTuples(min, op);
+  }
+
+  /**
+   * Unit test for Aggregate.getNext() using a count aggregate with string types
+   */
+  @Test public void countStringAggregate() throws Exception {
+    Aggregate op = new Aggregate(scan2, 1, 0,
+        Aggregator.Op.COUNT);
+    op.open();
+    count.open();
+    TestUtil.matchAllTuples(count, op);
+  }
+
+  /**
+   * Unit test for Aggregate.getNext() using a count aggregate with string types
+   */
+  @Test public void sumStringGroupBy() throws Exception {
+    Aggregate op = new Aggregate(scan3, 1, 0,
+        Aggregator.Op.SUM);
+    op.open();
+    sumstring.open();
+    TestUtil.matchAllTuples(sumstring, op);
+  }
+
+  /**
+   * Unit test for Aggregate.getNext() using a sum aggregate
+   */
+  @Test public void sumAggregate() throws Exception {
+    Aggregate op = new Aggregate(scan1, 1, 0,
+        Aggregator.Op.SUM);
+    op.open();
+    sum.open();
+    TestUtil.matchAllTuples(sum, op);
+  }
+
+  /**
+   * Unit test for Aggregate.getNext() using an avg aggregate
+   */
+  @Test public void avgAggregate() throws Exception {
+    Aggregate op = new Aggregate(scan1, 1, 0,
+       Aggregator.Op.AVG);
+    op.open();
+    avg.open();
+    TestUtil.matchAllTuples(avg, op);
+  }
+
+  /**
+   * Unit test for Aggregate.getNext() using a max aggregate
+   */
+  @Test public void maxAggregate() throws Exception {
+    Aggregate op = new Aggregate(scan1, 1, 0,
+        Aggregator.Op.MAX);
+    op.open();
+    max.open();
+    TestUtil.matchAllTuples(max, op);
+  }
+
+  /**
+   * Unit test for Aggregate.getNext() using a min aggregate
+   */
+  @Test public void minAggregate() throws Exception {
+    Aggregate op = new Aggregate(scan1, 1, 0,
+       Aggregator.Op.MIN);
+    op.open();
+    min.open();
+    TestUtil.matchAllTuples(min, op);
+  }
+
+  /**
+   * JUnit suite target
+   */
+  public static junit.framework.Test suite() {
+    return new JUnit4TestAdapter(AggregateTest.class);
+  }
+}
+
diff -ruN lab1/test/simpledb/BTreeFileDeleteTest.java lab3/test/simpledb/BTreeFileDeleteTest.java
--- lab1/test/simpledb/BTreeFileDeleteTest.java	1969-12-31 18:00:00.000000000 -0600
+++ lab3/test/simpledb/BTreeFileDeleteTest.java	2016-11-02 22:06:55.000000000 -0500
@@ -0,0 +1,379 @@
+package simpledb;
+
+import simpledb.systemtest.SimpleDbTestBase;
+import simpledb.Predicate.Op;
+
+import java.io.File;
+import java.util.*;
+
+import org.junit.After;
+import org.junit.Before;
+import org.junit.Test;
+
+import static org.junit.Assert.*;
+import junit.framework.JUnit4TestAdapter;
+
+public class BTreeFileDeleteTest extends SimpleDbTestBase {
+	private TransactionId tid;
+
+	/**
+	 * Set up initial resources for each unit test.
+	 */
+	@Before
+	public void setUp() throws Exception {
+		tid = new TransactionId();
+	}
+
+	@After
+	public void tearDown() throws Exception {
+		Database.getBufferPool().transactionComplete(tid);
+	}
+
+	/**
+	 * Unit test for BTreeFile.deleteTuple()
+	 */
+	@Test public void deleteTuple() throws Exception {
+		BTreeFile f;
+		f = BTreeUtility.createRandomBTreeFile(2, 20, null, null, 0);
+		DbFileIterator it = f.iterator(tid);
+		it.open();
+		while(it.hasNext()) {
+			Tuple t = it.next();
+			f.deleteTuple(tid, t);
+		}
+		it.rewind();
+		assertFalse(it.hasNext());
+
+		// insert a couple of tuples
+		f.insertTuple(tid, BTreeUtility.getBTreeTuple(5, 2));
+		f.insertTuple(tid, BTreeUtility.getBTreeTuple(17, 2));
+
+		it.rewind();
+		assertTrue(it.hasNext());
+	}
+
+	@Test
+	public void testStealFromLeftLeafPage() throws Exception {
+		File emptyFile = File.createTempFile("empty", ".dat");
+		emptyFile.deleteOnExit();
+		Database.reset();
+		BTreeFile empty = BTreeUtility.createEmptyBTreeFile(emptyFile.getAbsolutePath(), 2, 0);
+		int tableid = empty.getId();
+		int keyField = 0;
+
+		// create the leaf pages
+		BTreePageId pageId = new BTreePageId(tableid, 1, BTreePageId.LEAF);
+		BTreePageId siblingId = new BTreePageId(tableid, 2, BTreePageId.LEAF);
+		BTreeLeafPage page = BTreeUtility.createRandomLeafPage(pageId, 2, keyField, 
+				BTreeUtility.getNumTuplesPerPage(2)/2 - 1, BTreeUtility.MAX_RAND_VALUE/2, BTreeUtility.MAX_RAND_VALUE);
+		BTreeLeafPage sibling = BTreeUtility.createRandomLeafPage(siblingId, 2, keyField, 0, BTreeUtility.MAX_RAND_VALUE/2);
+		
+		// create the parent page and the new entry
+		BTreePageId parentId = new BTreePageId(tableid, 3, BTreePageId.INTERNAL);
+		BTreeInternalPage parent = new BTreeInternalPage(parentId, BTreeInternalPage.createEmptyPageData(), keyField);
+		Field key = page.iterator().next().getField(keyField);
+		BTreeEntry entry = new BTreeEntry(key, siblingId, pageId);
+		parent.insertEntry(entry);
+		
+		// set all the pointers
+		page.setParentId(parentId);
+		sibling.setParentId(parentId);
+		page.setLeftSiblingId(siblingId);
+		sibling.setRightSiblingId(pageId);
+		
+		int totalTuples = page.getNumTuples() + sibling.getNumTuples();
+		
+		empty.stealFromLeafPage(page, sibling, parent, entry, false);
+		assertEquals(totalTuples, page.getNumTuples() + sibling.getNumTuples());
+		assertTrue(page.getNumTuples() == totalTuples/2 || page.getNumTuples() == totalTuples/2 + 1);
+		assertTrue(sibling.getNumTuples() == totalTuples/2 || sibling.getNumTuples() == totalTuples/2 + 1);
+		assertTrue(sibling.reverseIterator().next().getField(keyField).compare(Op.LESS_THAN_OR_EQ, 
+				page.iterator().next().getField(keyField)));
+	} 
+
+	@Test
+	public void testStealFromRightLeafPage() throws Exception {
+		File emptyFile = File.createTempFile("empty", ".dat");
+		emptyFile.deleteOnExit();
+		Database.reset();
+		BTreeFile empty = BTreeUtility.createEmptyBTreeFile(emptyFile.getAbsolutePath(), 2, 0);
+		int tableid = empty.getId();
+		int keyField = 0;
+
+		// create the leaf pages
+		BTreePageId pageId = new BTreePageId(tableid, 1, BTreePageId.LEAF);
+		BTreePageId siblingId = new BTreePageId(tableid, 2, BTreePageId.LEAF);
+		BTreeLeafPage page = BTreeUtility.createRandomLeafPage(pageId, 2, keyField, 
+				BTreeUtility.getNumTuplesPerPage(2)/2 - 1, 0, BTreeUtility.MAX_RAND_VALUE/2);
+		BTreeLeafPage sibling = BTreeUtility.createRandomLeafPage(siblingId, 2, keyField, BTreeUtility.MAX_RAND_VALUE/2, BTreeUtility.MAX_RAND_VALUE);
+		
+		// create the parent page and the new entry
+		BTreePageId parentId = new BTreePageId(tableid, 3, BTreePageId.INTERNAL);
+		BTreeInternalPage parent = new BTreeInternalPage(parentId, BTreeInternalPage.createEmptyPageData(), keyField);
+		Field key = page.iterator().next().getField(keyField);
+		BTreeEntry entry = new BTreeEntry(key, pageId, siblingId);
+		parent.insertEntry(entry);
+		
+		// set all the pointers
+		page.setParentId(parentId);
+		sibling.setParentId(parentId);
+		page.setRightSiblingId(siblingId);
+		sibling.setLeftSiblingId(pageId);
+		
+		int totalTuples = page.getNumTuples() + sibling.getNumTuples();
+		
+		empty.stealFromLeafPage(page, sibling, parent, entry, true);
+		assertEquals(totalTuples, page.getNumTuples() + sibling.getNumTuples());
+		assertTrue(page.getNumTuples() == totalTuples/2 || page.getNumTuples() == totalTuples/2 + 1);
+		assertTrue(sibling.getNumTuples() == totalTuples/2 || sibling.getNumTuples() == totalTuples/2 + 1);
+		assertTrue(page.reverseIterator().next().getField(keyField).compare(Op.LESS_THAN_OR_EQ, 
+				sibling.iterator().next().getField(keyField)));
+	} 
+
+	@Test
+	public void testMergeLeafPages() throws Exception {
+		File emptyFile = File.createTempFile("empty", ".dat");
+		emptyFile.deleteOnExit();
+		Database.reset();
+		BTreeFile empty = BTreeUtility.createEmptyBTreeFile(emptyFile.getAbsolutePath(), 2, 0, 3);
+		int tableid = empty.getId();
+		int keyField = 0;
+
+		// create the leaf pages
+		BTreePageId leftPageId = new BTreePageId(tableid, 2, BTreePageId.LEAF);
+		BTreePageId rightPageId = new BTreePageId(tableid, 3, BTreePageId.LEAF);
+		BTreeLeafPage leftPage = BTreeUtility.createRandomLeafPage(leftPageId, 2, keyField, 
+				BTreeUtility.getNumTuplesPerPage(2)/2 - 1, 0, BTreeUtility.MAX_RAND_VALUE/2);
+		BTreeLeafPage rightPage = BTreeUtility.createRandomLeafPage(rightPageId, 2, keyField, 
+				BTreeUtility.getNumTuplesPerPage(2)/2 - 1, BTreeUtility.MAX_RAND_VALUE/2, BTreeUtility.MAX_RAND_VALUE);
+		
+		// create the parent page and the new entry
+		BTreePageId parentId = new BTreePageId(tableid, 1, BTreePageId.INTERNAL);
+		BTreeInternalPage parent = BTreeUtility.createRandomInternalPage(parentId, keyField, 
+				BTreePageId.LEAF, BTreeUtility.MAX_RAND_VALUE/2, BTreeUtility.MAX_RAND_VALUE, 2);
+		BTreeEntry entry = parent.iterator().next();
+		Field siblingKey = rightPage.iterator().next().getField(keyField);
+		Field parentKey = entry.getKey();
+		Field minKey = (siblingKey.compare(Op.LESS_THAN, parentKey) ? siblingKey : parentKey);
+		entry.setKey(minKey);
+		parent.updateEntry(entry);
+		int numEntries = parent.getNumEntries();
+		
+		// set all the pointers
+		leftPage.setParentId(parentId);
+		rightPage.setParentId(parentId);
+		leftPage.setRightSiblingId(rightPageId);
+		rightPage.setLeftSiblingId(leftPageId);
+		
+		int totalTuples = leftPage.getNumTuples() + rightPage.getNumTuples();
+		
+		HashMap<PageId, Page> dirtypages = new HashMap<PageId, Page>();
+		dirtypages.put(leftPageId, leftPage);
+		dirtypages.put(rightPageId, rightPage);
+		dirtypages.put(parentId, parent);
+		empty.mergeLeafPages(tid, dirtypages, leftPage, rightPage, parent, entry);
+		assertEquals(totalTuples, leftPage.getNumTuples());
+		assertEquals(0, rightPage.getNumTuples());
+		assertEquals(null, leftPage.getRightSiblingId());
+		assertEquals(numEntries - 1, parent.getNumEntries());
+		assertEquals(rightPageId.pageNumber(), empty.getEmptyPageNo(tid, dirtypages));
+	}
+
+	@Test
+	public void testStealFromLeftInternalPage() throws Exception {
+		File emptyFile = File.createTempFile("empty", ".dat");
+		emptyFile.deleteOnExit();
+		Database.reset();
+		int entriesPerPage = BTreeUtility.getNumEntriesPerPage();
+		BTreeFile empty = BTreeUtility.createEmptyBTreeFile(emptyFile.getAbsolutePath(), 2, 0, 5 + 3*entriesPerPage/2);
+		int tableid = empty.getId();
+		int keyField = 0;
+
+		// create the internal pages
+		BTreePageId pageId = new BTreePageId(tableid, 1, BTreePageId.INTERNAL);
+		BTreePageId siblingId = new BTreePageId(tableid, 2, BTreePageId.INTERNAL);
+		BTreeInternalPage page = BTreeUtility.createRandomInternalPage(pageId, keyField, BTreePageId.LEAF,
+				entriesPerPage/2 - 1, BTreeUtility.MAX_RAND_VALUE/2, BTreeUtility.MAX_RAND_VALUE, 5 + entriesPerPage);
+		BTreeInternalPage sibling = BTreeUtility.createRandomInternalPage(siblingId, keyField, 
+				BTreePageId.LEAF, 0, BTreeUtility.MAX_RAND_VALUE/2, 4);
+		
+		// create the parent page and the new entry
+		BTreePageId parentId = new BTreePageId(tableid, 3, BTreePageId.INTERNAL);
+		BTreeInternalPage parent = new BTreeInternalPage(parentId, BTreeInternalPage.createEmptyPageData(), keyField);
+		Field key = page.iterator().next().getKey();
+		BTreeEntry entry = new BTreeEntry(key, siblingId, pageId);
+		parent.insertEntry(entry);
+				
+		// set all the pointers
+		page.setParentId(parentId);
+		sibling.setParentId(parentId);
+		
+		int totalEntries = page.getNumEntries() + sibling.getNumEntries();
+		int entriesToSteal = totalEntries/2 - page.getNumEntries();
+		
+		HashMap<PageId, Page> dirtypages = new HashMap<PageId, Page>();
+		dirtypages.put(pageId, page);
+		dirtypages.put(siblingId, sibling);
+		dirtypages.put(parentId, parent);
+		empty.stealFromLeftInternalPage(tid, dirtypages, page, sibling, parent, entry);
+		
+		// are all the entries still there?
+		assertEquals(totalEntries, page.getNumEntries() + sibling.getNumEntries());
+		
+		// have the entries been evenly distributed?
+		assertTrue(page.getNumEntries() == totalEntries/2 || page.getNumEntries() == totalEntries/2 + 1);
+		assertTrue(sibling.getNumEntries() == totalEntries/2 || sibling.getNumEntries() == totalEntries/2 + 1);
+		
+		// are the keys in the left page less than the keys in the right page?
+		assertTrue(sibling.reverseIterator().next().getKey().compare(Op.LESS_THAN_OR_EQ, 
+				page.iterator().next().getKey()));
+		
+		// is the parent key reasonable?
+		assertTrue(parent.iterator().next().getKey().compare(Op.LESS_THAN_OR_EQ, page.iterator().next().getKey()));
+		assertTrue(parent.iterator().next().getKey().compare(Op.GREATER_THAN_OR_EQ, sibling.reverseIterator().next().getKey()));
+		
+		// are all the parent pointers set?
+		Iterator<BTreeEntry> it = page.iterator();
+		BTreeEntry e = null;
+		int count = 0;
+		while(count < entriesToSteal) {
+			assertTrue(it.hasNext());
+			e = it.next();
+			BTreePage p = (BTreePage) dirtypages.get(e.getLeftChild());
+			assertEquals(pageId, p.getParentId());
+			++count;
+		}
+	}
+
+	@Test
+	public void testStealFromRightInternalPage() throws Exception {
+		File emptyFile = File.createTempFile("empty", ".dat");
+		emptyFile.deleteOnExit();
+		Database.reset();
+		int entriesPerPage = BTreeUtility.getNumEntriesPerPage();
+		BTreeFile empty = BTreeUtility.createEmptyBTreeFile(emptyFile.getAbsolutePath(), 2, 0, 5 + 3*entriesPerPage/2);
+		int tableid = empty.getId();
+		int keyField = 0;
+
+		// create the internal pages
+		BTreePageId pageId = new BTreePageId(tableid, 1, BTreePageId.INTERNAL);
+		BTreePageId siblingId = new BTreePageId(tableid, 2, BTreePageId.INTERNAL);
+		BTreeInternalPage page = BTreeUtility.createRandomInternalPage(pageId, keyField, BTreePageId.LEAF,
+				entriesPerPage/2 - 1, 0, BTreeUtility.MAX_RAND_VALUE/2, 4);
+		BTreeInternalPage sibling = BTreeUtility.createRandomInternalPage(siblingId, keyField, 
+				BTreePageId.LEAF, BTreeUtility.MAX_RAND_VALUE/2, BTreeUtility.MAX_RAND_VALUE, 4 + entriesPerPage/2);
+		
+		// create the parent page and the new entry
+		BTreePageId parentId = new BTreePageId(tableid, 3, BTreePageId.INTERNAL);
+		BTreeInternalPage parent = new BTreeInternalPage(parentId, BTreeInternalPage.createEmptyPageData(), keyField);
+		Field key = sibling.iterator().next().getKey();
+		BTreeEntry entry = new BTreeEntry(key, pageId, siblingId);
+		parent.insertEntry(entry);
+				
+		// set all the pointers
+		page.setParentId(parentId);
+		sibling.setParentId(parentId);
+		
+		int totalEntries = page.getNumEntries() + sibling.getNumEntries();
+		int entriesToSteal = totalEntries/2 - page.getNumEntries();
+		
+		HashMap<PageId, Page> dirtypages = new HashMap<PageId, Page>();
+		dirtypages.put(pageId, page);
+		dirtypages.put(siblingId, sibling);
+		dirtypages.put(parentId, parent);
+		empty.stealFromRightInternalPage(tid, dirtypages, page, sibling, parent, entry);
+		
+		// are all the entries still there?
+		assertEquals(totalEntries, page.getNumEntries() + sibling.getNumEntries());
+		
+		// have the entries been evenly distributed?
+		assertTrue(page.getNumEntries() == totalEntries/2 || page.getNumEntries() == totalEntries/2 + 1);
+		assertTrue(sibling.getNumEntries() == totalEntries/2 || sibling.getNumEntries() == totalEntries/2 + 1);
+		
+		// are the keys in the left page less than the keys in the right page?
+		assertTrue(page.reverseIterator().next().getKey().compare(Op.LESS_THAN_OR_EQ, 
+				sibling.iterator().next().getKey()));
+		
+		// is the parent key reasonable?
+		assertTrue(parent.iterator().next().getKey().compare(Op.LESS_THAN_OR_EQ, sibling.iterator().next().getKey()));
+		assertTrue(parent.iterator().next().getKey().compare(Op.GREATER_THAN_OR_EQ, page.reverseIterator().next().getKey()));
+		
+		// are all the parent pointers set?
+		Iterator<BTreeEntry> it = page.reverseIterator();
+		BTreeEntry e = null;
+		int count = 0;
+		while(count < entriesToSteal) {
+			assertTrue(it.hasNext());
+			e = it.next();
+			BTreePage p = (BTreePage) dirtypages.get(e.getRightChild());
+			assertEquals(pageId, p.getParentId());
+			++count;
+		}
+	}
+
+	@Test
+	public void testMergeInternalPages() throws Exception {
+		File emptyFile = File.createTempFile("empty", ".dat");
+		emptyFile.deleteOnExit();
+		Database.reset();
+		int entriesPerPage = BTreeUtility.getNumEntriesPerPage();
+		BTreeFile empty = BTreeUtility.createEmptyBTreeFile(emptyFile.getAbsolutePath(), 2, 0, 1 + 2*entriesPerPage);
+		int tableid = empty.getId();
+		int keyField = 0;
+
+		// create the internal pages
+		BTreePageId leftPageId = new BTreePageId(tableid, 2, BTreePageId.INTERNAL);
+		BTreePageId rightPageId = new BTreePageId(tableid, 3, BTreePageId.INTERNAL);
+		BTreeInternalPage leftPage = BTreeUtility.createRandomInternalPage(leftPageId, keyField, BTreePageId.LEAF,
+				entriesPerPage/2 - 1, 0, BTreeUtility.MAX_RAND_VALUE/2, 3 + entriesPerPage);
+		BTreeInternalPage rightPage = BTreeUtility.createRandomInternalPage(rightPageId, keyField, BTreePageId.LEAF,
+				entriesPerPage/2 - 1, BTreeUtility.MAX_RAND_VALUE/2, BTreeUtility.MAX_RAND_VALUE, 2 + 3*entriesPerPage/2);
+		
+		// create the parent page and the new entry
+		BTreePageId parentId = new BTreePageId(tableid, 1, BTreePageId.INTERNAL);
+		BTreeInternalPage parent = BTreeUtility.createRandomInternalPage(parentId, keyField, 
+				BTreePageId.LEAF, BTreeUtility.MAX_RAND_VALUE/2, BTreeUtility.MAX_RAND_VALUE, 2);
+		BTreeEntry entry = parent.iterator().next();
+		Field siblingKey = rightPage.iterator().next().getKey();
+		Field parentKey = entry.getKey();
+		Field minKey = (siblingKey.compare(Op.LESS_THAN, parentKey) ? siblingKey : parentKey);
+		entry.setKey(minKey);
+		parent.updateEntry(entry);
+		int numParentEntries = parent.getNumEntries();
+		
+		// set all the pointers
+		leftPage.setParentId(parentId);
+		rightPage.setParentId(parentId);
+		
+		int totalEntries = leftPage.getNumEntries() + rightPage.getNumEntries();
+		
+		HashMap<PageId, Page> dirtypages = new HashMap<PageId, Page>();
+		dirtypages.put(leftPageId, leftPage);
+		dirtypages.put(rightPageId, rightPage);
+		dirtypages.put(parentId, parent);
+		empty.mergeInternalPages(tid, dirtypages, leftPage, rightPage, parent, entry);
+		assertEquals(totalEntries + 1, leftPage.getNumEntries());
+		assertEquals(0, rightPage.getNumEntries());
+		assertEquals(numParentEntries - 1, parent.getNumEntries());
+		assertEquals(rightPageId.pageNumber(), empty.getEmptyPageNo(tid, dirtypages));
+
+		// are all the parent pointers set?
+		Iterator<BTreeEntry> it = leftPage.reverseIterator();
+		BTreeEntry e = null;
+		int count = 0;
+		while(count < entriesPerPage/2 - 1) {
+			assertTrue(it.hasNext());
+			e = it.next();
+			BTreePage p = (BTreePage) dirtypages.get(e.getRightChild());
+			assertEquals(leftPageId, p.getParentId());
+			++count;
+		}
+	}    
+
+	/**
+	 * JUnit suite target
+	 */
+	public static junit.framework.Test suite() {
+		return new JUnit4TestAdapter(BTreeFileDeleteTest.class);
+	}
+}
diff -ruN lab1/test/simpledb/BTreeFileInsertTest.java lab3/test/simpledb/BTreeFileInsertTest.java
--- lab1/test/simpledb/BTreeFileInsertTest.java	1969-12-31 18:00:00.000000000 -0600
+++ lab3/test/simpledb/BTreeFileInsertTest.java	2016-11-02 22:06:55.000000000 -0500
@@ -0,0 +1,181 @@
+package simpledb;
+
+import simpledb.systemtest.SimpleDbTestBase;
+import simpledb.Predicate.Op;
+
+import java.io.File;
+import java.util.*;
+
+import org.junit.After;
+import org.junit.Before;
+import org.junit.Test;
+
+import static org.junit.Assert.*;
+import junit.framework.JUnit4TestAdapter;
+
+public class BTreeFileInsertTest extends SimpleDbTestBase {
+	private TransactionId tid;
+	
+	/**
+	 * Set up initial resources for each unit test.
+	 */
+	@Before
+	public void setUp() throws Exception {
+		tid = new TransactionId();
+	}
+
+	@After
+	public void tearDown() throws Exception {
+		Database.getBufferPool().transactionComplete(tid);
+		
+		// set the page size back to the default
+		BufferPool.resetPageSize();
+		Database.reset();
+	}
+
+	@Test
+	public void testSplitLeafPages() throws Exception {
+		File emptyFile = File.createTempFile("empty", ".dat");
+		emptyFile.deleteOnExit();
+		Database.reset();
+		BTreeFile empty = BTreeUtility.createEmptyBTreeFile(emptyFile.getAbsolutePath(), 2, 0, 3);
+		int tableid = empty.getId();
+		int keyField = 0;
+
+		// create the leaf page
+		BTreePageId leftPageId = new BTreePageId(tableid, 2, BTreePageId.LEAF);
+		BTreeLeafPage leftPage = BTreeUtility.createRandomLeafPage(leftPageId, 2, keyField, 
+				0, BTreeUtility.MAX_RAND_VALUE);
+				
+		// create the parent page
+		BTreePageId parentId = new BTreePageId(tableid, 1, BTreePageId.INTERNAL);
+		BTreeInternalPage parent = new BTreeInternalPage(parentId, 
+				BTreeInternalPage.createEmptyPageData(), keyField);
+				
+		// set the pointers
+		leftPage.setParentId(parentId);
+		
+		Field field = new IntField(BTreeUtility.MAX_RAND_VALUE/2);
+		HashMap<PageId, Page> dirtypages = new HashMap<PageId, Page>();
+		dirtypages.put(leftPageId, leftPage);
+		dirtypages.put(parentId, parent);
+		BTreeLeafPage page = empty.splitLeafPage(tid, dirtypages, leftPage, field);
+		assertTrue(page.getLeftSiblingId() != null || page.getRightSiblingId() != null);
+		BTreeLeafPage otherPage;
+		if(page.getLeftSiblingId() != null) {
+			otherPage = (BTreeLeafPage) dirtypages.get(page.getLeftSiblingId());
+			assertTrue(field.compare(Op.GREATER_THAN_OR_EQ, 
+					otherPage.reverseIterator().next().getField(keyField)));
+		}
+		else { // page.getRightSiblingId() != null
+			otherPage = (BTreeLeafPage) dirtypages.get(page.getRightSiblingId());
+			assertTrue(field.compare(Op.LESS_THAN_OR_EQ, 
+					otherPage.iterator().next().getField(keyField)));
+		}
+		
+		int totalTuples = page.getNumTuples() + otherPage.getNumTuples();
+		assertEquals(BTreeUtility.getNumTuplesPerPage(2), totalTuples);
+		assertTrue(BTreeUtility.getNumTuplesPerPage(2)/2 == page.getNumTuples() || 
+				BTreeUtility.getNumTuplesPerPage(2)/2 + 1 == page.getNumTuples());
+		assertTrue(BTreeUtility.getNumTuplesPerPage(2)/2 == otherPage.getNumTuples() || 
+				BTreeUtility.getNumTuplesPerPage(2)/2 + 1 == otherPage.getNumTuples());
+		assertEquals(1, parent.getNumEntries());
+	}
+
+	@Test
+	public void testSplitInternalPages() throws Exception {
+		File emptyFile = File.createTempFile("empty", ".dat");
+		emptyFile.deleteOnExit();
+		Database.reset();
+		int entriesPerPage = BTreeUtility.getNumEntriesPerPage();
+		BTreeFile empty = BTreeUtility.createEmptyBTreeFile(emptyFile.getAbsolutePath(), 2, 0, 3 + entriesPerPage);
+		int tableid = empty.getId();
+		int keyField = 0;
+
+		// create the internal page
+		BTreePageId leftPageId = new BTreePageId(tableid, 2, BTreePageId.INTERNAL);
+		BTreeInternalPage leftPage = BTreeUtility.createRandomInternalPage(leftPageId, keyField, BTreePageId.LEAF,
+				0, BTreeUtility.MAX_RAND_VALUE, 3);
+				
+		// create the parent page
+		BTreePageId parentId = new BTreePageId(tableid, 1, BTreePageId.INTERNAL);
+		BTreeInternalPage parent = new BTreeInternalPage(parentId, 
+				BTreeInternalPage.createEmptyPageData(), keyField);
+				
+		// set the pointers
+		leftPage.setParentId(parentId);
+		
+		Field field = new IntField(BTreeUtility.MAX_RAND_VALUE/2);
+		HashMap<PageId, Page> dirtypages = new HashMap<PageId, Page>();
+		dirtypages.put(leftPageId, leftPage);
+		dirtypages.put(parentId, parent);
+		BTreeInternalPage page = empty.splitInternalPage(tid, dirtypages, leftPage, field);
+		BTreeInternalPage otherPage;
+		assertEquals(1, parent.getNumEntries());
+		BTreeEntry parentEntry = parent.iterator().next();
+		if(parentEntry.getLeftChild().equals(page.getId())) {
+			otherPage = (BTreeInternalPage) dirtypages.get(parentEntry.getRightChild());
+			assertTrue(field.compare(Op.LESS_THAN_OR_EQ, 
+					otherPage.iterator().next().getKey()));
+		}
+		else { // parentEntry.getRightChild().equals(page.getId())
+			otherPage = (BTreeInternalPage) dirtypages.get(parentEntry.getLeftChild());
+			assertTrue(field.compare(Op.GREATER_THAN_OR_EQ, 
+					otherPage.reverseIterator().next().getKey()));
+		}
+		
+		int totalEntries = page.getNumEntries() + otherPage.getNumEntries();
+		assertEquals(entriesPerPage - 1, totalEntries);
+		assertTrue(entriesPerPage/2 == page.getNumEntries() || 
+				entriesPerPage/2 - 1 == page.getNumEntries());
+		assertTrue(entriesPerPage/2 == otherPage.getNumEntries() || 
+				entriesPerPage/2 - 1 == otherPage.getNumEntries());
+	}    
+
+	@Test
+	public void testReusePage() throws Exception {
+		File emptyFile = File.createTempFile("empty", ".dat");
+		emptyFile.deleteOnExit();
+		Database.reset();
+		BTreeFile empty = BTreeUtility.createEmptyBTreeFile(emptyFile.getAbsolutePath(), 2, 0, 3);
+		int tableid = empty.getId();
+		int keyField = 0;
+
+		// create the leaf page
+		HashMap<PageId, Page> dirtypages = new HashMap<PageId, Page>();
+		empty.setEmptyPage(tid, dirtypages, 2);
+		BTreePageId leftPageId = new BTreePageId(tableid, 3, BTreePageId.LEAF);
+		BTreeLeafPage leftPage = BTreeUtility.createRandomLeafPage(leftPageId, 2, keyField, 
+				0, BTreeUtility.MAX_RAND_VALUE);
+				
+		// create the parent page
+		BTreePageId parentId = new BTreePageId(tableid, 1, BTreePageId.INTERNAL);
+		BTreeInternalPage parent = new BTreeInternalPage(parentId, 
+				BTreeInternalPage.createEmptyPageData(), keyField);
+				
+		// set the pointers
+		leftPage.setParentId(parentId);
+		
+		Field field = new IntField(BTreeUtility.MAX_RAND_VALUE/2);
+		dirtypages.put(leftPageId, leftPage);
+		dirtypages.put(parentId, parent);
+		BTreeLeafPage page = empty.splitLeafPage(tid, dirtypages, leftPage, field);
+		assertTrue(page.getLeftSiblingId() != null || page.getRightSiblingId() != null);
+		BTreeLeafPage otherPage;
+		if(page.getLeftSiblingId() != null) {
+			otherPage = (BTreeLeafPage) dirtypages.get(page.getLeftSiblingId());
+		}
+		else { // page.getRightSiblingId() != null
+			otherPage = (BTreeLeafPage) dirtypages.get(page.getRightSiblingId());
+		}
+		
+		assertTrue(page.getId().pageNumber() == 2 || otherPage.getId().pageNumber() == 2);
+	}
+
+	/**
+	 * JUnit suite target
+	 */
+	public static junit.framework.Test suite() {
+		return new JUnit4TestAdapter(BTreeFileInsertTest.class);
+	}
+}
diff -ruN lab1/test/simpledb/BTreeFileReadTest.java lab3/test/simpledb/BTreeFileReadTest.java
--- lab1/test/simpledb/BTreeFileReadTest.java	1969-12-31 18:00:00.000000000 -0600
+++ lab3/test/simpledb/BTreeFileReadTest.java	2016-11-02 22:06:55.000000000 -0500
@@ -0,0 +1,210 @@
+package simpledb;
+
+import simpledb.systemtest.SimpleDbTestBase;
+import simpledb.Predicate.Op;
+
+import java.util.*;
+
+import org.junit.After;
+import org.junit.Before;
+import org.junit.Test;
+
+import static org.junit.Assert.*;
+import junit.framework.JUnit4TestAdapter;
+
+public class BTreeFileReadTest extends SimpleDbTestBase {
+	private BTreeFile f;
+	private TransactionId tid;
+	private TupleDesc td;
+
+	/**
+	 * Set up initial resources for each unit test.
+	 */
+	@Before
+	public void setUp() throws Exception {
+		f = BTreeUtility.createRandomBTreeFile(2, 20, null, null, 0);
+		td = Utility.getTupleDesc(2);
+		tid = new TransactionId();
+	}
+
+	@After
+	public void tearDown() throws Exception {
+		Database.getBufferPool().transactionComplete(tid);
+	}
+
+	/**
+	 * Unit test for BTreeFile.getId()
+	 */
+	@Test
+	public void getId() throws Exception {
+		int id = f.getId();
+
+		// NOTE(ghuo): the value could be anything. test determinism, at least.
+		assertEquals(id, f.getId());
+		assertEquals(id, f.getId());
+
+		BTreeFile other = BTreeUtility.createRandomBTreeFile(1, 1, null, null, 0);
+		assertTrue(id != other.getId());
+	}
+
+	/**
+	 * Unit test for BTreeFile.getTupleDesc()
+	 */
+	@Test
+	public void getTupleDesc() throws Exception {    	
+		assertEquals(td, f.getTupleDesc());        
+	}
+	/**
+	 * Unit test for BTreeFile.numPages()
+	 */
+	@Test
+	public void numPages() throws Exception {
+		assertEquals(1, f.numPages());
+	}
+
+	/**
+	 * Unit test for BTreeFile.readPage()
+	 */
+	@Test
+	public void readPage() throws Exception {
+		BTreePageId rootPtrPid = new BTreePageId(f.getId(), 0, BTreePageId.ROOT_PTR);
+		BTreeRootPtrPage rootPtr = (BTreeRootPtrPage) f.readPage(rootPtrPid);
+
+		assertEquals(1, rootPtr.getRootId().pageNumber());
+		assertEquals(BTreePageId.LEAF, rootPtr.getRootId().pgcateg());
+
+		BTreePageId pid = new BTreePageId(f.getId(), 1, BTreePageId.LEAF);
+		BTreeLeafPage page = (BTreeLeafPage) f.readPage(pid);
+
+		// NOTE(ghuo): we try not to dig too deeply into the Page API here; we
+		// rely on BTreePageTest for that. perform some basic checks.
+		assertEquals(482, page.getNumEmptySlots());
+		assertTrue(page.isSlotUsed(1));
+		assertFalse(page.isSlotUsed(20));
+	}
+
+	@Test
+	public void testIteratorBasic() throws Exception {
+		BTreeFile smallFile = BTreeUtility.createRandomBTreeFile(2, 3, null,
+				null, 0);
+
+		DbFileIterator it = smallFile.iterator(tid);
+		// Not open yet
+		assertFalse(it.hasNext());
+		try {
+			it.next();
+			fail("expected exception");
+		} catch (NoSuchElementException e) {
+		}
+
+		it.open();
+		int count = 0;
+		while (it.hasNext()) {
+			assertNotNull(it.next());
+			count += 1;
+		}
+		assertEquals(3, count);
+		it.close();
+	}
+
+	@Test
+	public void testIteratorClose() throws Exception {
+		// make more than 1 page. Previous closed iterator would start fetching
+		// from page 1.
+		BTreeFile twoLeafPageFile = BTreeUtility.createRandomBTreeFile(2, 520,
+				null, null, 0);
+
+		// there should be 3 pages - two leaf pages and one internal page (the root)
+		assertEquals(3, twoLeafPageFile.numPages());
+
+		DbFileIterator it = twoLeafPageFile.iterator(tid);
+		it.open();
+		assertTrue(it.hasNext());
+		it.close();
+		try {
+			it.next();
+			fail("expected exception");
+		} catch (NoSuchElementException e) {
+		}
+		// close twice is harmless
+		it.close();
+	}
+
+	/**
+	 * Unit test for BTreeFile.indexIterator()
+	 */
+	@Test public void indexIterator() throws Exception {
+		BTreeFile twoLeafPageFile = BTreeUtility.createBTreeFile(2, 520,
+				null, null, 0);
+		Field f =  new IntField(5);
+
+		// greater than
+		IndexPredicate ipred = new IndexPredicate(Op.GREATER_THAN, f);
+		DbFileIterator it = twoLeafPageFile.indexIterator(tid, ipred);
+		it.open();
+		int count = 0;
+		while(it.hasNext()) {
+			Tuple t = it.next();
+			assertTrue(t.getField(0).compare(Op.GREATER_THAN, f));
+			count++;
+		}
+		assertEquals(515, count);
+		it.close();
+
+		// less than or equal to
+		ipred = new IndexPredicate(Op.LESS_THAN_OR_EQ, f);
+		it = twoLeafPageFile.indexIterator(tid, ipred);
+		it.open();
+		count = 0;
+		while(it.hasNext()) {
+			Tuple t = it.next();
+			assertTrue(t.getField(0).compare(Op.LESS_THAN_OR_EQ, f));
+			count++;
+		}
+		assertEquals(5, count);
+		it.close();
+
+		// equal to
+		ipred = new IndexPredicate(Op.EQUALS, f);
+		it = twoLeafPageFile.indexIterator(tid, ipred);
+		it.open();
+		count = 0;
+		while(it.hasNext()) {
+			Tuple t = it.next();
+			assertTrue(t.getField(0).compare(Op.EQUALS, f));
+			count++;
+		}
+		assertEquals(1, count);
+		it.close();
+
+		// now insert a record and ensure EQUALS returns both records
+		twoLeafPageFile.insertTuple(tid, BTreeUtility.getBTreeTuple(5, 2));
+		ipred = new IndexPredicate(Op.EQUALS, f);
+		it = twoLeafPageFile.indexIterator(tid, ipred);
+		it.open();
+		count = 0;
+		while(it.hasNext()) {
+			Tuple t = it.next();
+			assertTrue(t.getField(0).compare(Op.EQUALS, f));
+			count++;
+		}
+		assertEquals(2, count);
+		it.close();
+
+		// search for a non-existent record
+		f = new IntField(1000);
+		ipred = new IndexPredicate(Op.GREATER_THAN, f);
+		it = twoLeafPageFile.indexIterator(tid, ipred);
+		it.open();
+		assertFalse(it.hasNext());
+		it.close();
+
+	}
+
+	/**
+	 * JUnit suite target
+	 */
+	public static junit.framework.Test suite() {
+		return new JUnit4TestAdapter(BTreeFileReadTest.class);
+	}
+}
diff -ruN lab1/test/simpledb/BufferPoolWriteTest.java lab3/test/simpledb/BufferPoolWriteTest.java
--- lab1/test/simpledb/BufferPoolWriteTest.java	1969-12-31 18:00:00.000000000 -0600
+++ lab3/test/simpledb/BufferPoolWriteTest.java	2016-11-02 22:06:55.000000000 -0500
@@ -0,0 +1,143 @@
+package simpledb;
+
+import java.io.BufferedOutputStream;
+import java.io.File;
+import java.io.FileOutputStream;
+import java.io.IOException;
+import java.util.ArrayList;
+
+import org.junit.After;
+import org.junit.Before;
+import org.junit.Test;
+
+import simpledb.systemtest.SystemTestUtil;
+import static org.junit.Assert.*;
+import junit.framework.JUnit4TestAdapter;
+
+public class BufferPoolWriteTest extends TestUtil.CreateHeapFile {
+    private TransactionId tid;
+
+    // class to return multiple dirty pages on insert
+    class HeapFileDuplicates extends HeapFile {
+
+    	private int duplicates;
+    	
+    	public HeapFileDuplicates(File f, TupleDesc td, int duplicates) {
+    		super(f, td);
+    		this.duplicates = duplicates;
+    	}
+    	
+    	// this version of insertTuple inserts duplicate copies of the same tuple,
+    	// each on a new page
+    	@Override
+    	public ArrayList<Page> insertTuple(TransactionId tid, Tuple t)
+    			throws DbException, IOException, TransactionAbortedException {
+    		ArrayList<Page> dirtypages = new ArrayList<Page>();
+    		for(int i = 0; i < duplicates; i++) {
+    			// create a blank page
+    			BufferedOutputStream bw = new BufferedOutputStream(new FileOutputStream(super.getFile(), true));
+                byte[] emptyData = HeapPage.createEmptyPageData();
+                bw.write(emptyData);
+                bw.close();
+    			HeapPage p = new HeapPage(new HeapPageId(super.getId(), super.numPages() - 1), 
+    					HeapPage.createEmptyPageData());
+    	        p.insertTuple(t);
+    			dirtypages.add(p);
+    		}
+    		return dirtypages;
+    	}
+    }
+    
+    /**
+     * Set up initial resources for each unit test.
+     */
+    @Before public void setUp() throws Exception {
+        super.setUp();
+        tid = new TransactionId();
+    }
+
+    @After public void tearDown() throws Exception {
+        Database.getBufferPool().transactionComplete(tid);
+    }
+
+    /**
+     * Unit test for BufferPool.insertTuple()
+     */
+    @Test public void insertTuple() throws Exception {
+        // we should be able to add 504 tuples on an empty page.
+        for (int i = 0; i < 504; ++i) {
+        	Tuple t = Utility.getHeapTuple(i, 2);
+        	Database.getBufferPool().insertTuple(tid, empty.getId(), t);
+        	HeapPage p = (HeapPage) Database.getBufferPool().getPage(tid, t.getRecordId().getPageId(), Permissions.READ_ONLY);
+        	assertEquals(504-i-1, p.getNumEmptySlots());
+        }
+
+        // the next 504 additions should live on a new page
+        for (int i = 0; i < 504; ++i) {
+        	Tuple t = Utility.getHeapTuple(i, 2);
+        	Database.getBufferPool().insertTuple(tid, empty.getId(), t);
+        	HeapPage p = (HeapPage) Database.getBufferPool().getPage(tid, t.getRecordId().getPageId(), Permissions.READ_ONLY);
+        	assertEquals(504-i-1, p.getNumEmptySlots());
+        }
+    }
+    
+    /**
+     * Unit test for BufferPool.deleteTuple()
+     */
+    @Test public void deleteTuple() throws Exception {
+
+    	// heap file should have ~10 pages
+    	HeapFile hf = SystemTestUtil.createRandomHeapFile(2, 504*10, null, null);
+    	DbFileIterator it = hf.iterator(tid); 
+    	it.open();
+    	
+    	ArrayList<Tuple> tuples = new ArrayList<Tuple>();
+    	while(it.hasNext()) {
+    		tuples.add(it.next());
+    	}
+    	
+    	// clear the cache
+    	Database.resetBufferPool(BufferPool.DEFAULT_PAGES);
+        
+    	// delete 504 tuples from the first page
+    	for (int i = 0; i < 504; ++i) {
+    		Tuple t = tuples.get(i);
+        	Database.getBufferPool().deleteTuple(tid, t);
+        	HeapPage p = (HeapPage) Database.getBufferPool().getPage(tid, t.getRecordId().getPageId(), Permissions.READ_ONLY);
+        	assertEquals(i+1, p.getNumEmptySlots());
+        }
+    	
+    	// delete 504 tuples from the second page
+    	for (int i = 0; i < 504; ++i) {
+    		Tuple t = tuples.get(i+504);
+        	Database.getBufferPool().deleteTuple(tid, t);
+        	HeapPage p = (HeapPage) Database.getBufferPool().getPage(tid, t.getRecordId().getPageId(), Permissions.READ_ONLY);
+        	assertEquals(i+1, p.getNumEmptySlots());
+        }
+    }
+    
+    @Test public void handleManyDirtyPages() throws Exception {
+    	HeapFileDuplicates hfd = new HeapFileDuplicates(empty.getFile(), empty.getTupleDesc(), 10);
+    	Database.getCatalog().addTable(hfd, SystemTestUtil.getUUID());
+    	Database.getBufferPool().insertTuple(tid, hfd.getId(), Utility.getHeapTuple(1, 2));
+    	
+    	// there should now be 10 tuples (on 10 different pages) in the buffer pool
+    	DbFileIterator it = hfd.iterator(tid);
+    	it.open();
+    	
+    	int count = 0;
+    	while(it.hasNext()) {
+    		it.next();
+    		count++;
+    	}
+    	assertEquals(10, count);
+    }
+
+    /**
+     * JUnit suite target
+     */
+    public static junit.framework.Test suite() {
+        return new JUnit4TestAdapter(BufferPoolWriteTest.class);
+    }
+}
+
diff -ruN lab1/test/simpledb/DeadlockTest.java lab3/test/simpledb/DeadlockTest.java
--- lab1/test/simpledb/DeadlockTest.java	1969-12-31 18:00:00.000000000 -0600
+++ lab3/test/simpledb/DeadlockTest.java	2016-11-02 22:06:55.000000000 -0500
@@ -0,0 +1,222 @@
+package simpledb;
+
+import simpledb.TestUtil.LockGrabber;
+
+import java.util.*;
+import org.junit.Before;
+import org.junit.Test;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertFalse;
+import junit.framework.JUnit4TestAdapter;
+
+public class DeadlockTest extends TestUtil.CreateHeapFile {
+  private PageId p0, p1, p2;
+  private TransactionId tid1, tid2;
+  private Random rand;
+
+  private static final int POLL_INTERVAL = 100;
+  private static final int WAIT_INTERVAL = 200;
+
+  // just so we have a pointer shorter than Database.getBufferPool
+  private BufferPool bp;
+
+  /**
+   * Set up initial resources for each unit test.
+   */
+  @Before public void setUp() throws Exception {
+    super.setUp();
+
+    // clear all state from the buffer pool
+    bp = Database.resetBufferPool(BufferPool.DEFAULT_PAGES);
+
+    // create a new empty HeapFile and populate it with three pages.
+    // we should be able to add 504 tuples on an empty page.
+    TransactionId tid = new TransactionId();
+    for (int i = 0; i < 1025; ++i) {
+      empty.insertTuple(tid, Utility.getHeapTuple(i, 2));
+    }
+
+    // if this fails, complain to the TA
+    assertEquals(3, empty.numPages());
+
+    this.p0 = new HeapPageId(empty.getId(), 0);
+    this.p1 = new HeapPageId(empty.getId(), 1);
+    this.p2 = new HeapPageId(empty.getId(), 2);
+    this.tid1 = new TransactionId();
+    this.tid2 = new TransactionId();
+    this.rand = new Random();
+
+    // forget about locks associated to tid, so they don't conflict with
+    // test cases
+    bp.getPage(tid, p0, Permissions.READ_WRITE).markDirty(true, tid);
+    bp.getPage(tid, p1, Permissions.READ_WRITE).markDirty(true, tid);
+    bp.getPage(tid, p2, Permissions.READ_WRITE).markDirty(true, tid);
+    bp.flushAllPages();
+    bp = Database.resetBufferPool(BufferPool.DEFAULT_PAGES);
+  }
+
+  /**
+   * Helper method to clean up the syntax of starting a LockGrabber thread.
+   * The parameters pass through to the LockGrabber constructor.
+   */
+  public TestUtil.LockGrabber startGrabber(TransactionId tid, PageId pid,
+      Permissions perm) {
+
+    LockGrabber lg = new LockGrabber(tid, pid, perm);
+    lg.start();
+    return lg;
+  }
+
+  /**
+   * Not-so-unit test to construct a deadlock situation.
+   * t1 acquires p0.read; t2 acquires p1.read; t1 attempts p1.write; t2
+   * attempts p0.write. Rinse and repeat.
+   */
+  @Test public void testReadWriteDeadlock() throws Exception {
+    System.out.println("testReadWriteDeadlock constructing deadlock:");
+
+    LockGrabber lg1Read = startGrabber(tid1, p0, Permissions.READ_ONLY);
+    LockGrabber lg2Read = startGrabber(tid2, p1, Permissions.READ_ONLY);
+
+    // allow read locks to acquire
+    Thread.sleep(POLL_INTERVAL);
+
+    LockGrabber lg1Write = startGrabber(tid1, p1, Permissions.READ_WRITE);
+    LockGrabber lg2Write = startGrabber(tid2, p0, Permissions.READ_WRITE);
+
+    while (true) {
+      Thread.sleep(POLL_INTERVAL);
+
+      assertFalse(lg1Write.acquired() && lg2Write.acquired());
+      if (lg1Write.acquired() && !lg2Write.acquired()) break;
+      if (!lg1Write.acquired() && lg2Write.acquired()) break;
+
+      if (lg1Write.getError() != null) {
+        lg1Read.stop(); lg1Write.stop();
+        bp.transactionComplete(tid1);
+        Thread.sleep(rand.nextInt(WAIT_INTERVAL));
+
+        tid1 = new TransactionId();
+        lg1Read = startGrabber(tid1, p0, Permissions.READ_ONLY);
+        lg1Write = startGrabber(tid1, p1, Permissions.READ_WRITE);
+      }
+
+      if (lg2Write.getError() != null) {
+        lg2Read.stop(); lg2Write.stop();
+        bp.transactionComplete(tid2);
+        Thread.sleep(rand.nextInt(WAIT_INTERVAL));
+
+        tid2 = new TransactionId();
+        lg2Read = startGrabber(tid2, p1, Permissions.READ_ONLY);
+        lg2Write = startGrabber(tid2, p0, Permissions.READ_WRITE);
+      }
+    }
+
+    System.out.println("testReadWriteDeadlock resolved deadlock");
+  }
+
+  /**
+   * Not-so-unit test to construct a deadlock situation.
+   * t1 acquires p0.write; t2 acquires p1.write; t1 attempts p1.write; t2
+   * attempts p0.write.
+   */
+  @Test public void testWriteWriteDeadlock() throws Exception {
+    System.out.println("testWriteWriteDeadlock constructing deadlock:");
+
+    LockGrabber lg1Write0 = startGrabber(tid1, p0, Permissions.READ_WRITE);
+    LockGrabber lg2Write1 = startGrabber(tid2, p1, Permissions.READ_WRITE);
+
+    // allow initial write locks to acquire
+    Thread.sleep(POLL_INTERVAL);
+
+    LockGrabber lg1Write1 = startGrabber(tid1, p1, Permissions.READ_WRITE);
+    LockGrabber lg2Write0 = startGrabber(tid2, p0, Permissions.READ_WRITE);
+
+    while (true) {
+      Thread.sleep(POLL_INTERVAL);
+
+      assertFalse(lg1Write1.acquired() && lg2Write0.acquired());
+      if (lg1Write1.acquired() && !lg2Write0.acquired()) break;
+      if (!lg1Write1.acquired() && lg2Write0.acquired()) break;
+
+      if (lg1Write1.getError() != null) {
+        lg1Write0.stop(); lg1Write1.stop();
+        bp.transactionComplete(tid1);
+        Thread.sleep(rand.nextInt(WAIT_INTERVAL));
+
+        tid1 = new TransactionId();
+        lg1Write0 = startGrabber(tid1, p0, Permissions.READ_WRITE);
+        lg1Write1 = startGrabber(tid1, p1, Permissions.READ_WRITE);
+      }
+
+      if (lg2Write0.getError() != null) {
+        lg2Write0.stop(); lg2Write1.stop();
+        bp.transactionComplete(tid2);
+        Thread.sleep(rand.nextInt(WAIT_INTERVAL));
+
+        tid2 = new TransactionId();
+        lg2Write0 = startGrabber(tid2, p1, Permissions.READ_WRITE);
+        lg2Write1 = startGrabber(tid2, p0, Permissions.READ_WRITE);
+      }
+    }
+
+    System.out.println("testWriteWriteDeadlock resolved deadlock");
+  }
+
+  /**
+   * Not-so-unit test to construct a deadlock situation.
+   * t1 acquires p0.read; t2 acquires p0.read; t1 attempts to upgrade to
+   * p0.write; t2 attempts to upgrade to p0.write
+   */
+  @Test public void testUpgradeWriteDeadlock() throws Exception {
+    System.out.println("testUpgradeWriteDeadlock constructing deadlock:");
+
+    LockGrabber lg1Read = startGrabber(tid1, p0, Permissions.READ_ONLY);
+    LockGrabber lg2Read = startGrabber(tid2, p0, Permissions.READ_ONLY);
+
+    // allow read locks to acquire
+    Thread.sleep(POLL_INTERVAL);
+
+    LockGrabber lg1Write = startGrabber(tid1, p0, Permissions.READ_WRITE);
+    LockGrabber lg2Write = startGrabber(tid2, p0, Permissions.READ_WRITE);
+
+    while (true) {
+      Thread.sleep(POLL_INTERVAL);
+
+      assertFalse(lg1Write.acquired() && lg2Write.acquired());
+      if (lg1Write.acquired() && !lg2Write.acquired()) break;
+      if (!lg1Write.acquired() && lg2Write.acquired()) break;
+
+      if (lg1Write.getError() != null) {
+        lg1Read.stop(); lg1Write.stop();
+        bp.transactionComplete(tid1);
+        Thread.sleep(rand.nextInt(WAIT_INTERVAL));
+
+        tid1 = new TransactionId();
+        lg1Read = startGrabber(tid1, p0, Permissions.READ_ONLY);
+        lg1Write = startGrabber(tid1, p0, Permissions.READ_WRITE);
+      }
+
+      if (lg2Write.getError() != null) {
+        lg2Read.stop(); lg2Write.stop();
+        bp.transactionComplete(tid2);
+        Thread.sleep(rand.nextInt(WAIT_INTERVAL));
+
+        tid2 = new TransactionId();
+        lg2Read = startGrabber(tid2, p0, Permissions.READ_ONLY);
+        lg2Write = startGrabber(tid2, p0, Permissions.READ_WRITE);
+      }
+    }
+
+    System.out.println("testUpgradeWriteDeadlock resolved deadlock");
+  }
+
+  /**
+   * JUnit suite target
+   */
+  public static junit.framework.Test suite() {
+    return new JUnit4TestAdapter(DeadlockTest.class);
+  }
+
+}
+
diff -ruN lab1/test/simpledb/FilterTest.java lab3/test/simpledb/FilterTest.java
--- lab1/test/simpledb/FilterTest.java	1969-12-31 18:00:00.000000000 -0600
+++ lab3/test/simpledb/FilterTest.java	2016-11-02 22:06:55.000000000 -0500
@@ -0,0 +1,130 @@
+package simpledb;
+
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertNotNull;
+import static org.junit.Assert.assertTrue;
+import junit.framework.JUnit4TestAdapter;
+
+import org.junit.Before;
+import org.junit.Test;
+
+import simpledb.systemtest.SimpleDbTestBase;
+
+public class FilterTest extends SimpleDbTestBase {
+
+  int testWidth = 3;
+  DbIterator scan;
+
+  /**
+   * Initialize each unit test
+   */
+  @Before public void setUp() {
+    this.scan = new TestUtil.MockScan(-5, 5, testWidth);
+  }
+
+  /**
+   * Unit test for Filter.getTupleDesc()
+   */
+  @Test public void getTupleDesc() {
+    Predicate pred = new Predicate(0, Predicate.Op.EQUALS, TestUtil.getField(0));
+    Filter op = new Filter(pred, scan);
+    TupleDesc expected = Utility.getTupleDesc(testWidth);
+    TupleDesc actual = op.getTupleDesc();
+    assertEquals(expected, actual);
+  }
+
+  /**
+   * Unit test for Filter.rewind()
+   */
+  @Test public void rewind() throws Exception {
+    Predicate pred = new Predicate(0, Predicate.Op.EQUALS, TestUtil.getField(0));
+    Filter op = new Filter(pred, scan);
+    op.open();
+    assertTrue(op.hasNext());
+    assertNotNull(op.next());
+    assertTrue(TestUtil.checkExhausted(op));
+
+    op.rewind();
+    Tuple expected = Utility.getHeapTuple(0, testWidth);
+    Tuple actual = op.next();
+    assertTrue(TestUtil.compareTuples(expected, actual));
+    op.close();
+  }
+
+  /**
+   * Unit test for Filter.getNext() using a &lt; predicate that filters
+   *   some tuples
+   */
+  @Test public void filterSomeLessThan() throws Exception {
+    Predicate pred;
+    pred = new Predicate(0, Predicate.Op.LESS_THAN, TestUtil.getField(2));
+    Filter op = new Filter(pred, scan);
+    TestUtil.MockScan expectedOut = new TestUtil.MockScan(-5, 2, testWidth);
+    op.open();
+    TestUtil.compareDbIterators(op, expectedOut);
+    op.close();
+  }
+
+  /**
+   * Unit test for Filter.getNext() using a &lt; predicate that filters
+   * everything
+   */
+  @Test public void filterAllLessThan() throws Exception {
+    Predicate pred;
+    pred = new Predicate(0, Predicate.Op.LESS_THAN, TestUtil.getField(-5));
+    Filter op = new Filter(pred, scan);
+    op.open();
+    assertTrue(TestUtil.checkExhausted(op));
+    op.close();
+  }
+
+  /**
+   * Unit test for Filter.getNext() using an = predicate
+   */
+  @Test public void filterEqual() throws Exception {
+    Predicate pred;
+    this.scan = new TestUtil.MockScan(-5, 5, testWidth);
+    pred = new Predicate(0, Predicate.Op.EQUALS, TestUtil.getField(-5));
+    Filter op = new Filter(pred, scan);
+    op.open();
+    assertTrue(TestUtil.compareTuples(Utility.getHeapTuple(-5, testWidth),
+        op.next()));
+    op.close();
+
+    this.scan = new TestUtil.MockScan(-5, 5, testWidth);
+    pred = new Predicate(0, Predicate.Op.EQUALS, TestUtil.getField(0));
+    op = new Filter(pred, scan);
+    op.open();
+    assertTrue(TestUtil.compareTuples(Utility.getHeapTuple(0, testWidth),
+        op.next()));
+    op.close();
+
+    this.scan = new TestUtil.MockScan(-5, 5, testWidth);
+    pred = new Predicate(0, Predicate.Op.EQUALS, TestUtil.getField(4));
+    op = new Filter(pred, scan);
+    op.open();
+    assertTrue(TestUtil.compareTuples(Utility.getHeapTuple(4, testWidth),
+        op.next()));
+    op.close();
+  }
+
+  /**
+   * Unit test for Filter.getNext() using an = predicate passing no tuples
+   */
+  @Test public void filterEqualNoTuples() throws Exception {
+    Predicate pred;
+    pred = new Predicate(0, Predicate.Op.EQUALS, TestUtil.getField(5));
+    Filter op = new Filter(pred, scan);
+    op.open();
+    TestUtil.checkExhausted(op);
+    op.close();
+  }
+
+  /**
+   * JUnit suite target
+   */
+  public static junit.framework.Test suite() {
+    return new JUnit4TestAdapter(FilterTest.class);
+  }
+}
+
diff -ruN lab1/test/simpledb/HeapFileWriteTest.java lab3/test/simpledb/HeapFileWriteTest.java
--- lab1/test/simpledb/HeapFileWriteTest.java	1969-12-31 18:00:00.000000000 -0600
+++ lab3/test/simpledb/HeapFileWriteTest.java	2016-11-02 22:06:55.000000000 -0500
@@ -0,0 +1,53 @@
+package simpledb;
+
+import org.junit.After;
+import org.junit.Before;
+import org.junit.Test;
+
+import static org.junit.Assert.*;
+import junit.framework.JUnit4TestAdapter;
+
+public class HeapFileWriteTest extends TestUtil.CreateHeapFile {
+    private TransactionId tid;
+
+    /**
+     * Set up initial resources for each unit test.
+     */
+    @Before public void setUp() throws Exception {
+        super.setUp();
+        tid = new TransactionId();
+    }
+
+    @After public void tearDown() throws Exception {
+        Database.getBufferPool().transactionComplete(tid);
+    }
+
+    /**
+     * Unit test for HeapFile.addTuple()
+     */
+    @Test public void addTuple() throws Exception {
+        // we should be able to add 504 tuples on an empty page.
+        for (int i = 0; i < 504; ++i) {
+            empty.insertTuple(tid, Utility.getHeapTuple(i, 2));
+            assertEquals(1, empty.numPages());
+        }
+
+        // the next 512 additions should live on a new page
+        for (int i = 0; i < 504; ++i) {
+            empty.insertTuple(tid, Utility.getHeapTuple(i, 2));
+            assertEquals(2, empty.numPages());
+        }
+
+        // and one more, just for fun...
+        empty.insertTuple(tid, Utility.getHeapTuple(0, 2));
+        assertEquals(3, empty.numPages());
+    }
+
+    /**
+     * JUnit suite target
+     */
+    public static junit.framework.Test suite() {
+        return new JUnit4TestAdapter(HeapFileWriteTest.class);
+    }
+}
+
diff -ruN lab1/test/simpledb/HeapPageWriteTest.java lab3/test/simpledb/HeapPageWriteTest.java
--- lab1/test/simpledb/HeapPageWriteTest.java	1969-12-31 18:00:00.000000000 -0600
+++ lab3/test/simpledb/HeapPageWriteTest.java	2016-11-02 22:06:55.000000000 -0500
@@ -0,0 +1,136 @@
+package simpledb;
+
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertTrue;
+
+import java.io.IOException;
+import java.util.Iterator;
+import java.util.LinkedList;
+
+import junit.framework.JUnit4TestAdapter;
+
+import org.junit.Before;
+import org.junit.Test;
+
+import simpledb.TestUtil.SkeletonFile;
+import simpledb.systemtest.SimpleDbTestBase;
+import simpledb.systemtest.SystemTestUtil;
+
+public class HeapPageWriteTest extends SimpleDbTestBase {
+
+    private HeapPageId pid;
+
+    /**
+     * Set up initial resources for each unit test.
+     */
+    @Before public void addTable() throws IOException {
+        this.pid = new HeapPageId(-1, -1);
+        Database.getCatalog().addTable(new SkeletonFile(-1, Utility.getTupleDesc(2)), SystemTestUtil.getUUID());
+    }
+    
+    /**
+     * Unit test for HeapPage.isDirty()
+     */
+    @Test public void testDirty() throws Exception {
+        TransactionId tid = new TransactionId();
+        HeapPage page = new HeapPage(pid, HeapPageReadTest.EXAMPLE_DATA);
+        page.markDirty(true, tid);
+        TransactionId dirtier = page.isDirty();
+        assertEquals(true, dirtier != null);
+        assertEquals(true, dirtier == tid);
+
+        page.markDirty(false, tid);
+        dirtier = page.isDirty();
+        assertEquals(false, dirtier != null);
+    }
+
+    /**
+     * Unit test for HeapPage.addTuple()
+     */
+    @Test public void addTuple() throws Exception {
+        HeapPage page = new HeapPage(pid, HeapPageReadTest.EXAMPLE_DATA);
+        int free = page.getNumEmptySlots();
+
+        // NOTE(ghuo): this nested loop existence check is slow, but it
+        // shouldn't make a difference for n = 504 slots.
+
+        for (int i = 0; i < free; ++i) {
+            Tuple addition = Utility.getHeapTuple(i, 2);
+            page.insertTuple(addition);
+            assertEquals(free-i-1, page.getNumEmptySlots());
+
+            // loop through the iterator to ensure that the tuple actually exists
+            // on the page
+            Iterator<Tuple >it = page.iterator();
+            boolean found = false;
+            while (it.hasNext()) {
+                Tuple tup = it.next();
+                if (TestUtil.compareTuples(addition, tup)) {
+                    found = true;
+
+                    // verify that the RecordId is sane
+                    assertEquals(page.getId(), tup.getRecordId().getPageId());
+                    break;
+                }
+            }
+            assertTrue(found);
+        }
+
+        // now, the page should be full.
+        try {
+            page.insertTuple(Utility.getHeapTuple(0, 2));
+            throw new Exception("page should be full; expected DbException");
+        } catch (DbException e) {
+            // explicitly ignored
+        }
+    }
+
+    /**
+     * Unit test for HeapPage.deleteTuple() with false tuples
+     */
+    @Test(expected=DbException.class)
+        public void deleteNonexistentTuple() throws Exception {
+        HeapPage page = new HeapPage(pid, HeapPageReadTest.EXAMPLE_DATA);
+        page.deleteTuple(Utility.getHeapTuple(2, 2));
+    }
+
+    /**
+     * Unit test for HeapPage.deleteTuple()
+     */
+    @Test public void deleteTuple() throws Exception {
+        HeapPage page = new HeapPage(pid, HeapPageReadTest.EXAMPLE_DATA);
+        int free = page.getNumEmptySlots();
+
+        // first, build a list of the tuples on the page.
+        Iterator<Tuple> it = page.iterator();
+        LinkedList<Tuple> tuples = new LinkedList<Tuple>();
+        while (it.hasNext())
+            tuples.add(it.next());
+        Tuple first = tuples.getFirst();
+
+        // now, delete them one-by-one from both the front and the end.
+        int deleted = 0;
+        while (tuples.size() > 0) {
+            page.deleteTuple(tuples.removeFirst());
+            page.deleteTuple(tuples.removeLast());
+            deleted += 2;
+            assertEquals(free + deleted, page.getNumEmptySlots());
+        }
+
+        // now, the page should be empty.
+        try {
+            page.deleteTuple(first);
+            throw new Exception("page should be empty; expected DbException");
+        } catch (DbException e) {
+            // explicitly ignored
+        }
+    }
+
+    /**
+     * JUnit suite target
+     */
+    public static junit.framework.Test suite() {
+        return new JUnit4TestAdapter(HeapPageWriteTest.class);
+    }
+}
+
diff -ruN lab1/test/simpledb/InsertTest.java lab3/test/simpledb/InsertTest.java
--- lab1/test/simpledb/InsertTest.java	1969-12-31 18:00:00.000000000 -0600
+++ lab3/test/simpledb/InsertTest.java	2016-11-02 22:06:55.000000000 -0500
@@ -0,0 +1,66 @@
+package simpledb;
+
+import org.junit.Before;
+import org.junit.Test;
+
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertTrue;
+import junit.framework.JUnit4TestAdapter;
+
+/**
+ * We reserve more heavy-duty insertion testing for HeapFile and HeapPage.
+ * This suite is superficial.
+ */
+public class InsertTest extends TestUtil.CreateHeapFile {
+
+  private DbIterator scan1;
+  private TransactionId tid;
+
+  /**
+   * Initialize each unit test
+   */
+  @Before public void setUp() throws Exception {
+    super.setUp();
+    this.scan1 = TestUtil.createTupleList(2,
+        new int[] { 1, 2,
+                    1, 4,
+                    1, 6,
+                    3, 2,
+                    3, 4,
+                    3, 6,
+                    5, 7 });
+    tid = new TransactionId();
+  }
+
+  /**
+   * Unit test for Insert.getTupleDesc()
+   */
+  @Test public void getTupleDesc() throws Exception {
+    Insert op = new Insert(tid,scan1, empty.getId());
+    TupleDesc expected = Utility.getTupleDesc(1);
+    TupleDesc actual = op.getTupleDesc();
+    assertEquals(expected, actual);
+  }
+
+  /**
+   * Unit test for Insert.getNext(), inserting elements into an empty file
+   */
+  @Test public void getNext() throws Exception {
+    Insert op = new Insert(tid,scan1, empty.getId());
+    op.open();
+    assertTrue(TestUtil.compareTuples(
+        Utility.getHeapTuple(7, 1), // the length of scan1
+        op.next()));
+
+    // we should fit on one page
+    assertEquals(1, empty.numPages());
+  }
+
+  /**
+   * JUnit suite target
+   */
+  public static junit.framework.Test suite() {
+    return new JUnit4TestAdapter(InsertTest.class);
+  }
+}
+
diff -ruN lab1/test/simpledb/IntHistogramTest.java lab3/test/simpledb/IntHistogramTest.java
--- lab1/test/simpledb/IntHistogramTest.java	1969-12-31 18:00:00.000000000 -0600
+++ lab3/test/simpledb/IntHistogramTest.java	2016-11-02 22:06:55.000000000 -0500
@@ -0,0 +1,177 @@
+package simpledb;
+
+import org.junit.Test;
+import org.junit.Assert;
+
+import simpledb.Predicate.Op;
+
+public class IntHistogramTest {
+
+	/**
+	 * Test to confirm that the IntHistogram implementation is constant-space
+	 * (or, at least, reasonably small space; O(log(n)) might still work if
+	 * your constants are good).
+	 */
+	@Test public void orderOfGrowthTest() {
+		// Don't bother with a timeout on this test.
+		// Printing debugging statements takes >> time than some inefficient algorithms.
+		IntHistogram h = new IntHistogram(10000, 0, 100);
+		
+		// Feed the histogram more integers than would fit into our
+		// 128mb allocated heap (4-byte integers)
+		// If this fails, someone's storing every value...
+		for (int c = 0; c < 33554432; c++) {
+			h.addValue((c * 23) % 101);	// Pseudo-random number; at least get a distribution
+		}
+		
+		// Try printing out all of the values; make sure "estimateSelectivity()"
+		// cause any problems
+		double selectivity = 0.0;
+		for (int c = 0; c < 101; c++) {
+			selectivity += h.estimateSelectivity(Op.EQUALS, c);
+		}
+		
+		// All the selectivities should add up to 1, by definition.
+		// Allow considerable leeway for rounding error, though 
+		// (Java double's are good to 15 or so significant figures)
+		Assert.assertTrue(selectivity > 0.99);
+	}
+	
+	/**
+	 * Test with a minimum and a maximum that are both negative numbers.
+	 */
+	@Test public void negativeRangeTest() {
+		IntHistogram h = new IntHistogram(10, -60, -10);
+		
+		// All of the values here are negative.
+		// Also, there are more of them than there are bins.
+		for (int c = -60; c <= -10; c++) {
+			h.addValue(c);
+			h.estimateSelectivity(Op.EQUALS, c);
+		}
+		
+		// Even with just 10 bins and 50 values,
+		// the selectivity for this particular value should be at most 0.2.
+		Assert.assertTrue(h.estimateSelectivity(Op.EQUALS, -33) < 0.3);
+		
+		// And it really shouldn't be 0.
+		// Though, it could easily be as low as 0.02, seeing as that's
+		// the fraction of elements that actually are equal to -33.
+		Assert.assertTrue(h.estimateSelectivity(Op.EQUALS, -33) > 0.001);
+	}
+	
+	/**
+	 * Make sure that equality binning does something reasonable.
+	 */
+	@Test public void opEqualsTest() {
+		IntHistogram h = new IntHistogram(10, 1, 10);
+		
+		// Set some values
+		h.addValue(3);
+		h.addValue(3);
+		h.addValue(3);
+		
+		// This really should return "1.0"; but,
+		// be conservative in case of alternate implementations
+		Assert.assertTrue(h.estimateSelectivity(Op.EQUALS, 3) > 0.8);
+		Assert.assertTrue(h.estimateSelectivity(Op.EQUALS, 8) < 0.001);
+	}
+	
+	/**
+	 * Make sure that GREATER_THAN binning does something reasonable.
+	 */
+	@Test public void opGreaterThanTest() {
+		IntHistogram h = new IntHistogram(10, 1, 10);
+		
+		// Set some values
+		h.addValue(3);
+		h.addValue(3);
+		h.addValue(3);
+		h.addValue(1);
+		h.addValue(10);
+		
+		// Be conservative in case of alternate implementations
+		Assert.assertTrue(h.estimateSelectivity(Op.GREATER_THAN, -1) > 0.999);
+		Assert.assertTrue(h.estimateSelectivity(Op.GREATER_THAN, 2) > 0.6);
+		Assert.assertTrue(h.estimateSelectivity(Op.GREATER_THAN, 4) < 0.4);
+		Assert.assertTrue(h.estimateSelectivity(Op.GREATER_THAN, 12) < 0.001);
+	}
+	
+	/**
+	 * Make sure that LESS_THAN binning does something reasonable.
+	 */
+	@Test public void opLessThanTest() {
+		IntHistogram h = new IntHistogram(10, 1, 10);
+		
+		// Set some values
+		h.addValue(3);
+		h.addValue(3);
+		h.addValue(3);
+		h.addValue(1);
+		h.addValue(10);
+		
+		// Be conservative in case of alternate implementations
+		Assert.assertTrue(h.estimateSelectivity(Op.LESS_THAN, -1) < 0.001);
+		Assert.assertTrue(h.estimateSelectivity(Op.LESS_THAN, 2) < 0.4);
+		Assert.assertTrue(h.estimateSelectivity(Op.LESS_THAN, 4) > 0.6);
+		Assert.assertTrue(h.estimateSelectivity(Op.LESS_THAN, 12) > 0.999);
+	}
+	
+	/**
+	 * Make sure that GREATER_THAN_OR_EQ binning does something reasonable.
+	 */
+	@Test public void opGreaterThanOrEqualsTest() {
+		IntHistogram h = new IntHistogram(10, 1, 10);
+		
+		// Set some values
+		h.addValue(3);
+		h.addValue(3);
+		h.addValue(3);
+		h.addValue(1);
+		h.addValue(10);
+		
+		// Be conservative in case of alternate implementations
+		Assert.assertTrue(h.estimateSelectivity(Op.GREATER_THAN_OR_EQ, -1) > 0.999);
+		Assert.assertTrue(h.estimateSelectivity(Op.GREATER_THAN_OR_EQ, 2) > 0.6);
+		Assert.assertTrue(h.estimateSelectivity(Op.GREATER_THAN_OR_EQ, 3) > 0.45);
+		Assert.assertTrue(h.estimateSelectivity(Op.GREATER_THAN_OR_EQ, 4) < 0.5);
+		Assert.assertTrue(h.estimateSelectivity(Op.GREATER_THAN_OR_EQ, 12) < 0.001);
+	}
+	
+	/**
+	 * Make sure that LESS_THAN_OR_EQ binning does something reasonable.
+	 */
+	@Test public void opLessThanOrEqualsTest() {
+		IntHistogram h = new IntHistogram(10, 1, 10);
+		
+		// Set some values
+		h.addValue(3);
+		h.addValue(3);
+		h.addValue(3);
+		h.addValue(1);
+		h.addValue(10);
+		
+		// Be conservative in case of alternate implementations
+		Assert.assertTrue(h.estimateSelectivity(Op.LESS_THAN_OR_EQ, -1) < 0.001);
+		Assert.assertTrue(h.estimateSelectivity(Op.LESS_THAN_OR_EQ, 2) < 0.4);
+		Assert.assertTrue(h.estimateSelectivity(Op.LESS_THAN_OR_EQ, 3) > 0.45);
+		Assert.assertTrue(h.estimateSelectivity(Op.LESS_THAN_OR_EQ, 4) > 0.6);
+		Assert.assertTrue(h.estimateSelectivity(Op.LESS_THAN_OR_EQ, 12) > 0.999);
+	}
+	
+	/**
+	 * Make sure that equality binning does something reasonable.
+	 */
+	@Test public void opNotEqualsTest() {
+		IntHistogram h = new IntHistogram(10, 1, 10);
+		
+		// Set some values
+		h.addValue(3);
+		h.addValue(3);
+		h.addValue(3);
+		
+		// Be conservative in case of alternate implementations
+		Assert.assertTrue(h.estimateSelectivity(Op.NOT_EQUALS, 3) < 0.001);
+		Assert.assertTrue(h.estimateSelectivity(Op.NOT_EQUALS, 8) > 0.01);
+	}
+}
diff -ruN lab1/test/simpledb/IntegerAggregatorTest.java lab3/test/simpledb/IntegerAggregatorTest.java
--- lab1/test/simpledb/IntegerAggregatorTest.java	1969-12-31 18:00:00.000000000 -0600
+++ lab3/test/simpledb/IntegerAggregatorTest.java	2016-11-02 22:06:55.000000000 -0500
@@ -0,0 +1,188 @@
+package simpledb;
+
+import static org.junit.Assert.assertEquals;
+
+import java.util.NoSuchElementException;
+
+import junit.framework.JUnit4TestAdapter;
+
+import org.junit.Before;
+import org.junit.Test;
+
+import simpledb.systemtest.SimpleDbTestBase;
+
+public class IntegerAggregatorTest extends SimpleDbTestBase {
+
+  int width1 = 2;
+  DbIterator scan1;
+  int[][] sum = null;
+  int[][] min = null;
+  int[][] max = null;
+  int[][] avg = null;
+
+  /**
+   * Initialize each unit test
+   */
+  @Before public void createTupleList() throws Exception {
+    this.scan1 = TestUtil.createTupleList(width1,
+        new int[] { 1, 2,
+                    1, 4,
+                    1, 6,
+                    3, 2,
+                    3, 4,
+                    3, 6,
+                    5, 7 });
+
+    // verify how the results progress after a few merges
+    this.sum = new int[][] {
+      { 1, 2 },
+      { 1, 6 },
+      { 1, 12 },
+      { 1, 12, 3, 2 }
+    };
+
+    this.min = new int[][] {
+      { 1, 2 },
+      { 1, 2 },
+      { 1, 2 },
+      { 1, 2, 3, 2 }
+    };
+
+    this.max = new int[][] {
+      { 1, 2 },
+      { 1, 4 },
+      { 1, 6 },
+      { 1, 6, 3, 2 }
+    };
+
+    this.avg = new int[][] {
+      { 1, 2 },
+      { 1, 3 },
+      { 1, 4 },
+      { 1, 4, 3, 2 }
+    };
+  }
+
+  /**
+   * Test IntegerAggregator.mergeTupleIntoGroup() and iterator() over a sum
+   */
+  @Test public void mergeSum() throws Exception {
+    scan1.open();
+    IntegerAggregator agg = new IntegerAggregator(0, Type.INT_TYPE, 1, Aggregator.Op.SUM);
+    
+    for (int[] step : sum) {
+      agg.mergeTupleIntoGroup(scan1.next());
+      DbIterator it = agg.iterator();
+      it.open();
+      TestUtil.matchAllTuples(TestUtil.createTupleList(width1, step), it);
+    }
+  }
+
+  /**
+   * Test IntegerAggregator.mergeTupleIntoGroup() and iterator() over a min
+   */
+  @Test public void mergeMin() throws Exception {
+    scan1.open();
+    IntegerAggregator agg = new IntegerAggregator(0,Type.INT_TYPE,  1, Aggregator.Op.MIN);
+
+    DbIterator it;
+    for (int[] step : min) {
+      agg.mergeTupleIntoGroup(scan1.next());
+      it = agg.iterator();
+      it.open();
+      TestUtil.matchAllTuples(TestUtil.createTupleList(width1, step), it);
+    }
+  }
+
+  /**
+   * Test IntegerAggregator.mergeTupleIntoGroup() and iterator() over a max
+   */
+  @Test public void mergeMax() throws Exception {
+    scan1.open();
+    IntegerAggregator agg = new IntegerAggregator(0, Type.INT_TYPE, 1, Aggregator.Op.MAX);
+
+    DbIterator it;
+    for (int[] step : max) {
+      agg.mergeTupleIntoGroup(scan1.next());
+      it = agg.iterator();
+      it.open();
+      TestUtil.matchAllTuples(TestUtil.createTupleList(width1, step), it);
+    }
+  }
+
+  /**
+   * Test IntegerAggregator.mergeTupleIntoGroup() and iterator() over an avg
+   */
+  @Test public void mergeAvg() throws Exception {
+    scan1.open();
+    IntegerAggregator agg = new IntegerAggregator(0, Type.INT_TYPE, 1, Aggregator.Op.AVG);
+
+    DbIterator it;
+    for (int[] step : avg) {
+      agg.mergeTupleIntoGroup(scan1.next());
+      it = agg.iterator();
+      it.open();
+      TestUtil.matchAllTuples(TestUtil.createTupleList(width1, step), it);
+    }
+  }
+
+  /**
+   * Test IntegerAggregator.iterator() for DbIterator behaviour
+   */
+  @Test public void testIterator() throws Exception {
+    // first, populate the aggregator via sum over scan1
+    scan1.open();
+    IntegerAggregator agg = new IntegerAggregator(0, Type.INT_TYPE, 1, Aggregator.Op.SUM);
+    try {
+      while (true)
+        agg.mergeTupleIntoGroup(scan1.next());
+    } catch (NoSuchElementException e) {
+      // explicitly ignored
+    }
+
+    DbIterator it = agg.iterator();
+    it.open();
+
+    // verify it has three elements
+    int count = 0;
+    try {
+      while (true) {
+        it.next();
+        count++;
+      }
+    } catch (NoSuchElementException e) {
+      // explicitly ignored
+    }
+    assertEquals(3, count);
+
+    // rewind and try again
+    it.rewind();
+    count = 0;
+    try {
+      while (true) {
+        it.next();
+        count++;
+      }
+    } catch (NoSuchElementException e) {
+      // explicitly ignored
+    }
+    assertEquals(3, count);
+
+    // close it and check that we don't get anything
+    it.close();
+    try {
+      it.next();
+      throw new Exception("IntegerAggregator iterator yielded tuple after close");
+    } catch (Exception e) {
+      // explicitly ignored
+    }
+  }
+
+  /**
+   * JUnit suite target
+   */
+  public static junit.framework.Test suite() {
+    return new JUnit4TestAdapter(IntegerAggregatorTest.class);
+  }
+}
+
diff -ruN lab1/test/simpledb/JoinOptimizerTest.java lab3/test/simpledb/JoinOptimizerTest.java
--- lab1/test/simpledb/JoinOptimizerTest.java	1969-12-31 18:00:00.000000000 -0600
+++ lab3/test/simpledb/JoinOptimizerTest.java	2016-11-02 22:06:55.000000000 -0500
@@ -0,0 +1,624 @@
+package simpledb;
+
+import java.io.File;
+import java.io.IOException;
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.HashMap;
+import java.util.Vector;
+
+import org.junit.Assert;
+import org.junit.Before;
+import org.junit.Test;
+
+import simpledb.systemtest.SimpleDbTestBase;
+import simpledb.systemtest.SystemTestUtil;
+
+public class JoinOptimizerTest extends SimpleDbTestBase {
+
+    /**
+     * Given a matrix of tuples from SystemTestUtil.createRandomHeapFile, create
+     * an identical HeapFile table
+     * 
+     * @param tuples
+     *            Tuples to create a HeapFile from
+     * @param columns
+     *            Each entry in tuples[] must have
+     *            "columns == tuples.get(i).size()"
+     * @param colPrefix
+     *            String to prefix to the column names (the columns are named
+     *            after their column number by default)
+     * @return a new HeapFile containing the specified tuples
+     * @throws IOException
+     *             if a temporary file can't be created to hand to HeapFile to
+     *             open and read its data
+     */
+    public static HeapFile createDuplicateHeapFile(
+            ArrayList<ArrayList<Integer>> tuples, int columns, String colPrefix)
+            throws IOException {
+        File temp = File.createTempFile("table", ".dat");
+        temp.deleteOnExit();
+        HeapFileEncoder.convert(tuples, temp, BufferPool.getPageSize(), columns);
+        return Utility.openHeapFile(columns, colPrefix, temp);
+    }
+
+    ArrayList<ArrayList<Integer>> tuples1;
+    HeapFile f1;
+    String tableName1;
+    int tableId1;
+    TableStats stats1;
+
+    ArrayList<ArrayList<Integer>> tuples2;
+    HeapFile f2;
+    String tableName2;
+    int tableId2;
+    TableStats stats2;
+
+    /**
+     * Set up the test; create some initial tables to work with
+     */
+    @Before
+    public void setUp() throws Exception {
+        super.setUp();
+        // Create some sample tables to work with
+        this.tuples1 = new ArrayList<ArrayList<Integer>>();
+        this.f1 = SystemTestUtil.createRandomHeapFile(10, 1000, 20, null,
+                tuples1, "c");
+
+        this.tableName1 = "TA";
+        Database.getCatalog().addTable(f1, tableName1);
+        this.tableId1 = Database.getCatalog().getTableId(tableName1);
+        System.out.println("tableId1: " + tableId1);
+
+        stats1 = new TableStats(tableId1, 19);
+        TableStats.setTableStats(tableName1, stats1);
+
+        this.tuples2 = new ArrayList<ArrayList<Integer>>();
+        this.f2 = SystemTestUtil.createRandomHeapFile(10, 10000, 20, null,
+                tuples2, "c");
+
+        this.tableName2 = "TB";
+        Database.getCatalog().addTable(f2, tableName2);
+        this.tableId2 = Database.getCatalog().getTableId(tableName2);
+        System.out.println("tableId2: " + tableId2);
+
+        stats2 = new TableStats(tableId2, 19);
+
+        TableStats.setTableStats(tableName2, stats2);
+    }
+
+    private double[] getRandomJoinCosts(JoinOptimizer jo, LogicalJoinNode js,
+            int[] card1s, int[] card2s, double[] cost1s, double[] cost2s) {
+        double[] ret = new double[card1s.length];
+        for (int i = 0; i < card1s.length; ++i) {
+            ret[i] = jo.estimateJoinCost(js, card1s[i], card2s[i], cost1s[i],
+                    cost2s[i]);
+            // assert that he join cost is no less than the total cost of
+            // scanning two tables
+            Assert.assertTrue(ret[i] > cost1s[i] + cost2s[i]);
+        }
+        return ret;
+    }
+
+    /**
+     * Verify that the estimated join costs from estimateJoinCost() are
+     * reasonable we check various order requirements for the output of
+     * estimateJoinCost.
+     */
+    @Test
+    public void estimateJoinCostTest() throws ParsingException {
+        // It's hard to narrow these down much at all, because students
+        // may have implemented custom join algorithms.
+        // So, just make sure the orders of the return values make sense.
+
+        TransactionId tid = new TransactionId();
+        JoinOptimizer jo;
+        Parser p = new Parser();
+        jo = new JoinOptimizer(p.generateLogicalPlan(tid, "SELECT * FROM "
+                + tableName1 + " t1, " + tableName2
+                + " t2 WHERE t1.c1 = t2.c2;"), new Vector<LogicalJoinNode>());
+        // 1 join 2
+        LogicalJoinNode equalsJoinNode = new LogicalJoinNode(tableName1,
+                tableName2, Integer.toString(1), Integer.toString(2),
+                Predicate.Op.EQUALS);
+        checkJoinEstimateCosts(jo, equalsJoinNode);
+        // 2 join 1
+        jo = new JoinOptimizer(p.generateLogicalPlan(tid, "SELECT * FROM "
+                + tableName1 + " t1, " + tableName2
+                + " t2 WHERE t1.c1 = t2.c2;"), new Vector<LogicalJoinNode>());
+        equalsJoinNode = new LogicalJoinNode(tableName2, tableName1,
+                Integer.toString(2), Integer.toString(1), Predicate.Op.EQUALS);
+        checkJoinEstimateCosts(jo, equalsJoinNode);
+        // 1 join 1
+        jo = new JoinOptimizer(p.generateLogicalPlan(tid, "SELECT * FROM "
+                + tableName1 + " t1, " + tableName1
+                + " t2 WHERE t1.c3 = t2.c4;"), new Vector<LogicalJoinNode>());
+        equalsJoinNode = new LogicalJoinNode(tableName1, tableName1,
+                Integer.toString(3), Integer.toString(4), Predicate.Op.EQUALS);
+        checkJoinEstimateCosts(jo, equalsJoinNode);
+        // 2 join 2
+        jo = new JoinOptimizer(p.generateLogicalPlan(tid, "SELECT * FROM "
+                + tableName2 + " t1, " + tableName2
+                + " t2 WHERE t1.c8 = t2.c7;"), new Vector<LogicalJoinNode>());
+        equalsJoinNode = new LogicalJoinNode(tableName2, tableName2,
+                Integer.toString(8), Integer.toString(7), Predicate.Op.EQUALS);
+        checkJoinEstimateCosts(jo, equalsJoinNode);
+    }
+
+    private void checkJoinEstimateCosts(JoinOptimizer jo,
+            LogicalJoinNode equalsJoinNode) {
+        int card1s[] = new int[20];
+        int card2s[] = new int[card1s.length];
+        double cost1s[] = new double[card1s.length];
+        double cost2s[] = new double[card1s.length];
+        Object[] ret;
+        // card1s linear others constant
+        for (int i = 0; i < card1s.length; ++i) {
+            card1s[i] = 3 * i + 1;
+            card2s[i] = 5;
+            cost1s[i] = cost2s[i] = 5.0;
+        }
+        double stats[] = getRandomJoinCosts(jo, equalsJoinNode, card1s, card2s,
+                cost1s, cost2s);
+        ret = SystemTestUtil.checkLinear(stats);
+        Assert.assertEquals(Boolean.TRUE, ret[0]);
+        // card2s linear others constant
+        for (int i = 0; i < card1s.length; ++i) {
+            card1s[i] = 4;
+            card2s[i] = 3 * i + 1;
+            cost1s[i] = cost2s[i] = 5.0;
+        }
+        stats = getRandomJoinCosts(jo, equalsJoinNode, card1s, card2s, cost1s,
+                cost2s);
+        ret = SystemTestUtil.checkLinear(stats);
+        Assert.assertEquals(Boolean.TRUE, ret[0]);
+        // cost1s linear others constant
+        for (int i = 0; i < card1s.length; ++i) {
+            card1s[i] = card2s[i] = 7;
+            cost1s[i] = 5.0 * (i + 1);
+            cost2s[i] = 3.0;
+        }
+        stats = getRandomJoinCosts(jo, equalsJoinNode, card1s, card2s, cost1s,
+                cost2s);
+        ret = SystemTestUtil.checkLinear(stats);
+        Assert.assertEquals(Boolean.TRUE, ret[0]);
+        // cost2s linear others constant
+        for (int i = 0; i < card1s.length; ++i) {
+            card1s[i] = card2s[i] = 9;
+            cost1s[i] = 5.0;
+            cost2s[i] = 3.0 * (i + 1);
+        }
+        stats = getRandomJoinCosts(jo, equalsJoinNode, card1s, card2s, cost1s,
+                cost2s);
+        ret = SystemTestUtil.checkLinear(stats);
+        Assert.assertEquals(Boolean.TRUE, ret[0]);
+        // everything linear
+        for (int i = 0; i < card1s.length; ++i) {
+            card1s[i] = 2 * (i + 1);
+            card2s[i] = 9 * i + 1;
+            cost1s[i] = 5.0 * i + 2;
+            cost2s[i] = 3.0 * i + 1;
+        }
+        stats = getRandomJoinCosts(jo, equalsJoinNode, card1s, card2s, cost1s,
+                cost2s);
+        ret = SystemTestUtil.checkQuadratic(stats);
+        Assert.assertEquals(Boolean.TRUE, ret[0]);
+    }
+
+    /**
+     * Verify that the join cardinalities produced by estimateJoinCardinality()
+     * are reasonable
+     */
+    @Test
+    public void estimateJoinCardinality() throws ParsingException {
+        TransactionId tid = new TransactionId();
+        Parser p = new Parser();
+        JoinOptimizer j = new JoinOptimizer(p.generateLogicalPlan(tid,
+                "SELECT * FROM " + tableName2 + " t1, " + tableName2
+                        + " t2 WHERE t1.c8 = t2.c7;"),
+                new Vector<LogicalJoinNode>());
+
+        double cardinality;
+
+        /*
+         * Disable these tests as almost any answer could be defensible
+         * 
+         * cardinality = j.estimateJoinCardinality(new
+         * LogicalJoinNode(tableName1, tableName2, Integer.toString(3),
+         * Integer.toString(4), Predicate.Op.EQUALS),
+         * stats1.estimateTableCardinality(0.8),
+         * stats2.estimateTableCardinality(0.2), false, false);
+         * 
+         * // We don't specify in what way statistics should be used to improve
+         * these estimates. // So, just require that they not be entirely
+         * unreasonable. Assert.assertTrue(cardinality > 800);
+         * Assert.assertTrue(cardinality <= 2000);
+         * 
+         * cardinality = j.estimateJoinCardinality(new
+         * LogicalJoinNode(tableName2, tableName1, Integer.toString(3),
+         * Integer.toString(4), Predicate.Op.EQUALS),
+         * stats2.estimateTableCardinality(0.2),
+         * stats1.estimateTableCardinality(0.8), false, false);
+         * 
+         * Assert.assertTrue(cardinality > 800); Assert.assertTrue(cardinality
+         * <= 2000);
+         */
+
+        cardinality = j.estimateJoinCardinality(new LogicalJoinNode("t1", "t2",
+                "c" + Integer.toString(3), "c" + Integer.toString(4),
+                Predicate.Op.EQUALS), stats1.estimateTableCardinality(0.8),
+                stats2.estimateTableCardinality(0.2), true, false, TableStats
+                        .getStatsMap());
+
+        // On a primary key, the cardinality is well-defined and exact (should
+        // be size of fk table)
+        // BUT we had a bug in lab 4 in 2009 that suggested should be size of pk
+        // table, so accept either
+        Assert.assertTrue(cardinality == 800 || cardinality == 2000);
+
+        cardinality = j.estimateJoinCardinality(new LogicalJoinNode("t1", "t2",
+                "c" + Integer.toString(3), "c" + Integer.toString(4),
+                Predicate.Op.EQUALS), stats1.estimateTableCardinality(0.8),
+                stats2.estimateTableCardinality(0.2), false, true, TableStats
+                        .getStatsMap());
+
+        Assert.assertTrue(cardinality == 800 || cardinality == 2000);
+    }
+
+    /**
+     * Determine whether the orderJoins implementation is doing a reasonable job
+     * of ordering joins, and not taking an unreasonable amount of time to do so
+     */
+    @Test
+    public void orderJoinsTest() throws ParsingException, IOException,
+            DbException, TransactionAbortedException {
+        // This test is intended to approximate the join described in the
+        // "Query Planning" section of 2009 Quiz 1,
+        // though with some minor variation due to limitations in simpledb
+        // and to only test your integer-heuristic code rather than
+        // string-heuristic code.
+
+        final int IO_COST = 101;
+
+        // Create a whole bunch of variables that we're going to use
+        TransactionId tid = new TransactionId();
+        JoinOptimizer j;
+        Vector<LogicalJoinNode> result;
+        Vector<LogicalJoinNode> nodes = new Vector<LogicalJoinNode>();
+        HashMap<String, TableStats> stats = new HashMap<String, TableStats>();
+        HashMap<String, Double> filterSelectivities = new HashMap<String, Double>();
+
+        // Create all of the tables, and add them to the catalog
+        ArrayList<ArrayList<Integer>> empTuples = new ArrayList<ArrayList<Integer>>();
+        HeapFile emp = SystemTestUtil.createRandomHeapFile(6, 100000, null,
+                empTuples, "c");
+        Database.getCatalog().addTable(emp, "emp");
+
+        ArrayList<ArrayList<Integer>> deptTuples = new ArrayList<ArrayList<Integer>>();
+        HeapFile dept = SystemTestUtil.createRandomHeapFile(3, 1000, null,
+                deptTuples, "c");
+        Database.getCatalog().addTable(dept, "dept");
+
+        ArrayList<ArrayList<Integer>> hobbyTuples = new ArrayList<ArrayList<Integer>>();
+        HeapFile hobby = SystemTestUtil.createRandomHeapFile(6, 1000, null,
+                hobbyTuples, "c");
+        Database.getCatalog().addTable(hobby, "hobby");
+
+        ArrayList<ArrayList<Integer>> hobbiesTuples = new ArrayList<ArrayList<Integer>>();
+        HeapFile hobbies = SystemTestUtil.createRandomHeapFile(2, 200000, null,
+                hobbiesTuples, "c");
+        Database.getCatalog().addTable(hobbies, "hobbies");
+
+        // Get TableStats objects for each of the tables that we just generated.
+        stats.put("emp", new TableStats(
+                Database.getCatalog().getTableId("emp"), IO_COST));
+        stats.put("dept",
+                new TableStats(Database.getCatalog().getTableId("dept"),
+                        IO_COST));
+        stats.put("hobby",
+                new TableStats(Database.getCatalog().getTableId("hobby"),
+                        IO_COST));
+        stats.put("hobbies",
+                new TableStats(Database.getCatalog().getTableId("hobbies"),
+                        IO_COST));
+
+        // Note that your code shouldn't re-compute selectivities.
+        // If you get statistics numbers, even if they're wrong (which they are
+        // here
+        // because the data is random), you should use the numbers that you are
+        // given.
+        // Re-computing them at runtime is generally too expensive for complex
+        // queries.
+        filterSelectivities.put("emp", 0.1);
+        filterSelectivities.put("dept", 1.0);
+        filterSelectivities.put("hobby", 1.0);
+        filterSelectivities.put("hobbies", 1.0);
+
+        // Note that there's no particular guarantee that the LogicalJoinNode's
+        // will be in
+        // the same order as they were written in the query.
+        // They just have to be in an order that uses the same operators and
+        // semantically means the same thing.
+        nodes.add(new LogicalJoinNode("hobbies", "hobby", "c1", "c0",
+                Predicate.Op.EQUALS));
+        nodes.add(new LogicalJoinNode("emp", "dept", "c1", "c0",
+                Predicate.Op.EQUALS));
+        nodes.add(new LogicalJoinNode("emp", "hobbies", "c2", "c0",
+                Predicate.Op.EQUALS));
+        Parser p = new Parser();
+        j = new JoinOptimizer(
+                p.generateLogicalPlan(
+                        tid,
+                        "SELECT * FROM emp,dept,hobbies,hobby WHERE emp.c1 = dept.c0 AND hobbies.c0 = emp.c2 AND hobbies.c1 = hobby.c0 AND e.c3 < 1000;"),
+                nodes);
+
+        // Set the last boolean here to 'true' in order to have orderJoins()
+        // print out its logic
+        result = j.orderJoins(stats, filterSelectivities, false);
+
+        // There are only three join nodes; if you're only re-ordering the join
+        // nodes,
+        // you shouldn't end up with more than you started with
+        Assert.assertEquals(result.size(), nodes.size());
+
+        // There were a number of ways to do the query in this quiz, reasonably
+        // well;
+        // we're just doing a heuristics-based optimizer, so, only ignore the
+        // really
+        // bad case where "hobbies" is the outermost node in the left-deep tree.
+        Assert.assertFalse(result.get(0).t1Alias == "hobbies");
+
+        // Also check for some of the other silly cases, like forcing a cross
+        // join by
+        // "hobbies" only being at the two extremes, or "hobbies" being the
+        // outermost table.
+        Assert.assertFalse(result.get(2).t2Alias == "hobbies"
+                && (result.get(0).t1Alias == "hobbies" || result.get(0).t2Alias == "hobbies"));
+    }
+
+    /**
+     * Test a much-larger join ordering, to confirm that it executes in a
+     * reasonable amount of time
+     */
+    @Test(timeout = 60000)
+    public void bigOrderJoinsTest() throws IOException, DbException,
+            TransactionAbortedException, ParsingException {
+        final int IO_COST = 103;
+
+        JoinOptimizer j;
+        HashMap<String, TableStats> stats = new HashMap<String, TableStats>();
+        Vector<LogicalJoinNode> result;
+        Vector<LogicalJoinNode> nodes = new Vector<LogicalJoinNode>();
+        HashMap<String, Double> filterSelectivities = new HashMap<String, Double>();
+        TransactionId tid = new TransactionId();
+
+        // Create a large set of tables, and add tuples to the tables
+        ArrayList<ArrayList<Integer>> smallHeapFileTuples = new ArrayList<ArrayList<Integer>>();
+        HeapFile smallHeapFileA = SystemTestUtil.createRandomHeapFile(2, 100,
+                Integer.MAX_VALUE, null, smallHeapFileTuples, "c");
+        HeapFile smallHeapFileB = createDuplicateHeapFile(smallHeapFileTuples,
+                2, "c");
+        HeapFile smallHeapFileC = createDuplicateHeapFile(smallHeapFileTuples,
+                2, "c");
+        HeapFile smallHeapFileD = createDuplicateHeapFile(smallHeapFileTuples,
+                2, "c");
+        HeapFile smallHeapFileE = createDuplicateHeapFile(smallHeapFileTuples,
+                2, "c");
+        HeapFile smallHeapFileF = createDuplicateHeapFile(smallHeapFileTuples,
+                2, "c");
+        HeapFile smallHeapFileG = createDuplicateHeapFile(smallHeapFileTuples,
+                2, "c");
+        HeapFile smallHeapFileH = createDuplicateHeapFile(smallHeapFileTuples,
+                2, "c");
+        HeapFile smallHeapFileI = createDuplicateHeapFile(smallHeapFileTuples,
+                2, "c");
+        HeapFile smallHeapFileJ = createDuplicateHeapFile(smallHeapFileTuples,
+                2, "c");
+        HeapFile smallHeapFileK = createDuplicateHeapFile(smallHeapFileTuples,
+                2, "c");
+        HeapFile smallHeapFileL = createDuplicateHeapFile(smallHeapFileTuples,
+                2, "c");
+        HeapFile smallHeapFileM = createDuplicateHeapFile(smallHeapFileTuples,
+                2, "c");
+        HeapFile smallHeapFileN = createDuplicateHeapFile(smallHeapFileTuples,
+                2, "c");
+
+        ArrayList<ArrayList<Integer>> bigHeapFileTuples = new ArrayList<ArrayList<Integer>>();
+        for (int i = 0; i < 100000; i++) {
+            bigHeapFileTuples.add(smallHeapFileTuples.get(i % 100));
+        }
+        HeapFile bigHeapFile = createDuplicateHeapFile(bigHeapFileTuples, 2,
+                "c");
+        Database.getCatalog().addTable(bigHeapFile, "bigTable");
+
+        // Add the tables to the database
+        Database.getCatalog().addTable(bigHeapFile, "bigTable");
+        Database.getCatalog().addTable(smallHeapFileA, "a");
+        Database.getCatalog().addTable(smallHeapFileB, "b");
+        Database.getCatalog().addTable(smallHeapFileC, "c");
+        Database.getCatalog().addTable(smallHeapFileD, "d");
+        Database.getCatalog().addTable(smallHeapFileE, "e");
+        Database.getCatalog().addTable(smallHeapFileF, "f");
+        Database.getCatalog().addTable(smallHeapFileG, "g");
+        Database.getCatalog().addTable(smallHeapFileH, "h");
+        Database.getCatalog().addTable(smallHeapFileI, "i");
+        Database.getCatalog().addTable(smallHeapFileJ, "j");
+        Database.getCatalog().addTable(smallHeapFileK, "k");
+        Database.getCatalog().addTable(smallHeapFileL, "l");
+        Database.getCatalog().addTable(smallHeapFileM, "m");
+        Database.getCatalog().addTable(smallHeapFileN, "n");
+
+        // Come up with join statistics for the tables
+        stats.put("bigTable", new TableStats(bigHeapFile.getId(), IO_COST));
+        stats.put("a", new TableStats(smallHeapFileA.getId(), IO_COST));
+        stats.put("b", new TableStats(smallHeapFileB.getId(), IO_COST));
+        stats.put("c", new TableStats(smallHeapFileC.getId(), IO_COST));
+        stats.put("d", new TableStats(smallHeapFileD.getId(), IO_COST));
+        stats.put("e", new TableStats(smallHeapFileE.getId(), IO_COST));
+        stats.put("f", new TableStats(smallHeapFileF.getId(), IO_COST));
+        stats.put("g", new TableStats(smallHeapFileG.getId(), IO_COST));
+        stats.put("h", new TableStats(smallHeapFileG.getId(), IO_COST));
+        stats.put("i", new TableStats(smallHeapFileG.getId(), IO_COST));
+        stats.put("j", new TableStats(smallHeapFileG.getId(), IO_COST));
+        stats.put("k", new TableStats(smallHeapFileG.getId(), IO_COST));
+        stats.put("l", new TableStats(smallHeapFileG.getId(), IO_COST));
+        stats.put("m", new TableStats(smallHeapFileG.getId(), IO_COST));
+        stats.put("n", new TableStats(smallHeapFileG.getId(), IO_COST));
+
+        // Put in some filter selectivities
+        filterSelectivities.put("bigTable", 1.0);
+        filterSelectivities.put("a", 1.0);
+        filterSelectivities.put("b", 1.0);
+        filterSelectivities.put("c", 1.0);
+        filterSelectivities.put("d", 1.0);
+        filterSelectivities.put("e", 1.0);
+        filterSelectivities.put("f", 1.0);
+        filterSelectivities.put("g", 1.0);
+        filterSelectivities.put("h", 1.0);
+        filterSelectivities.put("i", 1.0);
+        filterSelectivities.put("j", 1.0);
+        filterSelectivities.put("k", 1.0);
+        filterSelectivities.put("l", 1.0);
+        filterSelectivities.put("m", 1.0);
+        filterSelectivities.put("n", 1.0);
+
+        // Add the nodes to a collection for a query plan
+        nodes.add(new LogicalJoinNode("a", "b", "c1", "c1", Predicate.Op.EQUALS));
+        nodes.add(new LogicalJoinNode("b", "c", "c0", "c0", Predicate.Op.EQUALS));
+        nodes.add(new LogicalJoinNode("c", "d", "c1", "c1", Predicate.Op.EQUALS));
+        nodes.add(new LogicalJoinNode("d", "e", "c0", "c0", Predicate.Op.EQUALS));
+        nodes.add(new LogicalJoinNode("e", "f", "c1", "c1", Predicate.Op.EQUALS));
+        nodes.add(new LogicalJoinNode("f", "g", "c0", "c0", Predicate.Op.EQUALS));
+        nodes.add(new LogicalJoinNode("g", "h", "c1", "c1", Predicate.Op.EQUALS));
+        nodes.add(new LogicalJoinNode("h", "i", "c0", "c0", Predicate.Op.EQUALS));
+        nodes.add(new LogicalJoinNode("i", "j", "c1", "c1", Predicate.Op.EQUALS));
+        nodes.add(new LogicalJoinNode("j", "k", "c0", "c0", Predicate.Op.EQUALS));
+        nodes.add(new LogicalJoinNode("k", "l", "c1", "c1", Predicate.Op.EQUALS));
+        nodes.add(new LogicalJoinNode("l", "m", "c0", "c0", Predicate.Op.EQUALS));
+        nodes.add(new LogicalJoinNode("m", "n", "c1", "c1", Predicate.Op.EQUALS));
+        nodes.add(new LogicalJoinNode("n", "bigTable", "c0", "c0",
+                Predicate.Op.EQUALS));
+
+        // Make sure we don't give the nodes to the optimizer in a nice order
+        Collections.shuffle(nodes);
+        Parser p = new Parser();
+        j = new JoinOptimizer(
+                p.generateLogicalPlan(
+                        tid,
+                        "SELECT COUNT(a.c0) FROM bigTable, a, b, c, d, e, f, g, h, i, j, k, l, m, n WHERE bigTable.c0 = n.c0 AND a.c1 = b.c1 AND b.c0 = c.c0 AND c.c1 = d.c1 AND d.c0 = e.c0 AND e.c1 = f.c1 AND f.c0 = g.c0 AND g.c1 = h.c1 AND h.c0 = i.c0 AND i.c1 = j.c1 AND j.c0 = k.c0 AND k.c1 = l.c1 AND l.c0 = m.c0 AND m.c1 = n.c1;"),
+                nodes);
+
+        // Set the last boolean here to 'true' in order to have orderJoins()
+        // print out its logic
+        result = j.orderJoins(stats, filterSelectivities, false);
+
+        // If you're only re-ordering the join nodes,
+        // you shouldn't end up with more than you started with
+        Assert.assertEquals(result.size(), nodes.size());
+
+        // Make sure that "bigTable" is the outermost table in the join
+        Assert.assertEquals(result.get(result.size() - 1).t2Alias, "bigTable");
+    }
+
+    /**
+     * Test a join ordering with an inequality, to make sure the inequality gets
+     * put as the innermost join
+     */
+    @Test
+    public void nonequalityOrderJoinsTest() throws IOException, DbException,
+            TransactionAbortedException, ParsingException {
+        final int IO_COST = 103;
+
+        JoinOptimizer j;
+        HashMap<String, TableStats> stats = new HashMap<String, TableStats>();
+        Vector<LogicalJoinNode> result;
+        Vector<LogicalJoinNode> nodes = new Vector<LogicalJoinNode>();
+        HashMap<String, Double> filterSelectivities = new HashMap<String, Double>();
+        TransactionId tid = new TransactionId();
+
+        // Create a large set of tables, and add tuples to the tables
+        ArrayList<ArrayList<Integer>> smallHeapFileTuples = new ArrayList<ArrayList<Integer>>();
+        HeapFile smallHeapFileA = SystemTestUtil.createRandomHeapFile(2, 100,
+                Integer.MAX_VALUE, null, smallHeapFileTuples, "c");
+        HeapFile smallHeapFileB = createDuplicateHeapFile(smallHeapFileTuples,
+                2, "c");
+        HeapFile smallHeapFileC = createDuplicateHeapFile(smallHeapFileTuples,
+                2, "c");
+        HeapFile smallHeapFileD = createDuplicateHeapFile(smallHeapFileTuples,
+                2, "c");
+        HeapFile smallHeapFileE = createDuplicateHeapFile(smallHeapFileTuples,
+                2, "c");
+        HeapFile smallHeapFileF = createDuplicateHeapFile(smallHeapFileTuples,
+                2, "c");
+        HeapFile smallHeapFileG = createDuplicateHeapFile(smallHeapFileTuples,
+                2, "c");
+        HeapFile smallHeapFileH = createDuplicateHeapFile(smallHeapFileTuples,
+                2, "c");
+        HeapFile smallHeapFileI = createDuplicateHeapFile(smallHeapFileTuples,
+                2, "c");
+
+        // Add the tables to the database
+        Database.getCatalog().addTable(smallHeapFileA, "a");
+        Database.getCatalog().addTable(smallHeapFileB, "b");
+        Database.getCatalog().addTable(smallHeapFileC, "c");
+        Database.getCatalog().addTable(smallHeapFileD, "d");
+        Database.getCatalog().addTable(smallHeapFileE, "e");
+        Database.getCatalog().addTable(smallHeapFileF, "f");
+        Database.getCatalog().addTable(smallHeapFileG, "g");
+        Database.getCatalog().addTable(smallHeapFileH, "h");
+        Database.getCatalog().addTable(smallHeapFileI, "i");
+
+        // Come up with join statistics for the tables
+        stats.put("a", new TableStats(smallHeapFileA.getId(), IO_COST));
+        stats.put("b", new TableStats(smallHeapFileB.getId(), IO_COST));
+        stats.put("c", new TableStats(smallHeapFileC.getId(), IO_COST));
+        stats.put("d", new TableStats(smallHeapFileD.getId(), IO_COST));
+        stats.put("e", new TableStats(smallHeapFileE.getId(), IO_COST));
+        stats.put("f", new TableStats(smallHeapFileF.getId(), IO_COST));
+        stats.put("g", new TableStats(smallHeapFileG.getId(), IO_COST));
+        stats.put("h", new TableStats(smallHeapFileH.getId(), IO_COST));
+        stats.put("i", new TableStats(smallHeapFileI.getId(), IO_COST));
+
+        // Put in some filter selectivities
+        filterSelectivities.put("a", 1.0);
+        filterSelectivities.put("b", 1.0);
+        filterSelectivities.put("c", 1.0);
+        filterSelectivities.put("d", 1.0);
+        filterSelectivities.put("e", 1.0);
+        filterSelectivities.put("f", 1.0);
+        filterSelectivities.put("g", 1.0);
+        filterSelectivities.put("h", 1.0);
+        filterSelectivities.put("i", 1.0);
+
+        // Add the nodes to a collection for a query plan
+        nodes.add(new LogicalJoinNode("a", "b", "c1", "c1",
+                Predicate.Op.LESS_THAN));
+        nodes.add(new LogicalJoinNode("b", "c", "c0", "c0", Predicate.Op.EQUALS));
+        nodes.add(new LogicalJoinNode("c", "d", "c1", "c1", Predicate.Op.EQUALS));
+        nodes.add(new LogicalJoinNode("d", "e", "c0", "c0", Predicate.Op.EQUALS));
+        nodes.add(new LogicalJoinNode("e", "f", "c1", "c1", Predicate.Op.EQUALS));
+        nodes.add(new LogicalJoinNode("f", "g", "c0", "c0", Predicate.Op.EQUALS));
+        nodes.add(new LogicalJoinNode("g", "h", "c1", "c1", Predicate.Op.EQUALS));
+        nodes.add(new LogicalJoinNode("h", "i", "c0", "c0", Predicate.Op.EQUALS));
+
+        Parser p = new Parser();
+        // Run the optimizer; see what results we get back
+        j = new JoinOptimizer(
+                p.generateLogicalPlan(
+                        tid,
+                        "SELECT COUNT(a.c0) FROM a, b, c, d,e,f,g,h,i WHERE a.c1 < b.c1 AND b.c0 = c.c0 AND c.c1 = d.c1 AND d.c0 = e.c0 AND e.c1 = f.c1 AND f.c0 = g.c0 AND g.c1 = h.c1 AND h.c0 = i.c0;"),
+                nodes);
+
+        // Set the last boolean here to 'true' in order to have orderJoins()
+        // print out its logic
+        result = j.orderJoins(stats, filterSelectivities, false);
+
+        // If you're only re-ordering the join nodes,
+        // you shouldn't end up with more than you started with
+        Assert.assertEquals(result.size(), nodes.size());
+
+        // Make sure that "a" is the outermost table in the join
+        Assert.assertTrue(result.get(result.size() - 1).t2Alias.equals("a")
+                || result.get(result.size() - 1).t1Alias.equals("a"));
+    }
+}
diff -ruN lab1/test/simpledb/JoinPredicateTest.java lab3/test/simpledb/JoinPredicateTest.java
--- lab1/test/simpledb/JoinPredicateTest.java	1969-12-31 18:00:00.000000000 -0600
+++ lab3/test/simpledb/JoinPredicateTest.java	2016-11-02 22:06:55.000000000 -0500
@@ -0,0 +1,66 @@
+package simpledb;
+
+import org.junit.Test;
+
+import simpledb.systemtest.SimpleDbTestBase;
+import static org.junit.Assert.assertTrue;
+import static org.junit.Assert.assertFalse;
+import junit.framework.JUnit4TestAdapter;
+
+public class JoinPredicateTest extends SimpleDbTestBase {
+
+  /**
+   * Unit test for JoinPredicate.filter()
+   */
+  @Test public void filterVaryingVals() {
+    int[] vals = new int[] { -1, 0, 1 };
+
+    for (int i : vals) {
+      JoinPredicate p = new JoinPredicate(0,
+          Predicate.Op.EQUALS, 0);
+      assertFalse(p.filter(Utility.getHeapTuple(i), Utility.getHeapTuple(i - 1)));
+      assertTrue(p.filter(Utility.getHeapTuple(i), Utility.getHeapTuple(i)));
+      assertFalse(p.filter(Utility.getHeapTuple(i), Utility.getHeapTuple(i + 1)));
+    }
+
+    for (int i : vals) {
+      JoinPredicate p = new JoinPredicate(0,
+          Predicate.Op.GREATER_THAN, 0);
+      assertTrue(p.filter(Utility.getHeapTuple(i), Utility.getHeapTuple(i - 1)));
+      assertFalse(p.filter(Utility.getHeapTuple(i), Utility.getHeapTuple(i)));
+      assertFalse(p.filter(Utility.getHeapTuple(i), Utility.getHeapTuple(i + 1)));
+    }
+
+    for (int i : vals) {
+      JoinPredicate p = new JoinPredicate(0,
+          Predicate.Op.GREATER_THAN_OR_EQ, 0);
+      assertTrue(p.filter(Utility.getHeapTuple(i), Utility.getHeapTuple(i - 1)));
+      assertTrue(p.filter(Utility.getHeapTuple(i), Utility.getHeapTuple(i)));
+      assertFalse(p.filter(Utility.getHeapTuple(i), Utility.getHeapTuple(i + 1)));
+    }
+
+    for (int i : vals) {
+      JoinPredicate p = new JoinPredicate(0,
+          Predicate.Op.LESS_THAN, 0);
+      assertFalse(p.filter(Utility.getHeapTuple(i), Utility.getHeapTuple(i - 1)));
+      assertFalse(p.filter(Utility.getHeapTuple(i), Utility.getHeapTuple(i)));
+      assertTrue(p.filter(Utility.getHeapTuple(i), Utility.getHeapTuple(i + 1)));
+    }
+
+    for (int i : vals) {
+      JoinPredicate p = new JoinPredicate(0,
+          Predicate.Op.LESS_THAN_OR_EQ, 0);
+      assertFalse(p.filter(Utility.getHeapTuple(i), Utility.getHeapTuple(i - 1)));
+      assertTrue(p.filter(Utility.getHeapTuple(i), Utility.getHeapTuple(i)));
+      assertTrue(p.filter(Utility.getHeapTuple(i), Utility.getHeapTuple(i + 1)));
+    }
+  }
+
+  /**
+   * JUnit suite target
+   */
+  public static junit.framework.Test suite() {
+    return new JUnit4TestAdapter(JoinPredicateTest.class);
+  }
+}
+
diff -ruN lab1/test/simpledb/JoinTest.java lab3/test/simpledb/JoinTest.java
--- lab1/test/simpledb/JoinTest.java	1969-12-31 18:00:00.000000000 -0600
+++ lab3/test/simpledb/JoinTest.java	2016-11-02 22:06:55.000000000 -0500
@@ -0,0 +1,115 @@
+package simpledb;
+
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertNotNull;
+import static org.junit.Assert.assertTrue;
+import junit.framework.JUnit4TestAdapter;
+
+import org.junit.Before;
+import org.junit.Test;
+
+import simpledb.systemtest.SimpleDbTestBase;
+
+public class JoinTest extends SimpleDbTestBase {
+
+  int width1 = 2;
+  int width2 = 3;
+  DbIterator scan1;
+  DbIterator scan2;
+  DbIterator eqJoin;
+  DbIterator gtJoin;
+
+  /**
+   * Initialize each unit test
+   */
+  @Before public void createTupleLists() throws Exception {
+    this.scan1 = TestUtil.createTupleList(width1,
+        new int[] { 1, 2,
+                    3, 4,
+                    5, 6,
+                    7, 8 });
+    this.scan2 = TestUtil.createTupleList(width2,
+        new int[] { 1, 2, 3,
+                    2, 3, 4,
+                    3, 4, 5,
+                    4, 5, 6,
+                    5, 6, 7 });
+    this.eqJoin = TestUtil.createTupleList(width1 + width2,
+        new int[] { 1, 2, 1, 2, 3,
+                    3, 4, 3, 4, 5,
+                    5, 6, 5, 6, 7 });
+    this.gtJoin = TestUtil.createTupleList(width1 + width2,
+        new int[] {
+                    3, 4, 1, 2, 3, // 1, 2 < 3
+                    3, 4, 2, 3, 4,
+                    5, 6, 1, 2, 3, // 1, 2, 3, 4 < 5
+                    5, 6, 2, 3, 4,
+                    5, 6, 3, 4, 5,
+                    5, 6, 4, 5, 6,
+                    7, 8, 1, 2, 3, // 1, 2, 3, 4, 5 < 7
+                    7, 8, 2, 3, 4,
+                    7, 8, 3, 4, 5,
+                    7, 8, 4, 5, 6,
+                    7, 8, 5, 6, 7 });
+  }
+
+  /**
+   * Unit test for Join.getTupleDesc()
+   */
+  @Test public void getTupleDesc() {
+    JoinPredicate pred = new JoinPredicate(0, Predicate.Op.EQUALS, 0);
+    Join op = new Join(pred, scan1, scan2);
+    TupleDesc expected = Utility.getTupleDesc(width1 + width2);
+    TupleDesc actual = op.getTupleDesc();
+    assertEquals(expected, actual);
+  }
+
+  /**
+   * Unit test for Join.rewind()
+   */
+  @Test public void rewind() throws Exception {
+    JoinPredicate pred = new JoinPredicate(0, Predicate.Op.EQUALS, 0);
+    Join op = new Join(pred, scan1, scan2);
+    op.open();
+    while (op.hasNext()) {
+      assertNotNull(op.next());
+    }
+    assertTrue(TestUtil.checkExhausted(op));
+    op.rewind();
+
+    eqJoin.open();
+    Tuple expected = eqJoin.next();
+    Tuple actual = op.next();
+    assertTrue(TestUtil.compareTuples(expected, actual));
+  }
+
+  /**
+   * Unit test for Join.getNext() using a &gt; predicate
+   */
+  @Test public void gtJoin() throws Exception {
+    JoinPredicate pred = new JoinPredicate(0, Predicate.Op.GREATER_THAN, 0);
+    Join op = new Join(pred, scan1, scan2);
+    op.open();
+    gtJoin.open();
+    TestUtil.matchAllTuples(gtJoin, op);
+  }
+
+  /**
+   * Unit test for Join.getNext() using an = predicate
+   */
+  @Test public void eqJoin() throws Exception {
+    JoinPredicate pred = new JoinPredicate(0, Predicate.Op.EQUALS, 0);
+    Join op = new Join(pred, scan1, scan2);
+    op.open();
+    eqJoin.open();
+    TestUtil.matchAllTuples(eqJoin, op);
+  }
+
+  /**
+   * JUnit suite target
+   */
+  public static junit.framework.Test suite() {
+    return new JUnit4TestAdapter(JoinTest.class);
+  }
+}
+
diff -ruN lab1/test/simpledb/LockingTest.java lab3/test/simpledb/LockingTest.java
--- lab1/test/simpledb/LockingTest.java	1969-12-31 18:00:00.000000000 -0600
+++ lab3/test/simpledb/LockingTest.java	2016-11-02 22:06:55.000000000 -0500
@@ -0,0 +1,197 @@
+package simpledb;
+
+import org.junit.Before;
+import org.junit.Test;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertNull;
+import junit.framework.JUnit4TestAdapter;
+
+public class LockingTest extends TestUtil.CreateHeapFile {
+  private PageId p0, p1, p2;
+  private TransactionId tid1, tid2;
+
+  /** Time to wait before checking the state of lock contention, in ms */
+  private static final int TIMEOUT = 100;
+
+  // just so we have a pointer shorter than Database.getBufferPool()
+  private BufferPool bp;
+
+  /**
+   * Set up initial resources for each unit test.
+   */
+  @Before public void setUp() throws Exception {
+    super.setUp();
+
+    // clear all state from the buffer pool
+    bp = Database.resetBufferPool(BufferPool.DEFAULT_PAGES);
+
+    // create a new empty HeapFile and populate it with three pages.
+    // we should be able to add 504 tuples on an empty page.
+    TransactionId tid = new TransactionId();
+    for (int i = 0; i < 1025; ++i) {
+      empty.insertTuple(tid, Utility.getHeapTuple(i, 2));
+    }
+
+    // if this fails, complain to the TA
+    assertEquals(3, empty.numPages());
+
+    this.p0 = new HeapPageId(empty.getId(), 0);
+    this.p1 = new HeapPageId(empty.getId(), 1);
+    this.p2 = new HeapPageId(empty.getId(), 2);
+    this.tid1 = new TransactionId();
+    this.tid2 = new TransactionId();
+
+    // forget about locks associated to tid, so they don't conflict with
+    // test cases
+    bp.getPage(tid, p0, Permissions.READ_WRITE).markDirty(true, tid);
+    bp.getPage(tid, p1, Permissions.READ_WRITE).markDirty(true, tid);
+    bp.getPage(tid, p2, Permissions.READ_WRITE).markDirty(true, tid);
+    bp.flushAllPages();
+    bp = Database.resetBufferPool(BufferPool.DEFAULT_PAGES);
+  }
+
+  /**
+   * Generic unit test structure for BufferPool.getPage() assuming locking.
+   *
+   * @param tid1 the first transaction Id
+   * @param pid1 the first page to lock over
+   * @param perm1 the type of lock for the first page
+   * @param tid2 the second transaction Id
+   * @param pid2 the second page to lock over
+   * @param perm2 the type of lock for the second page
+   * @param expected true if we expect the second acquisition to succeed;
+   *   false otherwise
+   */
+  public void metaLockTester(
+      TransactionId tid1, PageId pid1, Permissions perm1,
+      TransactionId tid2, PageId pid2, Permissions perm2,
+      boolean expected) throws Exception {
+
+    bp.getPage(tid1, pid1, perm1);
+    grabLock(tid2, pid2, perm2, expected);
+  }
+
+  /**
+   * Generic unit test structure to grab an additional lock in a new
+   * thread.
+   *
+   * @param tid the transaction Id
+   * @param pid the first page to lock over
+   * @param perm the type of lock desired
+   * @param expected true if we expect the acquisition to succeed;
+   *   false otherwise
+   */
+  public void grabLock(TransactionId tid, PageId pid, Permissions perm,
+      boolean expected) throws Exception {
+
+    TestUtil.LockGrabber t = new TestUtil.LockGrabber(tid, pid, perm);
+    t.start();
+
+    // if we don't have the lock after TIMEOUT, we assume blocking.
+    Thread.sleep(TIMEOUT);
+    assertEquals(expected, t.acquired());
+    assertNull(t.getError());
+
+    // TODO(ghuo): yes, stop() is evil, but this is unit test cleanup
+    t.stop();
+  }
+
+  /**
+   * Unit test for BufferPool.getPage() assuming locking.
+   * Acquires two read locks on the same page.
+   */
+  @Test public void acquireReadLocksOnSamePage() throws Exception {
+    metaLockTester(tid1, p0, Permissions.READ_ONLY,
+                   tid2, p0, Permissions.READ_ONLY, true);
+  }
+
+  /**
+   * Unit test for BufferPool.getPage() assuming locking.
+   * Acquires a read lock and a write lock on the same page, in that order.
+   */
+  @Test public void acquireReadWriteLocksOnSamePage() throws Exception {
+    metaLockTester(tid1, p0, Permissions.READ_ONLY,
+                   tid2, p0, Permissions.READ_WRITE, false);
+  }
+
+  /**
+   * Unit test for BufferPool.getPage() assuming locking.
+   * Acquires a write lock and a read lock on the same page, in that order.
+   */
+  @Test public void acquireWriteReadLocksOnSamePage() throws Exception {
+    metaLockTester(tid1, p0, Permissions.READ_WRITE,
+                   tid2, p0, Permissions.READ_ONLY, false);
+  }
+
+  /**
+   * Unit test for BufferPool.getPage() assuming locking.
+   * Acquires a read lock and a write lock on different pages.
+   */
+  @Test public void acquireReadWriteLocksOnTwoPages() throws Exception {
+    metaLockTester(tid1, p0, Permissions.READ_ONLY,
+                   tid2, p1, Permissions.READ_WRITE, true);
+  }
+
+  /**
+   * Unit test for BufferPool.getPage() assuming locking.
+   * Acquires write locks on different pages.
+   */
+  @Test public void acquireWriteLocksOnTwoPages() throws Exception {
+    metaLockTester(tid1, p0, Permissions.READ_WRITE,
+                   tid2, p1, Permissions.READ_WRITE, true);
+  }
+
+  /**
+   * Unit test for BufferPool.getPage() assuming locking.
+   * Acquires read locks on different pages.
+   */
+  @Test public void acquireReadLocksOnTwoPages() throws Exception {
+    metaLockTester(tid1, p0, Permissions.READ_ONLY,
+                   tid2, p1, Permissions.READ_ONLY, true);
+  }
+
+  /**
+   * Unit test for BufferPool.getPage() assuming locking.
+   * Attempt lock upgrade.
+   */
+  @Test public void lockUpgrade() throws Exception {
+    metaLockTester(tid1, p0, Permissions.READ_ONLY,
+                   tid1, p0, Permissions.READ_WRITE, true);
+    metaLockTester(tid2, p1, Permissions.READ_ONLY,
+                   tid2, p1, Permissions.READ_WRITE, true);
+  }
+
+  /**
+   * Unit test for BufferPool.getPage() assuming locking.
+   * A single transaction should be able to acquire a read lock after it
+   * already has a write lock.
+   */
+  @Test public void acquireWriteAndReadLocks() throws Exception {
+    metaLockTester(tid1, p0, Permissions.READ_WRITE,
+                   tid1, p0, Permissions.READ_ONLY, true);
+  }
+
+  /**
+   * Unit test for BufferPool.getPage() and BufferPool.releasePage()
+   * assuming locking.
+   * Acquires read locks on different pages.
+   */
+  @Test public void acquireThenRelease() throws Exception {
+    bp.getPage(tid1, p0, Permissions.READ_WRITE);
+    bp.releasePage(tid1, p0);
+    bp.getPage(tid2, p0, Permissions.READ_WRITE);
+
+    bp.getPage(tid2, p1, Permissions.READ_WRITE);
+    bp.releasePage(tid2, p1);
+    bp.getPage(tid1, p1, Permissions.READ_WRITE);
+  }
+
+  /**
+   * JUnit suite target
+   */
+  public static junit.framework.Test suite() {
+    return new JUnit4TestAdapter(LockingTest.class);
+  }
+
+}
+
diff -ruN lab1/test/simpledb/PredicateTest.java lab3/test/simpledb/PredicateTest.java
--- lab1/test/simpledb/PredicateTest.java	1969-12-31 18:00:00.000000000 -0600
+++ lab3/test/simpledb/PredicateTest.java	2016-11-02 22:06:55.000000000 -0500
@@ -0,0 +1,65 @@
+package simpledb;
+
+import org.junit.Test;
+
+import simpledb.systemtest.SimpleDbTestBase;
+import static org.junit.Assert.assertTrue;
+import static org.junit.Assert.assertFalse;
+import junit.framework.JUnit4TestAdapter;
+
+public class PredicateTest extends SimpleDbTestBase{
+
+  /**
+   * Unit test for Predicate.filter()
+   */
+  @Test public void filter() {
+    int[] vals = new int[] { -1, 0, 1 };
+
+    for (int i : vals) {
+      Predicate p = new Predicate(0, Predicate.Op.EQUALS, TestUtil.getField(i));
+      assertFalse(p.filter(Utility.getHeapTuple(i - 1)));
+      assertTrue(p.filter(Utility.getHeapTuple(i)));
+      assertFalse(p.filter(Utility.getHeapTuple(i + 1)));
+    }
+
+    for (int i : vals) {
+      Predicate p = new Predicate(0, Predicate.Op.GREATER_THAN,
+          TestUtil.getField(i));
+      assertFalse(p.filter(Utility.getHeapTuple(i - 1)));
+      assertFalse(p.filter(Utility.getHeapTuple(i)));
+      assertTrue(p.filter(Utility.getHeapTuple(i + 1)));
+    }
+
+    for (int i : vals) {
+      Predicate p = new Predicate(0, Predicate.Op.GREATER_THAN_OR_EQ,
+          TestUtil.getField(i));
+      assertFalse(p.filter(Utility.getHeapTuple(i - 1)));
+      assertTrue(p.filter(Utility.getHeapTuple(i)));
+      assertTrue(p.filter(Utility.getHeapTuple(i + 1)));
+    }
+
+    for (int i : vals) {
+      Predicate p = new Predicate(0, Predicate.Op.LESS_THAN,
+          TestUtil.getField(i));
+      assertTrue(p.filter(Utility.getHeapTuple(i - 1)));
+      assertFalse(p.filter(Utility.getHeapTuple(i)));
+      assertFalse(p.filter(Utility.getHeapTuple(i + 1)));
+    }
+
+    for (int i : vals) {
+      Predicate p = new Predicate(0, Predicate.Op.LESS_THAN_OR_EQ,
+          TestUtil.getField(i));
+      assertTrue(p.filter(Utility.getHeapTuple(i - 1)));
+      assertTrue(p.filter(Utility.getHeapTuple(i)));
+      assertFalse(p.filter(Utility.getHeapTuple(i + 1)));
+    }
+  }
+
+  /**
+   * JUnit suite target
+   */
+  public static junit.framework.Test suite() {
+    return new JUnit4TestAdapter(PredicateTest.class);
+  }
+}
+
diff -ruN lab1/test/simpledb/StringAggregatorTest.java lab3/test/simpledb/StringAggregatorTest.java
--- lab1/test/simpledb/StringAggregatorTest.java	1969-12-31 18:00:00.000000000 -0600
+++ lab3/test/simpledb/StringAggregatorTest.java	2016-11-02 22:06:55.000000000 -0500
@@ -0,0 +1,115 @@
+package simpledb;
+
+import java.util.*;
+
+import org.junit.Before;
+import org.junit.Test;
+
+import simpledb.systemtest.SimpleDbTestBase;
+import static org.junit.Assert.assertEquals;
+import junit.framework.JUnit4TestAdapter;
+
+public class StringAggregatorTest extends SimpleDbTestBase {
+
+  int width1 = 2;
+  DbIterator scan1;
+  int[][] count = null;
+
+  /**
+   * Initialize each unit test
+   */
+  @Before public void createTupleList() throws Exception {
+    this.scan1 = TestUtil.createTupleList(width1,
+        new Object[] { 1, "a",
+                    1, "b",
+                    1, "c",
+                    3, "d",
+                    3, "e",
+                    3, "f",
+                    5, "g" });
+
+    // verify how the results progress after a few merges
+    this.count = new int[][] {
+      { 1, 1 },
+      { 1, 2 },
+      { 1, 3 },
+      { 1, 3, 3, 1 }
+    };
+
+  }
+
+  /**
+   * Test String.mergeTupleIntoGroup() and iterator() over a COUNT
+   */
+  @Test public void mergeCount() throws Exception {
+    scan1.open();
+    StringAggregator agg = new StringAggregator(0, Type.INT_TYPE, 1, Aggregator.Op.COUNT);
+
+    for (int[] step : count) {
+      agg.mergeTupleIntoGroup(scan1.next());
+      DbIterator it = agg.iterator();
+      it.open();
+      TestUtil.matchAllTuples(TestUtil.createTupleList(width1, step), it);
+    }
+  }
+
+  /**
+   * Test StringAggregator.iterator() for DbIterator behaviour
+   */
+  @Test public void testIterator() throws Exception {
+    // first, populate the aggregator via sum over scan1
+    scan1.open();
+    StringAggregator agg = new StringAggregator(0, Type.INT_TYPE, 1, Aggregator.Op.COUNT);
+    try {
+      while (true)
+        agg.mergeTupleIntoGroup(scan1.next());
+    } catch (NoSuchElementException e) {
+      // explicitly ignored
+    }
+
+    DbIterator it = agg.iterator();
+    it.open();
+
+    // verify it has three elements
+    int count = 0;
+    try {
+      while (true) {
+        it.next();
+        count++;
+      }
+    } catch (NoSuchElementException e) {
+      // explicitly ignored
+    }
+    assertEquals(3, count);
+
+    // rewind and try again
+    it.rewind();
+    count = 0;
+    try {
+      while (true) {
+        it.next();
+        count++;
+      }
+    } catch (NoSuchElementException e) {
+      // explicitly ignored
+    }
+    assertEquals(3, count);
+
+    // close it and check that we don't get anything
+    it.close();
+    try {
+      it.next();
+      throw new Exception("StringAggreator iterator yielded tuple after close");
+    } catch (Exception e) {
+      // explicitly ignored
+    }
+  }
+
+  /**
+   * JUnit suite target
+   */
+  public static junit.framework.Test suite() {
+    return new JUnit4TestAdapter(StringAggregatorTest.class);
+  }
+}
+
diff -ruN lab1/test/simpledb/TableStatsTest.java lab3/test/simpledb/TableStatsTest.java
--- lab1/test/simpledb/TableStatsTest.java	1969-12-31 18:00:00.000000000 -0600
+++ lab3/test/simpledb/TableStatsTest.java	2016-11-02 22:06:55.000000000 -0500
@@ -0,0 +1,154 @@
+package simpledb;
+
+import java.io.IOException;
+import java.util.ArrayList;
+
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.Assert;
+
+import simpledb.systemtest.SimpleDbTestBase;
+import simpledb.systemtest.SystemTestUtil;
+
+public class TableStatsTest extends SimpleDbTestBase {
+	public static final int IO_COST = 71;
+	
+	ArrayList<ArrayList<Integer>> tuples;
+	HeapFile f;
+	String tableName;
+	int tableId;
+	
+	@Before public void setUp() throws Exception {
+		super.setUp();
+		this.tuples = new ArrayList<ArrayList<Integer>>();
+		this.f = SystemTestUtil.createRandomHeapFile(10, 10200, 32, null, tuples);
+		
+		this.tableName = SystemTestUtil.getUUID();
+		Database.getCatalog().addTable(f, tableName);
+		this.tableId = Database.getCatalog().getTableId(tableName);		
+	}
+	
+	private double[] getRandomTableScanCosts(int[] pageNums, int[] ioCosts) throws IOException, DbException, TransactionAbortedException {
+		double[] ret = new double[ioCosts.length];
+		for(int i = 0; i < ioCosts.length; ++i) {
+			HeapFile hf = SystemTestUtil.createRandomHeapFile(1, 992*pageNums[i], 32, null, tuples);
+			Assert.assertEquals(pageNums[i], hf.numPages());			
+			String tableName = SystemTestUtil.getUUID();
+			Database.getCatalog().addTable(hf, tableName);
+			int tableId = Database.getCatalog().getTableId(tableName);
+			ret[i] = (new TableStats(tableId, ioCosts[i])).estimateScanCost();
+		}
+		return ret;
+	}
+	/**
+	 * Verify the cost estimates of scanning various numbers of pages from a HeapFile
+	 * This test checks that the estimateScanCost is: 
+	 *   +linear in numPages when IO_COST is constant
+	 *   +linear in IO_COST when numPages is constant
+	 *   +quadratic when IO_COST and numPages increase linearly.
+	 */
+	@Test public void estimateScanCostTest() throws IOException, DbException, TransactionAbortedException {
+		Object[] ret;
+		int[] ioCosts = new int[20];
+		int[] pageNums = new int[ioCosts.length];
+		// IO_COST constant, numPages change
+		for(int i = 0; i < ioCosts.length; ++i) {
+			ioCosts[i] = 1;
+			pageNums[i] = 3*(i+1);
+		}
+		double stats[] = getRandomTableScanCosts(pageNums, ioCosts);
+		ret = SystemTestUtil.checkConstant(stats);
+		Assert.assertEquals(ret[0], Boolean.FALSE);
+		ret = SystemTestUtil.checkLinear(stats);
+		Assert.assertEquals(ret[0], Boolean.TRUE);
+		// numPages constant, IO_COST change
+		for(int i = 0; i < ioCosts.length; ++i) {
+			ioCosts[i] = 10*(i + 1);
+			pageNums[i] = 3;
+		}
+		stats = getRandomTableScanCosts(pageNums, ioCosts);
+		ret = SystemTestUtil.checkConstant(stats);
+		Assert.assertEquals(ret[0], Boolean.FALSE);
+		ret = SystemTestUtil.checkLinear(stats);
+		Assert.assertEquals(ret[0], Boolean.TRUE);
+		//numPages & IO_COST increase linearly
+		for(int i = 0; i < ioCosts.length; ++i) {
+			ioCosts[i] = 3*(i + 1);
+			pageNums[i] = (i+1);
+		}
+		stats = getRandomTableScanCosts(pageNums, ioCosts);
+		ret = SystemTestUtil.checkConstant(stats);
+		Assert.assertEquals(ret[0], Boolean.FALSE);
+		ret = SystemTestUtil.checkLinear(stats);
+		Assert.assertEquals(ret[0], Boolean.FALSE);
+		ret = SystemTestUtil.checkQuadratic(stats);
+		Assert.assertEquals(ret[0], Boolean.TRUE);
+		
+	}
+	
+	/**
+	 * Verify the table-cardinality estimates based on a selectivity estimate
+	 */
+	@Test public void estimateTableCardinalityTest() {
+		TableStats s = new TableStats(this.tableId, IO_COST);
+		
+		// Try a random selectivity
+		Assert.assertEquals(3060, s.estimateTableCardinality(0.3));
+		
+		// Make sure we get all rows with 100% selectivity, and none with 0%
+		Assert.assertEquals(10200, s.estimateTableCardinality(1.0));
+		Assert.assertEquals(0, s.estimateTableCardinality(0.0));
+	}
+	
+	/**
+	 * Verify that selectivity estimates do something reasonable.
+	 * Don't bother splitting this into N different functions for
+	 * each possible Op because we will probably catch any bugs here in
+	 * IntHistogramTest, so we hopefully don't need all the JUnit checkboxes.
+	 */
+	@Test public void estimateSelectivityTest() {
+		final int maxCellVal = 32;	// Tuple values are randomized between 0 and this number
+		
+		final Field aboveMax = new IntField(maxCellVal + 10);
+		final Field atMax = new IntField(maxCellVal);
+		final Field halfMaxMin = new IntField(maxCellVal/2);
+		final Field atMin = new IntField(0);
+		final Field belowMin = new IntField(-10);
+		
+		TableStats s = new TableStats(this.tableId, IO_COST);
+		
+		for (int col = 0; col < 10; col++) {
+			Assert.assertEquals(0.0, s.estimateSelectivity(col, Predicate.Op.EQUALS, aboveMax), 0.001);			
+			Assert.assertEquals(1.0/32.0, s.estimateSelectivity(col, Predicate.Op.EQUALS, halfMaxMin), 0.015);
+			Assert.assertEquals(0, s.estimateSelectivity(col, Predicate.Op.EQUALS, belowMin), 0.001);
+
+			Assert.assertEquals(1.0, s.estimateSelectivity(col, Predicate.Op.NOT_EQUALS, aboveMax), 0.001);
+			Assert.assertEquals(31.0/32.0, s.estimateSelectivity(col, Predicate.Op.NOT_EQUALS, halfMaxMin), 0.015);
+			Assert.assertEquals(1.0, s.estimateSelectivity(col, Predicate.Op.NOT_EQUALS, belowMin), 0.015);
+
+			Assert.assertEquals(0.0, s.estimateSelectivity(col, Predicate.Op.GREATER_THAN, aboveMax), 0.001);
+			Assert.assertEquals(0.0, s.estimateSelectivity(col, Predicate.Op.GREATER_THAN, atMax), 0.001);
+			Assert.assertEquals(0.5, s.estimateSelectivity(col, Predicate.Op.GREATER_THAN, halfMaxMin), 0.1);
+			Assert.assertEquals(31.0/32.0, s.estimateSelectivity(col, Predicate.Op.GREATER_THAN, atMin), 0.05);
+			Assert.assertEquals(1.0, s.estimateSelectivity(col, Predicate.Op.GREATER_THAN, belowMin), 0.001);
+			
+			Assert.assertEquals(1.0, s.estimateSelectivity(col, Predicate.Op.LESS_THAN, aboveMax), 0.001);
+			Assert.assertEquals(1.0, s.estimateSelectivity(col, Predicate.Op.LESS_THAN, atMax), 0.015);
+			Assert.assertEquals(0.5, s.estimateSelectivity(col, Predicate.Op.LESS_THAN, halfMaxMin), 0.1);
+			Assert.assertEquals(0.0, s.estimateSelectivity(col, Predicate.Op.LESS_THAN, atMin), 0.001);
+			Assert.assertEquals(0.0, s.estimateSelectivity(col, Predicate.Op.LESS_THAN, belowMin), 0.001);
+			
+			Assert.assertEquals(0.0, s.estimateSelectivity(col, Predicate.Op.GREATER_THAN_OR_EQ, aboveMax), 0.001);
+			Assert.assertEquals(0.0, s.estimateSelectivity(col, Predicate.Op.GREATER_THAN_OR_EQ, atMax), 0.015);
+			Assert.assertEquals(0.5, s.estimateSelectivity(col, Predicate.Op.GREATER_THAN_OR_EQ, halfMaxMin), 0.1);
+			Assert.assertEquals(1.0, s.estimateSelectivity(col, Predicate.Op.GREATER_THAN_OR_EQ, atMin), 0.015);
+			Assert.assertEquals(1.0, s.estimateSelectivity(col, Predicate.Op.GREATER_THAN_OR_EQ, belowMin), 0.001);
+			
+			Assert.assertEquals(1.0, s.estimateSelectivity(col, Predicate.Op.LESS_THAN_OR_EQ, aboveMax), 0.001);
+			Assert.assertEquals(1.0, s.estimateSelectivity(col, Predicate.Op.LESS_THAN_OR_EQ, atMax), 0.015);
+			Assert.assertEquals(0.5, s.estimateSelectivity(col, Predicate.Op.LESS_THAN_OR_EQ, halfMaxMin), 0.1);
+			Assert.assertEquals(0.0, s.estimateSelectivity(col, Predicate.Op.LESS_THAN_OR_EQ, atMin), 0.05);
+			Assert.assertEquals(0.0, s.estimateSelectivity(col, Predicate.Op.LESS_THAN_OR_EQ, belowMin), 0.001);
+		}
+	}
+}
diff -ruN lab1/test/simpledb/TransactionTest.java lab3/test/simpledb/TransactionTest.java
--- lab1/test/simpledb/TransactionTest.java	1969-12-31 18:00:00.000000000 -0600
+++ lab3/test/simpledb/TransactionTest.java	2016-11-02 22:06:55.000000000 -0500
@@ -0,0 +1,123 @@
+package simpledb;
+
+import java.util.*;
+import org.junit.Before;
+import org.junit.Test;
+import static org.junit.Assert.assertEquals;
+import junit.framework.JUnit4TestAdapter;
+
+public class TransactionTest extends TestUtil.CreateHeapFile {
+  private PageId p0, p1, p2;
+  private TransactionId tid1, tid2;
+
+  // just so we have a pointer shorter than Database.getBufferPool()
+  private BufferPool bp;
+
+  /**
+   * Set up initial resources for each unit test.
+   */
+  @Before public void setUp() throws Exception {
+    super.setUp();
+
+    // clear all state from the buffer pool
+    bp = Database.resetBufferPool(BufferPool.DEFAULT_PAGES);
+
+    // create a new empty HeapFile and populate it with three pages.
+    // we should be able to add 504 tuples on an empty page.
+    TransactionId tid = new TransactionId();
+    for (int i = 0; i < 1025; ++i) {
+      empty.insertTuple(tid, Utility.getHeapTuple(i, 2));
+    }
+
+    // if this fails, complain to the TA
+    assertEquals(3, empty.numPages());
+
+    this.p0 = new HeapPageId(empty.getId(), 0);
+    this.p1 = new HeapPageId(empty.getId(), 1);
+    this.p2 = new HeapPageId(empty.getId(), 2);
+    this.tid1 = new TransactionId();
+    this.tid2 = new TransactionId();
+
+    // forget about locks associated to tid, so they don't conflict with
+    // test cases
+    bp.getPage(tid, p0, Permissions.READ_WRITE).markDirty(true, tid);
+    bp.getPage(tid, p1, Permissions.READ_WRITE).markDirty(true, tid);
+    bp.getPage(tid, p2, Permissions.READ_WRITE).markDirty(true, tid);
+    bp.flushAllPages();
+    bp = Database.resetBufferPool(BufferPool.DEFAULT_PAGES);
+  }
+
+  /**
+   * Unit test for BufferPool.transactionComplete().
+   * Try to acquire locks that would conflict if old locks aren't released
+   * during transactionComplete().
+   */
+  @Test public void attemptTransactionTwice() throws Exception {
+    bp.getPage(tid1, p0, Permissions.READ_ONLY);
+    bp.getPage(tid1, p1, Permissions.READ_WRITE);
+    bp.transactionComplete(tid1, true);
+
+    bp.getPage(tid2, p0, Permissions.READ_WRITE);
+    bp.getPage(tid2, p0, Permissions.READ_WRITE);
+  }
+
+  /**
+   * Common unit test code for BufferPool.transactionComplete() covering
+   * commit and abort. Verify that commit persists changes to disk, and
+   * that abort reverts pages to their previous on-disk state.
+   */
+  public void testTransactionComplete(boolean commit) throws Exception {
+    HeapPage p = (HeapPage) bp.getPage(tid1, p2, Permissions.READ_WRITE);
+
+    Tuple t = Utility.getHeapTuple(new int[] { 6, 830 });
+    t.setRecordId(new RecordId(p2, 1));
+
+    p.insertTuple(t);
+    p.markDirty(true, tid1);
+    bp.transactionComplete(tid1, commit);
+
+    // now, flush the buffer pool and access the page again from disk.
+    bp = Database.resetBufferPool(BufferPool.DEFAULT_PAGES);
+    p = (HeapPage) bp.getPage(tid2, p2, Permissions.READ_WRITE);
+    Iterator<Tuple> it = p.iterator();
+
+    boolean found = false;
+    while (it.hasNext()) {
+      Tuple tup = (Tuple) it.next();
+      IntField f0 = (IntField) tup.getField(0);
+      IntField f1 = (IntField) tup.getField(1);
+
+      if (f0.getValue() == 6 && f1.getValue() == 830) {
+        found = true;
+        break;
+      }
+    }
+
+    assertEquals(commit, found);
+  }
+
+  /**
+   * Unit test for BufferPool.transactionComplete() assuing commit.
+   * Verify that a tuple inserted during a committed transaction is durable
+   */
+  @Test public void commitTransaction() throws Exception {
+    testTransactionComplete(true);
+  }
+
+  /**
+   * Unit test for BufferPool.transactionComplete() assuming abort.
+   * Verify that a tuple inserted during a committed transaction is durable
+   */
+  @Test public void abortTransaction() throws Exception {
+    testTransactionComplete(false);
+  }
+
+  /**
+   * JUnit suite target
+   */
+  public static junit.framework.Test suite() {
+    return new JUnit4TestAdapter(TransactionTest.class);
+  }
+
+}
+
diff -ruN lab1/test/simpledb/systemtest/AbortEvictionTest.java lab3/test/simpledb/systemtest/AbortEvictionTest.java
--- lab1/test/simpledb/systemtest/AbortEvictionTest.java	1969-12-31 18:00:00.000000000 -0600
+++ lab3/test/simpledb/systemtest/AbortEvictionTest.java	2016-11-02 22:06:55.000000000 -0500
@@ -0,0 +1,45 @@
+package simpledb.systemtest;
+
+import java.io.IOException;
+
+import simpledb.*;
+
+import static org.junit.Assert.*;
+import org.junit.Test;
+
+public class AbortEvictionTest extends SimpleDbTestBase {
+    /** Aborts a transaction and ensures that its effects were actually undone.
+     * This requires dirty pages to <em>not</em> get flushed to disk.
+     */
+    @Test public void testDoNotEvictDirtyPages()
+            throws IOException, DbException, TransactionAbortedException {
+        // Allocate a file with ~10 pages of data
+        HeapFile f = SystemTestUtil.createRandomHeapFile(2, 512*10, null, null);
+        Database.resetBufferPool(2);
+
+        // BEGIN TRANSACTION
+        Transaction t = new Transaction();
+        t.start();
+
+        // Insert a new row
+        EvictionTest.insertRow(f, t);
+
+        // The tuple must exist in the table
+        boolean found = EvictionTest.findMagicTuple(f, t);
+        assertTrue(found);
+        // ABORT
+        t.transactionComplete(true);
+
+        // A second transaction must not find the tuple
+        t = new Transaction();
+        t.start();
+        found = EvictionTest.findMagicTuple(f, t);
+        assertFalse(found);
+        t.commit();
+    }
+
+    /** Make test compatible with older version of ant. */
+    public static junit.framework.Test suite() {
+        return new junit.framework.JUnit4TestAdapter(AbortEvictionTest.class);
+    }
+}
diff -ruN lab1/test/simpledb/systemtest/AggregateTest.java lab3/test/simpledb/systemtest/AggregateTest.java
--- lab1/test/simpledb/systemtest/AggregateTest.java	1969-12-31 18:00:00.000000000 -0600
+++ lab3/test/simpledb/systemtest/AggregateTest.java	2016-11-02 22:06:55.000000000 -0500
@@ -0,0 +1,120 @@
+package simpledb.systemtest;
+
+import java.io.IOException;
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.Map;
+
+import simpledb.*;
+
+import org.junit.Test;
+
+public class AggregateTest extends SimpleDbTestBase {
+    public void validateAggregate(DbFile table, Aggregator.Op operation, int aggregateColumn, int groupColumn, ArrayList<ArrayList<Integer>> expectedResult)
+            throws DbException, TransactionAbortedException, IOException {
+        TransactionId tid = new TransactionId();
+        SeqScan ss = new SeqScan(tid, table.getId(), "");
+        Aggregate ag = new Aggregate(ss, aggregateColumn, groupColumn, operation);
+
+        SystemTestUtil.matchTuples(ag, expectedResult);
+        Database.getBufferPool().transactionComplete(tid);
+    }
+
+    private int computeAggregate(ArrayList<Integer> values, Aggregator.Op operation) {
+        if (operation == Aggregator.Op.COUNT) return values.size();
+
+        int value = 0;
+        if (operation == Aggregator.Op.MIN) value = Integer.MAX_VALUE;
+        else if (operation == Aggregator.Op.MAX) value = Integer.MIN_VALUE;
+
+        for (int v : values) {
+            switch (operation) {
+                case MAX:
+                    if (v > value) value = v;
+                    break;
+                case MIN:
+                    if (v < value) value = v;
+                    break;
+                case AVG:
+                case SUM:
+                    value += v;
+                    break;
+                default:
+                    throw new IllegalArgumentException("Unsupported operation " + operation);
+            }
+        }
+
+        if (operation == Aggregator.Op.AVG) value /= values.size();
+        return value;
+    }
+
+    private ArrayList<ArrayList<Integer>> aggregate(ArrayList<ArrayList<Integer>> tuples, Aggregator.Op operation, int aggregateColumn, int groupColumn) {
+        // Group the values
+        HashMap<Integer, ArrayList<Integer>> values = new HashMap<Integer, ArrayList<Integer>>();
+        for (ArrayList<Integer> t : tuples) {
+            Integer key = null;
+            if (groupColumn != Aggregator.NO_GROUPING) key = t.get(groupColumn);
+            Integer value = t.get(aggregateColumn);
+
+            if (!values.containsKey(key)) values.put(key, new ArrayList<Integer>());
+            values.get(key).add(value);
+        }
+
+        ArrayList<ArrayList<Integer>> results = new ArrayList<ArrayList<Integer>>();
+        for (Map.Entry<Integer, ArrayList<Integer>> e : values.entrySet()) {
+            ArrayList<Integer> result = new ArrayList<Integer>();
+            if (groupColumn != Aggregator.NO_GROUPING) result.add(e.getKey());
+            result.add(computeAggregate(e.getValue(), operation));
+            results.add(result);
+        }
+        return results;
+    }
+
+    private final static int ROWS = 1024;
+    private final static int MAX_VALUE = 64;
+    private final static int COLUMNS = 3;
+    private void doAggregate(Aggregator.Op operation, int groupColumn)
+            throws IOException, DbException, TransactionAbortedException {
+        // Create the table
+        ArrayList<ArrayList<Integer>> createdTuples = new ArrayList<ArrayList<Integer>>();
+        HeapFile table = SystemTestUtil.createRandomHeapFile(
+                COLUMNS, ROWS, MAX_VALUE, null, createdTuples);
+
+        // Compute the expected answer
+        ArrayList<ArrayList<Integer>> expected =
+                aggregate(createdTuples, operation, 1, groupColumn);
+
+        // validate that we get the answer
+        validateAggregate(table, operation, 1, groupColumn, expected);
+    }
+
+    @Test public void testSum() throws IOException, DbException, TransactionAbortedException {
+        doAggregate(Aggregator.Op.SUM, 0);
+    }
+
+    @Test public void testMin() throws IOException, DbException, TransactionAbortedException {
+        doAggregate(Aggregator.Op.MIN, 0);
+    }
+
+    @Test public void testMax() throws IOException, DbException, TransactionAbortedException {
+        doAggregate(Aggregator.Op.MAX, 0);
+    }
+
+    @Test public void testCount() throws IOException, DbException, TransactionAbortedException {
+        doAggregate(Aggregator.Op.COUNT, 0);
+    }
+
+    @Test public void testAverage() throws IOException, DbException, TransactionAbortedException {
+        doAggregate(Aggregator.Op.AVG, 0);
+    }
+
+    @Test public void testAverageNoGroup()
+            throws IOException, DbException, TransactionAbortedException {
+        doAggregate(Aggregator.Op.AVG, Aggregator.NO_GROUPING);
+    }
+
+    /** Make test compatible with older version of ant. */
+    public static junit.framework.Test suite() {
+        return new junit.framework.JUnit4TestAdapter(AggregateTest.class);
+    }
+}
diff -ruN lab1/test/simpledb/systemtest/BTreeFileDeleteTest.java lab3/test/simpledb/systemtest/BTreeFileDeleteTest.java
--- lab1/test/simpledb/systemtest/BTreeFileDeleteTest.java	1969-12-31 18:00:00.000000000 -0600
+++ lab3/test/simpledb/systemtest/BTreeFileDeleteTest.java	2016-11-02 22:06:55.000000000 -0500
@@ -0,0 +1,362 @@
+package simpledb.systemtest;
+
+import simpledb.systemtest.SimpleDbTestBase;
+import simpledb.Predicate.Op;
+import simpledb.*;
+
+import java.util.*;
+
+import org.junit.After;
+import org.junit.Before;
+import org.junit.Test;
+
+import static org.junit.Assert.*;
+import junit.framework.JUnit4TestAdapter;
+
+public class BTreeFileDeleteTest extends SimpleDbTestBase {
+	private TransactionId tid;
+
+	/**
+	 * Set up initial resources for each unit test.
+	 */
+	@Before
+	public void setUp() throws Exception {
+		tid = new TransactionId();
+	}
+
+	@After
+	public void tearDown() throws Exception {
+		Database.getBufferPool().transactionComplete(tid);
+
+		// set the page size back to the default
+		BufferPool.resetPageSize();
+		Database.reset();
+
+	}
+
+	@Test
+	public void testRedistributeLeafPages() throws Exception {
+		// This should create a B+ tree with two partially full leaf pages
+		BTreeFile twoLeafPageFile = BTreeUtility.createRandomBTreeFile(2, 600,
+				null, null, 0);
+		BTreeChecker.checkRep(twoLeafPageFile, tid, new HashMap<PageId, Page>(), true);
+
+		// Delete some tuples from the first page until it gets to minimum occupancy
+		DbFileIterator it = twoLeafPageFile.iterator(tid);
+		it.open();
+		int count = 0;
+		while(it.hasNext() && count < 49) {
+			Tuple t = it.next();
+			BTreePageId pid = (BTreePageId) t.getRecordId().getPageId();
+			BTreeLeafPage p = (BTreeLeafPage) Database.getBufferPool().getPage(
+					tid, pid, Permissions.READ_ONLY);
+			assertEquals(202 + count, p.getNumEmptySlots());
+			twoLeafPageFile.deleteTuple(tid, t);
+			count++;
+		}
+		BTreeChecker.checkRep(twoLeafPageFile,tid, new HashMap<PageId, Page>(), true);
+
+		// deleting a tuple now should bring the page below minimum occupancy and cause 
+		// the tuples to be redistributed
+		Tuple t = it.next();
+		it.close();
+		BTreePageId pid = (BTreePageId) t.getRecordId().getPageId();
+		BTreeLeafPage p = (BTreeLeafPage) Database.getBufferPool().getPage(
+				tid, pid, Permissions.READ_ONLY);
+		assertEquals(251, p.getNumEmptySlots());
+		twoLeafPageFile.deleteTuple(tid, t);
+		assertTrue(p.getNumEmptySlots() <= 251);
+
+		BTreePageId rightSiblingId = p.getRightSiblingId();
+		BTreeLeafPage rightSibling = (BTreeLeafPage) Database.getBufferPool().getPage(
+				tid, rightSiblingId, Permissions.READ_ONLY);
+		assertTrue(rightSibling.getNumEmptySlots() > 202);
+	} 
+
+	@Test
+	public void testMergeLeafPages() throws Exception {
+		// This should create a B+ tree with one full page and two half-full leaf pages
+		BTreeFile threeLeafPageFile = BTreeUtility.createRandomBTreeFile(2, 1005,
+				null, null, 0);
+
+		BTreeChecker.checkRep(threeLeafPageFile,
+				tid, new HashMap<PageId, Page>(), true);
+		// there should be one internal node and 3 leaf nodes
+		assertEquals(4, threeLeafPageFile.numPages());
+
+		// delete the last two tuples
+		DbFileIterator it = threeLeafPageFile.iterator(tid);
+		it.open();
+		Tuple secondToLast = null;
+		Tuple last = null;
+		while(it.hasNext()) {
+			secondToLast = last;
+			last = it.next();
+		}
+		it.close();
+		threeLeafPageFile.deleteTuple(tid, secondToLast);
+		threeLeafPageFile.deleteTuple(tid, last);
+		BTreeChecker.checkRep(threeLeafPageFile, tid, new HashMap<PageId, Page>(), true);
+
+		// confirm that the last two pages have merged successfully
+		BTreePageId rootPtrId = BTreeRootPtrPage.getId(threeLeafPageFile.getId());
+		BTreeRootPtrPage rootPtr = (BTreeRootPtrPage) Database.getBufferPool().getPage(
+				tid, rootPtrId, Permissions.READ_ONLY);
+		BTreeInternalPage root = (BTreeInternalPage) Database.getBufferPool().getPage(
+				tid, rootPtr.getRootId(), Permissions.READ_ONLY);
+		assertEquals(502, root.getNumEmptySlots());
+		BTreeEntry e = root.iterator().next();
+		BTreeLeafPage leftChild = (BTreeLeafPage) Database.getBufferPool().getPage(
+				tid, e.getLeftChild(), Permissions.READ_ONLY);
+		BTreeLeafPage rightChild = (BTreeLeafPage) Database.getBufferPool().getPage(
+				tid, e.getRightChild(), Permissions.READ_ONLY);
+		assertEquals(0, leftChild.getNumEmptySlots());
+		assertEquals(1, rightChild.getNumEmptySlots());
+		assertTrue(e.getKey().equals(rightChild.iterator().next().getField(0)));
+
+	}
+
+	@Test
+	public void testDeleteRootPage() throws Exception {
+		// This should create a B+ tree with two half-full leaf pages
+		BTreeFile twoLeafPageFile = BTreeUtility.createRandomBTreeFile(2, 503,
+				null, null, 0);
+		// there should be one internal node and 2 leaf nodes
+		assertEquals(3, twoLeafPageFile.numPages());
+		BTreeChecker.checkRep(twoLeafPageFile,
+				tid, new HashMap<PageId, Page>(), true);
+
+		// delete the first two tuples
+		DbFileIterator it = twoLeafPageFile.iterator(tid);
+		it.open();
+		Tuple first = it.next();
+		Tuple second = it.next();
+		it.close();
+		twoLeafPageFile.deleteTuple(tid, first);
+		BTreeChecker.checkRep(twoLeafPageFile, tid, new HashMap<PageId, Page>(), false);
+		twoLeafPageFile.deleteTuple(tid, second);
+		BTreeChecker.checkRep(twoLeafPageFile,tid, new HashMap<PageId, Page>(), false);
+
+		// confirm that the last two pages have merged successfully and replaced the root
+		BTreePageId rootPtrId = BTreeRootPtrPage.getId(twoLeafPageFile.getId());
+		BTreeRootPtrPage rootPtr = (BTreeRootPtrPage) Database.getBufferPool().getPage(
+				tid, rootPtrId, Permissions.READ_ONLY);
+		assertTrue(rootPtr.getRootId().pgcateg() == BTreePageId.LEAF);
+		BTreeLeafPage root = (BTreeLeafPage) Database.getBufferPool().getPage(
+				tid, rootPtr.getRootId(), Permissions.READ_ONLY);
+		assertEquals(1, root.getNumEmptySlots());
+		assertTrue(root.getParentId().equals(rootPtrId));
+	}
+
+	@Test
+	public void testReuseDeletedPages() throws Exception {
+		// this should create a B+ tree with 3 leaf nodes
+		BTreeFile threeLeafPageFile = BTreeUtility.createRandomBTreeFile(2, 1005,
+				null, null, 0);
+		BTreeChecker.checkRep(threeLeafPageFile, tid, new HashMap<PageId, Page>(), true);
+
+		// 3 leaf pages, 1 internal page
+		assertEquals(4, threeLeafPageFile.numPages());
+
+		// delete enough tuples to ensure one page gets deleted
+		DbFileIterator it = threeLeafPageFile.iterator(tid);
+		it.open();
+		for(int i = 0; i < 502; ++i) {
+			Database.getBufferPool().deleteTuple(tid, it.next());
+			it.rewind();
+		}
+		it.close();
+
+		// now there should be 2 leaf pages, 1 internal page, 1 unused leaf page, 1 header page
+		assertEquals(5, threeLeafPageFile.numPages());
+
+		// insert enough tuples to ensure one of the leaf pages splits
+		for(int i = 0; i < 502; ++i) {
+			Database.getBufferPool().insertTuple(tid, threeLeafPageFile.getId(),
+					BTreeUtility.getBTreeTuple(i, 2));
+		}
+
+		// now there should be 3 leaf pages, 1 internal page, and 1 header page
+		assertEquals(5, threeLeafPageFile.numPages());
+		BTreeChecker.checkRep(threeLeafPageFile, tid, new HashMap<PageId, Page>(), true);
+	}
+
+	@Test
+	public void testRedistributeInternalPages() throws Exception {
+		// This should create a B+ tree with two nodes in the second tier
+		// and 602 nodes in the third tier
+		BTreeFile bf = BTreeUtility.createRandomBTreeFile(2, 302204,
+				null, null, 0);
+		BTreeChecker.checkRep(bf, tid, new HashMap<PageId, Page>(), true);
+
+		Database.resetBufferPool(500); // we need more pages for this test
+
+		BTreeRootPtrPage rootPtr = (BTreeRootPtrPage) Database.getBufferPool().getPage(
+				tid, BTreeRootPtrPage.getId(bf.getId()), Permissions.READ_ONLY);
+		BTreeInternalPage root = (BTreeInternalPage) Database.getBufferPool().getPage(
+				tid, rootPtr.getRootId(), Permissions.READ_ONLY);
+		assertEquals(502, root.getNumEmptySlots());
+
+		BTreeEntry rootEntry = root.iterator().next();
+		BTreeInternalPage leftChild = (BTreeInternalPage) Database.getBufferPool().getPage(
+				tid, rootEntry.getLeftChild(), Permissions.READ_ONLY);
+		BTreeInternalPage rightChild = (BTreeInternalPage) Database.getBufferPool().getPage(
+				tid, rootEntry.getRightChild(), Permissions.READ_ONLY);
+
+		// delete from the right child to test redistribution from the left
+		Iterator<BTreeEntry> it = rightChild.iterator();
+		int count = 0;
+		// bring the right internal page to minimum occupancy
+		while(it.hasNext() && count < 49 * 502 + 1) {
+			BTreeLeafPage leaf = (BTreeLeafPage) Database.getBufferPool().getPage(tid, 
+					it.next().getLeftChild(), Permissions.READ_ONLY);
+			Tuple t = leaf.iterator().next();
+			Database.getBufferPool().deleteTuple(tid, t);
+			it = rightChild.iterator();
+			count++;
+		}
+
+		// deleting a page of tuples should bring the internal page below minimum 
+		// occupancy and cause the entries to be redistributed
+		assertEquals(252, rightChild.getNumEmptySlots());
+		count = 0;
+		while(it.hasNext() && count < 502) {
+			BTreeLeafPage leaf = (BTreeLeafPage) Database.getBufferPool().getPage(tid, 
+					it.next().getLeftChild(), Permissions.READ_ONLY);
+			Tuple t = leaf.iterator().next();
+			Database.getBufferPool().deleteTuple(tid, t);
+			it = rightChild.iterator();
+			count++;
+		}
+		assertTrue(leftChild.getNumEmptySlots() > 203);
+		assertTrue(rightChild.getNumEmptySlots() <= 252);
+		BTreeChecker.checkRep(bf, tid, new HashMap<PageId, Page>(), true);
+
+		// sanity check that the entries make sense
+		BTreeEntry lastLeftEntry = null;
+		it = leftChild.iterator();
+		while(it.hasNext()) {
+			lastLeftEntry = it.next();
+		}
+		rootEntry = root.iterator().next();
+		BTreeEntry firstRightEntry = rightChild.iterator().next();
+		assertTrue(lastLeftEntry.getKey().compare(Op.LESS_THAN_OR_EQ, rootEntry.getKey()));
+		assertTrue(rootEntry.getKey().compare(Op.LESS_THAN_OR_EQ, firstRightEntry.getKey()));
+	}
+
+	@Test
+	public void testDeleteInternalPages() throws Exception {
+    	// For this test we will decrease the size of the Buffer Pool pages
+    	BufferPool.setPageSize(1024);
+		
+		// This should create a B+ tree with three nodes in the second tier
+		// and 252 nodes in the third tier
+    	// (124 entries per internal/leaf page, 125 children per internal page ->
+    	// 251*124 + 1 = 31125)
+		BTreeFile bigFile = BTreeUtility.createRandomBTreeFile(2, 31125,
+				null, null, 0);
+
+		BTreeChecker.checkRep(bigFile, tid, new HashMap<PageId, Page>(), true);
+
+		Database.resetBufferPool(500); // we need more pages for this test
+
+		BTreeRootPtrPage rootPtr = (BTreeRootPtrPage) Database.getBufferPool().getPage(
+				tid, BTreeRootPtrPage.getId(bigFile.getId()), Permissions.READ_ONLY);
+		BTreeInternalPage root = (BTreeInternalPage) Database.getBufferPool().getPage(
+				tid, rootPtr.getRootId(), Permissions.READ_ONLY);
+		assertEquals(122, root.getNumEmptySlots());
+
+		BTreeEntry e = root.iterator().next();
+		BTreeInternalPage leftChild = (BTreeInternalPage) Database.getBufferPool().getPage(
+				tid, e.getLeftChild(), Permissions.READ_ONLY);
+		BTreeInternalPage rightChild = (BTreeInternalPage) Database.getBufferPool().getPage(
+				tid, e.getRightChild(), Permissions.READ_ONLY);
+
+		// Delete tuples causing leaf pages to merge until the first internal page 
+		// gets to minimum occupancy
+		DbFileIterator it = bigFile.iterator(tid);
+		it.open();
+		int count = 0;
+		Database.getBufferPool().deleteTuple(tid, it.next());
+		it.rewind();
+		while(count < 62) {
+			assertEquals(count, leftChild.getNumEmptySlots());
+			for(int i = 0; i < 124; ++i) {
+				Database.getBufferPool().deleteTuple(tid, it.next());
+				it.rewind();
+			}
+			count++;
+		}
+
+		BTreeChecker.checkRep(bigFile, tid, new HashMap<PageId, Page>(), true);
+
+		// deleting a page of tuples should bring the internal page below minimum 
+		// occupancy and cause the entries to be redistributed
+		assertEquals(62, leftChild.getNumEmptySlots());
+		for(int i = 0; i < 124; ++i) {
+			Database.getBufferPool().deleteTuple(tid, it.next());
+			it.rewind();
+		}
+
+		BTreeChecker.checkRep(bigFile, tid, new HashMap<PageId, Page>(), true);
+
+		assertEquals(62, leftChild.getNumEmptySlots());
+		assertEquals(62, rightChild.getNumEmptySlots());
+
+		// deleting another page of tuples should bring the page below minimum occupancy 
+		// again but this time cause it to merge with its right sibling 
+		for(int i = 0; i < 124; ++i) {
+			Database.getBufferPool().deleteTuple(tid, it.next());
+			it.rewind();
+		}
+
+		// confirm that the pages have merged
+		assertEquals(123, root.getNumEmptySlots());
+		e = root.iterator().next();
+		leftChild = (BTreeInternalPage) Database.getBufferPool().getPage(
+				tid, e.getLeftChild(), Permissions.READ_ONLY);
+		rightChild = (BTreeInternalPage) Database.getBufferPool().getPage(
+				tid, e.getRightChild(), Permissions.READ_ONLY);
+		assertEquals(0, leftChild.getNumEmptySlots());
+		assertTrue(e.getKey().compare(Op.LESS_THAN_OR_EQ, rightChild.iterator().next().getKey()));
+
+		// Delete tuples causing leaf pages to merge until the first internal page 
+		// gets below minimum occupancy and causes the entries to be redistributed
+		count = 0;
+		while(count < 62) {
+			assertEquals(count, leftChild.getNumEmptySlots());
+			for(int i = 0; i < 124; ++i) {
+				Database.getBufferPool().deleteTuple(tid, it.next());
+				it.rewind();
+			}
+			count++;
+		}
+
+		// deleting another page of tuples should bring the page below minimum occupancy 
+		// and cause it to merge with the right sibling to replace the root
+		for(int i = 0; i < 124; ++i) {
+			Database.getBufferPool().deleteTuple(tid, it.next());
+			it.rewind();
+		}
+
+		// confirm that the last two internal pages have merged successfully and 
+		// replaced the root
+		BTreePageId rootPtrId = BTreeRootPtrPage.getId(bigFile.getId());
+		rootPtr = (BTreeRootPtrPage) Database.getBufferPool().getPage(
+				tid, rootPtrId, Permissions.READ_ONLY);
+		assertTrue(rootPtr.getRootId().pgcateg() == BTreePageId.INTERNAL);
+		root = (BTreeInternalPage) Database.getBufferPool().getPage(
+				tid, rootPtr.getRootId(), Permissions.READ_ONLY);
+		assertEquals(0, root.getNumEmptySlots());
+		assertTrue(root.getParentId().equals(rootPtrId));
+
+		it.close();
+	}    
+
+	/**
+	 * JUnit suite target
+	 */
+	public static junit.framework.Test suite() {
+		return new JUnit4TestAdapter(BTreeFileDeleteTest.class);
+	}
+}
\ No newline at end of file
diff -ruN lab1/test/simpledb/systemtest/BTreeFileInsertTest.java lab3/test/simpledb/systemtest/BTreeFileInsertTest.java
--- lab1/test/simpledb/systemtest/BTreeFileInsertTest.java	1969-12-31 18:00:00.000000000 -0600
+++ lab3/test/simpledb/systemtest/BTreeFileInsertTest.java	2016-11-02 22:06:55.000000000 -0500
@@ -0,0 +1,287 @@
+package simpledb.systemtest;
+
+import simpledb.systemtest.SimpleDbTestBase;
+import simpledb.Predicate.Op;
+import simpledb.*;
+
+import java.io.File;
+import java.util.*;
+
+import org.junit.After;
+import org.junit.Before;
+import org.junit.Test;
+
+import static org.junit.Assert.*;
+import junit.framework.JUnit4TestAdapter;
+
+public class BTreeFileInsertTest extends SimpleDbTestBase {
+	private TransactionId tid;
+	
+	/**
+	 * Set up initial resources for each unit test.
+	 */
+	@Before
+	public void setUp() throws Exception {
+		tid = new TransactionId();
+	}
+
+	@After
+	public void tearDown() throws Exception {
+		Database.getBufferPool().transactionComplete(tid);
+		
+		// set the page size back to the default
+		BufferPool.resetPageSize();
+		Database.reset();
+	}
+
+	@Test public void addTuple() throws Exception {
+		// create an empty B+ tree file keyed on the second field of a 2-field tuple
+		File emptyFile = File.createTempFile("empty", ".dat");
+		emptyFile.deleteOnExit();
+		Database.reset();
+		BTreeFile empty = BTreeUtility.createEmptyBTreeFile(emptyFile.getAbsolutePath(), 2, 1);
+
+		Tuple tup = null;
+		// we should be able to add 502 tuples on one page
+		for (int i = 0; i < 502; ++i) {
+			tup = BTreeUtility.getBTreeTuple(i, 2);
+			empty.insertTuple(tid, tup);
+			assertEquals(1, empty.numPages());
+		}
+
+		// the next 251 tuples should live on page 2 since they are greater than
+		// all existing tuples in the file
+		for (int i = 502; i < 753; ++i) {
+			tup = BTreeUtility.getBTreeTuple(i, 2);
+			empty.insertTuple(tid, tup);
+			assertEquals(3, empty.numPages());
+		}
+
+		// one more insert greater than 502 should cause page 2 to split
+		tup = BTreeUtility.getBTreeTuple(753, 2);
+		empty.insertTuple(tid, tup);
+		assertEquals(4, empty.numPages());
+
+		// now make sure the records are sorted on the key field
+		DbFileIterator it = empty.iterator(tid);
+		it.open();
+		int prev = -1;
+		while(it.hasNext()) {
+			Tuple t = it.next();
+			int value = ((IntField) t.getField(0)).getValue();
+			assertTrue(value >= prev);
+			prev = value;
+		} 
+	}
+
+	@Test public void addDuplicateTuples() throws Exception {
+		// create an empty B+ tree file keyed on the second field of a 2-field tuple
+		File emptyFile = File.createTempFile("empty", ".dat");
+		emptyFile.deleteOnExit();
+		Database.reset();
+		BTreeFile empty = BTreeUtility.createEmptyBTreeFile(emptyFile.getAbsolutePath(), 2, 1);
+
+		Tuple tup = null;
+
+		BTreeChecker.checkRep(empty, tid, new HashMap<PageId, Page>(), true);
+
+		// add a bunch of identical tuples
+		for (int i = 0; i < 5; ++i) {
+			for(int j = 0; j < 600; ++j) {
+				tup = BTreeUtility.getBTreeTuple(i, 2);
+				empty.insertTuple(tid, tup);
+				// BTreeChecker.checkRep(empty, tid, new HashMap<PageId, Page>(), true);
+			}
+
+		}
+
+		BTreeChecker.checkRep(empty, tid, new HashMap<PageId, Page>(), true);
+
+		// now search for some ranges and make sure we find all the tuples
+		IndexPredicate ipred = new IndexPredicate(Op.EQUALS, new IntField(3));
+		DbFileIterator it = empty.indexIterator(tid, ipred);
+		it.open();
+		int count = 0;
+		while(it.hasNext()) {
+			it.next();
+			count++;
+		} 
+		assertEquals(600, count);
+
+		ipred = new IndexPredicate(Op.GREATER_THAN_OR_EQ, new IntField(2));
+		it = empty.indexIterator(tid, ipred);
+		it.open();
+		count = 0;
+		while(it.hasNext()) {
+			it.next();
+			count++;
+		} 
+		assertEquals(1800, count);
+
+		ipred = new IndexPredicate(Op.LESS_THAN, new IntField(2));
+		it = empty.indexIterator(tid, ipred);
+		it.open();
+		count = 0;
+		while(it.hasNext()) {
+			it.next();
+			count++;
+		} 
+		assertEquals(1200, count);
+	}
+
+	@Test
+	public void testSplitLeafPage() throws Exception {
+		// This should create a B+ tree with one full page
+		BTreeFile onePageFile = BTreeUtility.createRandomBTreeFile(2, 502,
+				null, null, 0);
+
+		// there should be 1 leaf page
+		assertEquals(1, onePageFile.numPages());
+
+		// now insert a tuple
+		Database.getBufferPool().insertTuple(tid, onePageFile.getId(), BTreeUtility.getBTreeTuple(5000, 2));
+
+		// there should now be 2 leaf pages + 1 internal node
+		assertEquals(3, onePageFile.numPages());
+
+		// the root node should be an internal node and have 2 children (1 entry)
+		BTreePageId rootPtrPid = new BTreePageId(onePageFile.getId(), 0, BTreePageId.ROOT_PTR);
+		BTreeRootPtrPage rootPtr = (BTreeRootPtrPage) Database.getBufferPool().getPage(tid, rootPtrPid, Permissions.READ_ONLY);
+		BTreePageId rootId = rootPtr.getRootId();
+		assertEquals(rootId.pgcateg(), BTreePageId.INTERNAL);
+		BTreeInternalPage root = (BTreeInternalPage) Database.getBufferPool().getPage(tid, rootId, Permissions.READ_ONLY);
+		assertEquals(502, root.getNumEmptySlots());
+
+		// each child should have half of the records
+		Iterator<BTreeEntry> it = root.iterator();
+		assertTrue(it.hasNext());
+		BTreeEntry e = it.next();
+		BTreeLeafPage leftChild = (BTreeLeafPage) Database.getBufferPool().getPage(tid, e.getLeftChild(), Permissions.READ_ONLY);
+		BTreeLeafPage rightChild = (BTreeLeafPage) Database.getBufferPool().getPage(tid, e.getRightChild(), Permissions.READ_ONLY);
+		assertTrue(leftChild.getNumEmptySlots() <= 251);
+		assertTrue(rightChild.getNumEmptySlots() <= 251);
+
+	}
+
+	@Test
+	public void testSplitRootPage() throws Exception {
+		// This should create a packed B+ tree with no empty slots
+		// There are 503 keys per internal page (504 children) and 502 tuples per leaf page
+		// 504 * 502 = 253008
+		BTreeFile bigFile = BTreeUtility.createRandomBTreeFile(2, 253008,
+				null, null, 0);
+
+		// we will need more room in the buffer pool for this test
+		Database.resetBufferPool(500);		
+
+		// there should be 504 leaf pages + 1 internal node
+		assertEquals(505, bigFile.numPages());
+
+		// now insert a tuple
+		Database.getBufferPool().insertTuple(tid, bigFile.getId(), BTreeUtility.getBTreeTuple(10, 2));
+
+		// there should now be 505 leaf pages + 3 internal nodes
+		assertEquals(508, bigFile.numPages());
+
+		// the root node should be an internal node and have 2 children (1 entry)
+		BTreePageId rootPtrPid = new BTreePageId(bigFile.getId(), 0, BTreePageId.ROOT_PTR);
+		BTreeRootPtrPage rootPtr = (BTreeRootPtrPage) Database.getBufferPool().getPage(tid, rootPtrPid, Permissions.READ_ONLY);
+		BTreePageId rootId = rootPtr.getRootId();
+		assertEquals(rootId.pgcateg(), BTreePageId.INTERNAL);
+		BTreeInternalPage root = (BTreeInternalPage) Database.getBufferPool().getPage(tid, rootId, Permissions.READ_ONLY);
+		assertEquals(502, root.getNumEmptySlots());
+
+		// each child should have half of the entries
+		Iterator<BTreeEntry> it = root.iterator();
+		assertTrue(it.hasNext());
+		BTreeEntry e = it.next();
+		BTreeInternalPage leftChild = (BTreeInternalPage) Database.getBufferPool().getPage(tid, e.getLeftChild(), Permissions.READ_ONLY);
+		BTreeInternalPage rightChild = (BTreeInternalPage) Database.getBufferPool().getPage(tid, e.getRightChild(), Permissions.READ_ONLY);
+		assertTrue(leftChild.getNumEmptySlots() <= 252);
+		assertTrue(rightChild.getNumEmptySlots() <= 252);
+
+		// now insert some random tuples and make sure we can find them
+		Random rand = new Random();
+		for(int i = 0; i < 100; i++) {
+			int item = rand.nextInt(BTreeUtility.MAX_RAND_VALUE);
+			Tuple t = BTreeUtility.getBTreeTuple(item, 2);
+			Database.getBufferPool().insertTuple(tid, bigFile.getId(), t);
+
+			IndexPredicate ipred = new IndexPredicate(Op.EQUALS, t.getField(0));
+			DbFileIterator fit = bigFile.indexIterator(tid, ipred);
+			fit.open();
+			boolean found = false;
+			while(fit.hasNext()) {
+				if(fit.next().equals(t)) {
+					found = true;
+					break;
+				}
+			}
+			fit.close();
+			assertTrue(found);
+		}
+	}
+
+	@Test
+	public void testSplitInternalPage() throws Exception {
+		// For this test we will decrease the size of the Buffer Pool pages
+    	BufferPool.setPageSize(1024);
+
+		// This should create a B+ tree with a packed second tier of internal pages
+		// and packed third tier of leaf pages
+    	// (124 entries per internal/leaf page, 125 children per internal page ->
+    	// 125*2*124 = 31000)
+		BTreeFile bigFile = BTreeUtility.createRandomBTreeFile(2, 31000,
+				null, null, 0);
+		
+		// we will need more room in the buffer pool for this test
+		Database.resetBufferPool(1000);
+
+		// there should be 250 leaf pages + 3 internal nodes
+		assertEquals(253, bigFile.numPages());
+
+		// now insert some random tuples and make sure we can find them
+		Random rand = new Random();
+		for(int i = 0; i < 100; i++) {
+			int item = rand.nextInt(BTreeUtility.MAX_RAND_VALUE);
+			Tuple t = BTreeUtility.getBTreeTuple(item, 2);
+			Database.getBufferPool().insertTuple(tid, bigFile.getId(), t);
+
+			IndexPredicate ipred = new IndexPredicate(Op.EQUALS, t.getField(0));
+			DbFileIterator fit = bigFile.indexIterator(tid, ipred);
+			fit.open();
+			boolean found = false;
+			while(fit.hasNext()) {
+				if(fit.next().equals(t)) {
+					found = true;
+					break;
+				}
+			}
+			fit.close();
+			assertTrue(found);
+		}
+
+		// now make sure we have 31100 records and they are all in sorted order
+		DbFileIterator fit = bigFile.iterator(tid);
+		int count = 0;
+		Tuple prev = null;
+		fit.open();
+		while(fit.hasNext()) {
+			Tuple tup = fit.next();
+			if(prev != null)
+				assertTrue(tup.getField(0).compare(Op.GREATER_THAN_OR_EQ, prev.getField(0)));
+			prev = tup;
+			count++;
+		}
+		fit.close();
+		assertEquals(31100, count);	
+		
+	}
+
+	/**
+	 * JUnit suite target
+	 */
+	public static junit.framework.Test suite() {
+		return new JUnit4TestAdapter(BTreeFileInsertTest.class);
+	}
+}
diff -ruN lab1/test/simpledb/systemtest/BTreeScanTest.java lab3/test/simpledb/systemtest/BTreeScanTest.java
--- lab1/test/simpledb/systemtest/BTreeScanTest.java	1969-12-31 18:00:00.000000000 -0600
+++ lab3/test/simpledb/systemtest/BTreeScanTest.java	2016-11-02 22:06:55.000000000 -0500
@@ -0,0 +1,289 @@
+package simpledb.systemtest;
+
+import simpledb.systemtest.SystemTestUtil;
+
+import static org.junit.Assert.*;
+
+import java.io.File;
+import java.io.IOException;
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.Comparator;
+import java.util.NoSuchElementException;
+import java.util.Random;
+import java.util.Iterator;
+
+import org.junit.Test;
+import org.junit.Before;
+
+import simpledb.*;
+import simpledb.Predicate.Op;
+
+/**
+ * Dumps the contents of a table.
+ * args[1] is the number of columns.  E.g., if it's 5, then BTreeScanTest will end
+ * up dumping the contents of f4.0.txt.
+ */
+public class BTreeScanTest extends SimpleDbTestBase {
+    private final static Random r = new Random();
+    
+    /** Tests the scan operator for a table with the specified dimensions. */
+    private void validateScan(int[] columnSizes, int[] rowSizes)
+            throws IOException, DbException, TransactionAbortedException {
+    	TransactionId tid = new TransactionId();
+    	for (int columns : columnSizes) {
+    		int keyField = r.nextInt(columns);
+            for (int rows : rowSizes) {
+                ArrayList<ArrayList<Integer>> tuples = new ArrayList<ArrayList<Integer>>();
+                BTreeFile f = BTreeUtility.createRandomBTreeFile(columns, rows, null, tuples, keyField);
+                BTreeScan scan = new BTreeScan(tid, f.getId(), "table", null);
+                SystemTestUtil.matchTuples(scan, tuples);
+                Database.resetBufferPool(BufferPool.DEFAULT_PAGES);
+            }
+        }
+    	Database.getBufferPool().transactionComplete(tid);
+    }
+    
+    // comparator to sort Tuples by key field
+    private static class TupleComparator implements Comparator<ArrayList<Integer>> {
+        private int keyField;
+        
+        public TupleComparator(int keyField) {
+        	this.keyField = keyField;
+        }
+        
+    	public int compare(ArrayList<Integer> t1, ArrayList<Integer> t2) {
+            int cmp = 0;
+            if(t1.get(keyField) < t2.get(keyField)) {
+            	cmp = -1;
+            }
+            else if(t1.get(keyField) > t2.get(keyField)) {
+            	cmp = 1;
+            }
+            return cmp;
+        }
+    }
+    
+    /** Counts the number of readPage operations. */
+    class InstrumentedBTreeFile extends BTreeFile {
+        public InstrumentedBTreeFile(File f, int keyField, TupleDesc td) {
+            super(f, keyField, td);
+        }
+
+        @Override
+        public Page readPage(PageId pid) throws NoSuchElementException {
+            readCount += 1;
+            return super.readPage(pid);
+        }
+
+        public int readCount = 0;
+    }
+    
+    /** Scan 1-4 columns. */
+    @Test public void testSmall() throws IOException, DbException, TransactionAbortedException {
+        int[] columnSizes = new int[]{1, 2, 3, 4};
+        int[] rowSizes =
+                new int[]{0, 1, 2, 511, 512, 513, 1023, 1024, 1025, 4096 + r.nextInt(4096)};
+        validateScan(columnSizes, rowSizes);
+    }
+
+    /** Test that rewinding a BTreeScan iterator works. */
+    @Test public void testRewind() throws IOException, DbException, TransactionAbortedException {
+        ArrayList<ArrayList<Integer>> tuples = new ArrayList<ArrayList<Integer>>();
+        int keyField = r.nextInt(2);
+        BTreeFile f = BTreeUtility.createRandomBTreeFile(2, 1000, null, tuples, keyField);
+        Collections.sort(tuples, new TupleComparator(keyField));
+        
+        TransactionId tid = new TransactionId();
+        BTreeScan scan = new BTreeScan(tid, f.getId(), "table", null);
+        scan.open();
+        for (int i = 0; i < 100; ++i) {
+            assertTrue(scan.hasNext());
+            Tuple t = scan.next();
+            assertEquals(tuples.get(i), SystemTestUtil.tupleToList(t));
+        }
+
+        scan.rewind();
+        for (int i = 0; i < 100; ++i) {
+            assertTrue(scan.hasNext());
+            Tuple t = scan.next();
+            assertEquals(tuples.get(i), SystemTestUtil.tupleToList(t));
+        }
+        scan.close();
+        Database.getBufferPool().transactionComplete(tid);
+    }
+    
+    /** Test that rewinding a BTreeScan iterator works with predicates. */
+    @Test public void testRewindPredicates() throws IOException, DbException, TransactionAbortedException {
+    	// Create the table
+        ArrayList<ArrayList<Integer>> tuples = new ArrayList<ArrayList<Integer>>();
+        int keyField = r.nextInt(3);
+        BTreeFile f = BTreeUtility.createRandomBTreeFile(3, 1000, null, tuples, keyField);
+        Collections.sort(tuples, new TupleComparator(keyField));
+                
+        // EQUALS
+        TransactionId tid = new TransactionId();
+        ArrayList<ArrayList<Integer>> tuplesFiltered = new ArrayList<ArrayList<Integer>>();
+        IndexPredicate ipred = new IndexPredicate(Op.EQUALS, new IntField(r.nextInt(BTreeUtility.MAX_RAND_VALUE)));
+        Iterator<ArrayList<Integer>> it = tuples.iterator();
+        while(it.hasNext()) {
+        	ArrayList<Integer> tup = it.next();
+        	if(tup.get(keyField) == ((IntField) ipred.getField()).getValue()) {
+        		tuplesFiltered.add(tup);
+        	}
+        }
+        
+        BTreeScan scan = new BTreeScan(tid, f.getId(), "table", ipred);
+        scan.open();
+        for (int i = 0; i < tuplesFiltered.size(); ++i) {
+            assertTrue(scan.hasNext());
+            Tuple t = scan.next();
+            assertEquals(tuplesFiltered.get(i), SystemTestUtil.tupleToList(t));
+        }
+
+        scan.rewind();
+        for (int i = 0; i < tuplesFiltered.size(); ++i) {
+            assertTrue(scan.hasNext());
+            Tuple t = scan.next();
+            assertEquals(tuplesFiltered.get(i), SystemTestUtil.tupleToList(t));
+        }
+        scan.close();
+        
+        // LESS_THAN
+        tuplesFiltered.clear();
+        ipred = new IndexPredicate(Op.LESS_THAN, new IntField(r.nextInt(BTreeUtility.MAX_RAND_VALUE)));
+        it = tuples.iterator();
+        while(it.hasNext()) {
+        	ArrayList<Integer> tup = it.next();
+        	if(tup.get(keyField) < ((IntField) ipred.getField()).getValue()) {
+        		tuplesFiltered.add(tup);
+        	}
+        }
+        
+        scan = new BTreeScan(tid, f.getId(), "table", ipred);
+        scan.open();
+        for (int i = 0; i < tuplesFiltered.size(); ++i) {
+            assertTrue(scan.hasNext());
+            Tuple t = scan.next();
+            assertEquals(tuplesFiltered.get(i), SystemTestUtil.tupleToList(t));
+        }
+
+        scan.rewind();
+        for (int i = 0; i < tuplesFiltered.size(); ++i) {
+            assertTrue(scan.hasNext());
+            Tuple t = scan.next();
+            assertEquals(tuplesFiltered.get(i), SystemTestUtil.tupleToList(t));
+        }
+        scan.close();
+        
+        // GREATER_THAN
+        tuplesFiltered.clear();
+        ipred = new IndexPredicate(Op.GREATER_THAN_OR_EQ, new IntField(r.nextInt(BTreeUtility.MAX_RAND_VALUE)));
+        it = tuples.iterator();
+        while(it.hasNext()) {
+        	ArrayList<Integer> tup = it.next();
+        	if(tup.get(keyField) >= ((IntField) ipred.getField()).getValue()) {
+        		tuplesFiltered.add(tup);
+        	}
+        }
+        
+        scan = new BTreeScan(tid, f.getId(), "table", ipred);
+        scan.open();
+        for (int i = 0; i < tuplesFiltered.size(); ++i) {
+            assertTrue(scan.hasNext());
+            Tuple t = scan.next();
+            assertEquals(tuplesFiltered.get(i), SystemTestUtil.tupleToList(t));
+        }
+
+        scan.rewind();
+        for (int i = 0; i < tuplesFiltered.size(); ++i) {
+            assertTrue(scan.hasNext());
+            Tuple t = scan.next();
+            assertEquals(tuplesFiltered.get(i), SystemTestUtil.tupleToList(t));
+        }
+        scan.close();
+        Database.getBufferPool().transactionComplete(tid);
+    }
+    
+    /** Test that scanning the BTree for predicates does not read all the pages */
+    @Test public void testReadPage() throws Exception {
+    	// Create the table
+        final int LEAF_PAGES = 30;
+    	
+    	ArrayList<ArrayList<Integer>> tuples = new ArrayList<ArrayList<Integer>>();
+        int keyField = 0;
+        BTreeFile f = BTreeUtility.createBTreeFile(2, LEAF_PAGES*502, null, tuples, keyField);
+        Collections.sort(tuples, new TupleComparator(keyField));
+        TupleDesc td = Utility.getTupleDesc(2);
+        InstrumentedBTreeFile table = new InstrumentedBTreeFile(f.getFile(), keyField, td);
+        Database.getCatalog().addTable(table, SystemTestUtil.getUUID());
+        
+        // EQUALS
+        TransactionId tid = new TransactionId();
+        ArrayList<ArrayList<Integer>> tuplesFiltered = new ArrayList<ArrayList<Integer>>();
+        IndexPredicate ipred = new IndexPredicate(Op.EQUALS, new IntField(r.nextInt(LEAF_PAGES*502)));
+        Iterator<ArrayList<Integer>> it = tuples.iterator();
+        while(it.hasNext()) {
+        	ArrayList<Integer> tup = it.next();
+        	if(tup.get(keyField) == ((IntField) ipred.getField()).getValue()) {
+        		tuplesFiltered.add(tup);
+        	}
+        }
+        
+        Database.resetBufferPool(BufferPool.DEFAULT_PAGES);
+        table.readCount = 0;
+        BTreeScan scan = new BTreeScan(tid, f.getId(), "table", ipred);
+        SystemTestUtil.matchTuples(scan, tuplesFiltered);
+        // root pointer page + root + leaf page (possibly 2 leaf pages)
+        assertTrue(table.readCount == 3 || table.readCount == 4);
+        
+        // LESS_THAN
+        tuplesFiltered.clear();
+        ipred = new IndexPredicate(Op.LESS_THAN, new IntField(r.nextInt(LEAF_PAGES*502)));
+        it = tuples.iterator();
+        while(it.hasNext()) {
+        	ArrayList<Integer> tup = it.next();
+        	if(tup.get(keyField) < ((IntField) ipred.getField()).getValue()) {
+        		tuplesFiltered.add(tup);
+        	}
+        }
+        
+        Database.resetBufferPool(BufferPool.DEFAULT_PAGES);
+        table.readCount = 0;
+        scan = new BTreeScan(tid, f.getId(), "table", ipred);
+        SystemTestUtil.matchTuples(scan, tuplesFiltered);
+        // root pointer page + root + leaf pages
+        int leafPageCount = tuplesFiltered.size()/502;
+        if(leafPageCount < LEAF_PAGES)
+        	leafPageCount++; // +1 for next key locking
+        assertEquals(leafPageCount + 2, table.readCount);
+        
+        // GREATER_THAN
+        tuplesFiltered.clear();
+        ipred = new IndexPredicate(Op.GREATER_THAN_OR_EQ, new IntField(r.nextInt(LEAF_PAGES*502)));
+        it = tuples.iterator();
+        while(it.hasNext()) {
+        	ArrayList<Integer> tup = it.next();
+        	if(tup.get(keyField) >= ((IntField) ipred.getField()).getValue()) {
+        		tuplesFiltered.add(tup);
+        	}
+        }
+        
+        Database.resetBufferPool(BufferPool.DEFAULT_PAGES);
+        table.readCount = 0;
+        scan = new BTreeScan(tid, f.getId(), "table", ipred);
+        SystemTestUtil.matchTuples(scan, tuplesFiltered);
+        // root pointer page + root + leaf pages
+        leafPageCount = tuplesFiltered.size()/502;
+        if(leafPageCount < LEAF_PAGES)
+        	leafPageCount++; // +1 for next key locking
+        assertEquals(leafPageCount + 2, table.readCount);
+        
+        Database.getBufferPool().transactionComplete(tid);
+    }
+
+    /** Make test compatible with older version of ant. */
+    public static junit.framework.Test suite() {
+        return new junit.framework.JUnit4TestAdapter(BTreeScanTest.class);
+    }
+}
diff -ruN lab1/test/simpledb/systemtest/DeleteTest.java lab3/test/simpledb/systemtest/DeleteTest.java
--- lab1/test/simpledb/systemtest/DeleteTest.java	1969-12-31 18:00:00.000000000 -0600
+++ lab3/test/simpledb/systemtest/DeleteTest.java	2016-11-02 22:06:55.000000000 -0500
@@ -0,0 +1,58 @@
+package simpledb.systemtest;
+
+import static org.junit.Assert.*;
+
+import java.io.IOException;
+import java.util.ArrayList;
+import simpledb.*;
+
+public class DeleteTest extends FilterBase {
+    ArrayList<ArrayList<Integer>> expectedTuples = null;
+
+    @Override
+    protected int applyPredicate(HeapFile table, TransactionId tid, Predicate predicate)
+            throws DbException, TransactionAbortedException, IOException {
+        SeqScan ss = new SeqScan(tid, table.getId(), "");
+        Filter filter = new Filter(predicate, ss);
+        Delete deleteOperator = new Delete(tid, filter);
+//        Query q = new Query(deleteOperator, tid);
+
+//        q.start();
+        deleteOperator.open();
+        boolean hasResult = false;
+        int result = -1;
+        while (deleteOperator.hasNext()) {
+            Tuple t = deleteOperator.next();
+            assertFalse(hasResult);
+            hasResult = true;
+            assertEquals(SystemTestUtil.SINGLE_INT_DESCRIPTOR, t.getTupleDesc());
+            result = ((IntField) t.getField(0)).getValue();
+        }
+        assertTrue(hasResult);
+
+        deleteOperator.close();
+
+        // As part of the same transaction, scan the table
+        if (result == 0) {
+            // Deleted zero tuples: all tuples still in table
+            expectedTuples = createdTuples;
+        } else {
+            assert result == createdTuples.size();
+            expectedTuples = new ArrayList<ArrayList<Integer>>();
+        }
+        SystemTestUtil.matchTuples(table, tid, expectedTuples);
+        return result;
+    }
+
+    @Override
+    protected void validateAfter(HeapFile table)
+            throws DbException, TransactionAbortedException, IOException {
+        // As part of a different transaction, scan the table
+        SystemTestUtil.matchTuples(table, expectedTuples);
+    }
+
+    /** Make test compatible with older version of ant. */
+    public static junit.framework.Test suite() {
+        return new junit.framework.JUnit4TestAdapter(DeleteTest.class);
+    }
+}
diff -ruN lab1/test/simpledb/systemtest/EvictionTest.java lab3/test/simpledb/systemtest/EvictionTest.java
--- lab1/test/simpledb/systemtest/EvictionTest.java	1969-12-31 18:00:00.000000000 -0600
+++ lab3/test/simpledb/systemtest/EvictionTest.java	2016-11-02 22:06:55.000000000 -0500
@@ -0,0 +1,84 @@
+package simpledb.systemtest;
+
+import static org.junit.Assert.*;
+
+import java.io.IOException;
+import java.util.Arrays;
+
+import org.junit.Test;
+
+import junit.framework.Assert;
+import simpledb.*;
+
+/**
+ * Creates a heap file with 1024*500 tuples with two integer fields each.  Clears the buffer pool,
+ * and performs a sequential scan through all of the pages.  If the growth in JVM usage
+ * is greater than 2 MB due to the scan, the test fails.  Otherwise, the page eviction policy seems
+ * to have worked.
+ */
+public class EvictionTest extends SimpleDbTestBase {
+    private static final long MEMORY_LIMIT_IN_MB = 5;
+    private static final int BUFFER_PAGES = 16;
+
+    @Test public void testHeapFileScanWithManyPages() throws IOException, DbException, TransactionAbortedException {
+        System.out.println("EvictionTest creating large table");
+        HeapFile f = SystemTestUtil.createRandomHeapFile(2, 1024*500, null, null);
+        System.out.println("EvictionTest scanning large table");
+        Database.resetBufferPool(BUFFER_PAGES);
+        long beginMem = SystemTestUtil.getMemoryFootprint();
+        TransactionId tid = new TransactionId();
+        SeqScan scan = new SeqScan(tid, f.getId(), "");
+        scan.open();
+        while (scan.hasNext()) {
+            scan.next();
+        }
+        System.out.println("EvictionTest scan complete, testing memory usage of scan");
+        long endMem = SystemTestUtil.getMemoryFootprint();
+        long memDiff = (endMem - beginMem) / (1<<20);
+        if (memDiff > MEMORY_LIMIT_IN_MB) {
+            Assert.fail("Did not evict enough pages.  Scan took " + memDiff + " MB of RAM, when limit was " + MEMORY_LIMIT_IN_MB);
+        }
+    }
+
+    public static void insertRow(HeapFile f, Transaction t) throws DbException,
+            TransactionAbortedException {
+        // Create a row to insert
+        TupleDesc twoIntColumns = Utility.getTupleDesc(2);
+        Tuple value = new Tuple(twoIntColumns);
+        value.setField(0, new IntField(-42));
+        value.setField(1, new IntField(-43));
+        TupleIterator insertRow = new TupleIterator(Utility.getTupleDesc(2), Arrays.asList(new Tuple[]{value}));
+
+        // Insert the row
+        Insert insert = new Insert(t.getId(), insertRow, f.getId());
+        insert.open();
+        Tuple result = insert.next();
+        assertEquals(SystemTestUtil.SINGLE_INT_DESCRIPTOR, result.getTupleDesc());
+        assertEquals(1, ((IntField)result.getField(0)).getValue());
+        assertFalse(insert.hasNext());
+        insert.close();
+    }
+
+    public static boolean findMagicTuple(HeapFile f, Transaction t)
+            throws DbException, TransactionAbortedException {
+        SeqScan ss = new SeqScan(t.getId(), f.getId(), "");
+        boolean found = false;
+        ss.open();
+        while (ss.hasNext()) {
+            Tuple v = ss.next();
+            int v0 = ((IntField)v.getField(0)).getValue();
+            int v1 = ((IntField)v.getField(1)).getValue();
+            if (v0 == -42 && v1 == -43) {
+                assertFalse(found);
+                found = true;
+            }
+        }
+        ss.close();
+        return found;
+    }
+
+    /** Make test compatible with older version of ant. */
+    public static junit.framework.Test suite() {
+        return new junit.framework.JUnit4TestAdapter(EvictionTest.class);
+    }
+}
diff -ruN lab1/test/simpledb/systemtest/FilterBase.java lab3/test/simpledb/systemtest/FilterBase.java
--- lab1/test/simpledb/systemtest/FilterBase.java	1969-12-31 18:00:00.000000000 -0600
+++ lab3/test/simpledb/systemtest/FilterBase.java	2016-11-02 22:06:55.000000000 -0500
@@ -0,0 +1,85 @@
+package simpledb.systemtest;
+
+import java.io.IOException;
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.Map;
+
+import static org.junit.Assert.*;
+import org.junit.Test;
+
+import simpledb.*;
+
+public abstract class FilterBase extends SimpleDbTestBase {
+    private static final int COLUMNS = 3;
+    private static final int ROWS = 1097;
+
+    /** Should apply the predicate to table. This will be executed in transaction tid. */
+    protected abstract int applyPredicate(HeapFile table, TransactionId tid, Predicate predicate)
+            throws DbException, TransactionAbortedException, IOException;
+
+    /** Optional hook for validating database state after applyPredicate. */
+    protected void validateAfter(HeapFile table)
+            throws DbException, TransactionAbortedException, IOException {}
+
+    protected ArrayList<ArrayList<Integer>> createdTuples;
+
+    private int runTransactionForPredicate(HeapFile table, Predicate predicate)
+            throws IOException, DbException, TransactionAbortedException {
+        TransactionId tid = new TransactionId();
+        int result = applyPredicate(table, tid, predicate);
+        Database.getBufferPool().transactionComplete(tid);
+        return result;
+    }
+
+    private void validatePredicate(int column, int columnValue, int trueValue, int falseValue,
+            Predicate.Op operation) throws IOException, DbException, TransactionAbortedException {
+        // Test the true value
+        HeapFile f = createTable(column, columnValue);
+        Predicate predicate = new Predicate(column, operation, new IntField(trueValue));
+        assertEquals(ROWS, runTransactionForPredicate(f, predicate));
+        f = Utility.openHeapFile(COLUMNS, f.getFile());
+        validateAfter(f);
+
+        // Test the false value
+        f = createTable(column, columnValue);
+        predicate = new Predicate(column, operation, new IntField(falseValue));
+        assertEquals(0, runTransactionForPredicate(f, predicate));
+        f = Utility.openHeapFile(COLUMNS, f.getFile());
+        validateAfter(f);
+    }
+
+    private HeapFile createTable(int column, int columnValue)
+            throws IOException, DbException, TransactionAbortedException {
+        Map<Integer, Integer> columnSpecification = new HashMap<Integer, Integer>();
+        columnSpecification.put(column, columnValue);
+        createdTuples = new ArrayList<ArrayList<Integer>>();
+        return SystemTestUtil.createRandomHeapFile(
+                COLUMNS, ROWS, columnSpecification, createdTuples);
+    }
+
+    @Test public void testEquals() throws
+            DbException, TransactionAbortedException, IOException {
+        validatePredicate(0, 1, 1, 2, Predicate.Op.EQUALS);
+    }
+
+    @Test public void testLessThan() throws
+            DbException, TransactionAbortedException, IOException {
+        validatePredicate(1, 1, 2, 1, Predicate.Op.LESS_THAN);
+    }
+
+    @Test public void testLessThanOrEq() throws
+            DbException, TransactionAbortedException, IOException {
+        validatePredicate(2, 42, 42, 41, Predicate.Op.LESS_THAN_OR_EQ);
+    }
+
+    @Test public void testGreaterThan() throws
+            DbException, TransactionAbortedException, IOException {
+        validatePredicate(2, 42, 41, 42, Predicate.Op.GREATER_THAN);
+    }
+
+    @Test public void testGreaterThanOrEq() throws
+            DbException, TransactionAbortedException, IOException {
+        validatePredicate(2, 42, 42, 43, Predicate.Op.GREATER_THAN_OR_EQ);
+    }
+}
diff -ruN lab1/test/simpledb/systemtest/FilterTest.java lab3/test/simpledb/systemtest/FilterTest.java
--- lab1/test/simpledb/systemtest/FilterTest.java	1969-12-31 18:00:00.000000000 -0600
+++ lab3/test/simpledb/systemtest/FilterTest.java	2016-11-02 22:06:55.000000000 -0500
@@ -0,0 +1,29 @@
+package simpledb.systemtest;
+
+import java.io.IOException;
+import static org.junit.Assert.*;
+import simpledb.*;
+
+public class FilterTest extends FilterBase {
+    @Override
+    protected int applyPredicate(HeapFile table, TransactionId tid, Predicate predicate)
+            throws DbException, TransactionAbortedException, IOException {
+        SeqScan ss = new SeqScan(tid, table.getId(), "");
+        Filter filter = new Filter(predicate, ss);
+        filter.open();
+
+        int resultCount = 0;
+        while (filter.hasNext()) {
+            assertNotNull(filter.next());
+            resultCount += 1;
+        }
+
+        filter.close();
+        return resultCount;
+    }
+
+    /** Make test compatible with older version of ant. */
+    public static junit.framework.Test suite() {
+        return new junit.framework.JUnit4TestAdapter(FilterTest.class);
+    }
+}
diff -ruN lab1/test/simpledb/systemtest/InsertTest.java lab3/test/simpledb/systemtest/InsertTest.java
--- lab1/test/simpledb/systemtest/InsertTest.java	1969-12-31 18:00:00.000000000 -0600
+++ lab3/test/simpledb/systemtest/InsertTest.java	2016-11-02 22:06:55.000000000 -0500
@@ -0,0 +1,75 @@
+package simpledb.systemtest;
+
+import java.io.IOException;
+import java.util.ArrayList;
+import simpledb.*;
+
+import static org.junit.Assert.*;
+import org.junit.Test;
+
+public class InsertTest extends SimpleDbTestBase {
+    private void validateInsert(int columns, int sourceRows, int destinationRows)
+                throws DbException, IOException, TransactionAbortedException {
+        // Create the two tables
+        ArrayList<ArrayList<Integer>> sourceTuples = new ArrayList<ArrayList<Integer>>();
+        HeapFile source = SystemTestUtil.createRandomHeapFile(
+                columns, sourceRows, null, sourceTuples);
+        assert sourceTuples.size() == sourceRows;
+        ArrayList<ArrayList<Integer>> destinationTuples = new ArrayList<ArrayList<Integer>>();
+        HeapFile destination = SystemTestUtil.createRandomHeapFile(
+                columns, destinationRows, null, destinationTuples);
+        assert destinationTuples.size() == destinationRows;
+
+        // Insert source into destination
+        TransactionId tid = new TransactionId();
+        SeqScan ss = new SeqScan(tid, source.getId(), "");
+        Insert insOp = new Insert(tid, ss, destination.getId());
+
+//        Query q = new Query(insOp, tid);
+        insOp.open();
+        boolean hasResult = false;
+        while (insOp.hasNext()) {
+            Tuple tup = insOp.next();
+            assertFalse(hasResult);
+            hasResult = true;
+            assertEquals(SystemTestUtil.SINGLE_INT_DESCRIPTOR, tup.getTupleDesc());
+            assertEquals(sourceRows, ((IntField) tup.getField(0)).getValue());
+        }
+        assertTrue(hasResult);
+        insOp.close();
+
+        // As part of the same transaction, scan the table
+        sourceTuples.addAll(destinationTuples);
+        SystemTestUtil.matchTuples(destination, tid, sourceTuples);
+
+        // As part of a different transaction, scan the table
+        Database.getBufferPool().transactionComplete(tid);
+        Database.getBufferPool().flushAllPages();
+        SystemTestUtil.matchTuples(destination, sourceTuples);
+    }
+
+    @Test public void testEmptyToEmpty()
+            throws IOException, DbException, TransactionAbortedException {
+        validateInsert(3, 0, 0);
+    }
+
+    @Test public void testEmptyToOne()
+            throws IOException, DbException, TransactionAbortedException {
+        validateInsert(8, 0, 1);
+    }
+
+    @Test public void testOneToEmpty()
+            throws IOException, DbException, TransactionAbortedException {
+        validateInsert(3, 1, 0);
+    }
+
+    @Test public void testOneToOne()
+            throws IOException, DbException, TransactionAbortedException {
+        validateInsert(1, 1, 1);
+    }
+
+    /** Make test compatible with older version of ant. */
+    public static junit.framework.Test suite() {
+        return new junit.framework.JUnit4TestAdapter(InsertTest.class);
+    }
+}
diff -ruN lab1/test/simpledb/systemtest/JoinTest.java lab3/test/simpledb/systemtest/JoinTest.java
--- lab1/test/simpledb/systemtest/JoinTest.java	1969-12-31 18:00:00.000000000 -0600
+++ lab3/test/simpledb/systemtest/JoinTest.java	2016-11-02 22:06:55.000000000 -0500
@@ -0,0 +1,76 @@
+package simpledb.systemtest;
+
+import java.io.IOException;
+import java.util.ArrayList;
+import java.util.HashMap;
+
+import org.junit.Test;
+
+import simpledb.*;
+
+public class JoinTest extends SimpleDbTestBase {
+    private static final int COLUMNS = 2;
+    public void validateJoin(int table1ColumnValue, int table1Rows, int table2ColumnValue,
+            int table2Rows)
+            throws IOException, DbException, TransactionAbortedException {
+        // Create the two tables
+        HashMap<Integer, Integer> columnSpecification = new HashMap<Integer, Integer>();
+        columnSpecification.put(0, table1ColumnValue);
+        ArrayList<ArrayList<Integer>> t1Tuples = new ArrayList<ArrayList<Integer>>();
+        HeapFile table1 = SystemTestUtil.createRandomHeapFile(
+                COLUMNS, table1Rows, columnSpecification, t1Tuples);
+        assert t1Tuples.size() == table1Rows;
+
+        columnSpecification.put(0, table2ColumnValue);
+        ArrayList<ArrayList<Integer>> t2Tuples = new ArrayList<ArrayList<Integer>>();
+        HeapFile table2 = SystemTestUtil.createRandomHeapFile(
+                COLUMNS, table2Rows, columnSpecification, t2Tuples);
+        assert t2Tuples.size() == table2Rows;
+
+        // Generate the expected results
+        ArrayList<ArrayList<Integer>> expectedResults = new ArrayList<ArrayList<Integer>>();
+        for (ArrayList<Integer> t1 : t1Tuples) {
+            for (ArrayList<Integer> t2 : t2Tuples) {
+                // If the columns match, join the tuples
+                if (t1.get(0).equals(t2.get(0))) {
+                    ArrayList<Integer> out = new ArrayList<Integer>(t1);
+                    out.addAll(t2);
+                    expectedResults.add(out);
+                }
+            }
+        }
+
+        // Begin the join
+        TransactionId tid = new TransactionId();
+        SeqScan ss1 = new SeqScan(tid, table1.getId(), "");
+        SeqScan ss2 = new SeqScan(tid, table2.getId(), "");
+        JoinPredicate p = new JoinPredicate(0, Predicate.Op.EQUALS, 0);
+        Join joinOp = new Join(p, ss1, ss2);
+
+        // test the join results
+        SystemTestUtil.matchTuples(joinOp, expectedResults);
+
+        joinOp.close();
+        Database.getBufferPool().transactionComplete(tid);
+    }
+
+    @Test public void testSingleMatch()
+            throws IOException, DbException, TransactionAbortedException {
+        validateJoin(1, 1, 1, 1);
+    }
+
+    @Test public void testNoMatch()
+            throws IOException, DbException, TransactionAbortedException {
+        validateJoin(1, 2, 2, 10);
+    }
+
+    @Test public void testMultipleMatch()
+            throws IOException, DbException, TransactionAbortedException {
+        validateJoin(1, 3, 1, 3);
+    }
+
+    /** Make test compatible with older version of ant. */
+    public static junit.framework.Test suite() {
+        return new junit.framework.JUnit4TestAdapter(JoinTest.class);
+    }
+}
diff -ruN lab1/test/simpledb/systemtest/LogTest.java lab3/test/simpledb/systemtest/LogTest.java
--- lab1/test/simpledb/systemtest/LogTest.java	1969-12-31 18:00:00.000000000 -0600
+++ lab3/test/simpledb/systemtest/LogTest.java	2016-11-02 22:06:55.000000000 -0500
@@ -0,0 +1,434 @@
+package simpledb.systemtest;
+
+import java.io.*;
+import java.util.*;
+
+import org.junit.Test;
+
+import simpledb.*;
+
+import static org.junit.Assert.*;
+
+/**
+ * Test logging, aborts, and recovery.
+ */
+public class LogTest extends SimpleDbTestBase {
+    File file1;
+    File file2;
+    HeapFile hf1;
+    HeapFile hf2;
+
+    void insertRow(HeapFile hf, Transaction t, int v1, int v2)
+        throws DbException, TransactionAbortedException {
+        // Create a row to insert
+        TupleDesc twoIntColumns = Utility.getTupleDesc(2);
+        Tuple value = new Tuple(twoIntColumns);
+        value.setField(0, new IntField(v1));
+        value.setField(1, new IntField(v2));
+        TupleIterator insertRow = new TupleIterator(Utility.getTupleDesc(2), Arrays.asList(new Tuple[]{value}));
+
+        // Insert the row
+        Insert insert = new Insert(t.getId(), insertRow, hf.getId());
+        insert.open();
+        Tuple result = insert.next();
+        assertEquals(SystemTestUtil.SINGLE_INT_DESCRIPTOR, result.getTupleDesc());
+        assertEquals(1, ((IntField)result.getField(0)).getValue());
+        assertFalse(insert.hasNext());
+        insert.close();
+    }
+
+    // check that the specified tuple is, or is not, present
+    void look(HeapFile hf, Transaction t, int v1, boolean present)
+        throws DbException, TransactionAbortedException {
+        int count = 0;
+        SeqScan scan = new SeqScan(t.getId(), hf.getId(), "");
+        scan.open();
+        while(scan.hasNext()){
+            Tuple tu = scan.next();
+            int x = ((IntField)tu.getField(0)).getValue();
+            if(x == v1)
+                count = count + 1;
+        }
+        scan.close();
+        if(count > 1)
+            throw new RuntimeException("LogTest: tuple repeated");
+        if(present && count < 1)
+            throw new RuntimeException("LogTest: tuple missing");
+        if(present == false && count > 0)
+            throw new RuntimeException("LogTest: tuple present but shouldn't be");
+    }
+
+    // insert tuples
+    void doInsert(HeapFile hf, int t1, int t2)
+        throws DbException, TransactionAbortedException, IOException {
+        Transaction t = new Transaction();
+        t.start();
+        if(t1 != -1)
+            insertRow(hf, t, t1, 0);
+        Database.getBufferPool().flushAllPages();
+        if(t2 != -1)
+            insertRow(hf, t, t2, 0);
+        t.commit();
+    }
+
+    void abort(Transaction t)
+        throws DbException, TransactionAbortedException, IOException {
+        // t.transactionComplete(true); // abort
+        Database.getBufferPool().flushAllPages(); // XXX defeat NO-STEAL-based abort
+        Database.getLogFile().logAbort(t.getId()); // does rollback too
+        Database.getBufferPool().flushAllPages(); // prevent NO-STEAL-based abort from
+                                                  // un-doing the rollback
+        Database.getBufferPool().transactionComplete(t.getId(), false); // release locks
+    }
+
+    // insert tuples
+    // force dirty pages to disk, defeating NO-STEAL
+    // abort
+    void dontInsert(HeapFile hf, int t1, int t2)
+        throws DbException, TransactionAbortedException, IOException {
+        Transaction t = new Transaction();
+        t.start();
+        if(t1 != -1)
+            insertRow(hf, t, t1, 0);
+        if(t2 != -1)
+            insertRow(hf, t, t2, 0);
+        if(t1 != -1)
+            look(hf, t, t1, true);
+        if(t2 != -1)
+            look(hf, t, t2, true);
+        abort(t);
+    }
+
+    // simulate crash
+    // restart Database
+    // run log recovery
+    void crash()
+        throws DbException, TransactionAbortedException, IOException {
+        Database.reset();
+        hf1 = Utility.openHeapFile(2, file1);
+        hf2 = Utility.openHeapFile(2, file2);
+        Database.getLogFile().recover();
+    }
+
+    // create an initial database with two empty tables
+    // does *not* initiate log file recovery
+    void setup()
+            throws IOException, DbException, TransactionAbortedException {
+        Database.reset();
+
+        // empty heap files w/ 2 columns.
+        // adds to the catalog.
+        file1 = new File("simple1.db");
+        file1.delete();
+        file2 = new File("simple2.db");
+        file2.delete();
+        hf1 = Utility.createEmptyHeapFile(file1.getAbsolutePath(), 2);
+        hf2 = Utility.createEmptyHeapFile(file2.getAbsolutePath(), 2);
+    }
+
+    @Test public void PatchTest()
+            throws IOException, DbException, TransactionAbortedException {
+        setup();
+
+        // *** Test:
+        // check that BufferPool.flushPage() calls LogFile.logWrite().
+        doInsert(hf1, 1, 2);
+
+        if(Database.getLogFile().getTotalRecords() != 4)
+            throw new RuntimeException("LogTest: wrong # of log records; patch failed?");
+
+        // *** Test:
+        // check that BufferPool.transactionComplete(commit=true)
+        // called Page.setBeforeImage().
+        Transaction t1 = new Transaction();
+        t1.start();
+        Page p = Database.getBufferPool().getPage(t1.getId(),
+                                                  new HeapPageId(hf1.getId(), 0),
+                                                  Permissions.READ_ONLY);
+        Page p1 = p.getBeforeImage();
+        Boolean same = Arrays.equals(p.getPageData(),
+                                     p1.getPageData());
+        if(same == false)
+            throw new RuntimeException("LogTest:setBeforeImage() not called? patch failed?");
+    }
+
+    @Test public void TestFlushAll()
+            throws IOException, DbException, TransactionAbortedException {
+        setup();
+
+        // *** Test:
+        // check that flushAllPages writes the HeapFile
+        doInsert(hf1, 1, 2);
+
+        Transaction t1 = new Transaction();
+        t1.start();
+        HeapPage xp1 = (HeapPage) hf1.readPage(new HeapPageId(hf1.getId(), 0));
+        insertRow(hf1, t1, 3, 0);
+        Database.getBufferPool().flushAllPages();
+        HeapPage xp2 = (HeapPage) hf1.readPage(new HeapPageId(hf1.getId(), 0));
+
+        if(xp1.getNumEmptySlots() == xp2.getNumEmptySlots())
+            throw new RuntimeException("LogTest: flushAllPages() had no effect");
+    }
+
+    @Test public void TestCommitCrash()
+            throws IOException, DbException, TransactionAbortedException {
+        setup();
+
+        // *** Test:
+        // insert, crash, recover: data should still be there
+
+        doInsert(hf1, 1, 2);
+
+        crash();
+
+        Transaction t = new Transaction();
+        t.start();
+        look(hf1, t, 1, true);
+        look(hf1, t, 2, true);
+        look(hf1, t, 3, false);
+        t.commit();
+    }
+
+    @Test public void TestAbort()
+            throws IOException, DbException, TransactionAbortedException {
+        setup();
+        doInsert(hf1, 1, 2);
+
+        // *** Test:
+        // insert, abort: data should not be there
+        // flush pages directly to heap file to defeat NO-STEAL policy
+
+        dontInsert(hf1, 4, -1);
+
+        Transaction t = new Transaction();
+        t.start();
+        look(hf1, t, 1, true);
+        look(hf1, t, 2, true);
+        look(hf1, t, 3, false);
+        look(hf1, t, 4, false);
+        t.commit();
+    }
+
+    @Test public void TestAbortCommitInterleaved()
+            throws IOException, DbException, TransactionAbortedException {
+        setup();
+        doInsert(hf1, 1, 2);
+
+        // *** Test:
+        // T1 start, T2 start and commit, T1 abort
+
+        Transaction t1 = new Transaction();
+        t1.start();
+        insertRow(hf1, t1, 3, 0);
+
+        Transaction t2 = new Transaction();
+        t2.start();
+        insertRow(hf2, t2, 21, 0);
+        Database.getLogFile().logCheckpoint();
+        insertRow(hf2, t2, 22, 0);
+        t2.commit();
+
+        insertRow(hf1, t1, 4, 0);
+        abort(t1);
+
+        Transaction t = new Transaction();
+        t.start();
+        look(hf1, t, 1, true);
+        look(hf1, t, 2, true);
+        look(hf1, t, 3, false);
+        look(hf1, t, 4, false);
+        look(hf2, t, 21, true);
+        look(hf2, t, 22, true);
+        t.commit();
+    }
+
+    @Test public void TestAbortCrash()
+            throws IOException, DbException, TransactionAbortedException {
+        setup();
+        doInsert(hf1, 1, 2);
+
+        dontInsert(hf1, 4, -1);
+
+        Transaction t = new Transaction();
+        t.start();
+        look(hf1, t, 1, true);
+        look(hf1, t, 2, true);
+        look(hf1, t, 3, false);
+        look(hf1, t, 4, false);
+        t.commit();
+
+        // *** Test:
+        // crash and recover: data should still not be there
+
+        crash();
+
+        t = new Transaction();
+        t.start();
+        look(hf1, t, 1, true);
+        look(hf1, t, 2, true);
+        look(hf1, t, 3, false);
+        look(hf1, t, 4, false);
+        t.commit();
+    }
+
+    @Test public void TestCommitAbortCommitCrash()
+            throws IOException, DbException, TransactionAbortedException {
+        setup();
+        doInsert(hf1, 1, 2);
+
+        // *** Test:
+        // T1 inserts and commits
+        // T2 inserts but aborts
+        // T3 inserts and commit
+        // only T1 and T3 data should be there
+
+        doInsert(hf1, 5, -1);
+        dontInsert(hf1, 6, -1);
+        doInsert(hf1, 7, -1);
+
+        Transaction t = new Transaction();
+        t.start();
+        look(hf1, t, 1, true);
+        look(hf1, t, 5, true);
+        look(hf1, t, 6, false);
+        look(hf1, t, 7, true);
+        t.commit();
+
+        // *** Test:
+        // crash: should not change visible data
+
+        crash();
+
+        t = new Transaction();
+        t.start();
+        look(hf1, t, 1, true);
+        look(hf1, t, 2, true);
+        look(hf1, t, 3, false);
+        look(hf1, t, 4, false);
+        look(hf1, t, 5, true);
+        look(hf1, t, 6, false);
+        look(hf1, t, 7, true);
+        t.commit();
+    }
+
+    @Test public void TestOpenCrash()
+            throws IOException, DbException, TransactionAbortedException {
+        setup();
+        doInsert(hf1, 1, 2);
+
+        // *** Test:
+        // insert but no commit
+        // crash
+        // data should not be there
+
+        Transaction t = new Transaction();
+        t.start();
+        insertRow(hf1, t, 8, 0);
+        Database.getBufferPool().flushAllPages(); // XXX something to UNDO
+        insertRow(hf1, t, 9, 0);
+
+        crash();
+
+        t = new Transaction();
+        t.start();
+        look(hf1, t, 1, true);
+        look(hf1, t, 8, false);
+        look(hf1, t, 9, false);
+        t.commit();
+    }
+
+    @Test public void TestOpenCommitOpenCrash()
+            throws IOException, DbException, TransactionAbortedException {
+        setup();
+        doInsert(hf1, 1, 2);
+
+        // *** Test:
+        // T1 inserts but does not commit
+        // T2 inserts and commits
+        // T3 inserts but does not commit
+        // crash
+        // only T2 data should be there
+
+        Transaction t1 = new Transaction();
+        t1.start();
+        insertRow(hf1, t1, 10, 0);
+        Database.getBufferPool().flushAllPages(); // XXX defeat NO-STEAL-based abort
+        insertRow(hf1, t1, 11, 0);
+
+        // T2 commits
+        doInsert(hf2, 22, 23);
+
+        Transaction t3 = new Transaction();
+        t3.start();
+        insertRow(hf2, t3, 24, 0);
+        Database.getBufferPool().flushAllPages(); // XXX defeat NO-STEAL-based abort
+        insertRow(hf2, t3, 25, 0);
+
+        crash();
+
+        Transaction t = new Transaction();
+        t.start();
+        look(hf1, t, 1, true);
+        look(hf1, t, 10, false);
+        look(hf1, t, 11, false);
+        look(hf2, t, 22, true);
+        look(hf2, t, 23, true);
+        look(hf2, t, 24, false);
+        look(hf2, t, 25, false);
+        t.commit();
+    }
+
+    @Test public void TestOpenCommitCheckpointOpenCrash()
+            throws IOException, DbException, TransactionAbortedException {
+        setup();
+        doInsert(hf1, 1, 2);
+
+        // *** Test:
+        // T1 inserts but does not commit
+        // T2 inserts and commits
+        // checkpoint
+        // T3 inserts but does not commit
+        // crash
+        // only T2 data should be there
+
+        Transaction t1 = new Transaction();
+        t1.start();
+        insertRow(hf1, t1, 12, 0);
+        Database.getBufferPool().flushAllPages(); // XXX defeat NO-STEAL-based abort
+        insertRow(hf1, t1, 13, 0);
+
+        // T2 commits
+        doInsert(hf2, 26, 27);
+
+        Database.getLogFile().logCheckpoint();
+
+        Transaction t3 = new Transaction();
+        t3.start();
+        insertRow(hf2, t3, 28, 0);
+        Database.getBufferPool().flushAllPages(); // XXX defeat NO-STEAL-based abort
+        insertRow(hf2, t3, 29, 0);
+
+        crash();
+
+        Transaction t = new Transaction();
+        t.start();
+        look(hf1, t, 1, true);
+        look(hf1, t, 12, false);
+        look(hf1, t, 13, false);
+        look(hf2, t, 22, false);
+        look(hf2, t, 23, false);
+        look(hf2, t, 24, false);
+        look(hf2, t, 25, false);
+        look(hf2, t, 26, true);
+        look(hf2, t, 27, true);
+        look(hf2, t, 28, false);
+        look(hf2, t, 29, false);
+        t.commit();
+    }
+
+    /** Make test compatible with older version of ant. */
+    public static junit.framework.Test suite() {
+        return new junit.framework.JUnit4TestAdapter(LogTest.class);
+    }
+}
diff -ruN lab1/test/simpledb/systemtest/QueryTest.java lab3/test/simpledb/systemtest/QueryTest.java
--- lab1/test/simpledb/systemtest/QueryTest.java	1969-12-31 18:00:00.000000000 -0600
+++ lab3/test/simpledb/systemtest/QueryTest.java	2016-11-02 22:06:55.000000000 -0500
@@ -0,0 +1,167 @@
+package simpledb.systemtest;
+
+import java.io.File;
+import java.io.IOException;
+import java.util.ArrayList;
+import org.junit.Test;
+
+import simpledb.BufferPool;
+import simpledb.Database;
+import simpledb.DbException;
+import simpledb.HeapFile;
+import simpledb.HeapFileEncoder;
+import simpledb.Parser;
+import simpledb.TableStats;
+import simpledb.Transaction;
+import simpledb.TransactionAbortedException;
+import simpledb.Utility;
+
+public class QueryTest {
+	
+	/**
+	 * Given a matrix of tuples from SystemTestUtil.createRandomHeapFile, create an identical HeapFile table
+	 * @param tuples Tuples to create a HeapFile from
+	 * @param columns Each entry in tuples[] must have "columns == tuples.get(i).size()"
+	 * @param colPrefix String to prefix to the column names (the columns are named after their column number by default)
+	 * @return a new HeapFile containing the specified tuples
+	 * @throws IOException if a temporary file can't be created to hand to HeapFile to open and read its data
+	 */
+	public static HeapFile createDuplicateHeapFile(ArrayList<ArrayList<Integer>> tuples, int columns, String colPrefix) throws IOException {
+        File temp = File.createTempFile("table", ".dat");
+        temp.deleteOnExit();
+        HeapFileEncoder.convert(tuples, temp, BufferPool.getPageSize(), columns);
+        return Utility.openHeapFile(columns, colPrefix, temp);
+	}
+	
+	@Test(timeout=20000) public void queryTest() throws IOException, DbException, TransactionAbortedException {
+		// This test is intended to approximate the join described in the
+		// "Query Planning" section of 2009 Quiz 1,
+		// though with some minor variation due to limitations in simpledb
+		// and to only test your integer-heuristic code rather than
+		// string-heuristic code.		
+		final int IO_COST = 101;
+		
+//		HashMap<String, TableStats> stats = new HashMap<String, TableStats>();
+		
+		// Create all of the tables, and add them to the catalog
+		ArrayList<ArrayList<Integer>> empTuples = new ArrayList<ArrayList<Integer>>();
+		HeapFile emp = SystemTestUtil.createRandomHeapFile(6, 100000, null, empTuples, "c");	
+		Database.getCatalog().addTable(emp, "emp");
+		
+		ArrayList<ArrayList<Integer>> deptTuples = new ArrayList<ArrayList<Integer>>();
+		HeapFile dept = SystemTestUtil.createRandomHeapFile(3, 1000, null, deptTuples, "c");	
+		Database.getCatalog().addTable(dept, "dept");
+		
+		ArrayList<ArrayList<Integer>> hobbyTuples = new ArrayList<ArrayList<Integer>>();
+		HeapFile hobby = SystemTestUtil.createRandomHeapFile(6, 1000, null, hobbyTuples, "c");
+		Database.getCatalog().addTable(hobby, "hobby");
+		
+		ArrayList<ArrayList<Integer>> hobbiesTuples = new ArrayList<ArrayList<Integer>>();
+		HeapFile hobbies = SystemTestUtil.createRandomHeapFile(2, 200000, null, hobbiesTuples, "c");
+		Database.getCatalog().addTable(hobbies, "hobbies");
+		
+		// Get TableStats objects for each of the tables that we just generated.
+		TableStats.setTableStats("emp", new TableStats(Database.getCatalog().getTableId("emp"), IO_COST));
+		TableStats.setTableStats("dept", new TableStats(Database.getCatalog().getTableId("dept"), IO_COST));
+		TableStats.setTableStats("hobby", new TableStats(Database.getCatalog().getTableId("hobby"), IO_COST));
+		TableStats.setTableStats("hobbies", new TableStats(Database.getCatalog().getTableId("hobbies"), IO_COST));
+
+//		Parser.setStatsMap(stats);
+		
+		Transaction t = new Transaction();
+		t.start();
+		Parser p = new Parser();
+		p.setTransaction(t);
+		
+		// Each of these should return around 20,000
+		// This Parser implementation currently just dumps to stdout, so checking that isn't terribly clean.
+		// So, don't bother for now; future TODO.
+		// Regardless, each of the following should be optimized to run quickly,
+		// even though the worst case takes a very long time.
+		p.processNextStatement("SELECT * FROM emp,dept,hobbies,hobby WHERE emp.c1 = dept.c0 AND hobbies.c0 = emp.c2 AND hobbies.c1 = hobby.c0 AND emp.c3 < 1000;");
+	}
+	
+	/**
+	 * Build a large series of tables; then run the command-line query code and execute a query.
+	 * The number of tables is large enough that the query will only succeed within the
+	 * specified time if a join method faster than nested-loops join is available.
+	 * The tables are also too big for a query to be successful if its query plan isn't reasonably efficient,
+	 * and there are too many tables for a brute-force search of all possible query plans.
+	 */
+	// Not required for Lab 4
+	/*@Test(timeout=60000) public void hashJoinTest() throws IOException, DbException, TransactionAbortedException {
+		final int IO_COST = 103;
+		
+		HashMap<String, TableStats> stats = new HashMap<String,TableStats>();
+				
+		ArrayList<ArrayList<Integer>> smallHeapFileTuples = new ArrayList<ArrayList<Integer>>();
+		HeapFile smallHeapFileA = SystemTestUtil.createRandomHeapFile(2, 100, Integer.MAX_VALUE, null, smallHeapFileTuples, "c");		
+		HeapFile smallHeapFileB = createDuplicateHeapFile(smallHeapFileTuples, 2, "c");		
+		HeapFile smallHeapFileC = createDuplicateHeapFile(smallHeapFileTuples, 2, "c");		
+		HeapFile smallHeapFileD = createDuplicateHeapFile(smallHeapFileTuples, 2, "c");		
+		HeapFile smallHeapFileE = createDuplicateHeapFile(smallHeapFileTuples, 2, "c");		
+		HeapFile smallHeapFileF = createDuplicateHeapFile(smallHeapFileTuples, 2, "c");		
+		HeapFile smallHeapFileG = createDuplicateHeapFile(smallHeapFileTuples, 2, "c");
+		HeapFile smallHeapFileH = createDuplicateHeapFile(smallHeapFileTuples, 2, "c");
+		HeapFile smallHeapFileI = createDuplicateHeapFile(smallHeapFileTuples, 2, "c");
+		HeapFile smallHeapFileJ = createDuplicateHeapFile(smallHeapFileTuples, 2, "c");
+		HeapFile smallHeapFileK = createDuplicateHeapFile(smallHeapFileTuples, 2, "c");
+		HeapFile smallHeapFileL = createDuplicateHeapFile(smallHeapFileTuples, 2, "c");
+		HeapFile smallHeapFileM = createDuplicateHeapFile(smallHeapFileTuples, 2, "c");
+		HeapFile smallHeapFileN = createDuplicateHeapFile(smallHeapFileTuples, 2, "c");
+		
+		ArrayList<ArrayList<Integer>> bigHeapFileTuples = new ArrayList<ArrayList<Integer>>();
+		for (int i = 0; i < 1000; i++) {
+			bigHeapFileTuples.add( smallHeapFileTuples.get( i%100 ) );
+		}
+		HeapFile bigHeapFile = createDuplicateHeapFile(bigHeapFileTuples, 2, "c");
+		Database.getCatalog().addTable(bigHeapFile, "bigTable");
+
+		// We want a bunch of these guys
+		Database.getCatalog().addTable(smallHeapFileA, "a");
+		Database.getCatalog().addTable(smallHeapFileB, "b");
+		Database.getCatalog().addTable(smallHeapFileC, "c");
+		Database.getCatalog().addTable(smallHeapFileD, "d");
+		Database.getCatalog().addTable(smallHeapFileE, "e");
+		Database.getCatalog().addTable(smallHeapFileF, "f");
+		Database.getCatalog().addTable(smallHeapFileG, "g");
+		Database.getCatalog().addTable(smallHeapFileH, "h");
+		Database.getCatalog().addTable(smallHeapFileI, "i");
+		Database.getCatalog().addTable(smallHeapFileJ, "j");
+		Database.getCatalog().addTable(smallHeapFileK, "k");
+		Database.getCatalog().addTable(smallHeapFileL, "l");
+		Database.getCatalog().addTable(smallHeapFileM, "m");
+		Database.getCatalog().addTable(smallHeapFileN, "n");
+		
+		stats.put("bigTable", new TableStats(bigHeapFile.getId(), IO_COST));
+		stats.put("a", new TableStats(smallHeapFileA.getId(), IO_COST));
+		stats.put("b", new TableStats(smallHeapFileB.getId(), IO_COST));
+		stats.put("c", new TableStats(smallHeapFileC.getId(), IO_COST));
+		stats.put("d", new TableStats(smallHeapFileD.getId(), IO_COST));
+		stats.put("e", new TableStats(smallHeapFileE.getId(), IO_COST));
+		stats.put("f", new TableStats(smallHeapFileF.getId(), IO_COST));
+		stats.put("g", new TableStats(smallHeapFileG.getId(), IO_COST));
+		stats.put("h", new TableStats(smallHeapFileG.getId(), IO_COST));
+		stats.put("i", new TableStats(smallHeapFileG.getId(), IO_COST));
+		stats.put("j", new TableStats(smallHeapFileG.getId(), IO_COST));
+		stats.put("k", new TableStats(smallHeapFileG.getId(), IO_COST));
+		stats.put("l", new TableStats(smallHeapFileG.getId(), IO_COST));
+		stats.put("m", new TableStats(smallHeapFileG.getId(), IO_COST));
+		stats.put("n", new TableStats(smallHeapFileG.getId(), IO_COST));
+
+		Parser.setStatsMap(stats);
+		
+		Transaction t = new Transaction();
+		t.start();
+		Parser.setTransaction(t);
+		
+		// Each of these should return around 20,000
+		// This Parser implementation currently just dumps to stdout, so checking that isn't terribly clean.
+		// So, don't bother for now; future TODO.
+		// Regardless, each of the following should be optimized to run quickly,
+		// even though the worst case takes a very long time.
+		Parser.processNextStatement("SELECT COUNT(a.c0) FROM bigTable, a, b, c, d, e, f, g, h, i, j, k, l, m, n WHERE bigTable.c0 = n.c0 AND a.c1 = b.c1 AND b.c0 = c.c0 AND c.c1 = d.c1 AND d.c0 = e.c0 AND e.c1 = f.c1 AND f.c0 = g.c0 AND g.c1 = h.c1 AND h.c0 = i.c0 AND i.c1 = j.c1 AND j.c0 = k.c0 AND k.c1 = l.c1 AND l.c0 = m.c0 AND m.c1 = n.c1;");
+		Parser.processNextStatement("SELECT COUNT(a.c0) FROM bigTable, a, b, c, d, e, f, g, h, i, j, k, l, m, n WHERE a.c1 = b.c1 AND b.c0 = c.c0 AND c.c1 = d.c1 AND d.c0 = e.c0 AND e.c1 = f.c1 AND f.c0 = g.c0 AND g.c1 = h.c1 AND h.c0 = i.c0 AND i.c1 = j.c1 AND j.c0 = k.c0 AND k.c1 = l.c1 AND l.c0 = m.c0 AND m.c1 = n.c1 AND bigTable.c0 = n.c0;");
+		Parser.processNextStatement("SELECT COUNT(a.c0) FROM bigTable, a, b, c, d, e, f, g, h, i, j, k, l, m, n WHERE k.c1 = l.c1 AND a.c1 = b.c1 AND f.c0 = g.c0 AND bigTable.c0 = n.c0 AND d.c0 = e.c0 AND c.c1 = d.c1 AND e.c1 = f.c1 AND i.c1 = j.c1 AND b.c0 = c.c0 AND g.c1 = h.c1 AND h.c0 = i.c0 AND j.c0 = k.c0 AND m.c1 = n.c1 AND l.c0 = m.c0;");
+	}*/
+}
diff -ruN lab1/test/simpledb/systemtest/TransactionTest.java lab3/test/simpledb/systemtest/TransactionTest.java
--- lab1/test/simpledb/systemtest/TransactionTest.java	1969-12-31 18:00:00.000000000 -0600
+++ lab3/test/simpledb/systemtest/TransactionTest.java	2016-11-02 22:06:55.000000000 -0500
@@ -0,0 +1,254 @@
+package simpledb.systemtest;
+
+import java.io.IOException;
+import java.util.HashMap;
+import java.util.HashSet;
+import java.util.concurrent.BrokenBarrierException;
+import java.util.concurrent.CountDownLatch;
+import java.util.concurrent.CyclicBarrier;
+import java.util.concurrent.atomic.AtomicInteger;
+import java.util.Arrays;
+
+import org.junit.Test;
+
+import simpledb.*;
+
+import static org.junit.Assert.*;
+
+/**
+ * Tests running concurrent transactions.
+ * You do not need to pass this test until lab3.
+ */
+public class TransactionTest extends SimpleDbTestBase {
+    // Wait up to 10 minutes for the test to complete
+    private static final int TIMEOUT_MILLIS = 10 * 60 * 1000;
+    private void validateTransactions(int threads)
+            throws DbException, TransactionAbortedException, IOException {
+        // Create a table with a single integer value = 0
+        HashMap<Integer, Integer> columnSpecification = new HashMap<Integer, Integer>();
+        columnSpecification.put(0, 0);
+        DbFile table = SystemTestUtil.createRandomHeapFile(1, 1, columnSpecification, null);
+
+        ModifiableCyclicBarrier latch = new ModifiableCyclicBarrier(threads);
+        XactionTester[] list = new XactionTester[threads];
+        for(int i = 0; i < list.length; i++) {
+            list[i] = new XactionTester(table.getId(), latch);
+            list[i].start();
+        }
+
+        long stopTestTime = System.currentTimeMillis() + TIMEOUT_MILLIS;
+        for (XactionTester tester : list) {
+            long timeout = stopTestTime - System.currentTimeMillis();
+            if (timeout <= 0) {
+                fail("Timed out waiting for transaction to complete");
+            }
+            try {
+                tester.join(timeout);
+            } catch (InterruptedException e) {
+                throw new RuntimeException(e);
+            }
+            if (tester.isAlive()) {
+                fail("Timed out waiting for transaction to complete");
+            }
+
+            if (tester.exception != null) {
+                // Rethrow any exception from a child thread
+                assert tester.exception != null;
+                throw new RuntimeException("Child thread threw an exception.", tester.exception);
+            }
+            assert tester.completed;
+        }
+
+        // Check that the table has the correct value
+        TransactionId tid = new TransactionId();
+        DbFileIterator it = table.iterator(tid);
+        it.open();
+        Tuple tup = it.next();
+        assertEquals(threads, ((IntField) tup.getField(0)).getValue());
+        it.close();
+        Database.getBufferPool().transactionComplete(tid);
+        Database.getBufferPool().flushAllPages();
+    }
+
+    private static class XactionTester extends Thread {
+        private final int tableId;
+        private final ModifiableCyclicBarrier latch;
+        public Exception exception = null;
+        public boolean completed = false;
+
+        public XactionTester(int tableId, ModifiableCyclicBarrier latch) {
+            this.tableId = tableId;
+            this.latch = latch;
+        }
+
+        public void run() {
+            try {
+                // Try to increment the value until we manage to successfully commit
+                while (true) {
+                    // Wait for all threads to be ready
+                    latch.await();
+                    Transaction tr = new Transaction();
+                    try {
+                        tr.start();
+                        SeqScan ss1 = new SeqScan(tr.getId(), tableId, "");
+                        SeqScan ss2 = new SeqScan(tr.getId(), tableId, "");
+
+                        // read the value out of the table
+                        Query q1 = new Query(ss1, tr.getId());
+                        q1.start();
+                        Tuple tup = q1.next();
+                        IntField intf = (IntField) tup.getField(0);
+                        int i = intf.getValue();
+
+                        // create a Tuple so that Insert can insert this new value
+                        // into the table.
+                        Tuple t = new Tuple(SystemTestUtil.SINGLE_INT_DESCRIPTOR);
+                        t.setField(0, new IntField(i+1));
+
+                        // sleep to get some interesting thread interleavings
+                        Thread.sleep(1);
+
+                        // race the other threads to finish the transaction: one will win
+                        q1.close();
+
+                        // delete old values (i.e., just one row) from table
+                        Delete delOp = new Delete(tr.getId(), ss2);
+
+                        Query q2 = new Query(delOp, tr.getId());
+
+                        q2.start();
+                        q2.next();
+                        q2.close();
+
+                        // set up a Set with a tuple that is one higher than the old one.
+                        HashSet<Tuple> hs = new HashSet<Tuple>();
+                        hs.add(t);
+                        TupleIterator ti = new TupleIterator(t.getTupleDesc(), hs);
+
+                        // insert this new tuple into the table
+                        Insert insOp = new Insert(tr.getId(), ti, tableId);
+                        Query q3 = new Query(insOp, tr.getId());
+                        q3.start();
+                        q3.next();
+                        q3.close();
+
+                        tr.commit();
+                        break;
+                    } catch (TransactionAbortedException te) {
+                        //System.out.println("thread " + tr.getId() + " killed");
+                        // give someone else a chance: abort the transaction
+                        tr.transactionComplete(true);
+                        latch.stillParticipating();
+                    }
+                }
+                //System.out.println("thread " + id + " done");
+            } catch (Exception e) {
+                // Store exception for the master thread to handle
+                exception = e;
+            }
+            
+            try {
+                latch.notParticipating();
+            } catch (InterruptedException e) {
+                throw new RuntimeException(e);
+            } catch (BrokenBarrierException e) {
+                throw new RuntimeException(e);
+            }
+            completed = true;
+        }
+    }
+    
+    private static class ModifiableCyclicBarrier {
+        private CountDownLatch awaitLatch;
+        private CyclicBarrier participationLatch;
+        private AtomicInteger nextParticipants;
+        
+        public ModifiableCyclicBarrier(int parties) {
+            reset(parties);
+        }
+        
+        private void reset(int parties) {
+            nextParticipants = new AtomicInteger(0);
+            awaitLatch = new CountDownLatch(parties);
+            participationLatch = new CyclicBarrier(parties, new UpdateLatch(this, nextParticipants));
+        }
+        
+        public void await() throws InterruptedException, BrokenBarrierException {
+            awaitLatch.countDown();
+            awaitLatch.await();
+        }
+
+        public void notParticipating() throws InterruptedException, BrokenBarrierException {
+            participationLatch.await();
+        }
+
+        public void stillParticipating() throws InterruptedException, BrokenBarrierException {
+            nextParticipants.incrementAndGet();
+            participationLatch.await();
+        }
+
+        private static class UpdateLatch implements Runnable {
+            ModifiableCyclicBarrier latch;
+            AtomicInteger nextParticipants;
+            
+            public UpdateLatch(ModifiableCyclicBarrier latch, AtomicInteger nextParticipants) {
+                this.latch = latch;
+                this.nextParticipants = nextParticipants;
+            }
+
+            public void run() {
+                // Reset this barrier if there are threads still running
+                int participants = nextParticipants.get();
+                if (participants > 0) {
+                    latch.reset(participants);
+                }
+            }           
+        }
+    }
+    
+    @Test public void testSingleThread()
+            throws IOException, DbException, TransactionAbortedException {
+        validateTransactions(1);
+    }
+
+    @Test public void testTwoThreads()
+            throws IOException, DbException, TransactionAbortedException {
+        validateTransactions(2);
+    }
+
+    @Test public void testFiveThreads()
+            throws IOException, DbException, TransactionAbortedException {
+        validateTransactions(5);
+    }
+    
+    @Test public void testTenThreads()
+    throws IOException, DbException, TransactionAbortedException {
+        validateTransactions(10);
+    }
+
+    @Test public void testAllDirtyFails()
+            throws IOException, DbException, TransactionAbortedException {
+        // Allocate a file with ~10 pages of data
+        HeapFile f = SystemTestUtil.createRandomHeapFile(2, 512*10, null, null);
+        Database.resetBufferPool(1);
+
+        // BEGIN TRANSACTION
+        Transaction t = new Transaction();
+        t.start();
+
+        // Insert a new row
+        EvictionTest.insertRow(f, t);
+
+        // Scanning the table must fail because it can't evict the dirty page
+        try {
+            EvictionTest.findMagicTuple(f, t);
+            fail("Expected scan to run out of available buffer pages");
+        } catch (DbException e) {}
+        t.commit();
+    }
+
+    /** Make test compatible with older version of ant. */
+    public static junit.framework.Test suite() {
+        return new junit.framework.JUnit4TestAdapter(TransactionTest.class);
+    }
+}
